1
00:00:00,000 --> 00:00:03,472
[MUSIC PLAYING]
[音乐播放]

2
00:01:01,550 --> 00:01:03,830
DAVID J. MALAN: All right, this is CS50.
大卫·马兰：好的，这是CS50。

3
00:01:03,830 --> 00:01:06,230
And this is already week nine.
这已经是第九周了。

4
00:01:06,230 --> 00:01:08,540
And this means this is the week where we synthesize
这意味着，这将是我们将过去几周内容整合在一起的一周

5
00:01:08,540 --> 00:01:13,670
the past several weeks, from Python to SQL to HTML to CSS to JavaScript.
从 Python 到 SQL，再到 HTML、CSS 和 JavaScript。

6
00:01:13,670 --> 00:01:16,580
Each of those languages that we've rather looked at in isolation
我们之前分别学习了这些语言

7
00:01:16,580 --> 00:01:19,790
now rather come together toward an end of just making
现在将要结合起来，最终目的是为了构建

8
00:01:19,790 --> 00:01:25,980
more modern applications, be them web based or be they mobile based as well.
更现代的应用程序，无论是基于 Web 的还是基于移动端的。

9
00:01:25,980 --> 00:01:29,060
So, up until now, we've been using, to serve all of the web stuff
到目前为止，我们一直在使用一个叫做 HTTP 服务器的程序，用于提供所有你所做的网页相关的东西

10
00:01:29,060 --> 00:01:31,640
that you've done, this program called HTTP server.
这个程序叫做 HTTP 服务器。

11
00:01:31,640 --> 00:01:32,900
Now, this isn't a CS50 thing.
现在，这不是一个 CS50 的东西。

12
00:01:32,900 --> 00:01:36,260
It's just a standard program that we've installed into Codespaces.
它只是一个标准的程序，我们把它安装到了 Codespaces 中。

13
00:01:36,260 --> 00:01:39,450
So it's a Linux program that just runs your own web server.
所以它是一个 Linux 程序，可以运行你自己的 Web 服务器。

14
00:01:39,450 --> 00:01:42,140
And it allows you to run it on nonstandard ports.
而且它允许你运行在非标准端口上。

15
00:01:42,140 --> 00:01:44,420
For instance, you've been using it on port 80, 80
例如，你一直在端口 80 上使用它，端口 80

16
00:01:44,420 --> 00:01:49,398
only because Codespaces is using 80 and 443, recall, which were the defaults.
只有因为 Codespaces 正在使用 80 和 443，还记得吗？这是默认的。

17
00:01:49,398 --> 00:01:51,440
But, up until now, this program's purpose in life
但是，到目前为止，这个程序的用途

18
00:01:51,440 --> 00:01:55,520
was just to serve static content, so like web pages written in HTML,
仅仅是为了提供静态内容，比如用 HTML 编写的网页，

19
00:01:55,520 --> 00:01:59,100
maybe some CSS, maybe some JavaScript that you wrote in advance
可能还有一些 CSS，可能还有一些你提前写好的 JavaScript

20
00:01:59,100 --> 00:02:02,040
that just never really changes until such time
这些代码在一段时间内都不会改变，直到

21
00:02:02,040 --> 00:02:05,640
as you log back into the server, save the file after making some edits,
你重新登录服务器，在进行了一些编辑之后保存文件，

22
00:02:05,640 --> 00:02:07,320
and then someone reloads their page.
然后有人重新加载他们的页面。

23
00:02:07,320 --> 00:02:11,640
But, of course, the web that we all use today, be it Gmail or any website,
但当然，我们今天使用的互联网，无论是 Gmail 还是任何网站，

24
00:02:11,640 --> 00:02:13,240
is so much more interactive.
都要交互得多。

25
00:02:13,240 --> 00:02:15,240
When you search for something on Google, there's
当你搜索谷歌上的东西时，

26
00:02:15,240 --> 00:02:18,960
no Google engineer that, in advance, has written up an HTML
没有谷歌工程师提前写好了一个 HTML

27
00:02:18,960 --> 00:02:22,470
page containing a list of 10 cats or 10 dogs
页面，其中包含 10 只猫或 10 只狗

28
00:02:22,470 --> 00:02:26,430
or 10 birds just waiting for someone to search for that particular keyword.
或者 10 只鸟，只是等着有人搜索那个特定的关键词。

29
00:02:26,430 --> 00:02:28,200
Rather, there's some database involved.
而是涉及到了数据库。

30
00:02:28,200 --> 00:02:30,060
The HTML's being dynamically generated.
HTML 代码正在动态生成。

31
00:02:30,060 --> 00:02:31,860
And it's all indeed very dynamic.
而且这确实非常动态。

32
00:02:31,860 --> 00:02:34,980
So whereas, last week, we focused on websites,
所以，在上周，我们关注的是网站，

33
00:02:34,980 --> 00:02:38,070
this week we'll focus really on web applications.
这周我们将重点关注 Web 应用程序。

34
00:02:38,070 --> 00:02:40,590
And, really, the key difference is just that applications
实际上，关键的区别在于应用程序

35
00:02:40,590 --> 00:02:45,120
take input and produce output whereas websites are really generally thought
接收输入并产生输出，而网站通常被认为是

36
00:02:45,120 --> 00:02:45,960
of as static.
静态的。

37
00:02:45,960 --> 00:02:46,920
But it's a blurry line.
但这只是一条模糊的界线。

38
00:02:46,920 --> 00:02:48,795
It's not necessarily a technical distinction.
这不是一个技术上的区别。

39
00:02:48,795 --> 00:02:51,070
But today things start to get much more interactive.
但今天的事情会变得更加交互式。

40
00:02:51,070 --> 00:02:53,648
So we're not going to be able to use HTTP server alone.
所以我们不能只使用 HTTP 服务器。

41
00:02:53,648 --> 00:02:56,190
We're going to need something a little smarter that knows how
我们需要一些更智能的东西，它知道如何

42
00:02:56,190 --> 00:02:59,010
to take input from users via the URL.
通过 URL 从用户那里获取输入。

43
00:02:59,010 --> 00:03:02,610
So, in fact, let's look at some sample URLs that we looked at last week
实际上，让我们看看上周我们看过的几个示例 URL

44
00:03:02,610 --> 00:03:05,980
just to remind ourselves of some of the jargon and really the syntax.
来提醒我们一些术语和语法。

45
00:03:05,980 --> 00:03:09,360
So here's a standard URL and Flask, recall,
这是一个标准的 URL，还记得 Flask 吗？

46
00:03:09,360 --> 00:03:11,280
is just the default page on the server.
它只是服务器上的默认页面。

47
00:03:11,280 --> 00:03:15,340
And, usually, the file is called index.html by convention.
通常，按照惯例，这个文件叫做 index.html。

48
00:03:15,340 --> 00:03:18,090
But, depending on the operating system or web server you're using,
但是，这取决于你使用的操作系统或 Web 服务器，

49
00:03:18,090 --> 00:03:19,380
it could be a different file.
它可能是一个不同的文件。

50
00:03:19,380 --> 00:03:22,720
But index.html is probably the most common default.
但 index.html 可能是最常见的默认选项。

51
00:03:22,720 --> 00:03:26,490
So you could explicitly state the file name on most web servers
所以你可以在大多数 Web 服务器上显式地声明文件名

52
00:03:26,490 --> 00:03:29,670
like file.html, index.html, whatever it is.
比如 file.html、index.html，无论是什么。

53
00:03:29,670 --> 00:03:33,010
You can have folders or directories on a web server.
你可以在 Web 服务器上创建文件夹或目录。

54
00:03:33,010 --> 00:03:36,600
And this would imply that your index.html file is
这将意味着你的 index.html 文件

55
00:03:36,600 --> 00:03:39,210
in a folder called folder in this case.
在这种情况下，它位于一个名为“folder”的文件夹中。

56
00:03:39,210 --> 00:03:44,950
Or you can have a folder/file or even folder/folder/folder/file and so forth.
或者你可以创建 folder/file，甚至 folder/folder/folder/file 等等。

57
00:03:44,950 --> 00:03:50,260
So this is a very direct mapping from the URL to the file system,
所以这是一个从 URL 到文件系统的直接映射，

58
00:03:50,260 --> 00:03:52,380
so to speak, like the hard drive on the server.
可以这样说，就像服务器上的硬盘驱动器。

59
00:03:52,380 --> 00:03:55,530
But, today, we're going to do, like most computer scientists tend to do,
但是，今天，我们将会做一些像大多数计算机科学家通常会做的事情，

60
00:03:55,530 --> 00:03:57,420
is more of an abstraction of this.
进行抽象。

61
00:03:57,420 --> 00:03:59,130
This is how URLs look.
这就是 URL 的样子。

62
00:03:59,130 --> 00:04:02,220
But it turns out, once you control the web server with code,
但事实证明，一旦你用代码控制了 Web 服务器，

63
00:04:02,220 --> 00:04:06,330
you don't need things to line up with actual file names and files.
你就不需要将它们与实际的文件名和文件对齐。

64
00:04:06,330 --> 00:04:08,740
You can really put your content wherever you want.
你可以把你想要的内容放在任何地方。

65
00:04:08,740 --> 00:04:10,740
And so, in general, we're going to focus today
所以，一般来说，我们今天将重点关注

66
00:04:10,740 --> 00:04:14,250
on just thinking of everything after the domain name as a path,
将域名之后的所有内容都视为路径，

67
00:04:14,250 --> 00:04:15,390
generally speaking.
一般而言。

68
00:04:15,390 --> 00:04:19,019
And a synonym for this, in the context of the web, would also just be a route.
在 Web 上下文中，这个词的同义词就是路由。

69
00:04:19,019 --> 00:04:23,040
So a route is just some number of letters, maybe some slashes, maybe
所以路由只是一些字母，可能有一些斜杠，可能

70
00:04:23,040 --> 00:04:26,920
a file extension that refers to some part of your application.
一个文件扩展名，它指的是应用程序的某一部分。

71
00:04:26,920 --> 00:04:30,780
But, more interestingly-- and this is what makes things an application
但更有趣的是——这也是让一些东西成为应用程序而不是静态网站的原因——

72
00:04:30,780 --> 00:04:32,280
and not just a static website--
它不仅仅是一个静态网站——

73
00:04:32,280 --> 00:04:35,670
recall, that this is how websites can take input
还记得吗，这就是网站可以接收输入的方式

74
00:04:35,670 --> 00:04:40,590
in the form of URLs, a question mark, then key equals value pair.
通过 URL 的形式，一个问号，然后是键值对。

75
00:04:40,590 --> 00:04:42,870
Or if you want two or maybe three or four,
或者如果你想要两个、三个或四个，

76
00:04:42,870 --> 00:04:44,820
you separate them with ampersands.
你用“&”符号将它们分隔开。

77
00:04:44,820 --> 00:04:46,110
But that's kind of it.
但就是这样了。

78
00:04:46,110 --> 00:04:48,627
The web today is going to work just like it did last week,
今天的互联网将像上周一样工作，

79
00:04:48,627 --> 00:04:51,210
but we're going to start leveraging these primitives in a much
但我们将开始以一种更加强大、更加交互的方式利用这些基本元素。

80
00:04:51,210 --> 00:04:53,470
more powerful, more interactive way.
更加强大、更加交互的方式。

81
00:04:53,470 --> 00:04:56,430
So here, recall, is what might be inside of the virtual envelope
所以，回想一下，当你在谷歌上搜索东西的时候，虚拟信封里可能会是什么。

82
00:04:56,430 --> 00:04:58,830
when you search for something on google.com.
当你搜索 google.com 上的东西的时候。

83
00:04:58,830 --> 00:05:02,070
It's going to request of the web server/search, which
它将请求 Web 服务器/搜索，它

84
00:05:02,070 --> 00:05:05,282
is the name, by convention, of Google's search application
是谷歌搜索应用程序的名称，按照惯例，

85
00:05:05,282 --> 00:05:07,990
because they've got a lot of businesses running on their servers.
因为他们的服务器上运行着许多业务。

86
00:05:07,990 --> 00:05:11,610
And if you have ?q=cats, this is essentially the message,
如果你有 ?q=cats，这本质上就是消息，

87
00:05:11,610 --> 00:05:15,060
the HTTP message that would've been in last week's virtual envelope when I
上周我在搜索猫的时候，这个 HTTP 消息就在虚拟信封里。

88
00:05:15,060 --> 00:05:16,500
searched for cats.
搜索猫。

89
00:05:16,500 --> 00:05:18,690
Hopefully, you get back a response from the server
希望你能从服务器那里得到一个包含这些猫的响应。

90
00:05:18,690 --> 00:05:20,220
containing those actual cats.
包含这些猫的响应。

91
00:05:20,220 --> 00:05:23,940
But, again, there's probably a lot more logic going on with a database
但是，再说一次，很可能还涉及到更多的数据库逻辑

92
00:05:23,940 --> 00:05:27,480
and somehow generating that HTML that Google is doing for us.
以及谷歌如何为我们生成那个 HTML。

93
00:05:27,480 --> 00:05:30,240
So we, today, are going to introduce really
所以，今天，我们将介绍真正


94
00:05:30,240 --> 00:05:33,300
what's called a framework or technically a microframework, which
被称为框架，或者更准确地说是微框架，

95
00:05:33,300 --> 00:05:36,450
means it's relatively small versus alternatives that are out there.
这意味着它相对于市面上的其他替代方案来说比较小。

96
00:05:36,450 --> 00:05:37,800
And it's called Flask.
它被称为 Flask。

97
00:05:37,800 --> 00:05:40,350
So Flask is really a third-party library--
所以 Flask 实际上是一个第三方库——

98
00:05:40,350 --> 00:05:42,420
and it's popular in the Python world-- that's
它在 Python 世界中很受欢迎——这是

99
00:05:42,420 --> 00:05:46,260
just going to make it easier to implement web applications using
仅仅是为了让使用

100
00:05:46,260 --> 00:05:46,920
Python.
Python 来实现 Web 应用程序变得更容易。

101
00:05:46,920 --> 00:05:47,940
There are alternatives.
还有其他选择。

102
00:05:47,940 --> 00:05:50,190
A very popular one is called Django, which some of you
一个非常流行的选择叫做 Django，你们中有些人

103
00:05:50,190 --> 00:05:51,310
might've heard of before.
可能之前听说过它。

104
00:05:51,310 --> 00:05:54,510
And there's dozens of others in decreasing popularity daresay.
还有数十个其他的，受欢迎程度逐渐下降。

105
00:05:54,510 --> 00:05:57,870
But Flask is among the most popular microframeworks,
但 Flask 是最流行的微框架之一，

106
00:05:57,870 --> 00:06:00,900
which means you can really just solve a few problems pretty
这意味着你实际上可以非常简单地解决一些问题，

107
00:06:00,900 --> 00:06:04,350
simply without feeling like you're learning some third-party library
而不必担心自己是在学习一些第三方库，

108
00:06:04,350 --> 00:06:06,870
as much as you are learning concepts that transcend
你是在学习一些超越

109
00:06:06,870 --> 00:06:08,560
one particular implementation.
特定实现的观念。

110
00:06:08,560 --> 00:06:11,850
So we're going to introduce you to a framework called Flask.
所以我们将会向你介绍一个叫做 Flask 的框架。

111
00:06:11,850 --> 00:06:13,560
And that's going to allow us, ultimately,
这将最终使我们能够

112
00:06:13,560 --> 00:06:17,520
to start web applications not by running HTTP server today
启动 Web 应用程序，不再需要像今天一样运行 HTTP 服务器，

113
00:06:17,520 --> 00:06:20,970
but literally running flask space run.
而是直接运行 "flask run"。

114
00:06:20,970 --> 00:06:23,370
So this framework literally gives you a command,
因此这个框架实际上为你提供了一个命令，

115
00:06:23,370 --> 00:06:26,100
on your Mac, your PC, your codespace once it's installed,
在你的 Mac、PC 或者你的 Codespace 中，一旦它安装完毕，

116
00:06:26,100 --> 00:06:28,170
that allows you to start a web server by running
你就可以通过运行这个命令来启动一个 Web 服务器，

117
00:06:28,170 --> 00:06:30,858
flask run instead of HTTP server.
运行 "flask run"，而不是 "HTTP server"。

118
00:06:30,858 --> 00:06:33,150
So, again, last week, it was all about static websites.
所以，再次强调，上周我们谈论的都是静态网站。

119
00:06:33,150 --> 00:06:36,370
This week, it's all about dynamic websites instead.
而这周，我们将会谈论动态网站。

120
00:06:36,370 --> 00:06:39,180
And, by framework, we really generally mean-- not just
而说到框架，我们通常指的是——不仅仅是

121
00:06:39,180 --> 00:06:42,060
using some third-party code but third-party conventions
使用一些第三方代码，而是第三方约定，

122
00:06:42,060 --> 00:06:45,270
that just some human or humans decided is the way
一些人或一些人决定了构建应用程序的方式。

123
00:06:45,270 --> 00:06:46,770
you will build your applications.
这就是你构建应用程序的方式。

124
00:06:46,770 --> 00:06:50,790
Usually, this is just based on lessons learned after making application
通常，这只是基于在开发应用程序后获得的经验教训。

125
00:06:50,790 --> 00:06:51,660
after application.
开发一个又一个应用程序。

126
00:06:51,660 --> 00:06:53,787
Humans around the internet realized, you know what?
互联网上的人们意识到，你知道吗？

127
00:06:53,787 --> 00:06:57,120
We should probably standardize the names of our files, the names of our folders,
我们可能应该将文件名称、文件夹名称以及

128
00:06:57,120 --> 00:06:58,550
and how things are laid out.
文件组织方式进行标准化。

129
00:06:58,550 --> 00:07:01,150
And so, even though this is not the only way to do things,
因此，虽然这不是唯一的方式，

130
00:07:01,150 --> 00:07:05,620
the way that Flask prescribes that we programmers do things is this.
Flask 规定我们程序员做事的方式是这样的。

131
00:07:05,620 --> 00:07:10,540
We'll, starting today, always have a Python program called app.py
从今天开始，我们总是会有一个叫做 app.py 的 Python 程序，

132
00:07:10,540 --> 00:07:12,280
by convention, like in our folder.
按照惯例，就像在我们的文件夹中一样。

133
00:07:12,280 --> 00:07:15,730
And we're going to have a folder called templates, inside of which
我们还会有一个叫做 templates 的文件夹，其中包含

134
00:07:15,730 --> 00:07:19,937
is any of the actual HTML, maybe CSS, maybe JavaScript that we write.
我们编写的任何实际的 HTML，可能是 CSS，可能是 JavaScript。

135
00:07:19,937 --> 00:07:22,270
But you can actually put some of that content elsewhere.
但你实际上可以把一些内容放在其他地方。

136
00:07:22,270 --> 00:07:24,700
And, in fact, you'll see there's going to be generally
事实上，你会发现通常

137
00:07:24,700 --> 00:07:29,180
two other files or folders you'll see me create or me use today.
你还会看到我今天创建或使用的另外两个文件或文件夹。

138
00:07:29,180 --> 00:07:33,040
One is called requirements.txt, which is literally just a simple text
一个是叫做 requirements.txt 的文件，它实际上只是一个简单的文本

139
00:07:33,040 --> 00:07:37,330
file wherein you specify one per line what third-party libraries
文件，你可以在里面一行一行地指定你想要使用的第三方库。

140
00:07:37,330 --> 00:07:38,170
you want to use.
你想要使用的库。

141
00:07:38,170 --> 00:07:41,890
This file just makes it easy to install those libraries with a command.
这个文件使用一个命令来安装这些库变得很容易。

142
00:07:41,890 --> 00:07:44,260
And then, lastly, a static folder.
然后，最后，还有一个静态文件夹。

143
00:07:44,260 --> 00:07:50,050
And it's in this folder that you put images or .css files or .js files,
在这个文件夹中，你放置图片、CSS 文件、JS 文件，

144
00:07:50,050 --> 00:07:53,440
literally files that are meant to be static that you might change them once
实际上这些文件应该是静态的，你可能偶尔会改变它们，

145
00:07:53,440 --> 00:07:55,610
in a while, but they're not changing every day.
但它们不是每天都会改变。

146
00:07:55,610 --> 00:07:58,540
And so you just want to isolate them to a particular folder.
所以你只需要将它们隔离到一个特定的文件夹。

147
00:07:58,540 --> 00:07:59,590
Why is it this way?
为什么是这样？

148
00:07:59,590 --> 00:08:03,250
Eh, a bunch of humans decided this feels like a clean solution.
嗯，一群人决定，这感觉是一个干净的解决方案。

149
00:08:03,250 --> 00:08:06,610
But reasonable people will disagree and different frameworks lay things out
但是，理智的人会不同意，不同的框架会有不同的组织方式。

150
00:08:06,610 --> 00:08:07,370
differently.
不同的组织方式。

151
00:08:07,370 --> 00:08:11,410
So, when using a framework for the first time, you take a class or read a book
所以，当你第一次使用一个框架时，你需要参加一个课程或者阅读一本书

152
00:08:11,410 --> 00:08:12,920
or read the documentation.
或者阅读文档。

153
00:08:12,920 --> 00:08:17,060
And it will essentially guide you to how you should lay out your application.
它基本上会指导你如何组织你的应用程序。

154
00:08:17,060 --> 00:08:20,530
So let's go ahead and do exactly that and make an application that quite
所以，让我们开始做，创建这样一个应用程序，它非常

155
00:08:20,530 --> 00:08:24,100
simply and, by design, underwhelmingly implements Hello, world.
简单，而且有意地，平淡无奇地实现了 "Hello, world"。

156
00:08:24,100 --> 00:08:27,040
But, rather than do this statically, let me
但是，与其静态地实现，让我

157
00:08:27,040 --> 00:08:29,560
do it in a way that starts to use this framework so
使用这个框架的方式来实现，这样

158
00:08:29,560 --> 00:08:32,440
that, in the next version of it, we can actually take user input
在下一个版本中，我们就可以接收用户输入

159
00:08:32,440 --> 00:08:34,750
and have it say not Hello, world but maybe Hello,
并让它说，不是 "Hello, world"，而是 "Hello,

160
00:08:34,750 --> 00:08:37,720
David, or Hello, Yulia or anyone else.
David"，或者 "Hello, Yulia"，或者其他任何人。

161
00:08:37,720 --> 00:08:40,480
All right, so let me go over here to VS Code.
好的，让我转到 VS Code。

162
00:08:40,480 --> 00:08:44,680
And let me go ahead, and, initially, let me start with the familiar.
让我继续，首先，让我从熟悉的东西开始。

163
00:08:44,680 --> 00:08:49,510
And let me go ahead and start by simply creating the HTML page that I really
让我开始创建一个 HTML 页面，这个页面是我真的

164
00:08:49,510 --> 00:08:53,000
want to show to my visitors when they visit my application.
想要在我应用程序的访客访问时展示给他们的。

165
00:08:53,000 --> 00:08:56,290
So I'm going to go ahead and, somewhat incorrectly, initially,
所以，我先创建一个，它最初可能有点错误，

166
00:08:56,290 --> 00:08:58,540
but just to make a point, I'm going to go ahead and do
但仅仅是为了说明一个问题，我先创建一个

167
00:08:58,540 --> 00:09:02,353
code index.html to open up a new tab.
叫做 "index.html" 的文件，打开一个新的标签页。

168
00:09:02,353 --> 00:09:05,020
I'll hide my terminal window just to give myself some more room.
为了给自己留出更多空间，我先隐藏我的终端窗口。

169
00:09:05,020 --> 00:09:08,910
And then really fast I'm going to type out some boilerplate HTML.
然后，我快速地输入一些基本的 HTML 代码。

170
00:09:08,910 --> 00:09:14,970
So DOCTYPE html, just like last week, open bracket html Lang equals en just
所以 "DOCTYPE html"，就像上周一样，然后是 "html Lang equals en"，

171
00:09:14,970 --> 00:09:18,510
to tell the VS Code that I'm--
告诉 VS Code 我正在——

172
00:09:18,510 --> 00:09:20,880
to tell the web that I'm largely using English here.
告诉网页我在这里主要使用的是英语。

173
00:09:20,880 --> 00:09:24,073
In the head of my page, I'm going to have, of course, the title of the page.
在页面的 "head" 部分，我当然要包含页面的标题。

174
00:09:24,073 --> 00:09:26,490
And I'll keep it simple and just say something like hello.
为了保持简洁，我就写上 "hello"。

175
00:09:26,490 --> 00:09:30,900
But just so that this website actually renders nicely on mobile devices,
但为了让这个网站在移动设备上显示得很好，

176
00:09:30,900 --> 00:09:33,540
I'm going to use one of those meta tags we talked briefly
我会使用上周简要提到的元标签之一，

177
00:09:33,540 --> 00:09:39,360
about last week whereby if I say meta name equals viewport--
上周我们说过，如果我写 "meta name equals viewport"——

178
00:09:39,360 --> 00:09:43,050
and viewport refers to just the big rectangular region of your browser--
而 "viewport" 指的是浏览器中那个大的矩形区域——

179
00:09:43,050 --> 00:09:48,510
the content of this meta tag is going to be initial scale
这个元标签的内容应该是 "initial scale"

180
00:09:48,510 --> 00:09:51,750
equals 1 and width equals device width.
"equals 1" 以及 "width equals device width"。

181
00:09:51,750 --> 00:09:54,660
I always have to copy-paste this or look it up myself.
我总是要复制粘贴它或者自己查找它。

182
00:09:54,660 --> 00:09:57,780
But this line here essentially tells the browser
但是这行代码实际上告诉浏览器，

183
00:09:57,780 --> 00:10:01,090
that, no matter how wide the device is, whether it's
无论设备有多宽，无论是

184
00:10:01,090 --> 00:10:05,530
a laptop or desktop or maybe a vertical cell phone or tablet,
笔记本电脑、台式电脑，还是竖着的手机或平板电脑，


185
00:10:05,530 --> 00:10:09,070
size the viewport to that device.
将视窗大小调整到该设备的大小。

186
00:10:09,070 --> 00:10:12,373
Otherwise, your website might look super small on mobile devices
否则，您的网站在移动设备上看起来可能非常小

187
00:10:12,373 --> 00:10:15,040
if you don't use this tag to tell the browser, take into account
如果您不使用此标签来告诉浏览器，请考虑

188
00:10:15,040 --> 00:10:18,250
the actual device width rather than shrinking the 12-point font
实际设备宽度，而不是缩小 12 点字体

189
00:10:18,250 --> 00:10:20,500
to something that's hard for folks to read.
变成难以阅读的东西。

190
00:10:20,500 --> 00:10:24,250
So, for now, I'm just going to generally copy-paste that or type it out
所以，现在，我将简单地复制粘贴它或将其键入

191
00:10:24,250 --> 00:10:27,062
from my printout here.
从我的打印输出中。

192
00:10:27,062 --> 00:10:29,270
All right, beyond that, we need the body of the page.
好的，除此之外，我们需要页面的主体。

193
00:10:29,270 --> 00:10:30,228
We'll keep that simple.
我们会保持简单。

194
00:10:30,228 --> 00:10:33,800
So body, and then, in here, hello comma world.
所以 body，然后，在里面，hello，world。

195
00:10:33,800 --> 00:10:35,740
So that's it for my website thus far.
到目前为止，这就是我的网站。

196
00:10:35,740 --> 00:10:36,430
It's static.
它是静态的。

197
00:10:36,430 --> 00:10:39,500
Nothing about this is going to incorporate my name or anyone else's.
关于这一点，不会包含我的名字或任何其他人的名字。

198
00:10:39,500 --> 00:10:43,540
So I could technically use HTTP server to serve up this web page,
所以，从技术上讲，我可以使用 HTTP 服务器来提供此网页，

199
00:10:43,540 --> 00:10:46,960
open it in a browser, and I would see the actual contents.
在浏览器中打开它，我将看到实际内容。

200
00:10:46,960 --> 00:10:49,510
But let's instead create a bit of work for us
但让我们改为为我们创造一些工作

201
00:10:49,510 --> 00:10:53,290
and sort of overengineer this problem but to set the stage for actually
并且以某种方式过度设计这个问题，但要为实际

202
00:10:53,290 --> 00:10:56,210
taking in dynamic input like a user's name.
获取动态输入，例如用户姓名。

203
00:10:56,210 --> 00:10:57,880
So let me go ahead and to do this.
所以让我继续这样做。

204
00:10:57,880 --> 00:11:01,120
I'm going to go ahead and open my terminal window again.
我将继续打开我的终端窗口。

205
00:11:01,120 --> 00:11:04,210
I'm going to close the index.html file.
我将关闭 index.html 文件。

206
00:11:04,210 --> 00:11:06,910
I'm going to make a new directory called templates,
我将创建一个名为 templates 的新目录，

207
00:11:06,910 --> 00:11:08,860
which, again, was the default folder name I
它又是默认的文件夹名称，我

208
00:11:08,860 --> 00:11:11,230
mentioned that this framework expects.
提到了这个框架期望的。

209
00:11:11,230 --> 00:11:16,100
And I'm going to move index.html into that templates folder using mv, a Linux
我将使用 mv 命令，将 index.html 移动到该 templates 文件夹中，这是一个 Linux

210
00:11:16,100 --> 00:11:16,600
command.
命令。

211
00:11:16,600 --> 00:11:21,878
If you're more comfy, you can open up the file, the File Explorer at right.
如果您更喜欢，您可以打开文件，右边的文件资源管理器。

212
00:11:21,878 --> 00:11:23,920
You'll see, in advance, I downloaded a directory.
你会看到，提前，我下载了一个目录。

213
00:11:23,920 --> 00:11:26,590
I'll occasionally borrow content from today called src9,
我偶尔会从今天称为 src9 的内容中借用内容，

214
00:11:26,590 --> 00:11:28,090
but there is my templates folder.
但那里是我的 templates 文件夹。

215
00:11:28,090 --> 00:11:30,850
And you could click in the GUI in order to do
您可以单击 GUI 以执行

216
00:11:30,850 --> 00:11:32,565
what I just did at the command line.
我刚刚在命令行中执行的操作。

217
00:11:32,565 --> 00:11:35,440
All right, and, after this, let's go ahead and create one other file,
好的，然后，在此之后，让我们继续创建一个其他文件，

218
00:11:35,440 --> 00:11:37,270
app.py.
app.py。

219
00:11:37,270 --> 00:11:41,750
And, in app.py, let me go ahead now and do this.
然后，在 app.py 中，让我继续这样做。

220
00:11:41,750 --> 00:11:48,310
I'm going to import some functions that come with this framework called Flask.
我将导入此框架附带的一些函数，称为 Flask。

221
00:11:48,310 --> 00:11:54,010
So I'm going to say from flask, in lowercase, import Flask, capital F,
所以，我将说从 flask 中，用小写，导入 Flask，大写 F，

222
00:11:54,010 --> 00:11:59,250
and also a function called render template and an object called request.
以及一个名为 render_template 的函数和一个名为 request 的对象。

223
00:11:59,250 --> 00:12:00,083
Now, how to do this?
现在，如何做到这一点？

224
00:12:00,083 --> 00:12:02,667
You literally read the documentation, or you listen to someone
您实际上阅读了文档，或者您听某人

225
00:12:02,667 --> 00:12:04,830
like me tell you to begin your program this way.
像我一样告诉你以这种方式开始你的程序。

226
00:12:04,830 --> 00:12:09,180
In the Flask framework comes three pieces of functionality
在 Flask 框架中包含三个功能

227
00:12:09,180 --> 00:12:12,780
that are just useful to incorporate into my own program as we're about to see.
它们对于将它们合并到我的程序中非常有用，正如我们即将看到的。

228
00:12:12,780 --> 00:12:15,990
Here's the line of code via which I can tell this framework
这是一行代码，通过它我可以告诉这个框架

229
00:12:15,990 --> 00:12:20,940
to treat my file, app.py, as indeed a web application.
将我的文件 app.py 视为一个网络应用程序。

230
00:12:20,940 --> 00:12:23,430
I create a variable, typically called app.
我创建一个变量，通常称为 app。

231
00:12:23,430 --> 00:12:27,000
I set that equal to the return value of calling
我将其设置为调用

232
00:12:27,000 --> 00:12:31,110
this Flask function and pass in it, somewhat weirdly,
这个 Flask 函数，并且将它传递进去，有点奇怪，

233
00:12:31,110 --> 00:12:32,920
the name of this file.
这个文件的名字。

234
00:12:32,920 --> 00:12:37,660
So this is the only weird thing for now in that we haven't used this much,
所以，目前唯一奇怪的是我们还没有使用过太多，

235
00:12:37,660 --> 00:12:45,090
if at all. __name__ is a special variable in Python that literally
如果有的话。__name__ 是 Python 中的一个特殊变量，它实际上

236
00:12:45,090 --> 00:12:49,120
refers to the current file's name, no matter what file name you gave it.
指的是当前文件的名字，无论你给它什么文件名。

237
00:12:49,120 --> 00:12:51,000
So it's a nice way of referring to yourself
所以，这是一个很好的方法来指代自己

238
00:12:51,000 --> 00:12:54,665
without manually typing the file name, which might change down the line.
无需手动键入文件名，文件名可能会发生更改。

239
00:12:54,665 --> 00:12:56,290
And then, lastly, I'm going to do this.
然后，最后，我将这样做。

240
00:12:56,290 --> 00:12:58,570
And this is one other piece of new syntax for now.
而这是目前另一段新的语法。

241
00:12:58,570 --> 00:13:02,830
I'm going to use an @ and say app.route.
我将使用 @ 并说 app.route。

242
00:13:02,830 --> 00:13:05,950
And then in quotes, as an argument to this route function,
然后用引号，作为此 route 函数的参数，

243
00:13:05,950 --> 00:13:09,430
I'm going to specify the route for which I'm implementing some code
我将指定我要为其实现某些代码的路由

244
00:13:09,430 --> 00:13:12,010
/ being the default, by convention.
/ 是默认值，按照惯例。

245
00:13:12,010 --> 00:13:14,260
I'm going to define immediately below that a function
我将在下面立即定义一个函数

246
00:13:14,260 --> 00:13:16,310
that I can technically call anything I want,
我从技术上讲可以调用任何我想要的东西，

247
00:13:16,310 --> 00:13:18,935
but I'm going to get in the habit of using reasonable defaults.
但我将养成使用合理默认值的习惯。

248
00:13:18,935 --> 00:13:21,423
So I'm going to call this function index by default.
所以，默认情况下，我将调用此函数 index。

249
00:13:21,423 --> 00:13:22,840
But that's not a hard requirement.
但这并不是一个硬性要求。

250
00:13:22,840 --> 00:13:25,570
And then, inside of this function, I'm simply
然后，在这个函数内部，我只是

251
00:13:25,570 --> 00:13:31,270
going to return this, return "hello, world", quote, unquote.
将要返回它，返回 "hello, world"，引号，取消引号。

252
00:13:31,270 --> 00:13:32,350
And that's it.
就这样。

253
00:13:32,350 --> 00:13:36,400
This I now claim is a beginning of an actual web application.
我现在声称这是一个实际网络应用程序的开始。

254
00:13:36,400 --> 00:13:38,980
It looks a little magical or cryptic as to what's going on.
看起来有点神奇或神秘，因为不知道发生了什么。

255
00:13:38,980 --> 00:13:43,630
But, per the jargon I introduced earlier, this function here app.route
但是，根据我之前介绍的术语，这里 app.route 函数

256
00:13:43,630 --> 00:13:46,090
is defining a route for this application that
正在为这个应用程序定义一个路由，

257
00:13:46,090 --> 00:13:48,475
implies that whenever a human visit slash
这意味着每当一个人访问斜杠

258
00:13:48,475 --> 00:13:51,490
on this application, what should happen is
在这个应用程序上，应该发生的是

259
00:13:51,490 --> 00:13:53,740
this function index should get called.
这个 index 函数应该被调用。

260
00:13:53,740 --> 00:13:56,020
And that function's purpose in life, at the moment,
而这个函数目前存在的目的，

261
00:13:56,020 --> 00:14:00,350
is just to return, quote, unquote, "hello, world", and that's it.
只是返回 "hello, world"，就这样。

262
00:14:00,350 --> 00:14:02,060
So let me go ahead and do this.
所以让我继续这样做。

263
00:14:02,060 --> 00:14:04,265
Let me open my terminal and just to keep everything
让我打开我的终端，只是为了保持一切

264
00:14:04,265 --> 00:14:06,640
clean because we're going to have a bunch of applications
干净，因为我们今天将要进行很多应用程序

265
00:14:06,640 --> 00:14:07,432
today in the works.
今天的作品。

266
00:14:07,432 --> 00:14:09,790
I'm going to create one other folder called hello.
我将创建一个名为 hello 的其他文件夹。

267
00:14:09,790 --> 00:14:16,370
And I'm going to move app.py and templates into that hello folder.
我将把 app.py 和 templates 移动到那个 hello 文件夹中。

268
00:14:16,370 --> 00:14:18,910
So if I now type ls in my own personal account,
所以，如果我现在在我的个人帐户中键入 ls，

269
00:14:18,910 --> 00:14:22,850
I've got that folder hello and also src9, which I brought with me today.
我有了那个名为 hello 的文件夹，还有 src9，我今天把它带了来。

270
00:14:22,850 --> 00:14:26,650
So if I now cd into hello and type ls again,
所以，如果我现在 cd 到 hello 中，然后再次键入 ls，

271
00:14:26,650 --> 00:14:29,410
I'll see the two things we just created together, app.py
我将看到我们刚刚一起创建的两个东西，app.py

272
00:14:29,410 --> 00:14:30,500
and the templates folder.
和 templates 文件夹。

273
00:14:30,500 --> 00:14:33,520
And if I go one step further in ls templates itself,
如果我再进一步在 ls templates 本身中，

274
00:14:33,520 --> 00:14:36,460
I should see, of course, index.html.
我当然应该看到 index.html。

275
00:14:36,460 --> 00:14:39,490
All right, so a lot of steps to go through just to get started.
好的，所以要经过很多步骤才能开始。

276
00:14:39,490 --> 00:14:42,070
But you'll see that this is fairly boilerplate eventually.
但你会看到，这最终是相当标准的。

277
00:14:42,070 --> 00:14:44,500
I'm not going to run an HTTP server, but I
我不会运行 HTTP 服务器，但我

278
00:14:44,500 --> 00:14:49,030
am going to run flask run, which will turn this app.py into a working web
将运行 flask run，它将把这个 app.py 变成一个可工作的网络


279
00:14:49,030 --> 00:14:49,707
application.
应用程序。

280
00:14:49,707 --> 00:14:52,540
The output after I hit Enter is going to look a little more cryptic.
按下回车键后的输出会更难懂一些。

281
00:14:52,540 --> 00:14:54,670
It's going to warn me this is a development server.
它会提醒我这是一个开发服务器。

282
00:14:54,670 --> 00:14:57,110
You should not use that same command in the real world.
你不应该在现实世界中使用相同的命令。

283
00:14:57,110 --> 00:14:59,860
You should actually configure Flask a little differently if you're
如果你要

284
00:14:59,860 --> 00:15:01,277
going to use it in the real world.
在现实世界中使用它，你需要对 Flask 进行一些不同的配置。

285
00:15:01,277 --> 00:15:05,260
But it does show me the random URL that GitHub created for me.
但它确实显示了 GitHub 为我创建的随机 URL。

286
00:15:05,260 --> 00:15:07,240
And I'm going to go ahead and open this URL.
我将打开这个 URL。

287
00:15:07,240 --> 00:15:08,770
It's going to open in a new tab.
它将在一个新的标签页中打开。

288
00:15:08,770 --> 00:15:11,620
And, voila, that is my web application.
瞧，这就是我的网络应用程序。

289
00:15:11,620 --> 00:15:13,720
Completely underwhelming, but you'll notice
完全不起眼，但你会注意到

290
00:15:13,720 --> 00:15:15,760
that, even though Chrome is hiding this, this
即使 Chrome 隐藏了它，但这

291
00:15:15,760 --> 00:15:21,170
is the equivalent of my having visited at the end of this URL simply a slash.
相当于我在这个 URL 的末尾访问了一个斜杠。

292
00:15:21,170 --> 00:15:26,320
All right, if I zoom out here, though, and maybe right-click or Control-click,
好的，如果我在这里缩小，然后右键单击或 Control-单击，

293
00:15:26,320 --> 00:15:28,510
and I choose View page source--
然后选择查看页面源代码--

294
00:15:28,510 --> 00:15:30,910
recall, this is available in most every browser--
请记住，这在大多数浏览器中都是可用的--

295
00:15:30,910 --> 00:15:34,180
you'll see that this isn't actually HTML because, at the moment,
你会看到，这实际上不是 HTML，因为目前

296
00:15:34,180 --> 00:15:36,910
I'm literally just returning, quote, unquote, "hello, world".
我实际上只是返回了“hello, world”。

297
00:15:36,910 --> 00:15:37,983
So, yes, it's text.
所以，是的，它是文本。

298
00:15:37,983 --> 00:15:39,400
It's being rendered as a web page.
它被渲染成一个网页。

299
00:15:39,400 --> 00:15:42,430
But it's not technically a web page that has valid HTML.
但严格来说，它不是一个包含有效 HTML 的网页。

300
00:15:42,430 --> 00:15:44,020
So what I'm going to do here is this.
所以我要做的是这个。

301
00:15:44,020 --> 00:15:46,180
I'm going to go back into VS Code.
我要回到 VS Code 中。

302
00:15:46,180 --> 00:15:48,370
I'm going to open a second terminal by clicking
我将通过点击

303
00:15:48,370 --> 00:15:50,650
the plus icon toward the bottom right of my screen,
屏幕右下角的加号图标

304
00:15:50,650 --> 00:15:52,570
just so I can keep the server running.
来打开第二个终端，以便保持服务器运行。

305
00:15:52,570 --> 00:15:54,890
But-- actually, nope, let me go ahead and do this.
但是--实际上，不，让我继续做这个。

306
00:15:54,890 --> 00:15:56,200
Let me kill this terminal.
让我关闭这个终端。

307
00:15:56,200 --> 00:15:59,210
Let me actually-- oops, I killed the wrong one.
让我实际上--哦，我关错了。

308
00:15:59,210 --> 00:16:03,430
Let me instead go into my hello directory again.
让我回到我的 hello 目录。

309
00:16:03,430 --> 00:16:06,190
Let me open up app.py.
让我打开 app.py。

310
00:16:06,190 --> 00:16:11,020
And this time, instead of saying hello, world, let me do this.
这一次，与其说 hello, world，不如让我做这个。

311
00:16:11,020 --> 00:16:14,500
I want to return the contents of index.html,
我想返回 index.html 的内容，

312
00:16:14,500 --> 00:16:18,710
which is that whole file I created, but I can't just specify its file name.
也就是我创建的那个完整的文件，但我不能只指定它的文件名。

313
00:16:18,710 --> 00:16:20,030
But I can do this.
但我可以这样做。

314
00:16:20,030 --> 00:16:22,210
I can call a function called render_template,
我可以调用一个名为 render_template 的函数，

315
00:16:22,210 --> 00:16:23,470
which comes with Flask.
它是 Flask 附带的。

316
00:16:23,470 --> 00:16:26,590
And its purpose in life is to go get that file from a folder
它的作用是从一个名为

317
00:16:26,590 --> 00:16:29,080
called templates, open it up and then send
templates 的文件夹中获取那个文件，打开它，然后发送

318
00:16:29,080 --> 00:16:31,150
all of those bytes, all of those characters
所有这些字节，所有这些字符

319
00:16:31,150 --> 00:16:33,318
to the user's actual browser.
到用户的实际浏览器。

320
00:16:33,318 --> 00:16:34,610
So let me go ahead and do this.
所以让我继续做这个。

321
00:16:34,610 --> 00:16:36,070
Let me open my terminal again.
让我再次打开我的终端。

322
00:16:36,070 --> 00:16:40,210
Let me do flask run inside of this same folder hello.
让我在这个名为 hello 的文件夹中运行 flask run。

323
00:16:40,210 --> 00:16:43,960
I'm now going to go back to my tab here, click Reload,
我现在将回到我的标签页，单击重新加载，

324
00:16:43,960 --> 00:16:46,240
and nothing appears to have changed.
看起来没有任何变化。

325
00:16:46,240 --> 00:16:50,680
But if I right-click and choose View source this time after reloading,
但如果我重新加载后右键单击并选择查看源代码，

326
00:16:50,680 --> 00:16:54,460
now you'll see all of the HTML that I composed.
现在你会看到我编写的所有 HTML。

327
00:16:54,460 --> 00:16:57,410
All right, so this has taken way more steps
好的，所以这比上周仅仅运行 HTTP server 多了更多步骤

328
00:16:57,410 --> 00:17:01,290
to do what we achieved by just running HTTP server last week.
来完成上周我们仅仅通过运行 HTTP server 就实现的功能。

329
00:17:01,290 --> 00:17:05,180
But here's where now things can get a little interesting, whereby
但现在有趣的地方来了，因为

330
00:17:05,180 --> 00:17:08,000
now that we have this framework laid out,
现在我们已经搭建了这个框架，

331
00:17:08,000 --> 00:17:10,460
we can actually introduce other features of the framework
我们实际上可以引入框架的其他功能

332
00:17:10,460 --> 00:17:12,592
to make things more dynamic.
来使事情更动态。

333
00:17:12,592 --> 00:17:14,550
So, for instance, what I'm going to do is this.
例如，我要做的是这个。

334
00:17:14,550 --> 00:17:17,270
I'm going to now introduce a feature of that variable
我现在要引入我导入的

335
00:17:17,270 --> 00:17:21,740
that I also imported called request, which refers to any HTTP request.
那个名为 request 的变量的功能，它指的是任何 HTTP 请求。

336
00:17:21,740 --> 00:17:23,569
And it turns out, there's a property inside
事实证明，里面有一个属性

337
00:17:23,569 --> 00:17:25,819
of there called args, which is actually going
名为 args，它实际上是

338
00:17:25,819 --> 00:17:28,369
to be a dictionary of all of the key value pairs
所有键值对的字典，

339
00:17:28,369 --> 00:17:30,950
that the human might've provided via the URL.
这些键值对可能是人类通过 URL 提供的。

340
00:17:30,950 --> 00:17:34,670
So I don't have to figure out, how do I find the thing after the question mark?
所以我不用再去想，如何找到问号后面的东西？

341
00:17:34,670 --> 00:17:36,980
I don't have to worry about parsing the ampersands.
我不用担心解析与号。

342
00:17:36,980 --> 00:17:39,470
Flask does all of that for me and just hands
Flask 为我做好了所有这些工作，并直接提供给我

343
00:17:39,470 --> 00:17:43,830
me anything after the URL in a Python dictionary instead.
URL 后面的任何东西，以 Python 字典的形式。

344
00:17:43,830 --> 00:17:44,790
So let me do this.
所以让我做这个。

345
00:17:44,790 --> 00:17:47,697
Let me go back to VS Code here.
让我回到 VS Code。

346
00:17:47,697 --> 00:17:49,280
Let me go ahead and hide the terminal.
让我隐藏一下终端。

347
00:17:49,280 --> 00:17:54,770
But, in app.py, let me go ahead and make a relatively simple change.
但是，在 app.py 中，让我进行一个相对简单的更改。

348
00:17:54,770 --> 00:17:58,860
Let me go ahead and do this.
让我继续做这个。

349
00:17:58,860 --> 00:18:05,300
Let me go ahead and open up in my hello folder, let me open up index.html.
让我打开我的 hello 文件夹，让我打开 index.html。

350
00:18:05,300 --> 00:18:09,260
And let me go ahead and get rid of world and just put a placeholder here.
然后让我删除 world，并在这里放一个占位符。

351
00:18:09,260 --> 00:18:13,020
Using curly brackets, two of them, on the left and right,
使用大括号，左右各一个，

352
00:18:13,020 --> 00:18:15,600
I'm going to go ahead and plug in a variable like name.
我要插入一个名为 name 的变量。

353
00:18:15,600 --> 00:18:19,430
So here's now where I'm treating index.html not as literally
所以现在我将 index.html 不再视为文字意义上的

354
00:18:19,430 --> 00:18:23,730
an HTML page anymore, but more as a template in the literal sense.
HTML 页面，而是更像一个字面意义上的模板。

355
00:18:23,730 --> 00:18:25,910
So a template is kind of like a blueprint whereby
所以模板就像一个蓝图，可以

356
00:18:25,910 --> 00:18:29,000
you can construct most of what you want the human to see but then
构建你想让用户看到的大部分内容，但

357
00:18:29,000 --> 00:18:31,460
leave little placeholders in, a la a blueprint
留下一些占位符，就像蓝图一样

358
00:18:31,460 --> 00:18:33,440
where you can fill in certain blanks.
可以在某些地方填空。

359
00:18:33,440 --> 00:18:37,120
The double curly quotes here is actually a feature
这里的双花括号实际上是

360
00:18:37,120 --> 00:18:38,870
of technically another language-- it's not
另一种语言的功能--它不是

361
00:18:38,870 --> 00:18:40,670
a programming language-- called Jinja.
一门编程语言--它叫做 Jinja。

362
00:18:40,670 --> 00:18:44,000
But Jinja is simply a language that a bunch of other humans
但 Jinja 仅仅是一门语言，由许多其他人

363
00:18:44,000 --> 00:18:46,460
came up with that standardizes what syntax
创造出来，用来标准化你可以使用的语法

364
00:18:46,460 --> 00:18:49,770
you can use for these placeholders and some other features as well.
来使用这些占位符以及其他一些功能。

365
00:18:49,770 --> 00:18:52,550
So this is going to happen more and more as you progress more
所以，随着你学习编程和计算机科学的深入，这种情况会越来越常见。

366
00:18:52,550 --> 00:18:54,153
in programming and CS.
学习编程和计算机科学的深入，这种情况会越来越常见。

367
00:18:54,153 --> 00:18:57,320
It's not going to be as simple as, oh, I'm implementing something in Python.
它不会像这样简单，哦，我正在用 Python 实现某些东西。

368
00:18:57,320 --> 00:19:00,410
Or, oh, I'm implementing something in C. It's generally going to be,
或者，哦，我正在用 C 语言实现某些东西。通常来说，

369
00:19:00,410 --> 00:19:04,350
oh, I'm implementing something with this full stack of software,
哦，我正在用这个完整的软件栈来实现某些东西，

370
00:19:04,350 --> 00:19:09,660
including HTML, CSS, Python, some SQL, some Jinja, and so forth.
包括 HTML、CSS、Python、一些 SQL、一些 Jinja 等等。

371
00:19:09,660 --> 00:19:13,220
So into your vocabulary is now going to generally come a list of technologies
因此，你的词汇量现在将通常包括你在解决某个问题时使用的技术列表，

372
00:19:13,220 --> 00:19:15,410
that you're using when solving some problem, no
而不是单个语言。

373
00:19:15,410 --> 00:19:17,210
longer individual languages.
而不是单个语言。


374
00:19:17,210 --> 00:19:18,920
So, by this, I just mean this.
所以，我的意思就是这个。

375
00:19:18,920 --> 00:19:22,250
The Flask framework took a look around the internet and saw,
Flask 框架浏览了一下互联网，看到，

376
00:19:22,250 --> 00:19:24,860
OK, the humans at the Jinja group came up
好的，Jinja 团队的人想出了

377
00:19:24,860 --> 00:19:27,830
with a nice simple syntax for putting placeholders in.
一个简单易懂的语法来放置占位符。

378
00:19:27,830 --> 00:19:30,800
Let's support that syntax in Flask.
让我们在 Flask 中支持这个语法。

379
00:19:30,800 --> 00:19:33,720
So it's sort of one framework collaborating with another.
所以这有点像一个框架与另一个框架的合作。

380
00:19:33,720 --> 00:19:38,450
So if I go back to app.py now, how do I actually pass from my application
所以，如果我现在回到 app.py，我该怎么从我的应用程序中

381
00:19:38,450 --> 00:19:41,750
to that template whatever the human has typed in?
传递到模板中，无论用户输入了什么？

382
00:19:41,750 --> 00:19:43,830
Well, it turns out I can go ahead and do this.
事实证明，我可以直接这么做。

383
00:19:43,830 --> 00:19:46,500
Let me go ahead and in my index function, which, again,
让我继续，在我的 index 函数中，再次说明，

384
00:19:46,500 --> 00:19:50,697
is what's going to get called anytime someone visits that slash route,
它是任何访问那个斜杠路由时都会调用的函数，

385
00:19:50,697 --> 00:19:53,030
I'm going to go ahead and create a variable called name.
我将创建一个名为 name 的变量。

386
00:19:53,030 --> 00:19:56,790
I'm going to set it equal to requests.args.
我将它设置为 requests.args。

387
00:19:56,790 --> 00:20:01,760
And then I'm going to go ahead and say, how about, quote, unquote, "name".
然后我将继续说，怎样，引号，引号，"name"。

388
00:20:01,760 --> 00:20:05,390
I claimed, a moment ago, that args is a dictionary that
我之前说过，args 是一个字典，它

389
00:20:05,390 --> 00:20:08,750
just comes automatically with Flask and whenever
会自动和 Flask 一起提供，并且只要

390
00:20:08,750 --> 00:20:11,030
a human makes a request to the server, and it
用户向服务器发出请求，它就会

391
00:20:11,030 --> 00:20:14,330
puts in that dictionary all of the key value pairs from the URL.
将 URL 中的所有键值对放入这个字典中。

392
00:20:14,330 --> 00:20:16,460
And the last thing I'm going to do here is this.
最后一步，我将做的是这个。

393
00:20:16,460 --> 00:20:18,320
I'm going to actually say-- and, actually, just let
我要说的是，实际上，就让

394
00:20:18,320 --> 00:20:19,550
me make this more explicit.
我将这个更明确一点。

395
00:20:19,550 --> 00:20:22,640
Let me call this placeholder literally placeholder.
让我把这个占位符叫做 placeholder。

396
00:20:22,640 --> 00:20:25,230
And what I'm going to do now is, in render template,
现在我要做的是，在渲染模板中，

397
00:20:25,230 --> 00:20:28,522
I'm going to take advantage of one other feature that comes with this function.
我将利用这个函数自带的另一个特性。

398
00:20:28,522 --> 00:20:30,780
It can take one or more arguments.
它可以接收一个或多个参数。

399
00:20:30,780 --> 00:20:33,770
And if you pass in more, you can specify variables
如果你传递更多参数，你可以指定变量

400
00:20:33,770 --> 00:20:35,730
that you want the function to have access to.
你想让函数访问的。

401
00:20:35,730 --> 00:20:40,940
So I can literally do something like this, placeholder equals name.
所以，我就可以直接做这样的事情，placeholder 等于 name。

402
00:20:40,940 --> 00:20:44,090
So recall that Python supports named parameters, which
请记住，Python 支持命名参数，这意味着

403
00:20:44,090 --> 00:20:47,040
just means that you can pass in multiple arguments to a function.
你可以向函数传递多个参数。

404
00:20:47,040 --> 00:20:48,870
But you can specify them by name.
但是你可以通过名称来指定它们。

405
00:20:48,870 --> 00:20:53,240
So I am calling one of these arguments placeholder.
所以，我将其中一个参数命名为 placeholder。

406
00:20:53,240 --> 00:20:55,490
And I'm setting the value of that argument
我将这个参数的值

407
00:20:55,490 --> 00:20:58,740
equal to name, which itself is a variable that I
设置为 name，它本身是一个我

408
00:20:58,740 --> 00:21:00,790
defined just a moment ago.
刚才定义的变量。

409
00:21:00,790 --> 00:21:02,730
So, now, what's going to happen?
现在，将会发生什么？

410
00:21:02,730 --> 00:21:08,010
Well, let me actually go back to my VS Code.
好吧，让我回到 VS Code。

411
00:21:08,010 --> 00:21:11,010
I'm going to go ahead and run Flask as I did before.
我将继续运行 Flask，就像之前一样。

412
00:21:11,010 --> 00:21:12,970
The URL is not going to change in this case,
在这种情况下，URL 不会改变，

413
00:21:12,970 --> 00:21:14,820
I'm going to go back to my other tab.
我要回到我的另一个标签页。

414
00:21:14,820 --> 00:21:18,900
I'm going to go ahead now and change the URL manually-- let me zoom in here--
我现在将手动更改 URL，让我放大一下，

415
00:21:18,900 --> 00:21:20,204
to be /?name=David.
变成 /?name=David。

416
00:21:22,678 --> 00:21:23,970
I'm not going to hit Enter yet.
我现在不会按 Enter。

417
00:21:23,970 --> 00:21:24,990
Let me zoom out.
让我缩小一下。

418
00:21:24,990 --> 00:21:31,590
But, when I do zoom out here, I think we should see now, hello, David.
但是，当我缩小的时候，我想我们现在应该看到，hello, David。

419
00:21:31,590 --> 00:21:32,340
So here we go.
好了，就是这样。

420
00:21:32,340 --> 00:21:33,240
Enter.
按 Enter。

421
00:21:33,240 --> 00:21:35,370
And, voila, we see hello, David.
瞧，我们看到了 hello, David。

422
00:21:35,370 --> 00:21:37,470
But, more interestingly, if I view source
但更有趣的是，如果我查看源代码

423
00:21:37,470 --> 00:21:40,560
here by right-clicking or Control-clicking on the page or opening
通过右键单击或 Control 键单击页面，或者打开

424
00:21:40,560 --> 00:21:43,320
developer tools and so forth and go to View page source,
开发人员工具等等，然后选择 View page source，

425
00:21:43,320 --> 00:21:46,170
it appears that what the server sent to my browser
看起来，服务器发送到我的浏览器的

426
00:21:46,170 --> 00:21:49,050
is literally a web page that says hello, David.
是一个包含 "hello, David" 的网页。

427
00:21:49,050 --> 00:21:50,490
There is no more placeholder.
不再有占位符。

428
00:21:50,490 --> 00:21:52,410
There is no more curly braces.
不再有花括号。

429
00:21:52,410 --> 00:21:56,370
Literally, the content that came from the server is that string.
实际上，来自服务器的内容就是那个字符串。

430
00:21:56,370 --> 00:21:58,620
And so this is the distinction now between being
所以，现在，静态应用程序和动态应用程序之间的区别就是

431
00:21:58,620 --> 00:22:00,690
a static application versus dynamic.
静态应用程序和动态应用程序。

432
00:22:00,690 --> 00:22:05,530
What I wrote statically was literally this index.html file.
我静态编写的是这个 index.html 文件。

433
00:22:05,530 --> 00:22:08,130
But what got served dynamically is that file
但动态提供的是那个文件

434
00:22:08,130 --> 00:22:13,870
plus the substitution or interpolation of that placeholder variable.
加上对那个占位符变量的替换或插值。

435
00:22:13,870 --> 00:22:17,340
So we have the beginnings, it would seem, of a web application.
所以，看起来我们已经有了构建一个 Web 应用程序的雏形。

436
00:22:17,340 --> 00:22:18,510
And think back to Google.
想一想 Google。

437
00:22:18,510 --> 00:22:23,220
Google is essentially implemented the same way, /search?q=cats.
Google 基本上也是用同样的方式实现的，/search?q=cats。

438
00:22:23,220 --> 00:22:26,700
So they're doing more with the key value pair than just spitting it back out,
所以，它们对键值对做的不仅仅是直接把它输出，

439
00:22:26,700 --> 00:22:30,750
but we have the beginnings now of a dynamic application.
但我们现在已经有了构建动态应用程序的雏形。

440
00:22:30,750 --> 00:22:38,330
Any questions on any of this code or this framework thus far?
目前为止，对代码或框架有任何疑问吗？

441
00:22:38,330 --> 00:22:40,668
Any questions thus far.
目前为止有任何问题吗？

442
00:22:40,668 --> 00:22:42,460
No, all right, well, let's see what happens
没有，好的，我们来看看会发生什么

443
00:22:42,460 --> 00:22:44,140
if I don't cooperate like a human.
如果我不像个正常人一样配合。

444
00:22:44,140 --> 00:22:47,470
Let me actually go ahead and get rid of that parameter, hit Enter again,
让我继续删除那个参数，再按 Enter，

445
00:22:47,470 --> 00:22:51,200
and I actually now got an HTTP 400 error.
实际上，我现在收到了一个 HTTP 400 错误。

446
00:22:51,200 --> 00:22:52,490
So this actually seems bad.
所以，这看起来不太妙。

447
00:22:52,490 --> 00:22:56,110
And it's a little subtle, but if I zoom into the tab here, it indeed says 400.
这有点微妙，但如果我放大这个标签，它确实显示的是 400。

448
00:22:56,110 --> 00:22:59,500
That's one of the HTTP status codes that you generally shouldn't
这是 HTTP 状态码中的一种，你通常不应该

449
00:22:59,500 --> 00:23:01,180
see unless something goes wrong.
看到，除非出了什么问题。

450
00:23:01,180 --> 00:23:02,470
200 meant OK.
200 表示成功。

451
00:23:02,470 --> 00:23:04,390
404 meant file not found.
404 表示文件未找到。

452
00:23:04,390 --> 00:23:07,300
400 means that something went wrong.
400 表示发生了错误。

453
00:23:07,300 --> 00:23:10,210
I guess I didn't pass in a name as I was supposed to.
我想我没有按要求传递 name。

454
00:23:10,210 --> 00:23:14,080
But that's only because I was sort of blindly expecting this placeholder
但那是因为我有点盲目地期待这个占位符

455
00:23:14,080 --> 00:23:14,780
to exist.
存在。

456
00:23:14,780 --> 00:23:18,440
So let me be a little smarter and code a little more defensively now as follows.
所以，让我更聪明一点，现在更防御性地编写代码，如下所示。

457
00:23:18,440 --> 00:23:19,400
Let me say this.
让我这么说。

458
00:23:19,400 --> 00:23:26,770
How about if there is a name parameter in the requests arguments,
如果请求参数中存在 name 参数，

459
00:23:26,770 --> 00:23:29,440
then go ahead and create a variable called name,
就创建一个名为 name 的变量，

460
00:23:29,440 --> 00:23:33,280
set it equal to request.args, quote, unquote, "name".
把它设置为 request.args，引号，引号，"name"。

461
00:23:33,280 --> 00:23:35,740
So treat it as a dictionary with that key.
所以把它当作一个带那个键的字典。

462
00:23:35,740 --> 00:23:39,160
Else, if there is no name in the URL, let's
否则，如果 URL 中没有 name，我们就

463
00:23:39,160 --> 00:23:41,750
just default this variable to being something sensible like,
将这个变量的默认值设置为一些合理的，例如，

464
00:23:41,750 --> 00:23:42,770
quote, unquote, "world".
引号，引号，"world"。

465
00:23:42,770 --> 00:23:46,250
So, now, let's proactively, using some sort of "week one style"
所以，现在，让我们主动地，使用某种“第一周风格”

466
00:23:46,250 --> 00:23:48,980
conditional code, albeit in Python now from week six,
条件代码，尽管现在是来自第六周的 Python，

467
00:23:48,980 --> 00:23:53,400
let's just check is name in the URL, if so grab its value.
让我们检查一下 URL 中是否包含 name，如果有，就获取它的值。

468
00:23:53,400 --> 00:23:55,740
Otherwise, default to world instead.
否则，就默认为 world。

469
00:23:55,740 --> 00:23:57,740
So I'm still going to leave this code as is,
所以我仍然会保留这段代码，

470
00:23:57,740 --> 00:24:00,920
passing in the placeholder for this template to get plugged in here.
将这个占位符传递给这个模板，以便在这里插入。


471
00:24:00,920 --> 00:24:06,020
But, now, if I go back to the browser and I just reload without passing
但是，现在，如果我回到浏览器，然后不传递

472
00:24:06,020 --> 00:24:10,140
in name=David or anything else, now we have a sensible default.
name=David 或任何其他内容，现在我们得到了一个合理的默认值。

473
00:24:10,140 --> 00:24:16,460
And if I go back to my View source tab and reload, I'll see that I have hello,
如果我返回到“查看源代码”标签并重新加载，我将看到“hello”，

474
00:24:16,460 --> 00:24:17,760
world in this case.
在这种情况下是“world”。

475
00:24:17,760 --> 00:24:23,000
However, if I go back up to that URL and do /?name=David, now we have David.
但是，如果我回到那个 URL 并执行 /?name=David，现在我们得到的是“David”。

476
00:24:23,000 --> 00:24:26,090
If I change the URL to be name=Carter, now we have Carter.
如果我将 URL 改为 name=Carter，现在我们得到的是“Carter”。

477
00:24:26,090 --> 00:24:29,158
So, indeed, we do have the beginnings of something that's more dynamic.
因此，确实，我们已经开始构建一些更加动态的东西了。

478
00:24:29,158 --> 00:24:30,950
Of course, this is a little tedious to have
当然，这样做有点繁琐，因为

479
00:24:30,950 --> 00:24:32,750
to write out this if and this else.
要写出这个 if 和 else。

480
00:24:32,750 --> 00:24:36,800
There's ways to condense this code to be a little tighter and a little faster
有一些方法可以压缩这段代码，让它更紧凑，运行速度更快

481
00:24:36,800 --> 00:24:37,970
to actually implement.
来实现。

482
00:24:37,970 --> 00:24:40,520
And, in fact, let me go ahead and propose that.
实际上，让我来提议一下。

483
00:24:40,520 --> 00:24:42,020
We just do this.
我们只要这样做。

484
00:24:42,020 --> 00:24:45,200
Instead of treating args as a dictionary as
我们不要将 args 当作字典对待，因为

485
00:24:45,200 --> 00:24:48,080
we did with square brackets-- which can cause problems
我们以前是用方括号处理的，这可能会导致问题

486
00:24:48,080 --> 00:24:50,130
if that key does not exist.
如果该键不存在。

487
00:24:50,130 --> 00:24:52,670
In fact, let me go back to that version.
实际上，让我回到那个版本。

488
00:24:52,670 --> 00:24:56,720
Let me undo, undo, undo, whereby I'm just blindly
让我撤销，撤销，撤销，我正在盲目地

489
00:24:56,720 --> 00:25:00,080
going into request.args to get name.
进入 request.args 获取 name。

490
00:25:00,080 --> 00:25:03,200
In fact, instead of just blindly indexing into this dictionary
实际上，与其盲目地索引这个字典

491
00:25:03,200 --> 00:25:06,210
called args, which turns out we can do this instead.
名为 args，我们可以用这种方式来代替。

492
00:25:06,210 --> 00:25:09,560
Let me go ahead and say request.args.get,
让我说 request.args.get，

493
00:25:09,560 --> 00:25:12,380
which is a function that comes with a dictionary,
这是一个字典自带的函数，

494
00:25:12,380 --> 00:25:15,290
and I can specify the name of the key that I want to get.
我可以指定想要获取的键的名称。

495
00:25:15,290 --> 00:25:19,100
And, by default, if there is no key called name in a dictionary,
默认情况下，如果字典中没有名为 name 的键，

496
00:25:19,100 --> 00:25:21,200
you're going to get back a default value of none,
你将得到一个默认值 none，

497
00:25:21,200 --> 00:25:24,020
which is kind of like Python's equivalent of null,
这有点类似于 Python 中 null 的等价物，

498
00:25:24,020 --> 00:25:26,120
but it's none, capital N, in Python.
但在 Python 中它是 none，大写的 N。

499
00:25:26,120 --> 00:25:28,370
But if you want to give it a different default,
但是，如果你想给它一个不同的默认值，

500
00:25:28,370 --> 00:25:30,293
it's handy to know that this get function,
你需要知道这个 get 函数，

501
00:25:30,293 --> 00:25:32,210
which you can use with dictionaries in general
它可以用于一般的字典，

502
00:25:32,210 --> 00:25:34,940
can take a second argument, which will be the default
它可以接收第二个参数，这将是

503
00:25:34,940 --> 00:25:40,560
value that you do get back if, in fact, there is no such key called name.
如果你实际上没有名为 name 的键，则会返回的默认值。

504
00:25:40,560 --> 00:25:43,680
So what this means is I can actually now keep all of the code the same,
所以这意味着我现在可以保留所有代码不变，

505
00:25:43,680 --> 00:25:44,763
but it's a little tighter.
但它更加紧凑。

506
00:25:44,763 --> 00:25:46,070
There's no if or else.
没有 if 或 else。

507
00:25:46,070 --> 00:25:49,760
I can go back to my other browser window, click reload,
我可以回到我的另一个浏览器窗口，点击重新加载，

508
00:25:49,760 --> 00:25:51,200
and it still works for Carter.
它仍然适用于 Carter。

509
00:25:51,200 --> 00:25:54,380
But if I get rid of that, I can now have hello,
但如果我去掉它，现在我可以有 hello，

510
00:25:54,380 --> 00:25:56,420
world still working just as before.
world 仍然像以前一样工作。

511
00:25:56,420 --> 00:25:59,870
And just to add one more potential point of confusion to the mix,
为了在混合中添加一个潜在的混淆点，

512
00:25:59,870 --> 00:26:05,990
it's a little dopey to say placeholder literally in your template,
在你的模板中说占位符有点愚蠢，

513
00:26:05,990 --> 00:26:10,070
especially if you're going to be using multiple pairs of curly braces for one
特别是如果你要在一个变量中使用多对花括号

514
00:26:10,070 --> 00:26:11,670
variable or another or another.
或另一个，或另一个。

515
00:26:11,670 --> 00:26:13,910
So better style would be to actually call
所以更好的风格是实际调用

516
00:26:13,910 --> 00:26:17,760
the variable what makes sense for what it is you're plugging in.
变量的名称应该与你插入的值相对应。

517
00:26:17,760 --> 00:26:20,540
So hello, name, with the name in curly braces.
所以 hello，name，花括号中是 name。

518
00:26:20,540 --> 00:26:24,080
This is-- I show this, though, because it gets a little confusing
这个——我展示了这一点，因为这有点令人困惑

519
00:26:24,080 --> 00:26:27,493
if your variable's called name, and that's still
如果你的变量叫做 name，那仍然

520
00:26:27,493 --> 00:26:28,910
going to be the value you pass in.
将是你要传入的值。

521
00:26:28,910 --> 00:26:31,400
You're going to very often see in the world of Flask
在 Flask 的世界里，你经常会看到

522
00:26:31,400 --> 00:26:35,540
this convention, where you literally write something equals something where
这种约定，你写的是 something 等于 something，其中

523
00:26:35,540 --> 00:26:37,580
the names there are exactly the same.
那里的名称完全相同。

524
00:26:37,580 --> 00:26:41,190
And the only thing to keep in mind here is that the name--
这里需要注意的是，name——

525
00:26:41,190 --> 00:26:43,910
this is the name of this parameter.
这是这个参数的名称。

526
00:26:43,910 --> 00:26:46,670
This is the value of this parameter.
这是这个参数的值。

527
00:26:46,670 --> 00:26:50,210
The fact that everything seems to be called name in this program
这个程序中的所有内容看起来都叫 name

528
00:26:50,210 --> 00:26:53,630
is because these technical terms are colliding with the English word
是因为这些技术术语与我们熟悉的英语单词冲突了

529
00:26:53,630 --> 00:26:57,420
that you and I know as name for my name, Carter's name, and so forth.
我们用它来表示我的名字、Carter 的名字等等。

530
00:26:57,420 --> 00:27:01,700
But get past that only because it will be very common to literally see
但要克服这一点，因为你会经常看到

531
00:27:01,700 --> 00:27:04,640
something equals something, where just for visual convenience
something 等于 something，仅仅是为了视觉上的方便

532
00:27:04,640 --> 00:27:08,510
the variable's name is exactly the value that you want to pass in.
变量的名称恰好是你想要传入的值。

533
00:27:08,510 --> 00:27:11,720
So that too here is conventional.
所以这里也是一种约定。

534
00:27:11,720 --> 00:27:13,220
All right, a little cryptic.
好吧，有点神秘。

535
00:27:13,220 --> 00:27:17,270
But common boilerplate that you'll start to see again and again.
但这是常见的模板代码，你会一遍又一遍地看到。

536
00:27:17,270 --> 00:27:19,490
Any questions now about this?
现在还有关于这方面的疑问吗？

537
00:27:22,530 --> 00:27:23,220
No?
没有？

538
00:27:23,220 --> 00:27:26,400
OK, so let's make things a little more interesting and representative
好的，让我们让事情变得更有意思，更具代表性

539
00:27:26,400 --> 00:27:27,900
of a real-world app.
像一个现实世界的应用程序。

540
00:27:27,900 --> 00:27:31,470
Let me propose that, now, we go about implementing
我建议，现在，我们开始实现

541
00:27:31,470 --> 00:27:34,578
maybe a second template altogether.
一个全新的第二个模板。

542
00:27:34,578 --> 00:27:36,120
In fact, let me go ahead and do this.
实际上，让我来做一下。

543
00:27:36,120 --> 00:27:39,750
It'd be nice if the human doesn't need to be technologically savvy enough
如果用户不需要精通技术，那会很棒

544
00:27:39,750 --> 00:27:42,420
to say that, oh, if you want to be greeted by this website,
他们就能说，“哦，如果你想被这个网站问候，

545
00:27:42,420 --> 00:27:45,840
you have to literally change the URL yourself, type in name equals--
你必须亲自修改 URL，输入 name 等于——

546
00:27:45,840 --> 00:27:46,560
no one does that.
没有人会这样做。

547
00:27:46,560 --> 00:27:49,620
That's just not how the web works in terms of user interface,
这并不是网页在用户界面方面的运作方式，

548
00:27:49,620 --> 00:27:52,050
but that is how browsers and servers do work.
但浏览器和服务器确实是这么运作的。

549
00:27:52,050 --> 00:27:54,488
But, of course, on the web, we almost always use forms.
当然，在网页上，我们几乎总是使用表单。

550
00:27:54,488 --> 00:27:55,780
So let me go ahead and do this.
所以让我来做一下。

551
00:27:55,780 --> 00:28:00,570
Let me go into index.html, and let me get rid of just this hello, body.
让我进入 index.html，让我去掉这个 hello，body。

552
00:28:00,570 --> 00:28:03,760
And, instead, let me actually create an HTML form.
然后，让我实际创建一个 HTML 表单。

553
00:28:03,760 --> 00:28:08,460
This form is going to use the get method if only so that we can
这个表单将使用 get 方法，这样我们就可以

554
00:28:08,460 --> 00:28:10,830
see what's going on inside of the URL.
看到 URL 中发生了什么。

555
00:28:10,830 --> 00:28:15,300
This form is going to have an input where I'm going to turn autocomplete
这个表单将有一个输入，我将关闭自动完成功能

556
00:28:15,300 --> 00:28:17,010
off, just like last week.
就像上周一样。

557
00:28:17,010 --> 00:28:20,880
I'm going to do auto focus just to move the cursor there nicely by default.
我将使用自动聚焦功能，这样默认情况下光标就会很好地移动到那里。

558
00:28:20,880 --> 00:28:25,840
Somewhat confusingly, I'm going to give this input a name of name
有点令人困惑的是，我要给这个输入一个名为 name 的名称

559
00:28:25,840 --> 00:28:29,540
because I want Carter's name, my name, or someone else's human name.
因为我想要 Carter 的名字、我的名字，或其他人的名字。

560
00:28:29,540 --> 00:28:31,780
But I'm going to give it placeholder text of,
但我将给它一个占位符文本，

561
00:28:31,780 --> 00:28:33,670
quote, unquote, "Name", capitalized, just
引号，引号，“Name”，首字母大写，仅仅

562
00:28:33,670 --> 00:28:37,030
to be grammatically clear as to what we're prompting the user for.
是为了在语法上清楚地表明我们正在提示用户输入什么。

563
00:28:37,030 --> 00:28:39,775
And the type of this field is going to be text.
这个字段的类型将是文本。


564
00:28:39,775 --> 00:28:42,400
Although, that's the implied default if I don't give it a type.
虽然，如果我不指定类型，那就是隐含的默认值。

565
00:28:42,400 --> 00:28:45,790
I'm going to lastly have a button in this form, the type of which
最后，我将在表单中添加一个按钮，按钮的类型

566
00:28:45,790 --> 00:28:49,000
is submit so that the browser knows to submit this form.
是提交，这样浏览器就知道要提交这个表单了。

567
00:28:49,000 --> 00:28:51,370
And the label I'm going to put on this button is Greet.
我要在按钮上添加的标签是“问候”。

568
00:28:51,370 --> 00:28:53,245
So I'm going to type in my name, click Greet.
所以我会输入我的名字，然后点击“问候”。

569
00:28:53,245 --> 00:28:55,610
And I want to see hello, David or the like.
然后我想看到“你好，大卫”或类似的文字。

570
00:28:55,610 --> 00:28:58,930
But I need to specify the action for this form.
但是，我需要指定这个表单的操作。

571
00:28:58,930 --> 00:29:02,120
And recall that, when we implemented "Google", quote, unquote,
还记得，当我们实现“谷歌”的时候，

572
00:29:02,120 --> 00:29:03,620
we did a little something like this.
我们做了一些类似的事情。

573
00:29:03,620 --> 00:29:08,080
Https://www.google.com/search, well, we're
https://www.google.com/search，好吧，我们

574
00:29:08,080 --> 00:29:09,530
not going to punt to Google today.
今天不会转到谷歌。

575
00:29:09,530 --> 00:29:12,200
We are implementing our own applications.
我们正在实现我们自己的应用程序。

576
00:29:12,200 --> 00:29:16,090
So if this were a search application, I could literally have an action
所以如果这是一个搜索应用程序，我可以直接有一个操作

577
00:29:16,090 --> 00:29:19,750
of /search, but let's do something a little more semantically sensible.
为/search，但让我们做一些语义上更合理的事情。

578
00:29:19,750 --> 00:29:22,810
Let's create our brand new route called /greet.
让我们创建一个名为/greet的新路由。

579
00:29:22,810 --> 00:29:24,290
This is not the name of a folder.
这不是文件夹的名字。

580
00:29:24,290 --> 00:29:25,457
It's not the name of a file.
这不是文件的名字。

581
00:29:25,457 --> 00:29:30,040
It's more generically a path or a route that is now up to me to implement.
它更普遍地是一个路径或路由，现在由我来实现。

582
00:29:30,040 --> 00:29:33,580
If I go back, though, to this application and reload this page,
不过，如果我回到这个应用程序并重新加载这个页面，

583
00:29:33,580 --> 00:29:36,580
notice that I have the beginnings of a more user-friendly form
请注意，我有一个更友好的表单的雏形，

584
00:29:36,580 --> 00:29:38,420
that's asking me for this name.
它正在询问我的名字。

585
00:29:38,420 --> 00:29:41,560
However, if I do type in David and click Greet--
但是，如果我输入“大卫”并点击“问候”——

586
00:29:41,560 --> 00:29:43,880
I'll zoom in just a moment--
我马上放大一下——

587
00:29:43,880 --> 00:29:50,150
notice that the URL does change to /greet?name=David just like google.com
请注意，URL确实更改为/greet?name=David，就像google.com一样

588
00:29:50,150 --> 00:29:50,650
works.
工作。

589
00:29:50,650 --> 00:29:53,560
But, of course, we're getting a 404 not found because I
但是，当然，我们得到的是404错误，因为我

590
00:29:53,560 --> 00:29:55,570
haven't implemented this route yet.
还没有实现这个路由。

591
00:29:55,570 --> 00:29:56,630
So let me zoom out.
所以让我缩小。

592
00:29:56,630 --> 00:29:58,270
Let me go back to VS Code.
让我回到VS Code。

593
00:29:58,270 --> 00:30:03,610
Let me open app.py and make a little bit of a change there.
让我打开app.py，在那里做一些修改。

594
00:30:03,610 --> 00:30:08,530
Let me make a little bit of a change and say this in app.py.
让我做一些修改，在app.py中这么说。

595
00:30:08,530 --> 00:30:14,590
In app.py, instead of just getting the user's name and this default,
在app.py中，与其只是获取用户的姓名和这个默认值，

596
00:30:14,590 --> 00:30:18,970
let's simplify the index route and just have it sole purpose in life
让我们简化索引路由，让它在生命中的唯一目的

597
00:30:18,970 --> 00:30:23,020
be to render index.html, the thing that contains the form.
是渲染index.html，它包含表单。

598
00:30:23,020 --> 00:30:28,090
I'm going to now, though, create a second route, so app.route, quote,
不过，我现在要创建一个第二个路由，所以app.route，引号，

599
00:30:28,090 --> 00:30:29,410
unquote, "/greet".
引号，“/greet”。

600
00:30:29,410 --> 00:30:31,420
And I could call this route anything I want.
我可以随意命名这个路由。

601
00:30:31,420 --> 00:30:32,950
But greet seems sensible.
但是“问候”似乎很合理。

602
00:30:32,950 --> 00:30:35,380
I'm going to call the function below it anything I want.
我将把下面的函数命名为我想要的任何名称。

603
00:30:35,380 --> 00:30:38,672
But, just to keep myself sane, I'm going to call it the same thing as the route
但是，为了保持理智，我会把它命名为与路由相同的名称

604
00:30:38,672 --> 00:30:40,640
even though that's not strictly required.
尽管这不是严格要求的。

605
00:30:40,640 --> 00:30:44,240
And then, in this route, I'm going to go ahead and do this.
然后，在这个路由中，我将继续执行此操作。

606
00:30:44,240 --> 00:30:48,760
I'm going to create a variable called name, set it equal to request.args.get,
我将创建一个名为name的变量，将其设置为request.args.get，

607
00:30:48,760 --> 00:30:52,570
quote, unquote, "name", then, quote, unquote, "world", so
引号，“name”，然后，引号，“world”，所以

608
00:30:52,570 --> 00:30:54,250
the exact same line as before.
与之前完全相同的代码行。

609
00:30:54,250 --> 00:30:59,200
And then I'm going to return render_template, which
然后我将返回render_template，它

610
00:30:59,200 --> 00:31:00,970
is the function that comes with Flask.
是Flask提供的函数。

611
00:31:00,970 --> 00:31:05,740
I'm going to specify this time, though, render a template called greet.html--
不过，这次我将指定渲染一个名为greet.html的模板——

612
00:31:05,740 --> 00:31:08,980
which doesn't exist yet, but that's not going to be a hard problem to solve--
它还没有创建，但这不会是一个难以解决的问题——

613
00:31:08,980 --> 00:31:12,410
and pass in that variable.
并传入那个变量。

614
00:31:12,410 --> 00:31:15,160
So the last thing I need to do is this.
所以我要做的最后一件事是这个。

615
00:31:15,160 --> 00:31:17,950
And I'm going to cheat and copy and, in a moment,
我将作弊并复制，稍后，

616
00:31:17,950 --> 00:31:22,820
paste the contents of index.html into a new file called greet.html as follows.
将index.html的内容粘贴到一个名为greet.html的新文件中，如下所示。

617
00:31:22,820 --> 00:31:25,300
Let me open up VS Code here in my other terminal.
让我在另一个终端中打开VS Code。

618
00:31:25,300 --> 00:31:31,750
Let me go ahead and write code templates/greet.html.
让我继续编写代码templates/greet.html。

619
00:31:31,750 --> 00:31:35,530
Notice that I'm making sure to put the new file in the templates folder.
请注意，我确保将新文件放在templates文件夹中。

620
00:31:35,530 --> 00:31:38,620
Or I could cd into it and then run the code command.
或者我可以进入它，然后运行代码命令。

621
00:31:38,620 --> 00:31:40,202
That's going to give me a new file.
这将给我一个新文件。

622
00:31:40,202 --> 00:31:42,160
I'm going to hide my terminal, paste that code,
我要隐藏我的终端，粘贴那段代码，

623
00:31:42,160 --> 00:31:43,660
and I'm going to get rid of the form.
然后我会删除表单。

624
00:31:43,660 --> 00:31:46,202
And, frankly, I should've just copied and pasted this earlier
坦率地说，我应该早点复制粘贴这个

625
00:31:46,202 --> 00:31:49,900
because the only thing I'm going to put in greet.html is hello
因为我要放在greet.html中的唯一内容是“你好”

626
00:31:49,900 --> 00:31:52,600
and then, in curly braces, my placeholder, which
然后，在大括号中，我的占位符，它

627
00:31:52,600 --> 00:31:54,950
we started to call name a moment ago.
我们刚才开始称之为“name”。

628
00:31:54,950 --> 00:31:59,530
So, to recap if I go into my terminal again, if I type ls,
所以，回顾一下，如果我再次进入我的终端，如果我输入ls，

629
00:31:59,530 --> 00:32:00,940
I've still got app.py.
我仍然有app.py。

630
00:32:00,940 --> 00:32:02,180
I've still got templates.
我仍然有templates。

631
00:32:02,180 --> 00:32:06,340
But if I look inside of templates now, I've got two templates-- index.html
但是，如果我现在查看templates内部，我有两个模板——index.html

632
00:32:06,340 --> 00:32:10,510
and greet.html. index.html is the thing you see when you visit my website.
和greet.html。index.html是你在访问我的网站时看到的内容。

633
00:32:10,510 --> 00:32:15,520
greet.html is the thing you see when you submit that form, it would seem.
greet.html是你提交表单后看到的内容，似乎是。

634
00:32:15,520 --> 00:32:19,120
So, indeed, if I go back to my browser and hit back--
所以，实际上，如果我回到浏览器并点击后退——

635
00:32:19,120 --> 00:32:20,560
so I get back to that form.
我回到了那个表单。

636
00:32:20,560 --> 00:32:22,070
For good measure, I'm going to reload because I
为了保险起见，我要重新加载，因为我

637
00:32:22,070 --> 00:32:24,560
want to make sure I have the latest version of everything.
想要确保我有所有内容的最新版本。

638
00:32:24,560 --> 00:32:26,780
I'm going to now try typing my name David.
我现在要尝试输入我的名字大卫。

639
00:32:26,780 --> 00:32:27,720
I'll zoom in.
我会放大。

640
00:32:27,720 --> 00:32:31,820
You'll see that the URL will again change to /greet with the question mark
你会看到URL再次更改为/greet，后面带一个问号

641
00:32:31,820 --> 00:32:32,660
and my name.
和我的名字。

642
00:32:32,660 --> 00:32:36,800
But, hopefully, we now indeed don't see a 404
但是，希望我们现在确实没有看到404错误

643
00:32:36,800 --> 00:32:39,420
because the new route actually exists.
因为新路由确实存在。

644
00:32:39,420 --> 00:32:41,990
And if I zoom out, right-click or Control-click
如果我缩小，右键单击或Ctrl+单击

645
00:32:41,990 --> 00:32:44,390
and go to View page source, you still see
然后选择“查看页面源代码”，你仍然可以看到

646
00:32:44,390 --> 00:32:49,100
what appears to be a HTML file just for me even though it was dynamically
似乎是一个专门为我准备的HTML文件，即使它是动态

647
00:32:49,100 --> 00:32:52,280
generated instead.
生成的。

648
00:32:52,280 --> 00:32:56,450
All right, if you're on board that this seems to be a correct application
好吧，如果你同意这似乎是一个正确的应用程序

649
00:32:56,450 --> 00:32:59,750
insofar as it does what I wanted it to do,
因为它确实做了我想做的事情，

650
00:32:59,750 --> 00:33:03,410
let's critique the design as we've been in the habit of doing.
让我们像往常一样批评一下设计。

651
00:33:03,410 --> 00:33:10,390
I've now got three files, app.py, greet.html, and index.html.
我现在有三个文件，app.py、greet.html和index.html。

652
00:33:10,390 --> 00:33:13,930
What might you not like about the design of this web application
即使你以前从未做过这些事情，你可能不喜欢这个网页应用程序的设计的哪些方面？

653
00:33:13,930 --> 00:33:16,210
even if you've never done this stuff before?
即使你以前从未做过这些事情？

654
00:33:16,210 --> 00:33:17,108
Yeah.
是的。

655
00:33:17,108 --> 00:33:18,900
AUDIENCE: [INAUDIBLE]
观众：[听不清]

656
00:33:20,250 --> 00:33:23,490
DAVID J. MALAN: Yeah, greet and index.html have the same contents,
大卫·马兰：是的，greet和index.html的内容相同，

657
00:33:23,490 --> 00:33:26,827
except for that one or few lines in the middle of the body.
除了主体中间的几行代码。


658
00:33:26,827 --> 00:33:29,160
I mean, I literally copied and pasted, which, generally,
我的意思是，我确实是复制粘贴的，一般来说，

659
00:33:29,160 --> 00:33:31,327
even though I do it sometimes in class to save time,
即使我偶尔在课堂上这样做来节省时间，

660
00:33:31,327 --> 00:33:34,410
if I end up with the same code in my files,
如果我的文件中最终出现相同的代码，

661
00:33:34,410 --> 00:33:37,440
that's probably cutting some corner and not the best design.
那可能是在走捷径，不是最好的设计。

662
00:33:37,440 --> 00:33:37,943
Why?
为什么？

663
00:33:37,943 --> 00:33:40,860
Well, what if I want to go in and change the title of this application
好吧，如果我想进去修改这个应用程序的标题

664
00:33:40,860 --> 00:33:42,625
from hello to something else.
从 hello 改成别的呢？

665
00:33:42,625 --> 00:33:43,500
It's not a huge deal.
没什么大不了的。

666
00:33:43,500 --> 00:33:45,083
But I have to change it in two places.
但我得在两个地方修改。

667
00:33:45,083 --> 00:33:47,160
What if I've got some pretty CSS that I've added?
如果我添加了一些漂亮的 CSS 呢？

668
00:33:47,160 --> 00:33:49,380
And so I've got some CSS up here in one file.
然后我在一个文件中放了一些 CSS。

669
00:33:49,380 --> 00:33:52,140
I need to copy it into another file, change it both places.
我需要把它复制到另一个文件中，在两个地方都修改。

670
00:33:52,140 --> 00:33:55,630
Generally, having duplication of anything is bad design.
一般来说，任何东西的重复都是不好的设计。

671
00:33:55,630 --> 00:33:58,770
So it turns out, there is a way to solve this.
事实证明，有一种方法可以解决这个问题。

672
00:33:58,770 --> 00:34:01,230
And this is one of the features that you really
这是你真正能从 web 框架中获得的功能之一，无论是 Flask 还是其他任何框架。

673
00:34:01,230 --> 00:34:04,890
start to get from a web framework, be it Flask or anything else.
你都能得到这些问题的解决方案。

674
00:34:04,890 --> 00:34:07,469
You get solutions to these problems.
所以我接下来要做的就是

675
00:34:07,469 --> 00:34:08,969
So what I'm going to do now is this.
我要为这个应用程序创建一个第三个也是最后一个文件

676
00:34:08,969 --> 00:34:12,179
I'm going to create a third and final file for this application
首先复制我已有的内容。

677
00:34:12,179 --> 00:34:15,510
by starting by copying what I have already.
让我回到我的终端窗口。

678
00:34:15,510 --> 00:34:19,290
Let me go back to my terminal window here.
让我在模板文件夹中创建一个名为 layout.html 的第三个模板。

679
00:34:19,290 --> 00:34:23,650
And let me create a third template in the templates folder called
它不必叫这个名字，但这是惯例。

680
00:34:23,650 --> 00:34:24,858
layout.html.
所以我在这里总是这样做。

681
00:34:24,858 --> 00:34:27,400
It doesn't have to be called that, but that's the convention.
当我创建这个文件并隐藏我的终端时，

682
00:34:27,400 --> 00:34:28,909
So I'll always do that here.
我将复制粘贴所有内容。

683
00:34:28,909 --> 00:34:31,239
And, when I create this file and hide my terminal,
但我将进入这个名为 layout.html 的文件的主体内部，

684
00:34:31,239 --> 00:34:34,010
I'm going to go ahead and copy-paste all of that content.
除了其他方面之外，它在我的所有文件中都是相同的。

685
00:34:34,010 --> 00:34:39,610
But I'm going to go inside of the body of this file, called layout.html,
我将使用稍微奇怪的语法。

686
00:34:39,610 --> 00:34:44,469
which is otherwise identical across all of my files.
这更像是其他一些人类在几年前想出来的 Jinja 语法。

687
00:34:44,469 --> 00:34:46,900
And what I'm going to do is use slightly weird syntax.
我要这样做。

688
00:34:46,900 --> 00:34:50,230
This is more of that Jinja syntax that some other humans came up
单个大括号和一个百分号。

689
00:34:50,230 --> 00:34:51,130
with years ago.
我要指定单词 block 以及我要为此块指定的任何名称。

690
00:34:51,130 --> 00:34:52,690
And I'm going to do this.
按照惯例，我会保持简单

691
00:34:52,690 --> 00:34:55,449
Single curly brace and a percent sign.
并只使用与我所处标签名称完全相同的内容，即 block body。

692
00:34:55,449 --> 00:35:00,332
I'm going to specify the word block and then any name I want for this block.
然后，在右大括号之前，我会放一个百分号。

693
00:35:00,332 --> 00:35:02,290
And, by convention, I'm going to keep it simple
我不需要这个内部的东西。

694
00:35:02,290 --> 00:35:04,810
and just use the exact same thing as the name of the tag
所以乍一看，这也会很奇怪。

695
00:35:04,810 --> 00:35:06,760
that I'm inside, so block body.
但这是一个惯例。

696
00:35:06,760 --> 00:35:10,570
And then I'm going to put a percent sign just before the close curly brace.
我将使用另一个带有百分号的大括号

697
00:35:10,570 --> 00:35:12,200
I don't need anything inside of this.
然后直接写 endblock，没有空格。

698
00:35:12,200 --> 00:35:13,930
So this too's going to look weird at first glance.
我要打开和关闭一个不是 HTML 标签的东西。

699
00:35:13,930 --> 00:35:14,975
But it's a convention.
如果你愿意，它是一个 Jinja 标签。

700
00:35:14,975 --> 00:35:17,350
I'm going to do another curly brace with the percent sign
所以，你再次看到了世界上一些理性的人

701
00:35:17,350 --> 00:35:20,710
and then literally the word endblock, no space.
在语法上存在分歧，

702
00:35:20,710 --> 00:35:24,160
And I'm going to open and close what isn't an HTML tag.
或者至少使用在精神上相似的语法，

703
00:35:24,160 --> 00:35:26,240
It's a Jinja tag, if you will.
但它与 HTML 已经使用的语法，即尖括号，并不冲突。

704
00:35:26,240 --> 00:35:28,900
So, again, you see yet more evidence of reasonable humans
简而言之，这是一种指定

705
00:35:28,900 --> 00:35:30,760
in the world kind of disagreeing on syntax
你想要一个占位符的方式，不仅仅是单个变量的值，

706
00:35:30,760 --> 00:35:33,530
or at least using syntax that's similar in spirit
而是一整块代码。

707
00:35:33,530 --> 00:35:38,530
but doesn't clash with the syntax, the angled brackets that HTML already uses.
它可能只是一句话。

708
00:35:38,530 --> 00:35:41,500
Long story short, this is a way of specifying
它可能是一个完整的 web 表单元素或更多。

709
00:35:41,500 --> 00:35:45,460
that you want a placeholder, not just for a single variable's value
现在这是一个代码块的占位符。

710
00:35:45,460 --> 00:35:47,420
but for a whole block of code.
而我使用这个模板的方式——

711
00:35:47,420 --> 00:35:48,700
Maybe it's simply a sentence.
这就是模板现在变得更加直观的地方

712
00:35:48,700 --> 00:35:51,760
Maybe it's a whole-- a web form element or more.
在模板的作用意义上。

713
00:35:51,760 --> 00:35:54,940
This is a placeholder now for a block of code.
我将这样做。

714
00:35:54,940 --> 00:36:00,410
And the way I can do this-- or the way I can use this template--
我将进入我的另外两个文件，比如 greet.html。

715
00:36:00,410 --> 00:36:03,640
and this is where template now is getting all the more literal
在这个文件中，与 index.html 相比，唯一不同的行是哪一行？

716
00:36:03,640 --> 00:36:05,410
in the sense of what templates do.
第 9 行是唯一的一行。

717
00:36:05,410 --> 00:36:07,130
I'm going to go ahead and do this.
所以我要做的是

718
00:36:07,130 --> 00:36:11,590
I'm going to go into my two other files, like greet.html.
我将选中它并复制它。

719
00:36:11,590 --> 00:36:16,120
The only line that's different in this file vis-a-vis index.html
然后我将删除此文件中所有其他内容，

720
00:36:16,120 --> 00:36:18,070
is which line number?
因为它们只是多余的。

721
00:36:18,070 --> 00:36:20,857
9 is the only line that is unique.
我需要的所有东西都在 layout.html 中。

722
00:36:20,857 --> 00:36:22,190
So what I'm going to do is this.
在这个文件的顶部，我将使用另一个带有百分号的大括号，

723
00:36:22,190 --> 00:36:24,040
I'm going to highlight that and copy it.
但我要使用一个特殊的关键字，

724
00:36:24,040 --> 00:36:26,530
And then I'm going to delete everything else in this file
它与 Jinja 一起使用，称为 extends。

725
00:36:26,530 --> 00:36:27,850
because it's just redundant.
我将在引号中指定我要扩展的模板名称，

726
00:36:27,850 --> 00:36:30,130
Everything I need is in layout.html.
所以，这是一个在计算机科学中被称为继承的示例。

727
00:36:30,130 --> 00:36:34,030
At the top of this file, I'm going to use another curly brace and a percent
我想从那个布局中获取所有内容，并从它继承

728
00:36:34,030 --> 00:36:36,160
sign, but I'm going to use a special keyword that
所有行，但插入我自己的内容，

729
00:36:36,160 --> 00:36:38,470
comes with Jinja called extends.
从某种意义上说，它是一种父子关系。

730
00:36:38,470 --> 00:36:42,070
And I'm going to specify in quotes here the name of the template
在这个文件中，现在我将指定

731
00:36:42,070 --> 00:36:45,320
that I want to extend, so to speak.
我想要的是这个 block body，就像之前一样。

732
00:36:45,320 --> 00:36:48,520
So this is an example of what's in computer science known as inheritance.
然后，在下面，我将提前说 endblock，

733
00:36:48,520 --> 00:36:53,800
I want to take everything from that layout and inherit from it
以提前完成我的想法。

734
00:36:53,800 --> 00:36:56,860
all of its lines but plug in some of my own,
然后，在这个 block body 中，我将简单地粘贴我从原始版本中偷来的那行代码。

735
00:36:56,860 --> 00:36:59,350
sort of from a parent-child relationship.
我承认这很丑陋。

736
00:36:59,350 --> 00:37:02,320
Inside of this file, now, I'm going to specify
我添加了三行看起来很神秘的代码，所有这些代码

737
00:37:02,320 --> 00:37:08,590
that the custom body that I want is this block body just like before.
都与 Jinja 模板相关，再次强调，这是人类发明的语法，

738
00:37:08,590 --> 00:37:11,770
And then, down here, I'm going to preemptively say endblock just
它赋予了你编写模板的能力，

739
00:37:11,770 --> 00:37:13,750
to finish my thought in advance.
或者说蓝图。

740
00:37:13,750 --> 00:37:18,340
And then, inside of this block body, I'm going to simply paste that line of code
但重点是，这行代码，现在是第 5 行，

741
00:37:18,340 --> 00:37:20,350
that I Stole from the original version.
将被插入到名为 layout.html 的模板中，

742
00:37:20,350 --> 00:37:23,230
So I'll concede that this is pretty ugly.
无论 body 块在哪里。

743
00:37:23,230 --> 00:37:26,770
I've added three cryptic-looking lines, all of which
最后，我要做的是

744
00:37:26,770 --> 00:37:29,530
relate to Jinja templating, again, syntax
index.html 中唯一不同的行是这些，第 9、10、11、12 行。

745
00:37:29,530 --> 00:37:32,770
that humans invented to give you the ability to write templates,
所以我要选中它们，并删除所有其他内容。

746
00:37:32,770 --> 00:37:33,730
or blueprints.
然后我要做完全相同的事情，在顶部加上 extends layout.html





754
00:37:59,890 --> 00:38:03,730
of this file, then, below that, block body.
这个文件的下面，然后在下面，block body。

755
00:38:03,730 --> 00:38:07,420
Inside of the block body, I'm going to then say endblock at the end.
在block body的内部，我将在最后说endblock。

756
00:38:07,420 --> 00:38:10,870
And, in the middle of that, I'm going to paste those lines of code.
然后，在中间，我将粘贴那些代码行。

757
00:38:10,870 --> 00:38:14,350
Just stylistically, I'm going to indent them just so I'm super clear visually
仅从风格上来说，我将缩进它们，这样我从视觉上就能超级清楚

758
00:38:14,350 --> 00:38:16,060
on what is inside of what.
什么在什么的里面。

759
00:38:16,060 --> 00:38:17,290
But that's it.
就这样。

760
00:38:17,290 --> 00:38:18,310
So ugly?
所以丑？

761
00:38:18,310 --> 00:38:21,510
Yes, but, as soon as your web pages get longer and longer,
是的，但是，一旦你的网页变得越来越长，

762
00:38:21,510 --> 00:38:23,500
this ends up being a drop in the bucket.
这最终将成为九牛一毛。

763
00:38:23,500 --> 00:38:27,090
It's three ugly-looking lines relative to a lot of HTML
相对于你可能要插入和自定义到你的应用程序中的许多HTML来说，它只有三行难看的代码

764
00:38:27,090 --> 00:38:30,100
that you might be plugging in and customizing for your application.
。

765
00:38:30,100 --> 00:38:32,340
So now index.html looks like this.
所以现在index.html看起来像这样。

766
00:38:32,340 --> 00:38:34,390
greet.html looks like this.
greet.html看起来像这样。

767
00:38:34,390 --> 00:38:38,910
And the only way they differ is the actual contents of that block of code.
它们唯一不同之处在于那段代码块的实际内容。

768
00:38:38,910 --> 00:38:42,900
layout.html is the main blueprint that's going to govern
layout.html是将要支配整个网站外观的主要蓝图

769
00:38:42,900 --> 00:38:44,760
what the whole website looks like.
。

770
00:38:44,760 --> 00:38:46,410
I can change the title in one place.
我可以在一个地方更改标题。

771
00:38:46,410 --> 00:38:49,020
I can add some pretty CSS in one place and so forth.
我可以在一个地方添加一些漂亮的CSS等等。

772
00:38:49,020 --> 00:38:51,090
It's going to apply to each of those files.
它将应用于每个文件。

773
00:38:51,090 --> 00:38:52,980
And, now, somewhat underwhelmingly perhaps,
现在，也许有点令人失望，

774
00:38:52,980 --> 00:38:57,570
if I go back to this application and I click reload,
如果我回到这个应用程序并点击重新加载，

775
00:38:57,570 --> 00:39:00,970
nothing is different because it still just works.
没有什么不同，因为它仍然有效。

776
00:39:00,970 --> 00:39:03,840
But I've made arguably a better design because now,
但我认为我做了一个更好的设计，因为现在，

777
00:39:03,840 --> 00:39:07,290
when I change things to Carter here or I get rid of it altogether
当我在这里将内容更改为Carter或完全删除它时

778
00:39:07,290 --> 00:39:09,120
and just visit the default--
并只访问默认--

779
00:39:09,120 --> 00:39:12,510
rather, if I just visit slash there, I'll get the form.
更确切地说，如果我只是访问那里的斜杠，我将获得表单。

780
00:39:12,510 --> 00:39:15,390
I've at least handled the situation where--
我至少处理了这种情况--

781
00:39:15,390 --> 00:39:18,060
I've eliminated the situation where I've just copied and pasted
我消除了只是复制粘贴

782
00:39:18,060 --> 00:39:20,570
the same boilerplate code.
相同的样板代码的情况。

783
00:39:20,570 --> 00:39:24,130
So odds are someone like Google is doing something like this.
所以，像谷歌这样的公司很有可能正在做类似的事情。

784
00:39:24,130 --> 00:39:27,100
It's probably fancier certainly than this example.
它可能比这个例子更花哨。

785
00:39:27,100 --> 00:39:30,670
But any time you search for something on Google, generally, the top of the page
但无论何时你在谷歌上搜索任何东西，一般来说，页面的顶部

786
00:39:30,670 --> 00:39:31,337
looks the same.
看起来都一样。

787
00:39:31,337 --> 00:39:33,170
Maybe the bottom of the page looks the same.
也许页面的底部看起来也一样。

788
00:39:33,170 --> 00:39:34,930
There's maybe some ads always at the top.
也许总是有一些广告在顶部。

789
00:39:34,930 --> 00:39:36,710
And then there's 10 search results.
然后有10个搜索结果。

790
00:39:36,710 --> 00:39:40,420
So, probably, what they've done is they have some template that looks roughly
所以，他们可能做的是，他们有一些模板，看起来大致

791
00:39:40,420 --> 00:39:42,730
like this with all of the boilerplate stuff
像这样，包含所有他们希望每个人在每个搜索结果页面上都能看到的样板内容

792
00:39:42,730 --> 00:39:45,640
that they want every human to see on every page of search results.
。

793
00:39:45,640 --> 00:39:50,080
And then they're just somehow customizing the block--
然后他们只是以某种方式自定义了代码块--

794
00:39:50,080 --> 00:39:53,680
a block of code somewhere there in the middle.
那里中间的代码块。

795
00:39:53,680 --> 00:40:01,040
All right, questions on any of this actual templating technique?
好了，关于这种模板技术，有什么问题吗？

796
00:40:01,040 --> 00:40:02,690
Anything at all?
任何问题吗？

797
00:40:02,690 --> 00:40:05,000
All right, how about another question about design?
好的，关于设计，再问一个问题怎么样？

798
00:40:05,000 --> 00:40:08,690
If I go back to this URL here and I search for something like David,
如果我回到这里这个URL，然后我搜索像David这样的东西，

799
00:40:08,690 --> 00:40:12,320
it's not that big a deal that it ends up in the URL.
它最终出现在URL中，这并不算什么大不了的事。

800
00:40:12,320 --> 00:40:15,890
And, in fact, what's nice about HTTP parameters ending up in the URL
事实上，HTTP参数最终出现在URL中，这样做的好处是

801
00:40:15,890 --> 00:40:18,260
is that URLs are therefore stateful.
URL因此具有状态。

802
00:40:18,260 --> 00:40:21,560
If you copy this URL and paste it into an email,
如果你复制这个URL并将其粘贴到电子邮件中，

803
00:40:21,560 --> 00:40:25,770
assuming the web server is still up and running at that URL, it will just work.
假设web服务器仍然在那个URL上运行，它将正常工作。

804
00:40:25,770 --> 00:40:27,530
And the human to whom you send that link,
而你发送链接给的人，

805
00:40:27,530 --> 00:40:30,020
they will see David or Carter or whatever name's
他们将看到David或Carter，或者实际出现在那个表单中的任何名字。

806
00:40:30,020 --> 00:40:32,570
actually in that form, which may be as useful behavior.
这可能是有用的行为。

807
00:40:32,570 --> 00:40:34,827
Not so much for this application, but imagine now
这对这个应用程序来说并不重要，但现在想象一下

808
00:40:34,827 --> 00:40:37,410
that you want to send someone a link of Google search results.
你想给某人发送一个谷歌搜索结果的链接。

809
00:40:37,410 --> 00:40:42,020
It's a good thing that Google puts q=cats or dogs or birds or whatever
谷歌把q=cats或dogs或birds，或者任何东西

810
00:40:42,020 --> 00:40:45,260
in the URL because then the URL itself is stateful.
放在URL中是一件好事，因为这样URL本身就具有状态。

811
00:40:45,260 --> 00:40:47,750
What you see is what the recipient will see
你看到的就是接收者看到的内容

812
00:40:47,750 --> 00:40:52,070
because all of the inputs of the server that's requisite is in that URL.
因为服务器的所有必需输入都在那个URL中。

813
00:40:52,070 --> 00:40:54,650
But suppose that this form field, if I go back,
但假设这个表单字段，如果我返回，

814
00:40:54,650 --> 00:41:01,890
wasn't asking for my name but my credit card number or my password up here.
它不是要求我的名字，而是要求我的信用卡号或我的密码。

815
00:41:01,890 --> 00:41:04,170
That should start to rub you the wrong way because it
这应该让你开始感到不舒服，因为它

816
00:41:04,170 --> 00:41:08,190
feels like no good will come from exposing private information in the URL
感觉从在URL中公开私人信息中不会有什么好处

817
00:41:08,190 --> 00:41:10,710
because if you have a nosy sibling look over your shoulder.
因为如果你有一个爱窥探的兄弟姐妹从你肩膀上看。

818
00:41:10,710 --> 00:41:11,820
There it is in your search history.
它就在你的搜索历史中。

819
00:41:11,820 --> 00:41:14,790
A roommate goes through your autocomplete and finds the data there.
室友浏览你的自动完成并找到了数据。

820
00:41:14,790 --> 00:41:17,370
Or if you do, for whatever reason, copy-paste it,
或者如果你出于任何原因复制粘贴它，

821
00:41:17,370 --> 00:41:21,270
you're accidentally including private information in these URLs.
你无意中将私人信息包含在这些URL中。

822
00:41:21,270 --> 00:41:25,110
So I said last week that there is an alternative to sending things
所以上周我说过，有一种在URL中发送内容的替代方法，那就是使用

823
00:41:25,110 --> 00:41:28,290
in the URL and that alternative is to use something
不是get而是HTTP中的一个动词

824
00:41:28,290 --> 00:41:31,500
that's not called get but a verb in the world of HTTP
叫做post。

825
00:41:31,500 --> 00:41:33,760
that's called post instead.
它实际上是一个相对简单的改变。

826
00:41:33,760 --> 00:41:35,850
And it's actually a relatively simple change.
如果我进入index.html，我可以简单地将方法从get改为post。

827
00:41:35,850 --> 00:41:42,420
If I go into index.html, I can simply change the method from get to post.
get是默认值，post是另一种选择。

828
00:41:42,420 --> 00:41:44,700
Get is the default. Post is an alternative.
尽管在某些情况下你会看到大写，但在HTML中，

829
00:41:44,700 --> 00:41:47,970
Even though, in some contexts, you'll see capitals, in HTML,
它应该是小写，这是另一个左手不知道右手在做什么的例子。

830
00:41:47,970 --> 00:41:51,690
it should be lowercase, another example of left hand not talking to right.
但在这种情况下，如果我现在转到我的浏览器中的另一个标签，

831
00:41:51,690 --> 00:41:56,460
But, in this case, if I go now to my other tab with the browser,
重新加载页面，因为我想要获取表单的最新版本，

832
00:41:56,460 --> 00:41:59,700
reload the page because I want to get the latest version of the form,
如果我现在输入David--

833
00:41:59,700 --> 00:42:01,380
if I now type David--
并且我会放大--在按下回车键之前，如果你现在观察URL，

834
00:42:01,380 --> 00:42:06,000
and I'll zoom in-- before hitting Enter, if you watch the URL now,
你应该不会看到?name=David在那里，

835
00:42:06,000 --> 00:42:12,030
you should not see that ?name=David is up there,
你的信用卡或你的密码也不应该在那里。

836
00:42:12,030 --> 00:42:14,250
nor would be your credit card or your password.
不幸的是，我们看到了另一个我们以前没有见过的HTTP状态

837
00:42:14,250 --> 00:42:16,650
Unfortunately, we're seeing another HTTP status
代码，405，方法不允许。

838
00:42:16,650 --> 00:42:20,130
code we haven't seen yet, 405, Method Not Allowed.
嗯，为什么呢？

839
00:42:20,130 --> 00:42:21,160
Well, why is that?
那是因为现在我完全控制了web服务器，

840
00:42:21,160 --> 00:42:23,880
That's because now that I fully control the web server,
我需要告诉web服务器我确实想要支持不仅是get

841
00:42:23,880 --> 00:42:27,060
I need to tell the web server that I do want to support not just get
这个默认值，还有post。

842
00:42:27,060 --> 00:42:29,520
which is the default but post as well.
用户正在使用的方法不受支持。

843
00:42:29,520 --> 00:42:31,815
The method the user is using is not supported.
所以这是一个简单的修复，尽管它看起来

844
00:42:31,815 --> 00:42:33,690
So this is an easy fix even though it's going
一开始会有点神秘。

845
00:42:33,690 --> 00:42:35,280
to look a little cryptic at first.
如果你想要你的问候方法不仅支持get，还支持post，

846
00:42:35,280 --> 00:42:40,530
If you want your greet method to support not just get but post,
那么你需要修改你的web服务器。

847
00:42:40,530 --> 00:42:43,990
you can specify another argument to this route function.
你可以为这个路由函数指定另一个参数。

848
00:42:43,990 --> 00:42:49,050
So the default is literally this, methods= and then in square brackets,
所以默认值就是这样，methods=，然后在方括号中，

849
00:42:49,050 --> 00:42:50,640
quote, unquote, "GET".
引号、引号，“GET”。

850
00:42:50,640 --> 00:42:51,690
So what is this?
所以这是什么？

851
00:42:51,690 --> 00:42:56,490
Methods is apparently a named argument being passed into the route function.
Methods 显然是一个传递到路由函数的命名参数。

852
00:42:56,490 --> 00:42:58,620
I claim its default value is this.
我认为它的默认值就是这个。

853
00:42:58,620 --> 00:43:01,500
What do the square brackets indicate in Python?
在 Python 中，方括号表示什么？

854
00:43:01,500 --> 00:43:02,220
Not a dictionary.
不是字典。

855
00:43:02,220 --> 00:43:03,860
Square brackets.
方括号。

856
00:43:03,860 --> 00:43:07,700
A list, so it's a list of strings or strs in this case.
一个列表，所以它是一个字符串列表或在这种情况下是 str。

857
00:43:07,700 --> 00:43:09,288
This is the implicit default.
这是隐式的默认值。

858
00:43:09,288 --> 00:43:10,580
So you don't have to type this.
所以你不需要输入这个。

859
00:43:10,580 --> 00:43:13,560
It's just what works out of the box automatically.
它只是开箱即用，自动工作。

860
00:43:13,560 --> 00:43:16,250
But if you want to change this from get to post,
但是如果你想从 get 更改为 post，

861
00:43:16,250 --> 00:43:20,150
you have to include methods equals a list of the methods
你必须包含 methods 等于一个包含方法的列表，

862
00:43:20,150 --> 00:43:21,650
that you do want to support.
你想要支持的那些。

863
00:43:21,650 --> 00:43:24,350
For another time, there's other HTTP methods.
其他时间，还有其他 HTTP 方法。

864
00:43:24,350 --> 00:43:25,280
There's delete.
有 delete。

865
00:43:25,280 --> 00:43:27,452
There's put.
有 put。

866
00:43:27,452 --> 00:43:29,660
Those are the two biggies that you might use as well.
这两个是你可能也会用到的重要方法。

867
00:43:29,660 --> 00:43:32,930
Those are generally not supported as easily in the world of browsers,
在浏览器世界中，这些通常不容易支持，

868
00:43:32,930 --> 00:43:34,910
but get and post certainly are.
但 get 和 post 当然可以。

869
00:43:34,910 --> 00:43:37,340
If you wanted to support both for whatever reason,
如果你想支持这两个，无论出于什么原因，

870
00:43:37,340 --> 00:43:40,460
you can literally have a comma separated list of those methods instead.
你可以直接使用用逗号分隔的那些方法列表。

871
00:43:40,460 --> 00:43:42,770
But we don't really need both for privacy's sake.
但出于隐私考虑，我们并不需要两者。

872
00:43:42,770 --> 00:43:44,720
I claim I'm only going to use post now.
我认为我现在只使用 post。

873
00:43:44,720 --> 00:43:47,930
So now if I go back to my other tab, go back
所以现在如果我回到我的另一个标签，回到

874
00:43:47,930 --> 00:43:51,480
to the form, reload to make sure everything is as expected,
表单，重新加载以确保一切按预期进行，

875
00:43:51,480 --> 00:43:57,980
and now type in David and zoom in, you won't see my name in the URL.
现在输入 David 并放大，你将看不到我的名字在 URL 中。

876
00:43:57,980 --> 00:44:02,060
But you will-- or you won't see it-- oh, good, not intended.
但你将会看到——或者你不会看到——哦，很好，不是故意的。

877
00:44:02,060 --> 00:44:04,840
But nor will you see it even in the body of the web page.
但你甚至在网页正文中也看不到它。

878
00:44:04,840 --> 00:44:06,490
So it's super secure.
所以它是超级安全的。

879
00:44:06,490 --> 00:44:09,250
Why?
为什么？

880
00:44:09,250 --> 00:44:12,720
I screwed up, but why?
我搞砸了，但为什么？

881
00:44:12,720 --> 00:44:13,740
Yes.
是的。

882
00:44:13,740 --> 00:44:15,570
AUDIENCE: [INAUDIBLE]
观众：[听不清]

883
00:44:17,770 --> 00:44:19,660
DAVID J. MALAN: Yes, so good intuition.
大卫·J·马兰：是的，很好的直觉。

884
00:44:19,660 --> 00:44:22,960
Even if you knew that before, you might think through rationally,
即使你之前知道，你也可以理性地思考，

885
00:44:22,960 --> 00:44:24,460
how might this be--
这可能是什么——

886
00:44:24,460 --> 00:44:26,180
why might this be behaving this way?
为什么会出现这种情况？

887
00:44:26,180 --> 00:44:32,770
Well, if I go into app.py, it seems that if world is the value of the name
好吧，如果我进入 app.py，看起来如果 world 是 name 的值

888
00:44:32,770 --> 00:44:36,670
placeholder, well, it must be the case that there is no name
占位符，那么一定是没有 name

889
00:44:36,670 --> 00:44:39,980
key in request.args in this case.
在这种情况下，request.args 中的键。

890
00:44:39,980 --> 00:44:42,520
However, there's an alternative to request.args,
然而，有一个 request.args 的替代方案，

891
00:44:42,520 --> 00:44:44,320
and it's called request.form.
它叫做 request.form。

892
00:44:44,320 --> 00:44:48,880
This is another example of visible and hidden being opposites of one another,
这是 visible 和 hidden 彼此相反的另一个例子，

893
00:44:48,880 --> 00:44:51,550
request.args and request.form, at least for me,
request.args 和 request.form，至少对我来说，

894
00:44:51,550 --> 00:44:54,380
are not obvious mappings to GET and POST, respectively.
并不是 GET 和 POST 的明显映射。

895
00:44:54,380 --> 00:44:56,270
But that's what the Flask folks did.
但这就是 Flask 的人做的事情。

896
00:44:56,270 --> 00:44:59,770
And so the simple fix now, if I go back to VS Code,
所以现在简单的修复方法是，如果我回到 VS Code，

897
00:44:59,770 --> 00:45:04,030
is to change request.args to request.form
是将 request.args 更改为 request.form

898
00:45:04,030 --> 00:45:07,750
if you want to use post instead of get.
如果你想使用 post 而不是 get。

899
00:45:07,750 --> 00:45:12,440
This is a weird misnomer because they're both coming from forms,
这是一个奇怪的误称，因为它们都来自表单，

900
00:45:12,440 --> 00:45:14,410
whether you're using GET or POST.
无论你使用 GET 还是 POST。

901
00:45:14,410 --> 00:45:16,930
But this is what some folks decided.
但这是有些人决定的。

902
00:45:16,930 --> 00:45:20,990
So let me go back to my browser, go back to the original form, reload
所以让我回到我的浏览器，回到原始表单，重新加载

903
00:45:20,990 --> 00:45:24,530
to make sure I get the fresh HTML, type in my name now, David,
以确保我获取了最新的 HTML，现在输入我的名字，David，

904
00:45:24,530 --> 00:45:26,510
zoom in, and click Greet.
放大，然后点击 Greet。

905
00:45:26,510 --> 00:45:29,600
And, this time, you won't see my name in the URL,
而且，这次你将看不到我的名字在 URL 中，

906
00:45:29,600 --> 00:45:33,000
but you should see it in the body of the page.
但你应该在网页正文中看到它。

907
00:45:33,000 --> 00:45:35,300
So we've achieved some form of privacy, if you will.
所以我们实现了一种形式的隐私，如果你愿意。

908
00:45:35,300 --> 00:45:39,125
Better applied to things like credit card numbers, passwords, and the like.
更好地应用于信用卡号码、密码等。

909
00:45:39,125 --> 00:45:41,420
Phew, other questions?
呼，其他问题？

910
00:45:41,420 --> 00:45:43,160
On any of this thus far?
关于到目前为止的任何内容？

911
00:45:45,910 --> 00:45:47,980
Anything yet?
还有什么吗？

912
00:45:47,980 --> 00:45:50,230
No, all right, yes, in the middle.
没有，好的，是的，中间。

913
00:45:50,230 --> 00:45:54,472
AUDIENCE: [INAUDIBLE] post and get, the request [INAUDIBLE]??
观众：[听不清] post 和 get，请求 [听不清]？

914
00:46:04,797 --> 00:46:06,130
DAVID J. MALAN: A good question.
大卫·J·马兰：好问题。

915
00:46:06,130 --> 00:46:10,180
To repeat if you were supporting both GET and POST,
重复一下，如果你同时支持 GET 和 POST，

916
00:46:10,180 --> 00:46:13,210
should we have a second line that's also checking request.args?
我们是否应该有一个第二行也检查 request.args？

917
00:46:13,210 --> 00:46:14,500
Yes, if you were.
是的，如果你这样做的话。

918
00:46:14,500 --> 00:46:18,440
I, though, decided, at the last minute, only to support POST not GET.
不过，我在最后一分钟决定只支持 POST 而不是 GET。

919
00:46:18,440 --> 00:46:19,940
So I don't have to bother with that.
所以我不必为此担心。

920
00:46:19,940 --> 00:46:23,380
But your question's a perfect segue to a final example of this Hello application
但你的问题是这个 Hello 应用程序的最后一个例子的完美过渡，

921
00:46:23,380 --> 00:46:27,160
where you can actually consolidate different types of functionality
在这里，你可以实际合并不同类型的功能，

922
00:46:27,160 --> 00:46:28,490
into individual routes.
到单个路由中。

923
00:46:28,490 --> 00:46:28,990
Why?
为什么？

924
00:46:28,990 --> 00:46:31,240
Well, at the moment, this application is super simple.
好吧，目前，这个应用程序超级简单。

925
00:46:31,240 --> 00:46:34,090
It's literally got one form and then one resulting page.
它实际上只有一个表单，然后一个结果页面。

926
00:46:34,090 --> 00:46:37,810
But it's implemented, therefore, with a pair of routes, a pair of functions.
但是它因此是用一对路由，一对函数实现的。

927
00:46:37,810 --> 00:46:39,800
No big deal for small applications.
对于小型应用程序来说，没什么大不了的。

928
00:46:39,800 --> 00:46:41,975
But if you imagine a more complicated application,
但如果你想象一个更复杂的应用程序，

929
00:46:41,975 --> 00:46:44,350
be it Google or anything else that has many different web
无论是谷歌还是任何其他拥有许多不同网页的网站，

930
00:46:44,350 --> 00:46:47,020
forms on different pages, it's a little annoying
表单，它有点烦人

931
00:46:47,020 --> 00:46:51,257
if every form needs to separate routes if only because you now
如果每个表单都需要单独的路由，仅仅因为你现在

932
00:46:51,257 --> 00:46:53,590
have to keep track of literally twice as many functions.
必须跟踪实际两倍多的函数。

933
00:46:53,590 --> 00:46:55,382
Your colleagues, your teaching fellow needs
你的同事，你的助教需要

934
00:46:55,382 --> 00:46:57,100
to know which one is related to which.
知道哪一个与哪一个相关。

935
00:46:57,100 --> 00:46:58,930
So there's something to be said design-wise
所以从设计的角度来说，

936
00:46:58,930 --> 00:47:02,770
about consolidating related functionality into one single route
将相关功能合并到一个单一路由中，

937
00:47:02,770 --> 00:47:04,270
so that everything is together.
这样所有东西都放在一起。

938
00:47:04,270 --> 00:47:07,945
Well, we can achieve that relatively simply as follows.
好吧，我们可以通过以下方式相对轻松地实现这一点。

939
00:47:07,945 --> 00:47:13,850
So let me go ahead and completely eliminate this greet route and simply
所以让我继续完全删除这个 greet 路由，并简单地

940
00:47:13,850 --> 00:47:16,310
have everything exist in the /route.
让所有内容都存在于 /route 中。

941
00:47:16,310 --> 00:47:19,310
And I'm going to go ahead and highlight and cut these lines out of there
我将继续突出显示并剪切这些行

942
00:47:19,310 --> 00:47:20,280
altogether.
全部。

943
00:47:20,280 --> 00:47:24,860
But if I want my single /route to support multiple methods,
但是如果我想让我的单个 /route 支持多种方法，

944
00:47:24,860 --> 00:47:30,290
I indeed need to use methods equals and then, in square brackets, GET and POST.
我确实需要使用 methods 等于，然后在方括号中，GET 和 POST。

945
00:47:30,290 --> 00:47:31,260
Order doesn't matter.
顺序无关紧要。

946
00:47:31,260 --> 00:47:33,350
But I'll keep them alphabetical in this case.
但我会在这种情况下保持字母顺序。


947
00:47:33,350 --> 00:47:38,540
Inside of my index route, I need to in advance is the user visiting me
在我的 index 路由中，我需要提前知道用户是通过 GET 还是 POST 访问我的

948
00:47:38,540 --> 00:47:39,980
via GET or POST?
GET 还是 POST？

949
00:47:39,980 --> 00:47:42,470
Because if it's via GET, I want them to see the form.
因为如果它是通过 GET 访问，我想让他们看到表单。

950
00:47:42,470 --> 00:47:45,440
If it's via POST, I want to process, the form, that is,
如果是通过 POST 访问，我想处理表单，也就是说，

951
00:47:45,440 --> 00:47:47,150
do something with the user's input.
对用户输入做一些操作。

952
00:47:47,150 --> 00:47:49,010
So it turns out it's relatively simple.
所以事实证明这相对简单。

953
00:47:49,010 --> 00:47:55,470
If request.method equals equals "POST", then I can do the following.
如果 request.method 等于等于 "POST"，那么我可以执行以下操作。

954
00:47:55,470 --> 00:47:59,120
So you can literally check the request object, which comes with Flask,
所以你可以直接检查 request 对象，它来自 Flask，

955
00:47:59,120 --> 00:48:02,810
to figure out, was the word GET or the word POST in that virtual envelope?
来确定，那个虚拟信封中是 GET 还是 POST？

956
00:48:02,810 --> 00:48:05,790
And, depending on the answer, you can do something like this.
根据答案，你可以做一些类似的事情。

957
00:48:05,790 --> 00:48:09,260
I can paste those lines from earlier, whereby I get
我可以粘贴之前那些行，这样我就可以得到

958
00:48:09,260 --> 00:48:13,100
the variable name from request.form.
request.form 中的变量名称。

959
00:48:13,100 --> 00:48:17,330
And then I render the template greet.html, passing in that name.
然后我渲染 greet.html 模板，并将那个名称传递进去。

960
00:48:17,330 --> 00:48:18,800
Otherwise, you know what?
否则，你知道吗？

961
00:48:18,800 --> 00:48:22,200
I could just do else, return the template itself.
我只需要使用 else，返回模板本身。

962
00:48:22,200 --> 00:48:27,410
So if the method is POST, go ahead and process the form just as we did before.
所以如果方法是 POST，继续处理表单，就像我们之前做的那样。

963
00:48:27,410 --> 00:48:31,790
Else, go ahead and just render the index template which contains the form.
否则，继续渲染包含表单的 index 模板。

964
00:48:31,790 --> 00:48:33,710
Strictly speaking, I don't even need the else.
严格来说，我甚至不需要 else。

965
00:48:33,710 --> 00:48:36,380
I can get rid of that, just to tighten this up a little bit,
我可以去掉它，只是为了让代码更加简洁，

966
00:48:36,380 --> 00:48:38,010
and unindent my last line.
并且缩进我的最后一行。

967
00:48:38,010 --> 00:48:38,510
Why?
为什么？

968
00:48:38,510 --> 00:48:42,860
Because recall that, from C, from Python, as soon as you return a value,
因为回想一下，从 C 到 Python，一旦你返回一个值，

969
00:48:42,860 --> 00:48:46,045
nothing in that function is going to get executed thereafter.
该函数中没有任何内容会随后被执行。

970
00:48:46,045 --> 00:48:48,170
So you might as well kind of tighten up the code so
所以你最好尽可能地让代码更加简洁，

971
00:48:48,170 --> 00:48:52,770
that you don't bother adding undue indentation if not needed.
这样你就不用在不需要的情况下添加不必要的缩进。

972
00:48:52,770 --> 00:48:57,810
So notice, now, if I go back to my browser, reload here,
所以注意，现在，如果我回到我的浏览器，在这里刷新，

973
00:48:57,810 --> 00:48:59,360
it's not going to work yet.
它还不能工作。

974
00:48:59,360 --> 00:49:01,640
But let's see if you can diagnose the issue.
但让我们看看你是否可以诊断出问题。

975
00:49:01,640 --> 00:49:05,570
If I type in David here and click Greet, now I'm
如果我在此处输入 David 并点击 Greet，现在我

976
00:49:05,570 --> 00:49:08,780
back to getting a 404 but for different reasons.
又回到了 404，但原因不同。

977
00:49:08,780 --> 00:49:11,570
AUDIENCE: [INAUDIBLE]
观众：[听不清]

978
00:49:12,065 --> 00:49:14,440
DAVID J. MALAN: Good, I haven't changed-- not the method.
DAVID J. MALAN：很好，我没有更改——不是方法。

979
00:49:14,440 --> 00:49:16,910
But I haven't changed the action in the form itself.
但我没有更改表单本身的动作。

980
00:49:16,910 --> 00:49:20,470
So if I go back to VS Code here and I go into the web forms,
所以如果我回到 VS Code，进入 web 表单，

981
00:49:20,470 --> 00:49:22,600
the HTML, POST is still fine.
HTML 中的 POST 仍然没问题。

982
00:49:22,600 --> 00:49:24,730
But there is no /greet route anymore.
但不再有 /greet 路由了。

983
00:49:24,730 --> 00:49:27,205
So I actually can just specify slash.
所以实际上我只需要指定斜线。

984
00:49:27,205 --> 00:49:30,252
Or it turns out if you omit that altogether, the form will assume
或者事实证明，如果你完全省略它，表单会假设

985
00:49:30,252 --> 00:49:32,710
that you want to submit it to the very route from which you
你想要提交到你的路由

986
00:49:32,710 --> 00:49:34,437
came so that is fine as well.
来源，所以这也很好。

987
00:49:34,437 --> 00:49:37,270
I'm going to go ahead now and go back to that other tab and go back.
我现在将返回到另一个标签并返回。

988
00:49:37,270 --> 00:49:38,710
I'm going to reload the page.
我将重新加载页面。

989
00:49:38,710 --> 00:49:40,460
And, just for good measure, this time, I'm
为了安全起见，这次我

990
00:49:40,460 --> 00:49:43,160
going to Control-click or right-click View page source.
将使用 Control-click 或右键点击查看页面源代码。

991
00:49:43,160 --> 00:49:45,790
And, here, yep, the action has indeed updated.
这里，是的，动作确实更新了。

992
00:49:45,790 --> 00:49:47,140
So I think I fixed the bug.
所以我想我已经修复了 bug。

993
00:49:47,140 --> 00:49:51,490
Now if I type in David and click greet, we're back in business with it working.
现在如果我输入 David 并点击 greet，我们又可以正常使用了。

994
00:49:51,490 --> 00:49:54,040
So notice that this still allows me the convenience
所以注意，这仍然允许我方便地

995
00:49:54,040 --> 00:49:59,500
of having two separate templates, one for the form which shows the--
拥有两个独立的模板，一个是用于表单的，它显示了——

996
00:49:59,500 --> 00:50:03,010
which collects the user input and one for the actual greeting
用于收集用户输入的，另一个用于实际的 greeting

997
00:50:03,010 --> 00:50:04,420
which displays the user input.
用于显示用户输入的。

998
00:50:04,420 --> 00:50:07,120
So I'd argue that it still makes sense to keep those separate.
所以我会说，将它们分开仍然是有意义的。

999
00:50:07,120 --> 00:50:09,940
But I can avoid bloating my app.py by having
但我可以避免让我的 app.py 文件膨胀，因为我

1000
00:50:09,940 --> 00:50:14,645
two methods for every single feature that I might want to implement.
为我想要实现的每个功能都创建了两个方法。

1001
00:50:14,645 --> 00:50:17,030
Now, there is still a bug in this implementation
现在，尽管它有点细微，但这个实现中仍然存在一个 bug。

1002
00:50:17,030 --> 00:50:18,800
even though it's a little bit subtle.
即使它有点细微。

1003
00:50:18,800 --> 00:50:22,850
So recall that, previously, we introduced this default value of world
所以回想一下，之前，我们引入了 world 的默认值

1004
00:50:22,850 --> 00:50:26,900
just in case the form doesn't actually contain the word world
以防表单实际上不包含 world 这个词

1005
00:50:26,900 --> 00:50:31,040
as might've happened if I didn't-- if I [INAUDIBLE] into the URL that I was
就像我之前没有——如果我 [听不清] 到我正在请求的 URL

1006
00:50:31,040 --> 00:50:33,110
requesting manually as I did before.
手动请求一样。

1007
00:50:33,110 --> 00:50:36,140
But it turns out that if you're using an actual form and not,
但事实证明，如果你使用的是一个实际的表单，而不是

1008
00:50:36,140 --> 00:50:39,350
of course, expecting the human to type anything into the URL bar, which
当然，希望用户在 URL 栏中输入任何内容，而

1009
00:50:39,350 --> 00:50:41,840
no human would do, it turns out that the browser is still
没有人会这样做，事实证明浏览器仍然

1010
00:50:41,840 --> 00:50:45,980
going to submit a name parameter even if its value is blank,
会提交一个 name 参数，即使它的值为空，

1011
00:50:45,980 --> 00:50:48,290
that is, empty, the so-called empty string.
也就是说，为空，所谓的空字符串。

1012
00:50:48,290 --> 00:50:51,290
And so even if it's the empty string, it's
所以即使它是空字符串，它

1013
00:50:51,290 --> 00:50:53,090
still going to be considered to be a value
仍然会被视为一个值

1014
00:50:53,090 --> 00:50:57,125
and, therefore, not worthy of having the default value of world plugged in.
因此，不值得插入 world 的默认值。

1015
00:50:57,125 --> 00:51:01,340
In other words, if I open up my terminal window here, rerun flask run,
换句话说，如果我在这里打开我的终端窗口，重新运行 flask run，

1016
00:51:01,340 --> 00:51:06,260
and go back over to my browser, and load this example, if I type in David,
然后回到我的浏览器，加载这个例子，如果我输入 David，

1017
00:51:06,260 --> 00:51:09,290
as before, I'm going to be greeted with hello, David.
和之前一样，我会收到 hello, David 的问候。

1018
00:51:09,290 --> 00:51:12,980
But if I try this again and don't provide an actual name but just click
但如果我再试一次，不提供实际的名称，只点击

1019
00:51:12,980 --> 00:51:16,190
Greet, it turns out the name parameter's still
Greet，事实证明 name 参数仍然

1020
00:51:16,190 --> 00:51:20,870
going to be submitted to the server, in which case request.form.get is not
会提交给服务器，在这种情况下，request.form.get 不会

1021
00:51:20,870 --> 00:51:24,840
going to rely on the default value but rather that empty string value.
依赖于默认值，而是依赖于那个空字符串值。

1022
00:51:24,840 --> 00:51:29,060
And so we see what appears to be a bit of an aesthetic bug hello, nothing.
所以我们看到的是一个看起来像是审美上的 bug，hello, nothing。

1023
00:51:29,060 --> 00:51:30,920
So how can we go about fixing this?
那么我们该如何修复它呢？

1024
00:51:30,920 --> 00:51:35,480
Well, perhaps the simplest way is to no longer rely on this default
也许最简单的方法是不再依赖于 app.py 中的这个默认值。

1025
00:51:35,480 --> 00:51:38,210
value here inside of app.py.
所以，事实上，让我删除那个默认值，

1026
00:51:38,210 --> 00:51:41,180
So, in fact, let me go ahead and delete that default value altogether
并将 name 作为变量传递到 greet.html，我们的模板中。

1027
00:51:41,180 --> 00:51:47,240
and pass name in as the variable it still is into greet.html, our template.
但在 greet.html 中，让我们添加一些逻辑

1028
00:51:47,240 --> 00:51:51,230
But, in greet.html, let's add a bit of logic
在那里，如果 name 不为空，我们就条件地显示它。

1029
00:51:51,230 --> 00:51:56,420
there whereby we conditionally display the name if and only if it's not empty.
换句话说，在我盲目地输出这些大括号中的 name 之前，

1030
00:51:56,420 --> 00:52:00,980
In other words, before I output blindly name inside of these curly braces,
让我借用 Python 的一些语法，在我的 Jinja 模板中实际使用一个条件语句。

1031
00:52:00,980 --> 00:52:05,060
let me borrow some syntax from Python and actually use, within my Jinja
打开大括号，然后是一个百分号，因为这次，

1032
00:52:05,060 --> 00:52:07,700
template, a conditional like this.
我需要逻辑，而不仅仅是变量的插值。

1033
00:52:07,700 --> 00:52:10,970
Open curly brace and then a percent sign because, this time,
我将说 if name。

1034
00:52:10,970 --> 00:52:13,520
I want logic, not just interpolation of a variable.
然后我将使用另一个百分号和一个单大括号。

1035
00:52:13,520 --> 00:52:15,620
And I'm going to say if name.
。

1036
00:52:15,620 --> 00:52:19,430
And then I'm going to do another percent sign and a single curly brace.
。




1037
00:52:19,430 --> 00:52:23,300
And then, after that, I'm going to still use my variable name name
然后，在那之后，我仍然会使用我的变量名 name

1038
00:52:23,300 --> 00:52:24,930
inside of two curly braces.
在两个花括号中。

1039
00:52:24,930 --> 00:52:29,660
But, after that, I'm going to do again a single curly brace, a single percent
但是，在那之后，我会再次使用一个单花括号，一个单百分号

1040
00:52:29,660 --> 00:52:33,110
sign, and then I'm going to say else followed by one more percent sign.
符号，然后我会说 else，后面再加一个百分号。

1041
00:52:33,110 --> 00:52:36,410
And then, after that, I'm going to go ahead and actually put my default value
然后，在那之后，我会继续并将我的默认值

1042
00:52:36,410 --> 00:52:41,690
world and then close this if conditional with a single curly brace,
world 然后用一个单花括号关闭这个 if 条件语句，

1043
00:52:41,690 --> 00:52:45,770
a single percent sign, and endif.
一个单百分号，以及 endif。

1044
00:52:45,770 --> 00:52:49,680
And then I'm going to go ahead and close that tag there.
然后我会继续关闭那里的标签。

1045
00:52:49,680 --> 00:52:53,670
So, in Jinja, it turns out that we can use it not only to plug in values.
所以，在 Jinja 中，事实证明，我们不仅可以用来插入值。

1046
00:52:53,670 --> 00:52:56,450
We can also do a bit of lightweight conditional logic using
我们还可以使用它来进行一些轻量级的条件逻辑，使用

1047
00:52:56,450 --> 00:52:59,360
an if and an else and an endif in this case, which
一个 if、一个 else 和一个 endif，在本例中，它

1048
00:52:59,360 --> 00:53:02,300
isn't quite like Python-- indeed the endif is a little bit different.
与 Python 不太一样——实际上 endif 有点不同。

1049
00:53:02,300 --> 00:53:04,357
But this is particular now to the Jinja template.
但这现在是 Jinja 模板所特有的。

1050
00:53:04,357 --> 00:53:06,440
And I've done it all on one line just because this
而我把它全部写在一行上，仅仅因为

1051
00:53:06,440 --> 00:53:09,830
is a fairly bit-sized conditional, either print out the name
是一个相当简单的条件语句，要么输出姓名

1052
00:53:09,830 --> 00:53:10,880
or print out world.
要么输出 world。

1053
00:53:10,880 --> 00:53:14,750
Otherwise, I could actually put these template tags on their own lines
否则，我实际上可以将这些模板标签放在它们自己的行上

1054
00:53:14,750 --> 00:53:17,660
in order to spread things out all the more.
以便更加分散内容。

1055
00:53:17,660 --> 00:53:19,880
We'll see now, before long, that there's actually
我们很快就会看到，实际上

1056
00:53:19,880 --> 00:53:24,240
some other control flow capabilities of Jinja including loops and more.
Jinja 还有一些其他的控制流功能，包括循环等等。

1057
00:53:24,240 --> 00:53:27,590
But, for now, this is a nice way to solve that one problem because now,
但现在，这是一个解决那个问题的好方法，因为现在，

1058
00:53:27,590 --> 00:53:32,510
when I go back into my application and I go back to the form and type
当我回到我的应用程序，回到表单并输入

1059
00:53:32,510 --> 00:53:35,690
in D-A-V-I-D, it's still going to work as expected, hello, David.
D-A-V-I-D，它仍然会按预期工作，你好，David。

1060
00:53:35,690 --> 00:53:39,620
But if I go back one final time, type nothing in thereby sending
但如果我最后一次回去，什么都不输入，从而发送

1061
00:53:39,620 --> 00:53:43,160
an empty value to the server and click Greet here to demonstrate as much,
一个空值到服务器，并点击这里问好来展示这一点，

1062
00:53:43,160 --> 00:53:46,430
now we do, in fact, see hello, world.
现在，我们确实看到了，你好，世界。

1063
00:53:46,430 --> 00:53:53,120
All right, any questions on this final example of just saying hello?
好的，关于这个最后简单问好的例子，还有什么问题吗？

1064
00:53:53,120 --> 00:53:58,870
From those basics come pretty much all of dynamic web applications today.
从这些基础知识中，几乎所有今天的动态网页应用程序都由此而来。

1065
00:53:58,870 --> 00:53:59,370
No?
没有？

1066
00:53:59,370 --> 00:54:02,340
All right, so if you'll indulge me, here's an actual web application
好的，如果你能容忍我，这儿有一个真正的网页应用程序

1067
00:54:02,340 --> 00:54:03,970
that I made back in the day.
我以前做过的。

1068
00:54:03,970 --> 00:54:07,620
So, when I was a sophomore, I think I was not very athletic,
所以，当我还是个大二学生的时候，我想我并不擅长运动，

1069
00:54:07,620 --> 00:54:11,100
so I didn't so much do freshman intramural sports as I did run them
所以我没有参加大一学生校内运动会，而是管理它们

1070
00:54:11,100 --> 00:54:12,220
with a roommate of mine.
和我的一位室友一起。

1071
00:54:12,220 --> 00:54:13,500
So we were sophomores in Mather House.
所以，我们是梅瑟楼的大二学生。

1072
00:54:13,500 --> 00:54:14,292
He was the athlete.
他是运动员。

1073
00:54:14,292 --> 00:54:16,170
I was the aspiring computer scientist.
我是有抱负的计算机科学家。

1074
00:54:16,170 --> 00:54:20,280
And so this was actually a screenshot of the very first web application
所以，这实际上是我做的第一个网页应用程序的截图

1075
00:54:20,280 --> 00:54:20,940
I ever made.
我曾经做过。

1076
00:54:20,940 --> 00:54:22,600
And this will sound old too.
而且这个听起来也很古老。

1077
00:54:22,600 --> 00:54:24,750
But, back in my day, freshman year, when we
但是，在我那个年代，大一的时候，当我们

1078
00:54:24,750 --> 00:54:27,750
registered for Frosh IMs, or Freshman Intramural Sports,
注册参加新生校内运动会，或者说新生校内运动会，

1079
00:54:27,750 --> 00:54:29,790
you would literally walk across Harvard yard
你真的会穿过哈佛庭院

1080
00:54:29,790 --> 00:54:34,923
to Wigglesworth, where a certain proctor or RA lived who was running Frosh IMs.
去维格尔斯沃斯，那里住着一位负责管理新生校内运动会的辅导员或助教。

1081
00:54:34,923 --> 00:54:36,840
And you would literally slide a sheet of paper
然后你真的会把一张纸

1082
00:54:36,840 --> 00:54:39,270
under the door with your name on it and your choice of sports
塞到门底下，上面写着你的名字，还有你选择的运动

1083
00:54:39,270 --> 00:54:40,520
that you want to register for.
你想注册的运动。

1084
00:54:40,520 --> 00:54:43,210
So that was the state of the art in 1995.
所以，这就是 1995 年的最新技术。

1085
00:54:43,210 --> 00:54:45,630
This was ripe for disruption as people would now say.
正如人们现在所说，这是颠覆的时机。

1086
00:54:45,630 --> 00:54:50,218
And, once I actually took CS50 in the fall of 1996, which did not
而且，当我 1996 年秋天真正开始学习 CS50 课程时，当时课程并没有

1087
00:54:50,218 --> 00:54:52,260
teach, funny enough, web programming at the time,
教，有趣的是，当时并没有教网页编程，

1088
00:54:52,260 --> 00:54:55,140
I think I spent that winter or spring figuring out
我想我花了那个冬天或春天来弄清楚

1089
00:54:55,140 --> 00:54:59,692
how to do stuff with web programming, not using C and not even using Python.
如何用网页编程做一些事情，不是用 C，甚至不用 Python。

1090
00:54:59,692 --> 00:55:02,650
At the time, I was using a language called Perl, which is still with us
当时，我使用的是一种叫做 Perl 的语言，它现在仍然存在

1091
00:55:02,650 --> 00:55:05,410
but not as popular as it was back in the day.
但它不像以前那样流行了。

1092
00:55:05,410 --> 00:55:08,530
But what you're seeing here is a hideous screenshot
但是，你在这里看到的只是一个可怕的截图

1093
00:55:08,530 --> 00:55:10,420
of what the user interface was.
用户界面是什么样子的。

1094
00:55:10,420 --> 00:55:14,710
This was me learning how to repeat background in images infinitely,
我当时正在学习如何无限地重复图像中的背景，

1095
00:55:14,710 --> 00:55:16,300
no matter how big the page was.
无论页面有多大。

1096
00:55:16,300 --> 00:55:19,550
Back in the day, there was no CSS, I think, even at the time.
在我那个年代，我认为当时甚至还没有 CSS。

1097
00:55:19,550 --> 00:55:22,308
So every one of these menu options was actually an image.
所以，这些菜单选项中的每一个实际上都是一张图片。

1098
00:55:22,308 --> 00:55:24,850
And even though-- this is a screenshot, so it's not animated.
即使——这是一个截图，所以它没有动画。

1099
00:55:24,850 --> 00:55:27,850
If you would hover over any of these words, what
如果你把鼠标悬停在这些词语的上面，你会发现，

1100
00:55:27,850 --> 00:55:31,180
I would do using JavaScript, which did exist in an early form,
我会使用 JavaScript 来做，它在早期确实存在，

1101
00:55:31,180 --> 00:55:34,660
was just change the image from a blue image to a red image,
只是将图片从蓝色图片改为红色图片，

1102
00:55:34,660 --> 00:55:39,670
creating the illusion of the trickery we did last week with text decoration,
营造出我们上周用文本装饰做的欺骗的错觉，

1103
00:55:39,670 --> 00:55:40,960
as you might recall in hover.
你可能还记得 hover 中的例子。

1104
00:55:40,960 --> 00:55:42,830
So the web's come a long way.
所以，网页已经走过了很长的路。

1105
00:55:42,830 --> 00:55:46,180
But this is still representative, amazingly, some 20 years later
但令人惊讶的是，在 20 年后的今天，这仍然代表着

1106
00:55:46,180 --> 00:55:48,160
of how web applications still work.
网页应用程序是如何工作的。

1107
00:55:48,160 --> 00:55:49,540
I used a different language.
我使用了一种不同的语言。

1108
00:55:49,540 --> 00:55:52,510
I used a different backend for my data or database.
我使用了一个不同的后端来存储我的数据或数据库。

1109
00:55:52,510 --> 00:55:56,810
But everything I did then we will now do effectively today
但是，我当时做的一切，我们现在都可以有效地做到今天

1110
00:55:56,810 --> 00:55:59,900
and beyond because the principles have not changed.
以及将来，因为原理没有改变。

1111
00:55:59,900 --> 00:56:03,010
It's all based ultimately on HTTP and all of the stuff
它最终都是基于 HTTP 和所有我们讨论过的事情

1112
00:56:03,010 --> 00:56:06,350
we discussed thus far this past week and now this.
我们在过去一周以及现在讨论过的所有事情。

1113
00:56:06,350 --> 00:56:09,460
So let's go ahead and make the beginnings of this website,
所以让我们开始构建这个网站，

1114
00:56:09,460 --> 00:56:12,850
though, perhaps without as many of the hideous images underneath it.
不过，也许不需要那么多难看的图片。

1115
00:56:12,850 --> 00:56:17,560
In my VS Code, I'm going to go ahead and close all of my prior tabs.
在我的 VS Code 中，我会继续关闭我之前的所有标签。

1116
00:56:17,560 --> 00:56:22,060
I'll open up my terminal, and I'll hit Control-c to exit out
我会打开我的终端，然后按 Control-c 来退出

1117
00:56:22,060 --> 00:56:26,620
of Flask just like you can hit Control-c to exit out of the HTTP server.
Flask，就像你可以按 Control-c 来退出 HTTP 服务器一样。

1118
00:56:26,620 --> 00:56:30,700
I'm going to go ahead and hit cd to go back to my main workspace.
我会继续按 cd 返回到我的主工作区。

1119
00:56:30,700 --> 00:56:34,090
And I'm going to create a new folder with mkdir called froshims
我会用 mkdir 创建一个名为 froshims 的新文件夹

1120
00:56:34,090 --> 00:56:37,840
so that all of my new application is inside of this folder.
这样我的所有新应用程序都会在这个文件夹中。

1121
00:56:37,840 --> 00:56:40,180
I'm going to cd into froshims.
我会进入 froshims 文件夹。

1122
00:56:40,180 --> 00:56:42,580
And let's go ahead and make a very simple application
让我们继续做一个非常简单的应用程序

1123
00:56:42,580 --> 00:56:47,103
that essentially pretends to let first years register for a sport.
它本质上是模拟让大一新生注册一项运动。

1124
00:56:47,103 --> 00:56:49,270
So I'm going to need to do a bit of typing up front.
所以，我需要先输入一些东西。

1125
00:56:49,270 --> 00:56:50,895
But I'll do the first one from scratch.
但我会从头开始做第一个。


1126
00:56:50,895 --> 00:56:53,440
And then we'll start just evolving that same example.
然后我们将开始逐步改进同一个例子。

1127
00:56:53,440 --> 00:56:57,080
Let me go ahead and do this.
让我继续这样做。

1128
00:56:57,080 --> 00:56:59,290
Let me go ahead and--
让我继续...

1129
00:56:59,290 --> 00:57:00,350
actually, we'll do this.
实际上，我们会这样做。

1130
00:57:00,350 --> 00:57:02,020
We'll cut one corner.
我们将省去一个步骤。

1131
00:57:02,020 --> 00:57:07,630
I'm going to go ahead and copy, from my hello example, app.py into this folder.
我将从我的hello示例中复制app.py到这个文件夹中。

1132
00:57:07,630 --> 00:57:10,570
I'm going to go ahead and copy from my hello examples
我将从我的hello示例中复制

1133
00:57:10,570 --> 00:57:13,120
templates my layout into this folder.
模板布局到这个文件夹中。

1134
00:57:13,120 --> 00:57:15,610
I'm going to create a new folder called templates.
我将创建一个名为templates的新文件夹。

1135
00:57:15,610 --> 00:57:18,760
I'm going to move that copied layout into templates
我将把复制的布局移动到templates文件夹中

1136
00:57:18,760 --> 00:57:22,000
so that, at this point in the story, if I clear my screen and type ls,
这样，在故事的这个阶段，如果我清除屏幕并键入ls，

1137
00:57:22,000 --> 00:57:24,062
I've got the beginnings of a web application,
我已经有了web应用程序的雏形，

1138
00:57:24,062 --> 00:57:26,020
even though it's specific to just saying hello.
即使它仅仅用于说“你好”。

1139
00:57:26,020 --> 00:57:28,810
But I'm going to go ahead and into the templates folder
但我将进入templates文件夹

1140
00:57:28,810 --> 00:57:31,450
and go into layout.html.
并进入layout.html。

1141
00:57:31,450 --> 00:57:35,560
Let's just change this ever so slightly to say froshims as the title
我们只需稍作修改，将标题改为froshims

1142
00:57:35,560 --> 00:57:38,050
just so we know we're looking at the right application.
这样我们就知道我们在看正确的应用程序。

1143
00:57:38,050 --> 00:57:43,060
And, now, let me go ahead and create a new file called how
现在，让我创建一个名为how的新文件

1144
00:57:43,060 --> 00:57:46,360
about index.html inside of templates that,
名为index.html，位于templates文件夹中，

1145
00:57:46,360 --> 00:57:53,860
just as before, is going to extend that there template, so extends layout.html.
就像之前一样，它将扩展该模板，所以extends layout.html。

1146
00:57:53,860 --> 00:57:57,400
Inside of here, I'm going to say block body just as before.
在这里，我将像之前一样写block body。

1147
00:57:57,400 --> 00:57:59,448
Preemptively going to say endblock.
提前说endblock。

1148
00:57:59,448 --> 00:58:01,240
And then, inside of here, I'm going to make
然后，在里面，我将制作

1149
00:58:01,240 --> 00:58:05,020
the beginnings of a super simple web page for first-year intramural.
一个非常简单的网页，用于第一年的校内比赛。

1150
00:58:05,020 --> 00:58:08,290
So I'm going to use an h1 tag that's sort of big and bold that
所以我将使用一个h1标签，它比较大而且粗体，

1151
00:58:08,290 --> 00:58:11,320
just says register at the top of the page sort of like a title.
在页面的顶部写着“注册”，就像一个标题一样。

1152
00:58:11,320 --> 00:58:13,270
Below that, I'm going to have a form.
在下面，我将有一个表单。

1153
00:58:13,270 --> 00:58:17,260
The action of this form I'm going to say proactively is going to say
这个表单的动作我将提前说

1154
00:58:17,260 --> 00:58:18,340
to /register.
是/register。

1155
00:58:18,340 --> 00:58:19,090
So that's a to do.
所以这是一个待办事项。

1156
00:58:19,090 --> 00:58:21,820
We're going to have to go implement a register route.
我们需要去实现一个注册路由。

1157
00:58:21,820 --> 00:58:24,525
The method I'm going to use is post just for privacy's sake
我将使用post方法，仅仅是为了隐私

1158
00:58:24,525 --> 00:58:26,650
so that if roommates are sharing the same computer,
这样，如果室友共用同一台电脑，

1159
00:58:26,650 --> 00:58:29,440
they don't see, in the autocomplete, who's registered for what.
他们在自动完成中就不会看到谁注册了哪个项目。

1160
00:58:29,440 --> 00:58:34,240
Inside of that form, I'm going to have a single input first where
在表单中，我将首先添加一个输入框，其中

1161
00:58:34,240 --> 00:58:37,000
autocomplete is off.
自动完成已关闭。

1162
00:58:37,000 --> 00:58:38,487
Autofocus is on.
自动聚焦已开启。

1163
00:58:38,487 --> 00:58:40,570
The name of this field will be name because I want
这个字段的名称将是name，因为我想要

1164
00:58:40,570 --> 00:58:43,240
to ask the humans for their human name.
询问用户他们的名字。

1165
00:58:43,240 --> 00:58:45,610
The placeholder, just to be self-describing,
占位符，为了自我描述，

1166
00:58:45,610 --> 00:58:49,850
is going to be, quote, unquote, "Name", capital N grammatically.
将是，“Name”，语法的首字母大写。

1167
00:58:49,850 --> 00:58:52,600
And then, lastly, the type of this field, though it's the default,
最后，这个字段的类型，虽然是默认的，

1168
00:58:52,600 --> 00:58:53,245
is text.
是文本。

1169
00:58:53,245 --> 00:58:57,400
So, so far, this is actually pretty darn similar to the hello example
所以，到目前为止，这实际上与hello示例非常相似

1170
00:58:57,400 --> 00:58:58,750
soliciting someone's name.
用于请求某人的名字。

1171
00:58:58,750 --> 00:59:01,630
But now I want to maybe implement a dropdown
但现在我可能想实现一个下拉菜单

1172
00:59:01,630 --> 00:59:03,640
menu via which you can select a sport.
供用户选择项目。

1173
00:59:03,640 --> 00:59:06,910
And, back in the day, I think the first version of froshims,
在过去，我认为froshims的第一个版本，

1174
00:59:06,910 --> 00:59:09,650
students could only register for basketball, soccer,
学生只能注册篮球、足球，

1175
00:59:09,650 --> 00:59:11,000
and ultimate Frisbee.
和极限飞盘。

1176
00:59:11,000 --> 00:59:12,640
So those were three of the fall sports.
所以那些是秋季的三项运动。

1177
00:59:12,640 --> 00:59:14,210
So let me do this.
所以让我这样做。

1178
00:59:14,210 --> 00:59:17,620
It's a little weirdly named, but a dropdown menu in HTML
名字有点奇怪，但在HTML中，下拉菜单

1179
00:59:17,620 --> 00:59:20,980
is called a select menu because you select something from it.
被称为选择菜单，因为你从中选择一些东西。

1180
00:59:20,980 --> 00:59:25,390
The name of this input, which is really what it is, is going to be sport.
这个输入框的名称，它实际上就是输入框，将是sport。

1181
00:59:25,390 --> 00:59:27,700
Though, I could call the input anything I want.
不过，我可以随意命名这个输入框。

1182
00:59:27,700 --> 00:59:31,330
And, inside of this select element, I'm going to have a few options.
在这个选择元素中，我将添加一些选项。

1183
00:59:31,330 --> 00:59:38,050
I'm going to have one where the option is how about basketball?
我将添加一个选项，选项内容是篮球？

1184
00:59:38,050 --> 00:59:41,530
Another option, the value of which is soccer.
另一个选项，其值为足球。

1185
00:59:41,530 --> 00:59:45,805
And, lastly, a third option, the value of which is ultimate Frisbee.
最后，第三个选项，其值为极限飞盘。

1186
00:59:45,805 --> 00:59:46,930
So just those three sports.
所以只有这三项运动。

1187
00:59:46,930 --> 00:59:49,030
But suffice it to say we could add even more.
但可以肯定地说，我们可以添加更多。

1188
00:59:49,030 --> 00:59:51,460
And then, outside of this select menu, I'm
然后，在这个选择菜单之外，我

1189
00:59:51,460 --> 00:59:55,060
going to have a button just like the hello example, the type of which
将添加一个按钮，就像hello示例一样，类型为

1190
00:59:55,060 --> 00:59:57,730
is submit, just to be super explicit even though that's not
提交，为了超级明确，即使这不是

1191
00:59:57,730 --> 00:59:58,820
strictly necessary.
严格必需的。

1192
00:59:58,820 --> 01:00:01,100
But it's another attribute you'll see in the wild.
但这是你在实际应用中会看到的另一个属性。

1193
01:00:01,100 --> 01:00:04,097
And then the name on the value of this button will be register.
然后这个按钮的值的名称将是register。

1194
01:00:04,097 --> 01:00:05,930
So it's clear that you're not being greeted,
所以很明显你没有被问候，

1195
01:00:05,930 --> 01:00:08,120
but you're actually registering for sports.
而是正在注册运动项目。

1196
01:00:08,120 --> 01:00:13,070
Now, we're not quite good to go yet, but let me go into VS code's terminal
现在，我们还没有完全准备好，但让我进入VS code的终端

1197
01:00:13,070 --> 01:00:13,580
again.
再来一次。

1198
01:00:13,580 --> 01:00:16,922
Let me open up app.py and close my terminal again.
让我打开app.py并再次关闭终端。

1199
01:00:16,922 --> 01:00:19,380
And let's just whittle this down to something super simple.
让我们简化一下。

1200
01:00:19,380 --> 01:00:21,088
I don't want to get overwhelmed just yet.
我现在不想过度复杂化。

1201
01:00:21,088 --> 01:00:22,970
I don't want to support even POST.
我甚至不想支持POST。

1202
01:00:22,970 --> 01:00:25,730
So let's just whittle this down to the essence of this.
所以让我们简化到这个的本质。

1203
01:00:25,730 --> 01:00:28,460
So I can do a quick check mentally and make sure now,
这样我就可以在脑海里快速检查一下，并确保现在，

1204
01:00:28,460 --> 01:00:32,480
when I run flask, that I'm serving up that registration form.
当我运行flask时，我正在提供注册表单。

1205
01:00:32,480 --> 01:00:36,980
So, in my terminal, I'm going to run flask run in my froshims folder.
所以，在我的终端中，我将在我froshims文件夹中运行flask run。

1206
01:00:36,980 --> 01:00:38,270
So far, so good.
目前为止，一切顺利。

1207
01:00:38,270 --> 01:00:41,750
It's going to be by default the same URL unless I've rebuilt or created
默认情况下，它将是相同的URL，除非我重新构建或创建

1208
01:00:41,750 --> 01:00:42,810
a brand new codespace.
一个全新的代码空间。

1209
01:00:42,810 --> 01:00:46,370
So let me go back to my other tab and reload that URL.
所以让我回到我的另一个标签并重新加载那个URL。

1210
01:00:46,370 --> 01:00:49,760
And, OK, we've got the beginnings of a more interesting form now.
好了，我们现在有了更有趣的表单的雏形。

1211
01:00:49,760 --> 01:00:51,420
So it's got place for my name.
所以它有我的名字的输入框。

1212
01:00:51,420 --> 01:00:54,000
It's got a dropdown for the three sports.
它有三个运动项目的下拉菜单。

1213
01:00:54,000 --> 01:00:57,830
So let's see what happens, D-A-V-I-D. We'll say soccer.
让我们看看会发生什么，D-A-V-I-D。 我们选择足球。

1214
01:00:57,830 --> 01:01:01,310
And, when I click Register, just to be clear, what route will
然后，当我点击注册时，为了明确起见，我将进入哪个路由？

1215
01:01:01,310 --> 01:01:05,045
I find myself at per my URL?
我的URL是？

1216
01:01:05,045 --> 01:01:07,910
Slash.
斜杠。

1217
01:01:07,910 --> 01:01:08,970
What was it to be?
应该是什么？

1218
01:01:08,970 --> 01:01:12,800
If I go back into my index.
如果我回到我的index中。

1219
01:01:12,800 --> 01:01:13,880
/register.
/register。

1220
01:01:13,880 --> 01:01:18,150
But what error will I see presumably at this point in time,
但在这个时间点，我预计会看到什么错误？

1221
01:01:18,150 --> 01:01:22,470
given that app.py has only been implemented to this extent?
鉴于app.py只实现了到目前为止的程度？


1222
01:01:22,470 --> 01:01:25,740
So probably 404 because the route won't be found.
所以可能是 404 错误，因为找不到路由。

1223
01:01:25,740 --> 01:01:28,850
So if I click Register, I indeed end up at /register.
如果我点击注册，确实会跳转到 /register 页面。

1224
01:01:28,850 --> 01:01:31,703
But if I zoom in up top here, 404 not found.
但如果我在顶部放大，就会显示 404 错误。

1225
01:01:31,703 --> 01:01:33,870
All right, so it's the beginnings of an application.
好的，这是一个应用程序的雏形。

1226
01:01:33,870 --> 01:01:36,328
But I've not-- I've implemented the front end, so to speak,
但是我还没有实现所谓的“前端”，

1227
01:01:36,328 --> 01:01:40,010
the user interface but not the back end, the business logic that actually
也就是说，我实现了用户界面，但没有实现后端，以及处理用户输入的业务逻辑。

1228
01:01:40,010 --> 01:01:41,750
does something with the user input.
它实际上会对用户输入进行处理。

1229
01:01:41,750 --> 01:01:43,790
But a couple of enhancements here.
但是这里有一些改进。

1230
01:01:43,790 --> 01:01:46,400
But these are largely niceties in HTML.
但这些基本上是 HTML 中的一些小细节。

1231
01:01:46,400 --> 01:01:51,200
It's a little bad user experience that by default you're
默认情况下，这会导致用户体验不太好，因为你正在

1232
01:01:51,200 --> 01:01:52,437
registering for basketball.
注册参加篮球运动。

1233
01:01:52,437 --> 01:01:53,270
I mean, that's fine.
我的意思是，这没什么问题。

1234
01:01:53,270 --> 01:01:56,360
But, arguably, you're biasing people toward registering for basketball.
但可以这么说，你正在引导人们注册参加篮球运动。

1235
01:01:56,360 --> 01:01:59,610
Or they might not realize that they're registering for basketball because they
或者他们可能没有意识到他们正在注册参加篮球运动，因为他们

1236
01:01:59,610 --> 01:02:01,100
didn't explicitly choose a sport.
没有明确选择一项运动。

1237
01:02:01,100 --> 01:02:03,770
So having a random, an arbitrary default that
所以有一个随机的、任意的默认值，

1238
01:02:03,770 --> 01:02:05,870
just happens to be the first word alphabetically
恰好是字母顺序排列的第一个词，

1239
01:02:05,870 --> 01:02:07,730
is a little weak when it comes to design.
在设计方面，这有点弱。

1240
01:02:07,730 --> 01:02:09,313
So there's different ways to fix this.
所以有很多方法可以解决这个问题。

1241
01:02:09,313 --> 01:02:12,230
But one way is to do this.
但是一种方法是这样做。

1242
01:02:12,230 --> 01:02:14,840
Add a new option at the very top.
在最上面添加一个新的选项。

1243
01:02:14,840 --> 01:02:18,860
But go ahead and disable it so that the user can't themselves
然后禁用它，这样用户就不能自己

1244
01:02:18,860 --> 01:02:21,500
select it because you want them to select an actual sport.
选择它，因为你想让他们选择一项真正的运动。

1245
01:02:21,500 --> 01:02:24,720
By default, you can specify that it's indeed selected.
默认情况下，你可以指定它已经被选中。

1246
01:02:24,720 --> 01:02:27,270
And it has no value.
并且它没有值。

1247
01:02:27,270 --> 01:02:31,660
So not to judge any sport, but this particular option has no value.
所以不是针对任何运动，而是这个特定选项没有值。

1248
01:02:31,660 --> 01:02:34,690
But what the human sees is the word sport, for instance.
但是用户看到的是“运动”这个词，例如。

1249
01:02:34,690 --> 01:02:35,850
So this is kind of a hack.
所以这有点像一种技巧。

1250
01:02:35,850 --> 01:02:39,030
Ideally, the Select menu would just have a placeholder attribute
理想情况下，下拉菜单应该有一个占位符属性，

1251
01:02:39,030 --> 01:02:41,070
like the actual input boxes does.
就像实际的输入框一样。

1252
01:02:41,070 --> 01:02:43,060
But that does not exist.
但它不存在。

1253
01:02:43,060 --> 01:02:46,480
So if I reload now, it looks a little more user friendly.
所以如果我现在重新加载，它看起来更友好一些。

1254
01:02:46,480 --> 01:02:47,640
So it says sport.
上面显示着“运动”。

1255
01:02:47,640 --> 01:02:49,800
I can't select sport ever again.
我再也不能选择“运动”了。

1256
01:02:49,800 --> 01:02:52,800
But it is the default, but I can select one of these three sports
但它仍然是默认选项，但我可以选择这三种运动之一，

1257
01:02:52,800 --> 01:02:55,590
which just increases the probability that the human does
这仅仅增加了用户执行你预期操作的概率。

1258
01:02:55,590 --> 01:02:57,328
what you might expect.
这是你可能期望的结果。

1259
01:02:57,328 --> 01:02:59,370
Of course, there's something else I can add here.
当然，这里还可以添加其他东西。

1260
01:02:59,370 --> 01:03:01,320
Suppose I don't even give my name.
假设我甚至没有输入我的名字。

1261
01:03:01,320 --> 01:03:02,760
It still went through.
它仍然能够提交。

1262
01:03:02,760 --> 01:03:03,930
It didn't work.
它没有成功。

1263
01:03:03,930 --> 01:03:05,250
It's still a 405, but the--
它仍然是 405 错误，但...

1264
01:03:05,250 --> 01:03:05,820
404.
404 错误。

1265
01:03:05,820 --> 01:03:07,830
But the browser didn't stop me.
但是浏览器并没有阻止我。

1266
01:03:07,830 --> 01:03:10,050
So recall that we do have some other tricks.
所以请记住，我们还有一些其他技巧。

1267
01:03:10,050 --> 01:03:13,170
For instance, I can say that this dropdown, this select menu
例如，我可以说这个下拉菜单，这个选择菜单

1268
01:03:13,170 --> 01:03:15,870
is itself required-- or, sorry, not this one.
本身是必需的 - 或者，抱歉，不是这个。

1269
01:03:15,870 --> 01:03:19,000
The text box is itself required, for instance.
例如，文本框本身是必需的。

1270
01:03:19,000 --> 01:03:21,600
So now if I go back to the form and reload
所以现在如果我回到表单并重新加载，

1271
01:03:21,600 --> 01:03:24,900
and I just ignore the name question and click Register,
而我只忽略了姓名问题并点击注册，

1272
01:03:24,900 --> 01:03:26,340
the browser's going to yell at me.
浏览器就会提醒我。

1273
01:03:26,340 --> 01:03:28,380
Now, recall that this is not robust.
现在，请记住，这不是很稳健。

1274
01:03:28,380 --> 01:03:30,510
Client-side validation is not good.
客户端验证并不可靠。

1275
01:03:30,510 --> 01:03:32,600
Why?
为什么？

1276
01:03:32,600 --> 01:03:34,683
What'd we learn last week?
我们上周学到了什么？

1277
01:03:34,683 --> 01:03:37,100
Yeah, I mean, I can literally right-click or Control-click
是的，我的意思是，我可以直接右键点击或 Ctrl+点击

1278
01:03:37,100 --> 01:03:38,720
and open up Developer Tools.
打开开发者工具。

1279
01:03:38,720 --> 01:03:42,620
I can go into that form using the Developer Tools.
我可以使用开发者工具进入那个表单。

1280
01:03:42,620 --> 01:03:46,820
I can literally find the word required, delete it, and voila.
我可以直接找到“required”这个词，删除它，然后就成功了。

1281
01:03:46,820 --> 01:03:49,670
This form will now go through because the browser's
这个表单现在可以提交了，因为浏览器

1282
01:03:49,670 --> 01:03:50,900
going to do what I change.
会按照我修改的方式运行。

1283
01:03:50,900 --> 01:03:54,950
So it's useful for user experience, making just things a little prettier
所以它对用户体验很有用，可以使一些东西看起来更漂亮，

1284
01:03:54,950 --> 01:03:56,480
and faster to validate.
并且可以更快地进行验证。

1285
01:03:56,480 --> 01:03:58,370
But it's not going to be robust defense.
但这并不能提供可靠的防御。

1286
01:03:58,370 --> 01:04:02,930
All right, so let's go back now to VS Code into my actual route
好的，现在让我们回到 VS Code 中的实际路由，

1287
01:04:02,930 --> 01:04:07,140
and implement at least something here that resembles registration.
在这里实现一些类似于注册的东西。

1288
01:04:07,140 --> 01:04:08,930
So I'm going to go into app.py.
所以我要进入 app.py 文件。

1289
01:04:08,930 --> 01:04:11,300
And, in app.py, let's create this second route.
在 app.py 文件中，让我们创建第二条路由。

1290
01:04:11,300 --> 01:04:16,400
So, at app.route, quote, unquote, "/register"
所以，在 app.route，引号之间输入“/register”，

1291
01:04:16,400 --> 01:04:18,808
to match what is in my HTML.
与我的 HTML 中的路由匹配。

1292
01:04:18,808 --> 01:04:19,850
Let me define a function.
让我定义一个函数。

1293
01:04:19,850 --> 01:04:21,080
I can call it anything I want.
我可以随意命名它。

1294
01:04:21,080 --> 01:04:24,038
But, again, good convention to just call it the same thing as the route
但是，再次强调，一个好的习惯是将函数命名为与路由相同的名称，这样就不会出现不同步的情况。

1295
01:04:24,038 --> 01:04:26,060
name so you don't get out of sync.
这样就不会出现不同步的情况。

1296
01:04:26,060 --> 01:04:28,520
And then there's a couple of things I might want to do.
然后，我可能想做几件事。

1297
01:04:28,520 --> 01:04:31,190
When you register for this particular form,
当你在这个特定表单上注册时，

1298
01:04:31,190 --> 01:04:36,860
what are the two things that the server should probably check for?
服务器应该检查哪些内容？

1299
01:04:36,860 --> 01:04:39,750
What kind of logic should I have here?
我这里应该写什么逻辑？

1300
01:04:39,750 --> 01:04:41,320
Yeah.
对。

1301
01:04:41,320 --> 01:04:44,085
AUDIENCE: [INAUDIBLE] at anything for [INAUDIBLE]..
观众：[听不清]任何东西 [听不清]

1302
01:04:44,085 --> 01:04:46,710
DAVID J. MALAN: OK, so let's make sure that the name is present
DAVID J. MALAN: 好的，让我们确保姓名存在，

1303
01:04:46,710 --> 01:04:48,420
and the sport is present, ideally.
并且最好还存在运动项目。

1304
01:04:48,420 --> 01:04:51,240
So let's actually validate the user's input just like get int
所以让我们实际上验证用户输入，就像第一周的 get int 函数一样。

1305
01:04:51,240 --> 01:04:52,440
did back in week one.
就像第一周的 get int 函数一样。

1306
01:04:52,440 --> 01:04:56,340
Just like get string, get float, and all of those,
就像 get string 函数、get float 函数以及所有这些函数一样，

1307
01:04:56,340 --> 01:04:58,510
they made sure that you actually got input.
它们确保你确实获得了输入。

1308
01:04:58,510 --> 01:05:00,250
So there's a bunch of ways I can do this,
所以有很多方法可以做到这一点，

1309
01:05:00,250 --> 01:05:03,210
but I'm going to go ahead and take a relatively canonical approach.
但我将使用一种比较标准的方法。

1310
01:05:03,210 --> 01:05:09,450
If not request.form.get, quote, unquote, "name",
如果 request.form.get 函数获取到的 "name" 值不存在，

1311
01:05:09,450 --> 01:05:12,990
I'm going to go ahead and then return, how about let's just see,
我将继续执行并返回，让我们看看，

1312
01:05:12,990 --> 01:05:17,320
failure, quote, unquote, "failure" just as a quick and dirty solution.
返回 “failure” 作为快速解决方案。

1313
01:05:17,320 --> 01:05:22,830
So if it is not the case that there is a value for the name field,
所以如果姓名字段没有值，

1314
01:05:22,830 --> 01:05:24,782
just assume that there's a failure.
就假设出现了错误。

1315
01:05:24,782 --> 01:05:25,740
So how can I test this?
那么我该如何测试呢？

1316
01:05:25,740 --> 01:05:27,370
Let me go back to the other tab.
让我回到另一个标签页。

1317
01:05:27,370 --> 01:05:30,840
Let me go ahead and not type in my name and click Register.
让我不输入我的名字，然后点击注册。

1318
01:05:30,840 --> 01:05:33,480
And notice-- well, OK, I need to get rid of the required
然后你会注意到 - 好的，我需要去掉 required 属性，

1319
01:05:33,480 --> 01:05:35,952
if I actually want to see this thing go through.
如果我想让它提交。

1320
01:05:35,952 --> 01:05:36,660
So you know what?
所以，你知道吗？

1321
01:05:36,660 --> 01:05:38,820
Let's just change the template.
让我们改变一下模板。


1322
01:05:38,820 --> 01:05:41,130
Let's get rid of that so I don't have to hack into it
让我们摆脱它，这样我就不用再入侵它了

1323
01:05:41,130 --> 01:05:42,520
and delete things manually.
手动删除内容。

1324
01:05:42,520 --> 01:05:43,860
So let me reload the form.
所以让我重新加载表单。

1325
01:05:43,860 --> 01:05:45,260
Let me not type a name.
让我不输入姓名。

1326
01:05:45,260 --> 01:05:46,240
Click register.
点击注册。

1327
01:05:46,240 --> 01:05:48,220
And, oh, dang it.
而且，哦，该死。

1328
01:05:48,220 --> 01:05:50,740
405, Method Not Allowed.
405，方法不允许。

1329
01:05:50,740 --> 01:05:54,590
What's the fix for this in my app.py?
我的 app.py 中的修复方法是什么？

1330
01:05:54,590 --> 01:05:56,105
What line number needs to change?
哪一行需要更改？

1331
01:05:58,930 --> 01:06:00,975
Yeah, over there.
是的，在那边。

1332
01:06:00,975 --> 01:06:01,850
AUDIENCE: [INAUDIBLE]
观众： [听不清]

1333
01:06:01,850 --> 01:06:05,255
DAVID J. MALAN: Yeah, I need to allow both or at least POST at this point.
戴维·马兰：是的，我需要允许这两种方法，或者至少允许 POST 方法。

1334
01:06:05,255 --> 01:06:06,630
So I'll keep it more restrictive.
所以我会把它限制得更严格。

1335
01:06:06,630 --> 01:06:10,430
So methods equals and then in a list, quote, unquote,
所以 methods 等于，然后在一个列表中，引号，引号，

1336
01:06:10,430 --> 01:06:14,270
POST because that's what I'm using in my template as the method.
POST，因为这是我在模板中使用的那个方法。

1337
01:06:14,270 --> 01:06:15,680
All right, let's try again.
好的，让我们再试一次。

1338
01:06:15,680 --> 01:06:17,070
I'm going to go back.
我要返回。

1339
01:06:17,070 --> 01:06:19,850
I'm going to not type a name, and I'm going to click Register.
我不输入姓名，然后点击注册。

1340
01:06:19,850 --> 01:06:22,730
OK, so we caught the fact that the name was not provided.
好的，所以我们发现了没有提供姓名的事实。

1341
01:06:22,730 --> 01:06:25,220
Let's now go back and try again and actually cooperate.
现在让我们返回并再次尝试，并真正配合。

1342
01:06:25,220 --> 01:06:28,830
David, Register, OK, now internal server error.
戴维，注册，好的，现在内部服务器错误。

1343
01:06:28,830 --> 01:06:30,800
So something's gone even worse here.
所以这里有些事情变得更糟了。

1344
01:06:30,800 --> 01:06:32,840
And, unfortunately, you're going to start to see
不幸的是，你将在接下来的几周里开始看到

1345
01:06:32,840 --> 01:06:34,710
this over the next couple of weeks.
这种现象。

1346
01:06:34,710 --> 01:06:39,230
This is like Python and the web's equivalent of segmentation fault.
这就像 Python 和 web 中的段错误一样。

1347
01:06:39,230 --> 01:06:42,690
It's a different issue, but it's going to hurt just the same, unfortunately.
这是一个不同的问题，但不幸的是，它会造成同样的伤害。

1348
01:06:42,690 --> 01:06:44,302
So let's go back to VS Code here.
所以让我们回到这里的 VS Code。

1349
01:06:44,302 --> 01:06:47,510
Nothing seems to have gone wrong, but that's because I've hidden my terminal.
似乎没有任何错误，但这是因为我隐藏了我的终端。

1350
01:06:47,510 --> 01:06:50,450
Let me open my terminal window, and, oh, OK, so
让我打开我的终端窗口，哦，好的，所以

1351
01:06:50,450 --> 01:06:54,470
it looks like I made a crazy number of mistakes here somehow.
看来我在这里犯了很多错误。

1352
01:06:54,470 --> 01:06:58,130
But let me go ahead and focus on--
但让我继续关注 -

1353
01:06:58,130 --> 01:07:00,500
and the formatting's a little weird for some reason.
而且格式有些奇怪。

1354
01:07:00,500 --> 01:07:01,340
Here we go.
好了。

1355
01:07:01,340 --> 01:07:04,290
It's a little cryptic at first glance, but here's
乍一看有点难以理解，但这里就是

1356
01:07:04,290 --> 01:07:06,390
the most important line of output.
最重要的输出行。

1357
01:07:06,390 --> 01:07:09,810
The view function for, quote, unquote, "Register" did not
"注册" 的视图函数没有

1358
01:07:09,810 --> 01:07:11,560
return a valid response.
返回有效的响应。

1359
01:07:11,560 --> 01:07:13,440
So you're not going to see this one too often
所以你不太可能经常看到这个

1360
01:07:13,440 --> 01:07:16,740
most likely unless you do what I did, which was you didn't have an else.
除非你像我一样，没有 else 语句。

1361
01:07:16,740 --> 01:07:19,110
You didn't handle the situation where there is a name
你没有处理存在姓名的情况

1362
01:07:19,110 --> 01:07:20,800
and something should've come back.
应该返回一些东西。

1363
01:07:20,800 --> 01:07:21,900
So maybe I could do this.
所以也许我可以这样做。

1364
01:07:21,900 --> 01:07:25,007
By default, I could just say something like success as a catch
默认情况下，我可以简单地用 success 作为 catch

1365
01:07:25,007 --> 01:07:27,090
all even though I've not done anything useful yet.
尽管我还没有做任何有用的事情。

1366
01:07:27,090 --> 01:07:28,030
Let me try this again.
让我再试一次。

1367
01:07:28,030 --> 01:07:28,920
Let me go back.
让我返回。

1368
01:07:28,920 --> 01:07:30,480
David is typed in.
输入了 David。

1369
01:07:30,480 --> 01:07:32,310
No sport, Register.
没有运动，注册。

1370
01:07:32,310 --> 01:07:34,110
OK, so now I'm making progress again.
好的，现在我又在取得进展了。

1371
01:07:34,110 --> 01:07:38,980
So just like week one stuff, I make sure I'm always returning some value,
就像第一周的代码一样，我确保我总是返回一些值，

1372
01:07:38,980 --> 01:07:41,070
whether it's success or failure in this case.
在本例中，无论是成功还是失败。

1373
01:07:41,070 --> 01:07:43,200
All right, let's do something a little more interesting, though.
好吧，让我们做一些更有趣的事情。

1374
01:07:43,200 --> 01:07:44,140
I could do this.
我可以这样做。

1375
01:07:44,140 --> 01:07:49,620
How about elif not request.form.get sport.
elif not request.form.get sport 怎么样？

1376
01:07:49,620 --> 01:07:52,950
I could similarly return failure.
我可以类似地返回 failure。

1377
01:07:52,950 --> 01:07:56,600
But this is a little silly to have two nearly identical conditionals.
但有两个几乎相同的条件语句有点傻。

1378
01:07:56,600 --> 01:07:58,350
So, actually, let me just tighten this up.
所以，实际上，让我把它紧凑一些。

1379
01:07:58,350 --> 01:08:01,980
Let me go ahead and, instead, get rid of those two lines
让我继续，而不是删除这两行

1380
01:08:01,980 --> 01:08:09,330
and maybe just do something like this in Python or not request.form.get sport.
也许只是在 Python 中做这样的事情，或者不是 request.form.get sport。

1381
01:08:09,330 --> 01:08:12,990
This is maybe the tightest way just to ask two questions that are essentially
这可能是最紧凑的方式，只需要问两个本质上

1382
01:08:12,990 --> 01:08:15,060
the same but for two different keys.
相同但针对两个不同键的问题。

1383
01:08:15,060 --> 01:08:17,850
But returning, quote, unquote, "failure"'s a little weak.
但返回 "failure" 有点弱。

1384
01:08:17,850 --> 01:08:19,170
That's not a valid web page.
那不是一个有效的网页。

1385
01:08:19,170 --> 01:08:20,830
It's literally the word failure.
它就是 failure 这个词。

1386
01:08:20,830 --> 01:08:25,020
So maybe we do this, render_template, quote, unquote, "failure.html".
所以也许我们这样做，render_template，引号，引号，"failure.html"。

1387
01:08:25,020 --> 01:08:25,770
And you know what?
你知道吗？

1388
01:08:25,770 --> 01:08:30,609
Down here, render_template success.html.
这里，render_template success.html。

1389
01:08:30,609 --> 01:08:33,240
So we actually send the browser a valid web page, not just
所以我们实际上向浏览器发送了一个有效的网页，而不仅仅是

1390
01:08:33,240 --> 01:08:34,529
a single English word.
一个英文单词。

1391
01:08:34,529 --> 01:08:36,487
Of course, we're going to need those templates.
当然，我们需要这些模板。

1392
01:08:36,487 --> 01:08:39,300
So let me go in and do something like this.
所以让我进去做这样的事情。

1393
01:08:39,300 --> 01:08:45,630
If I go into, how about, my terminal window.
如果我进入，我的终端窗口怎么样。

1394
01:08:45,630 --> 01:08:48,479
I need another terminal because Flask is still running in that one.
我需要另一个终端，因为 Flask 还在那个终端中运行。

1395
01:08:48,479 --> 01:08:53,640
Let me go into froshims and let me do code of templates success.html.
让我进入 froshims 并让我做 templates success.html 的代码。

1396
01:08:53,640 --> 01:08:56,859
I'm going to save a few keystrokes and copy-paste all that stuff from index.
我要保存一些按键并从 index 中复制粘贴所有这些东西。

1397
01:08:56,859 --> 01:08:58,050
But I'm going to delete most of it.
但我将删除大部分内容。

1398
01:08:58,050 --> 01:09:00,092
And I'm just going to keep it super simple today.
我今天只是把它变得超级简单。

1399
01:09:00,092 --> 01:09:03,147
You are registered.
您已注册。

1400
01:09:03,147 --> 01:09:05,189
And then-- well, really, not really because we're
然后 - 嗯，实际上，不是，因为我们

1401
01:09:05,189 --> 01:09:07,731
not going to bother doing anything yet with the user's input.
现在不打算理会用户的输入。

1402
01:09:07,731 --> 01:09:09,670
Let me do something similar now for failure.
现在让我对 failure 做类似的事情。

1403
01:09:09,670 --> 01:09:13,500
So code templates failure.html.
所以 templates failure.html 的代码。

1404
01:09:13,500 --> 01:09:15,149
I'm going to copy-paste the same thing.
我要复制粘贴相同的内容。

1405
01:09:15,149 --> 01:09:18,040
And now I'm going to say the opposite, You are not registered.
现在我要说相反的话，您没有注册。

1406
01:09:18,040 --> 01:09:20,040
But I'm not going to be very useful, and I'm not
但我不会很有用，而且我不会

1407
01:09:20,040 --> 01:09:22,800
going to even yet tell the user what they have done wrong.
现在就告诉用户他们做错了什么。

1408
01:09:22,800 --> 01:09:25,500
But at least now we have the beginnings of a froshims app.
但至少现在我们有了 froshims 应用的雏形。

1409
01:09:25,500 --> 01:09:27,930
So let me go back, reload everything.
所以让我返回，重新加载所有内容。

1410
01:09:27,930 --> 01:09:31,109
Let me not cooperate at all and click Register.
让我完全不配合，然后点击注册。

1411
01:09:31,109 --> 01:09:34,029
OK, so you are not registered because of some failure.
好的，所以您没有注册，因为遇到了一些错误。

1412
01:09:34,029 --> 01:09:34,920
I'll type in my name.
我输入我的姓名。

1413
01:09:34,920 --> 01:09:36,370
OK, let's at least do that much.
好的，至少做这些吧。

1414
01:09:36,370 --> 01:09:37,470
I'm still not registered.
我仍然没有注册。

1415
01:09:37,470 --> 01:09:38,279
Let's go back.
让我们返回。

1416
01:09:38,279 --> 01:09:40,470
Let's leave David and choose soccer.
让我们离开 David 并选择足球。

1417
01:09:40,470 --> 01:09:43,270
Now, OK, now you are registered.
现在，好的，现在您已注册。

1418
01:09:43,270 --> 01:09:45,779
So I got the success template instead.
所以，我得到了 success 模板。

1419
01:09:45,779 --> 01:09:49,560
All right, so that seems to be better progress or at least the beginnings
好吧，所以这似乎是更好的进展，或者至少是一个

1420
01:09:49,560 --> 01:09:51,750
of an actually useful application.
真正有用的应用程序的开始。

1421
01:09:51,750 --> 01:09:53,860
But let's actually do more validation.
但让我们实际进行更多验证。


1422
01:09:53,860 --> 01:09:54,360
Why?
为什么？

1423
01:09:54,360 --> 01:09:56,250
Because notice what the human could still do.
因为注意人类仍然可以做什么。

1424
01:09:56,250 --> 01:09:58,800
Suppose that, out of principle, you really
假设，出于原则，你真的

1425
01:09:58,800 --> 01:10:01,780
want to register for a different sport.
想注册一个不同的运动。

1426
01:10:01,780 --> 01:10:03,750
So you're not a fan of soccer.
所以你不喜欢足球。

1427
01:10:03,750 --> 01:10:05,220
You want American football.
你想要美式足球。

1428
01:10:05,220 --> 01:10:07,770
So let's right-click or Control-click on that.
所以让我们右键单击或按住Control键单击它。

1429
01:10:07,770 --> 01:10:08,880
Choose Inspect.
选择检查。

1430
01:10:08,880 --> 01:10:10,650
And you can even do this client side.
你甚至可以在客户端这样做。

1431
01:10:10,650 --> 01:10:12,870
Let me write click on the Select menu.
让我右键单击“选择”菜单。

1432
01:10:12,870 --> 01:10:15,690
In Chrome, let me select Edit as HTML.
在Chrome中，让我选择“以HTML编辑”。

1433
01:10:15,690 --> 01:10:18,550
You can start adding any HTML you want.
你可以开始添加任何你想要的HTML。

1434
01:10:18,550 --> 01:10:24,420
So let me add an option football close option enter.
所以让我添加一个选项“足球”，然后关闭选项并按回车键。

1435
01:10:24,420 --> 01:10:28,600
And, aha, now you have to support football as well.
啊哈，现在你也必须支持足球了。

1436
01:10:28,600 --> 01:10:32,140
Of course, this is going to work because if I type in David and football
当然，这会起作用，因为如果我在“姓名”中输入“David”和“足球”，

1437
01:10:32,140 --> 01:10:34,890
and Register even though I'm not doing anything with the response,
然后点击“注册”，即使我没有对响应做任何操作，

1438
01:10:34,890 --> 01:10:38,190
I got through that validation filter because I was just
我通过了那个验证过滤器，因为我只是

1439
01:10:38,190 --> 01:10:40,210
checking that there's an actual value.
检查是否有实际的值。

1440
01:10:40,210 --> 01:10:45,960
So this is now no longer really correct because some annoying first year who's
所以现在这不再正确了，因为一些烦人的大一新生正在

1441
01:10:45,960 --> 01:10:48,000
just taken CS50 is now going to do something
刚学习了CS50，现在就要对我的网页应用程序做一些

1442
01:10:48,000 --> 01:10:49,410
like this to my web application.
像这样的操作。

1443
01:10:49,410 --> 01:10:52,410
And we're going to have bogus data in the database, ultimately.
最终，我们的数据库中将会有虚假数据。

1444
01:10:52,410 --> 01:10:56,537
So how do you defend against this properly when it really is that easy?
所以，当它真的这么容易的时候，你如何正确地防御它？

1445
01:10:56,537 --> 01:10:59,370
And, honestly, as soon as you put a web application on the internet,
老实说，一旦你把网页应用程序放到互联网上，

1446
01:10:59,370 --> 01:11:02,580
bad things will happen to it because people with too much free time.
就会有不好的事情发生，因为人们有太多空闲时间。

1447
01:11:02,580 --> 01:11:06,077
So how do we defend against it?
所以我们如何防御它？

1448
01:11:06,077 --> 01:11:07,410
What would be a better approach?
有什么更好的方法吗？

1449
01:11:07,410 --> 01:11:08,336
Yeah.
是的。

1450
01:11:08,336 --> 01:11:10,320
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1451
01:11:13,300 --> 01:11:15,730
DAVID J. MALAN: Nice, so add another conditional such
大卫·马兰：不错，所以添加另一个条件，例如

1452
01:11:15,730 --> 01:11:18,490
that the only things allowed are the sports we actually
只允许我们实际上提供的运动。

1453
01:11:18,490 --> 01:11:19,753
are offering this semester.
在这一学期提供的运动。

1454
01:11:19,753 --> 01:11:20,920
And, in fact, you know what?
实际上，你知道吗？

1455
01:11:20,920 --> 01:11:23,080
We can take this one step further.
我们可以更进一步。

1456
01:11:23,080 --> 01:11:28,210
The fact that I hardcoded into my form, my select menu, those three sports--
我将这三种运动硬编码到我的表单中，我的下拉菜单中——

1457
01:11:28,210 --> 01:11:31,340
it'd be nice to maybe factor out those sports altogether
把这些运动全部提取出来，这样会比较好。

1458
01:11:31,340 --> 01:11:34,900
so that I have one authoritative list that's used for generating the form
这样我就可以有一个权威列表，用于生成表单

1459
01:11:34,900 --> 01:11:36,980
and also validating the user's input.
并验证用户的输入。

1460
01:11:36,980 --> 01:11:37,750
So let me do this.
所以让我这样做。

1461
01:11:37,750 --> 01:11:39,790
In app.py, let me go in here.
在app.py中，让我进入这里。

1462
01:11:39,790 --> 01:11:43,660
And I can put this, how about, the top of my file, to be conventional.
我可以在文件顶部放置它，这样比较规范。

1463
01:11:43,660 --> 01:11:46,390
I'm going to create a global variable called sports.
我将创建一个名为“sports”的全局变量。

1464
01:11:46,390 --> 01:11:49,900
By convention, in Python, I'm going to make it all uppercase even though that
按照惯例，在Python中，我将它全部大写，即使这

1465
01:11:49,900 --> 01:11:51,760
doesn't mean anything functional.
在功能上没有任何意义。

1466
01:11:51,760 --> 01:11:53,680
There's no const keyword in Python.
Python中没有const关键字。

1467
01:11:53,680 --> 01:11:56,770
So it's more on the honor system that no one else should touch this.
所以更多的是靠自觉，其他人不应该碰它。

1468
01:11:56,770 --> 01:11:59,470
But, inside of my list here, let's go ahead
但是，在我的列表中，让我们继续

1469
01:11:59,470 --> 01:12:03,380
and do only the official three, basketball, soccer,
只做官方的三个，篮球、足球，

1470
01:12:03,380 --> 01:12:05,270
and ultimate Frisbee.
和极限飞盘。

1471
01:12:05,270 --> 01:12:09,340
So now I have a Python list of values that it
所以现在我有一个Python值列表，它

1472
01:12:09,340 --> 01:12:12,350
would be nice to use to generate that other form.
可以用它来生成另一个表单。

1473
01:12:12,350 --> 01:12:13,940
So this is maybe nonobvious.
所以这可能不太明显。

1474
01:12:13,940 --> 01:12:16,680
But I think it's just an application of past ideas.
但我认为这只是对以前想法的应用。

1475
01:12:16,680 --> 01:12:17,690
What if I do this?
如果我这样做呢？

1476
01:12:17,690 --> 01:12:21,140
What if I pass into my index.html template
如果我将它传递到我的index.html模板中

1477
01:12:21,140 --> 01:12:25,700
a placeholder called sports and set it equal to the value
一个名为“sports”的占位符，并将它设置为该值

1478
01:12:25,700 --> 01:12:28,100
of that global variable sports.
全局变量“sports”的值。

1479
01:12:28,100 --> 01:12:30,950
Now, I'm trying to adhere to best practices.
现在，我正在努力遵循最佳实践。

1480
01:12:30,950 --> 01:12:33,300
The placeholder is called sports in lowercase.
占位符名为“sports”，是小写。

1481
01:12:33,300 --> 01:12:36,260
But the actual variable I called all uppercase just
但我实际调用的变量全部是大写，只是

1482
01:12:36,260 --> 01:12:39,470
to make clear that it's a constant even though that's on the honor system.
为了清楚地表明它是一个常量，即使这只是靠自觉。

1483
01:12:39,470 --> 01:12:40,700
But this too is conventional.
但这也很常规。

1484
01:12:40,700 --> 01:12:43,910
This is a Pythonic way or a Flask-centric way to do this.
这是Pythonic方法或Flask-centric方法。

1485
01:12:43,910 --> 01:12:48,720
But now, in index.html, this is where Jinja gets interesting.
但是现在，在index.html中，Jinja就变得有趣了。

1486
01:12:48,720 --> 01:12:51,530
This lightweight syntax for using placeholders
这种使用占位符的轻量级语法

1487
01:12:51,530 --> 01:12:55,110
gets interesting because I can now do something like this.
变得有趣，因为我现在可以做这样的操作。

1488
01:12:55,110 --> 01:12:57,170
I'm going to delete all three of the sports
我将删除所有三个运动，

1489
01:12:57,170 --> 01:13:02,180
but not the disabled option, which is just the placeholder text, inside
但不是“禁用”选项，它只是占位符文本，在

1490
01:13:02,180 --> 01:13:03,080
of this select menu.
这个下拉菜单中。

1491
01:13:03,080 --> 01:13:04,310
Now I'm going to do this.
现在我将做以下操作。

1492
01:13:04,310 --> 01:13:08,300
Just like Python, I'm going to say for sport
就像Python一样，我将说“for sport”

1493
01:13:08,300 --> 01:13:13,190
in sports using the curly brace notation and the percent signs, which
在“sports”中，使用花括号和百分号，它们是

1494
01:13:13,190 --> 01:13:18,800
are Jinja specific even though Jinja and Python use almost the same syntax.
Jinja特有的，尽管Jinja和Python使用几乎相同的语法。

1495
01:13:18,800 --> 01:13:20,300
And that's one of the upsides of it.
这是它的一大优势。

1496
01:13:20,300 --> 01:13:21,592
You're not learning two things.
你没有学习两件事。

1497
01:13:21,592 --> 01:13:25,250
You're learning 1.1 new things.
你学习了1.1件新事物。

1498
01:13:25,250 --> 01:13:27,980
endfor, which looks stupid, but this is a convention
“endfor”，看起来很愚蠢，但这是

1499
01:13:27,980 --> 01:13:31,070
in a lot of languages to literally say end and the name of the keyword
许多语言中的惯例，就是说“end”和要结束的关键字的名称，

1500
01:13:31,070 --> 01:13:33,080
that you are ending with no space.
之间没有空格。

1501
01:13:33,080 --> 01:13:38,780
Inside of this Jinja loop, I'm going to write an option element once, option.
在这个Jinja循环中，我将写一个option元素，option。

1502
01:13:38,780 --> 01:13:41,870
And then, inside of the two option tags, I'm
然后，在两个option标签内，我将

1503
01:13:41,870 --> 01:13:44,540
going to do my placeholder syntax with two curly braces
使用我的占位符语法，用两个花括号

1504
01:13:44,540 --> 01:13:47,450
and just say sport like this.
然后就说“sport”就行了。

1505
01:13:47,450 --> 01:13:52,250
And if I now go back into my browser tab and hit back here
如果我现在回到浏览器标签页，然后点击后退按钮，

1506
01:13:52,250 --> 01:13:55,130
and I reload the page, notice that I still
然后我重新加载页面，注意我仍然

1507
01:13:55,130 --> 01:13:58,250
have a dropdown that's still automatically populated
有一个下拉菜单，它仍然自动填充

1508
01:13:58,250 --> 01:14:02,330
because indeed if I go to View page source and look at the actual HTML,
因为实际上，如果我查看页面源代码并查看实际的HTML，

1509
01:14:02,330 --> 01:14:04,610
there's some extra weird whitespace, but that's
有一些额外的奇怪空白，但那是

1510
01:14:04,610 --> 01:14:06,230
because I hit Enter in my template.
因为我在模板中按了回车键。

1511
01:14:06,230 --> 01:14:09,440
And it's generating literally what I put inside of that Jinja tag.
它正在生成我放在那个Jinja标签里面的内容。

1512
01:14:09,440 --> 01:14:12,230
It's generating that list of sports.
它正在生成那个运动列表。

1513
01:14:12,230 --> 01:14:13,070
And it turns out--
事实证明——

1514
01:14:13,070 --> 01:14:15,470
I'm going to do this just to be thorough.
为了完整起见，我将这样做。

1515
01:14:15,470 --> 01:14:18,410
It turns out that the option element technically lets
事实证明，option元素在技术上允许你

1516
01:14:18,410 --> 01:14:21,590
you specify a value for that sport.
为该运动指定一个值。

1517
01:14:21,590 --> 01:14:23,660
Often, they're one and the same.
通常，它们是一样的。

1518
01:14:23,660 --> 01:14:26,780
What the human sees is what the value of the option is.
人类看到的就是option的值。


1519
01:14:26,780 --> 01:14:29,660
It's kind of like the a href thing in the world of URLs.
它就像 URL 世界中的 a href 标签一样。

1520
01:14:29,660 --> 01:14:31,787
But this is not going to change the functionality.
但这不会改变功能。

1521
01:14:31,787 --> 01:14:32,870
But it's going to do this.
但它会做这件事。

1522
01:14:32,870 --> 01:14:37,910
If I reload now and I View page source, this is maybe a more common way
如果我现在重新加载并查看页面源代码，这可能是一个更常见的方法

1523
01:14:37,910 --> 01:14:41,150
to see options where, in orange, in my browser,
查看选项，在我的浏览器中，橙色部分

1524
01:14:41,150 --> 01:14:43,160
is what the server is going to receive.
是服务器将接收到的内容。

1525
01:14:43,160 --> 01:14:45,260
In white is what the human's going to see.
白色部分是用户将看到的。

1526
01:14:45,260 --> 01:14:49,130
They don't have to be one and the same for reasons we'll soon see.
它们不必相同，原因我们很快就会看到。

1527
01:14:49,130 --> 01:14:51,200
But what's nice now is that if I do actually
但现在好的地方是，如果我真的

1528
01:14:51,200 --> 01:14:54,560
want to officially support American football, I can go in here,
想正式支持美式足球，我可以在这里，

1529
01:14:54,560 --> 01:14:56,840
add "football", quote, unquote, to my list,
将 "football" 添加到我的列表中，

1530
01:14:56,840 --> 01:14:59,480
go back to the form, reload, and voila.
返回表单，重新加载，瞧！

1531
01:14:59,480 --> 01:15:01,070
Now I have a list of all four.
现在我有四个项目的列表。

1532
01:15:01,070 --> 01:15:03,690
But I haven't done the second side of what you proposed,
但我还没有做你提议的第二件事，

1533
01:15:03,690 --> 01:15:05,550
which is actually validate those sports.
那就是实际验证这些运动项目。

1534
01:15:05,550 --> 01:15:06,320
So let me do that.
所以我做一下。

1535
01:15:06,320 --> 01:15:08,000
Let me go over to app.py.
我到 app.py 文件。

1536
01:15:08,000 --> 01:15:12,120
And, in app.py-- and we'll no longer support football there--
在 app.py 文件中，我们不再支持足球了——

1537
01:15:12,120 --> 01:15:14,480
let's do this in my registration route.
我们可以在我的注册路由中做这件事。

1538
01:15:14,480 --> 01:15:18,260
So, instead of just checking, is there a value?
所以，我们不再只是检查是否存在值，

1539
01:15:18,260 --> 01:15:20,990
And the whole point of using not is kind of like in C
使用 not 的关键在于，它就像在 C 语言中一样

1540
01:15:20,990 --> 01:15:23,520
where you use an exclamation point to invert the meaning.
使用感叹号来反转含义。

1541
01:15:23,520 --> 01:15:27,650
So if it's empty but it's not, then it's-- the whole value is true.
所以，如果它为空但又不为空，那么它的整个值就是真。

1542
01:15:27,650 --> 01:15:29,130
Let's get rid of this line.
我们去掉这一行。

1543
01:15:29,130 --> 01:15:31,500
And let's instead do something like this.
我们改成做这样的事。

1544
01:15:31,500 --> 01:15:35,810
How about if not request.form.get name.
如果 request.form.get name 不为空的话

1545
01:15:35,810 --> 01:15:37,940
So let's still just check for a name.
所以我们仍然只检查是否包含名称。

1546
01:15:37,940 --> 01:15:46,370
Or request.form.get, quote, unquote, "sport" is not in the sports list.
或者 request.form.get 的“sport”不在运动项目列表中。

1547
01:15:46,370 --> 01:15:48,870
Now go ahead and say there's a failure.
现在说出现了错误。

1548
01:15:48,870 --> 01:15:49,830
So what does this mean?
这意味着什么呢？

1549
01:15:49,830 --> 01:15:54,365
If I go back to the browser and reload, I now see only three sports.
如果我回到浏览器并重新加载，现在我只看到三种运动项目。

1550
01:15:54,365 --> 01:15:55,490
And I think this will work,
我认为这会起作用，

1551
01:15:55,490 --> 01:15:56,480
OK, David.
好的，大卫。

1552
01:15:56,480 --> 01:16:00,240
We'll register, say, for soccer, Register, and it seems to work.
我们注册，比如足球，注册，它似乎可以正常工作。

1553
01:16:00,240 --> 01:16:02,720
But if some hacker comes along and really
但如果一些黑客来这里，真的

1554
01:16:02,720 --> 01:16:05,810
wants to register for American football, I'll right-click there.
想注册美式足球，我会在那里右键单击。

1555
01:16:05,810 --> 01:16:07,160
I'll inspect this.
我将检查它。

1556
01:16:07,160 --> 01:16:10,100
I'm going to hack the form and add a bogus option
我要攻击表单并添加一个虚假选项

1557
01:16:10,100 --> 01:16:12,470
at the very end just for myself.
在最后，只为了我自己。

1558
01:16:12,470 --> 01:16:17,340
And, down here, I'm going to say option value equals, quote, unquote,
在下面，我将说 option value 等于，双引号，

1559
01:16:17,340 --> 01:16:19,560
"football".
“football”。

1560
01:16:19,560 --> 01:16:22,405
And then, inside of the option, I'm going
然后，在 option 内部，我将

1561
01:16:22,405 --> 01:16:25,530
to say football just to be consistent even though they're one and the same.
说足球，为了保持一致，尽管它们是一样的。

1562
01:16:25,530 --> 01:16:26,700
Save that.
保存。

1563
01:16:26,700 --> 01:16:28,740
Close the developer tools.
关闭开发者工具。

1564
01:16:28,740 --> 01:16:30,780
Choose the hacked option.
选择被攻击的选项。

1565
01:16:30,780 --> 01:16:34,240
Register, but, no, we caught it this time.
注册，但是，不，这次我们抓住了。

1566
01:16:34,240 --> 01:16:35,800
So this is hugely important.
所以，这一点非常重要。

1567
01:16:35,800 --> 01:16:38,490
And there are so many darn websites in the real world where
现实世界中有很多网站，

1568
01:16:38,490 --> 01:16:41,580
the programmers either don't know or don't care
程序员要么不知道，要么不在乎

1569
01:16:41,580 --> 01:16:43,920
to actually validate stuff server side.
实际在服务器端验证信息。

1570
01:16:43,920 --> 01:16:46,500
This is how servers quite often get hacked.
这就是服务器经常被攻击的方式。

1571
01:16:46,500 --> 01:16:50,250
You might have client-side validation using HTML or JavaScript.
你可能使用 HTML 或 JavaScript 进行客户端验证。

1572
01:16:50,250 --> 01:16:51,000
And it looks nice.
看起来不错。

1573
01:16:51,000 --> 01:16:51,760
It's immediate.
它很直接。

1574
01:16:51,760 --> 01:16:53,160
It's very pretty and graphical.
它非常漂亮和图形化。

1575
01:16:53,160 --> 01:16:56,700
But if you're not also paranoically checking on the server,
但如果你没有在服务器上进行偏执地检查，

1576
01:16:56,700 --> 01:16:58,500
this is indeed how servers get hacked.
这确实就是服务器被攻击的方式。

1577
01:16:58,500 --> 01:17:01,170
Or, at least in the best case here, your data set
或者，至少在最好的情况下，你的数据集

1578
01:17:01,170 --> 01:17:04,180
is sort of polluted with sports that you're not actually going to offer.
被你实际上不会提供的运动项目污染了。

1579
01:17:04,180 --> 01:17:06,097
So this is not a very harmful attack, but it's
所以这并不是一种非常有害的攻击，但它

1580
01:17:06,097 --> 01:17:10,410
representative of what kind of actions can be taken on your server
代表了在你的服务器上可以采取的行动类型

1581
01:17:10,410 --> 01:17:12,420
if you don't distrust the user.
如果你不信任用户。

1582
01:17:12,420 --> 01:17:14,530
So, unfortunately, this is kind of a negative day.
所以，不幸的是，这是有点消极的一天。

1583
01:17:14,530 --> 01:17:17,470
Never, ever trust user input.
永远不要信任用户输入。

1584
01:17:17,470 --> 01:17:20,950
We saw that already with SQL and injection attacks.
我们已经在 SQL 和注入攻击中看到了这一点。

1585
01:17:20,950 --> 01:17:23,080
All right, any other questions?
好了，还有其他问题吗？

1586
01:17:23,080 --> 01:17:26,810
Any questions thus far on this?
到目前为止，对此有任何问题吗？

1587
01:17:26,810 --> 01:17:30,340
Otherwise, we'll add a bit of spice in just a moment.
否则，我们过一会儿会添加一些调味料。

1588
01:17:30,340 --> 01:17:30,850
No?
没有？

1589
01:17:30,850 --> 01:17:32,920
All right, well, just to show you an alternative to this,
好的，为了向你展示一种替代方法，

1590
01:17:32,920 --> 01:17:35,740
let me change the GUI, the Graphical User Interface, slightly.
让我稍微改变一下 GUI，即图形用户界面。

1591
01:17:35,740 --> 01:17:37,720
Drop-down menus pretty compelling here.
下拉菜单在这里很有说服力。

1592
01:17:37,720 --> 01:17:39,340
But there's other techniques.
但还有其他技巧。

1593
01:17:39,340 --> 01:17:43,330
And we won't dwell on HTML tags, which you can pick up largely online.
我们不会过多关注 HTML 标签，你可以在网上找到很多关于它的信息。

1594
01:17:43,330 --> 01:17:47,650
But let me go into maybe index.html just to show you
但让我进入 index.html 文件，向你展示

1595
01:17:47,650 --> 01:17:49,870
one different approach here.
一种不同的方法。

1596
01:17:49,870 --> 01:17:53,020
And if you really like radio buttons, the little circles that
如果你真的喜欢单选按钮，那些小圆圈，

1597
01:17:53,020 --> 01:17:56,650
are mutually exclusive-- this is a throwback to radios, before my time,
是互斥的——这是一种对无线电的回归，在我那个时代之前，

1598
01:17:56,650 --> 01:17:59,680
in cars where, when you pushed the button for one radio station,
在汽车里，当你按下某个电台的按钮时，

1599
01:17:59,680 --> 01:18:02,200
it would pop out the buttons for another, essentially,
它会弹出另一个按钮，本质上是

1600
01:18:02,200 --> 01:18:05,050
for your favorite channels.
为了你的收藏频道。

1601
01:18:05,050 --> 01:18:08,690
Radio buttons are, by definition, therefore, mutually exclusive.
因此，根据定义，单选按钮是互斥的。

1602
01:18:08,690 --> 01:18:11,900
So if I want to see those radio buttons and not a select menu,
所以，如果我想看到那些单选按钮，而不是下拉菜单，

1603
01:18:11,900 --> 01:18:13,780
let me go into index.html.
让我进入 index.html 文件。

1604
01:18:13,780 --> 01:18:17,650
And, instead of this select menu, let me actually delete that.
然后，代替这个下拉菜单，我实际上删除它。

1605
01:18:17,650 --> 01:18:20,560
And even though this isn't going to be super pretty, let me do this.
尽管这看起来不太漂亮，但我这样做。

1606
01:18:20,560 --> 01:18:26,740
for sport in sports, just as before, endfor, just preemptively.
就像之前一样，for sport in sports，endfor，先做准备。

1607
01:18:26,740 --> 01:18:29,170
Inside of this Jinja loop, I'm going to do this.
在这个 Jinja 循环中，我要做这样的事。

1608
01:18:29,170 --> 01:18:30,980
I'm going to do an actual input tag.
我要添加一个真正的 input 标签。

1609
01:18:30,980 --> 01:18:32,300
But it's not going to be text.
但它不是文本。

1610
01:18:32,300 --> 01:18:33,950
But the name of this tag--
但这个标签的名称——

1611
01:18:33,950 --> 01:18:38,420
of this element is going to be sport.
这个元素的名称将是 sport。

1612
01:18:38,420 --> 01:18:43,160
The type of this element is going to be radio for radio buttons.
这个元素的类型将是 radio，用于单选按钮。

1613
01:18:43,160 --> 01:18:47,690
And the value of this button is going to be whatever that sport is.
这个按钮的值将是该运动项目。

1614
01:18:47,690 --> 01:18:51,320
But what the human is going to see next to the radio button to the right
但用户在单选按钮右边将看到的是

1615
01:18:51,320 --> 01:18:53,147
is the same thing, the name of the sport.
一样的东西，运动项目的名称。

1616
01:18:53,147 --> 01:18:54,980
So this is going to look a little different.
所以看起来有点不同。


1617
01:18:54,980 --> 01:18:58,250
And it is going to look ugly in my black and white viewport here with no CSS.
在我的黑白视图中，没有CSS，它看起来会很丑陋。

1618
01:18:58,250 --> 01:19:01,820
But it does speak to how you can change the user interface just using
但这说明你可以只使用

1619
01:19:01,820 --> 01:19:04,260
different building blocks.
不同的构建块来改变用户界面。

1620
01:19:04,260 --> 01:19:05,420
Let me reload.
让我重新加载一下。

1621
01:19:05,420 --> 01:19:07,565
And, OK, it's probably not the right call here
好吧，这可能不是这里正确的选择

1622
01:19:07,565 --> 01:19:09,440
because it's just kind of making things ugly.
因为它只是让东西看起来很丑。

1623
01:19:09,440 --> 01:19:13,640
But it's as simple as that because if I now click on this or this or this,
但就这么简单，因为如果我现在点击这个，或者这个，或者这个，

1624
01:19:13,640 --> 01:19:15,860
they're indeed mutually exclusive.
它们确实是互斥的。

1625
01:19:15,860 --> 01:19:20,300
However, suppose that you want to allow the particularly athletic first years
然而，假设你想要允许特别有运动天赋的大一新生

1626
01:19:20,300 --> 01:19:23,120
to sign up for not one but two sports or all three.
报名参加一项以上甚至三项运动。

1627
01:19:23,120 --> 01:19:25,760
In no case now can you support that right now.
现在你无法支持这种情况。

1628
01:19:25,760 --> 01:19:28,250
The workaround now for a bad website would
现在，对于一个糟糕的网站，解决方法是

1629
01:19:28,250 --> 01:19:31,302
be, oh, just go register twice, or go register three times.
哦，只需注册两次，或者注册三次。

1630
01:19:31,302 --> 01:19:33,260
It's not a huge deal because you just hit back.
这不是什么大问题，因为你只需点击后退。

1631
01:19:33,260 --> 01:19:34,880
And then you change the dropdown and submit.
然后你更改下拉菜单并提交。

1632
01:19:34,880 --> 01:19:36,780
You hit back you change the dropdown and submit.
你点击后退，更改下拉菜单并提交。

1633
01:19:36,780 --> 01:19:38,000
But that's just bad design.
但这仅仅是糟糕的设计。

1634
01:19:38,000 --> 01:19:39,900
Surely, we can do better than that.
当然，我们可以做得比这更好。

1635
01:19:39,900 --> 01:19:43,340
So, in fact, let's make one change here and use checkboxes.
所以，实际上，让我们在这里做一个改变，使用复选框。

1636
01:19:43,340 --> 01:19:46,310
And if you've never really thought hard about this in the web,
如果你从未在网页上认真考虑过这个问题，

1637
01:19:46,310 --> 01:19:50,000
radio buttons and checkboxes have this distinct property
单选按钮和复选框具有这种独特的属性

1638
01:19:50,000 --> 01:19:53,180
where the former is mutually exclusive, and the latter
前者是互斥的，而后者

1639
01:19:53,180 --> 01:19:58,100
is inclusive whereby you can check 0 or more of those boxes collectively.
是包含式的，你可以集体选中这些复选框中的零个或多个。

1640
01:19:58,100 --> 01:20:01,580
So if I actually just go into that same template
所以如果我实际上只是进入同一个模板

1641
01:20:01,580 --> 01:20:06,440
and change the type of this input from radio to checkbox
并将这个输入的类型从单选改为复选框

1642
01:20:06,440 --> 01:20:09,590
and then go back to the browser and reload,
然后返回浏览器并重新加载，

1643
01:20:09,590 --> 01:20:12,770
you immediately get what you and I see in the real world as checkboxes.
你立刻就会看到你和我在现实世界中所看到的复选框。

1644
01:20:12,770 --> 01:20:17,120
And the upside of this is that you can check now 0 or more of them.
而这样做的优势在于，你现在可以选中零个或多个复选框。

1645
01:20:17,120 --> 01:20:19,010
But the catch-- and this is subtle--
但问题是，这是微妙的，

1646
01:20:19,010 --> 01:20:23,880
the catch with our code right now is that we're only expecting one value.
我们目前的代码只期望一个值。

1647
01:20:23,880 --> 01:20:26,120
So it's a minor fix, but it's a useful thing to know.
所以这是一个小修复，但这是一个有用的东西需要知道。

1648
01:20:26,120 --> 01:20:31,010
If I go back to app.py, if I actually want to get all of the sports
如果我回到app.py，如果我实际上想要获取所有的运动

1649
01:20:31,010 --> 01:20:35,300
from the users, I'm going to have to change my validation slightly.
从用户那里，我将不得不稍微改变我的验证。

1650
01:20:35,300 --> 01:20:36,550
So I'm going to do this.
所以我会这样做。

1651
01:20:36,550 --> 01:20:39,460
I'm going to check for the presence of a name as before.
我将像以前一样检查名称是否存在。

1652
01:20:39,460 --> 01:20:42,280
But then I'm going to use a loop to validate the sports because I
但随后，我将使用一个循环来验证运动，因为我

1653
01:20:42,280 --> 01:20:44,697
don't want them to slip, like football, back into the list
不希望它们，例如足球，滑回列表中

1654
01:20:44,697 --> 01:20:45,800
even if it's not there.
即使它不在那里。

1655
01:20:45,800 --> 01:20:47,320
So I'm going to say this in Python.
所以我会在 Python 中这样说。

1656
01:20:47,320 --> 01:20:52,828
for each sport in request.form.getall.
对于 request.form.getall 中的每个运动。

1657
01:20:52,828 --> 01:20:57,370
If you know it's a checkbox, you want to get all of the checked values, not one,
如果你知道它是复选框，你想要获取所有选中的值，而不是一个，

1658
01:20:57,370 --> 01:21:01,030
for the sport parameter, then go ahead and do this.
对于运动参数，那么继续执行此操作。

1659
01:21:01,030 --> 01:21:06,130
If the current sport is not in that sports list up top,
如果当前运动不在上面的运动列表中，

1660
01:21:06,130 --> 01:21:10,440
then go ahead and return render_template failure.html.
那么继续执行并返回 render_template failure.html。

1661
01:21:13,780 --> 01:21:14,900
Did I make a mistake here?
我在这里犯错了吗？

1662
01:21:14,900 --> 01:21:16,340
I think we're good there.
我认为我们那里很好。

1663
01:21:16,340 --> 01:21:19,510
So we're checking against every value that was checked on the form.
所以我们正在检查表单上被选中的每个值。

1664
01:21:19,510 --> 01:21:20,770
Is it actually valid?
它实际上有效吗？

1665
01:21:20,770 --> 01:21:24,850
And so now if I go in here, reload, type in my name David, and I'll
所以现在如果我到这里，重新加载，输入我的名字 David，然后我会

1666
01:21:24,850 --> 01:21:28,030
just check one of them, for instance, because I've not hacked the form
只选中其中一个，例如，因为我没有破解表单

1667
01:21:28,030 --> 01:21:30,682
and added something bogus like football.
并添加了一些虚假的东西，比如足球。

1668
01:21:30,682 --> 01:21:32,140
Maybe someone was alluding to this.
也许有人暗示过这一点。

1669
01:21:32,140 --> 01:21:33,470
I see now an error.
我现在看到一个错误。

1670
01:21:33,470 --> 01:21:35,057
So let's do this together.
所以让我们一起做这个。

1671
01:21:35,057 --> 01:21:36,140
Not sure what I did wrong.
我不确定我做错了什么。

1672
01:21:36,140 --> 01:21:39,370
I'm going to open up my terminal and go to here.
我将打开我的终端并转到此处。

1673
01:21:39,370 --> 01:21:42,520
And, oh, interesting, my spacing's a little weird here.
而且，哦，有趣的是，我的间距在这里有点奇怪。

1674
01:21:42,520 --> 01:21:43,960
But attribute error.
但属性错误。

1675
01:21:43,960 --> 01:21:48,310
Immutable dictionary has no attribute getall.
不可变字典没有 getall 属性。

1676
01:21:48,310 --> 01:21:51,020
So this is me lying to you.
所以这是我在骗你。

1677
01:22:02,540 --> 01:22:03,740
I don't think so.
我不认为是这样。

1678
01:22:03,740 --> 01:22:07,040
But [INAUDIBLE], are you here?
但是 [听不清]，你在吗？

1679
01:22:07,040 --> 01:22:09,710
Did Flask change since I last did this?
自从我上次这样做以来，Flask 有变化吗？

1680
01:22:09,710 --> 01:22:12,460
No.
没有。

1681
01:22:12,460 --> 01:22:19,696
OK, so Flask post form getall.
好吧，所以 Flask 提交表单 getall。

1682
01:22:19,696 --> 01:22:21,220
All right, here we go.
好了，我们开始吧。

1683
01:22:21,220 --> 01:22:23,650
About 2012, this is probably out of date.
大约 2012 年，这可能已经过时了。

1684
01:22:23,650 --> 01:22:25,750
But ah.
但是啊。

1685
01:22:28,320 --> 01:22:30,330
You know, that's not a bad idea, OK.
你知道，那不是一个坏主意，好吧。

1686
01:22:38,390 --> 01:22:47,360
All right, OK, in Flask, how do I get all of the values
好了，好的，在 Flask 中，我如何获取所有值

1687
01:22:47,360 --> 01:22:56,240
from an HTML input of type checkbox from request.form?
来自 request.form 中类型为复选框的 HTML 输入？

1688
01:22:59,370 --> 01:23:01,890
Well, this is horrifying.
好吧，这太可怕了。

1689
01:23:01,890 --> 01:23:02,940
getlist!
getlist！

1690
01:23:02,940 --> 01:23:04,710
Damn it, OK.
该死，好吧。

1691
01:23:04,710 --> 01:23:05,940
What a good duck.
真是个好鸭子。

1692
01:23:05,940 --> 01:23:10,810
All right, so-- all right, so we'll rewind in time.
好了，所以，好了，所以我们将倒退回时间。

1693
01:23:10,810 --> 01:23:11,850
So thank you.
所以谢谢您。

1694
01:23:11,850 --> 01:23:15,161
[APPLAUSE]
[掌声]

1695
01:23:16,580 --> 01:23:17,660
So that's a good lesson.
所以这是一个很好的教训。

1696
01:23:17,660 --> 01:23:19,110
Just do as I do.
照我做就行了。

1697
01:23:19,110 --> 01:23:22,680
All right, so getlist will get you a list of all of those values.
好了，所以 getlist 会给你一个所有这些值的列表。

1698
01:23:22,680 --> 01:23:25,550
So now if I go ahead and register as David,
所以现在如果我继续以 David 的身份注册，

1699
01:23:25,550 --> 01:23:27,530
click just soccer without injecting something
只点击足球，不注入任何东西

1700
01:23:27,530 --> 01:23:29,812
like American football and Register, now I'm,
比如美式足球，然后注册，现在我

1701
01:23:29,812 --> 01:23:32,270
in fact, registered but not really, not really in the sense
实际上，已经注册了，但实际上没有，在某种意义上还没有

1702
01:23:32,270 --> 01:23:35,250
that we haven't actually done anything with the data.
我们没有真正对数据做任何事情。

1703
01:23:35,250 --> 01:23:38,540
So this is to say, ultimately, that there's a lot of these building blocks,
所以，最终，这意味着有许多这些构建块，

1704
01:23:38,540 --> 01:23:42,260
not only in HTML, which is mostly a throwback to last week but also now,
不仅在 HTML 中，它主要是对上周的回顾，而且现在，

1705
01:23:42,260 --> 01:23:45,530
in Flask, where you can process all of those building blocks
在 Flask 中，你可以处理所有这些构建块

1706
01:23:45,530 --> 01:23:48,200
and take control over what up, until now,
并控制直到现在

1707
01:23:48,200 --> 01:23:51,620
is usually the domain of Google or the websites that you actually use.
通常是 Google 或者你实际使用的网站的领域。

1708
01:23:51,620 --> 01:23:54,140
Now you actually have more of the building blocks via which
现在你实际上拥有更多构建块，通过它们

1709
01:23:54,140 --> 01:23:56,010
to implement these things yourself.
自己实现这些东西。

1710
01:23:56,010 --> 01:23:59,300
So let's go ahead and add some final features to froshims
所以让我们继续为 Froshims 添加一些最终的功能

1711
01:23:59,300 --> 01:24:02,150
here where we're actually doing something with the results.
在这里，我们实际上对结果做了一些事情。

1712
01:24:02,150 --> 01:24:04,650
And, for this, I'm going to open up a version in advance.
而且，为此，我将提前打开一个版本。

1713
01:24:04,650 --> 01:24:06,620
So I'm going to go over to VS Code here.
所以我要转到这里的 VS Code。

1714
01:24:06,620 --> 01:24:13,140
And let me go ahead and close these tabs but go into my second terminal window.
让我继续关闭这些标签，但进入我的第二个终端窗口。


1715
01:24:13,140 --> 01:24:15,380
And I'm going to go into today's src9 directory.
我要进入到今天的 src9 目录。

1716
01:24:15,380 --> 01:24:18,120
And I'm going to go into version 4 of froshims, which has
我将进入 froshims 的版本 4，其中包含

1717
01:24:18,120 --> 01:24:20,138
everything we just did plus a bit more.
我们刚刚做的一切，外加一些额外的东西。

1718
01:24:20,138 --> 01:24:22,180
In particular, I'm going to go ahead and do this.
特别是，我将继续这样做。

1719
01:24:22,180 --> 01:24:24,330
I'm going to show you app.py, which, additionally,
我将向大家展示 app.py，它还

1720
01:24:24,330 --> 01:24:25,680
has some comments throughout.
包含一些贯穿始终的注释。

1721
01:24:25,680 --> 01:24:31,860
But, in app.py, what you'll notice is that, after all of my validation,
但是在 app.py 中，你会注意到，在我完成所有验证之后，

1722
01:24:31,860 --> 01:24:34,630
I'm actually got a couple of new features here.
我实际上在这里添加了一些新功能。

1723
01:24:34,630 --> 01:24:38,040
It's a little weak in terms of UI to just tell the user failure.
仅仅告诉用户失败，在用户界面方面有点弱。

1724
01:24:38,040 --> 01:24:39,210
You are not registered.
您尚未注册。

1725
01:24:39,210 --> 01:24:41,010
That's all my template previously did.
这就是我之前使用的模板所做的全部内容。

1726
01:24:41,010 --> 01:24:45,360
But what if I borrow an idea from my index template where all of this time,
但是，如果我从我的 index 模板中借鉴一个想法，在所有这段时间里，

1727
01:24:45,360 --> 01:24:48,190
for hello and froshims, I've been passing in input.
对于 hello 和 froshims，我一直都在传递输入。

1728
01:24:48,190 --> 01:24:49,330
So what if I do this?
那么，如果我这样做呢？

1729
01:24:49,330 --> 01:24:50,190
Let me show you.
让我来展示给你看。

1730
01:24:50,190 --> 01:24:58,230
In templates, failure.html-- or, rather, let's see, in templates, error.html.
在模板中，failure.html——或者，更确切地说，让我们来看看，在模板中，error.html。

1731
01:24:58,230 --> 01:25:00,570
So notice this, I can make the beginnings
所以请注意，我可以做出

1732
01:25:00,570 --> 01:25:03,190
of a common format for an error page.
错误页面的通用格式的开端。

1733
01:25:03,190 --> 01:25:05,760
So, in error.html of this fourth example,
所以，在这个第四个例子中的 error.html，

1734
01:25:05,760 --> 01:25:08,440
I've just got some big, bold error message at the top.
我仅仅在顶部加了一些大而粗的错误信息。

1735
01:25:08,440 --> 01:25:10,560
But I have a paragraph tag inside of which
但我有一个段落标签，在它里面

1736
01:25:10,560 --> 01:25:13,380
is a placeholder for an error message.
是一个错误信息占位符。

1737
01:25:13,380 --> 01:25:17,520
And then I've gone one step further just because and put a happy cat or grumpy
然后，我仅仅是为了更进一步，添加了一只快乐的猫或一只生气的猫

1738
01:25:17,520 --> 01:25:21,630
cat as an image to let you down easy that something has gone wrong.
作为图像，让你更容易接受发生了错误这件事。

1739
01:25:21,630 --> 01:25:25,770
But this is like now every website where there's generally some customized error
但是现在每个网站上都有一点定制的错误

1740
01:25:25,770 --> 01:25:28,410
message when something has gone wrong or when you have not
信息，当发生错误或当你没有

1741
01:25:28,410 --> 01:25:30,550
cooperated with the rules of the form.
遵守表单的规则时。

1742
01:25:30,550 --> 01:25:32,230
So what am I doing instead?
那么我该怎么做呢？

1743
01:25:32,230 --> 01:25:35,820
Instead of rendering failure.html very generically,
与其以非常通用的方式渲染 failure.html，

1744
01:25:35,820 --> 01:25:38,220
I'm rendering this new template error.html.
我将渲染这个新的模板 error.html。

1745
01:25:38,220 --> 01:25:39,820
And I'm passing in a custom message.
并且我传递了一个自定义信息。

1746
01:25:39,820 --> 01:25:40,320
Why?
为什么？

1747
01:25:40,320 --> 01:25:44,528
Because now, in my app.py, my logic, I can actually say,
因为现在，在我的 app.py 中，我的逻辑，我实际上可以这样说，

1748
01:25:44,528 --> 01:25:45,570
you're missing your name.
你漏掉了你的名字。

1749
01:25:45,570 --> 01:25:46,528
You're missing a sport.
你漏掉了你的运动项目。

1750
01:25:46,528 --> 01:25:51,300
Or I can tell the human what the error, which is much better user interface.
或者，我可以告诉用户发生了什么错误，这在用户界面方面要好得多。

1751
01:25:51,300 --> 01:25:53,910
Down here, though, on this new line, here's
不过，在这条新行上，这里就是

1752
01:25:53,910 --> 01:25:57,300
where I'm now beginning to actually register registrants.
我开始真正注册登记人的地方。

1753
01:25:57,300 --> 01:25:58,870
What's the easiest way to do this?
怎么做最简单呢？

1754
01:25:58,870 --> 01:26:00,960
Well, let me scroll to the top of this file.
好吧，让我滚动到这个文件的最顶部。

1755
01:26:00,960 --> 01:26:04,860
And you'll see that, in addition, to a big list of sports,
你会看到，除了一个大的运动项目列表之外，

1756
01:26:04,860 --> 01:26:08,850
I also have an empty dictionary initially of registrants.
我还初始设置了一个空的登记人字典。

1757
01:26:08,850 --> 01:26:09,480
Why?
为什么？

1758
01:26:09,480 --> 01:26:14,290
Well, dictionaries are this nice Swiss army knife, key-value pair, key, value,
好吧，字典就像一把精巧的瑞士军刀，键值对，键，值，

1759
01:26:14,290 --> 01:26:15,060
key, value.
键，值。

1760
01:26:15,060 --> 01:26:16,470
Names could be keys.
名字可以是键。

1761
01:26:16,470 --> 01:26:18,570
And maybe sports could be values, at least
也许运动项目可以是值，至少

1762
01:26:18,570 --> 01:26:20,190
if I'm supporting just single sports.
如果我仅仅支持单项运动。

1763
01:26:20,190 --> 01:26:22,065
So I could have a fancier structure, but this
所以我可以有一个更精巧的结构，但这个

1764
01:26:22,065 --> 01:26:25,270
seems sufficient, two columns, key, value, for name, sport, name, sport,
似乎足够了，两列，键，值，用于名字，运动项目，名字，运动项目，

1765
01:26:25,270 --> 01:26:26,080
and so forth.
等等。

1766
01:26:26,080 --> 01:26:31,290
So how do I put a person's name into that global dictionary?
那么，如何将一个人的名字放到那个全局字典中呢？

1767
01:26:31,290 --> 01:26:35,040
Well, I'll use the syntax from week six, registrants bracket name
好吧，我将使用第六周的语法，登记人方括号名字

1768
01:26:35,040 --> 01:26:39,090
equals sport that associates that value with that key.
等于运动项目，将该值与该键关联起来。

1769
01:26:39,090 --> 01:26:43,622
And, now, what you'll see in that I've added a new route /registrants.
现在，你会看到，我已经添加了一个新的路由 /registrants。

1770
01:26:43,622 --> 01:26:45,330
And this is where things get interesting.
而这就是事情变得有趣的地方。

1771
01:26:45,330 --> 01:26:47,520
If I look at this premade route as you will too,
如果我查看这个预先制作好的路由，就像你一样，

1772
01:26:47,520 --> 01:26:50,590
as you look at code that's been written for you in the weeks to come,
当你查看未来几周为你编写的代码时，

1773
01:26:50,590 --> 01:26:54,930
well, this sort of invites me to look at registrants.html.
那么，这就会促使我查看 registrants.html。

1774
01:26:54,930 --> 01:26:55,650
Why?
为什么？

1775
01:26:55,650 --> 01:26:58,470
Apparently, this registrants.html template
显然，这个 registrants.html 模板

1776
01:26:58,470 --> 01:27:02,070
is being passed this global dictionary.
正在传递这个全局字典。

1777
01:27:02,070 --> 01:27:03,240
How might I use that?
我该如何使用它呢？

1778
01:27:03,240 --> 01:27:05,910
Well, let me go into VS Code's terminal.
好吧，让我进入 VS Code 的终端。

1779
01:27:05,910 --> 01:27:09,930
Let me take a look at registrants.html.
让我看看 registrants.html。

1780
01:27:09,930 --> 01:27:12,390
And, interesting, we haven't used this HTML much.
有趣的是，我们并没有经常使用这个 HTML。

1781
01:27:12,390 --> 01:27:14,350
I used it super briefly last week.
我上周非常简短地使用过它。

1782
01:27:14,350 --> 01:27:15,305
This is an HTML table.
这是一个 HTML 表格。

1783
01:27:15,305 --> 01:27:17,430
It's not going to look super pretty because I'm not
它看起来不会非常漂亮，因为我没有

1784
01:27:17,430 --> 01:27:19,650
using bootstrap or CSS more generally.
使用 Bootstrap 或更一般的 CSS。

1785
01:27:19,650 --> 01:27:23,070
But notice that, in the table's head, there's
但是请注意，在表格的头部，

1786
01:27:23,070 --> 01:27:26,610
name and sport from left to right in the two columns.
名字和运动项目从左到右位于两列中。

1787
01:27:26,610 --> 01:27:30,000
And then, in the table body or tbody, notice
然后，在表格主体或 tbody 中，请注意

1788
01:27:30,000 --> 01:27:36,570
that I have a whole bunch of tr, tr, tr, one for every registrant in that Jinja
我有许多 tr、tr、tr，每个在 Jinja 中的登记人都有一个。

1789
01:27:36,570 --> 01:27:37,110
loop.
循环。

1790
01:27:37,110 --> 01:27:40,830
Each of the cells, the table datas have the person's name.
每个单元格，表格数据都有该人的名字。

1791
01:27:40,830 --> 01:27:45,000
And then if you go inside of that dictionary and look up the name,
然后，如果你进入到那个字典中并查找名字，

1792
01:27:45,000 --> 01:27:48,720
you get the value thereof, so name, sport, name, sport.
你将获得它的值，所以名字，运动项目，名字，运动项目。

1793
01:27:48,720 --> 01:27:53,550
And the route, of course, again, is just this, render registrants.html
当然，路由仍然是这个，渲染 registrants.html

1794
01:27:53,550 --> 01:27:55,150
by passing in that dictionary.
通过传递那个字典。

1795
01:27:55,150 --> 01:27:56,940
So what is registrants.html?
那么 registrants.html 是什么呢？

1796
01:27:56,940 --> 01:27:57,640
It's just this.
它就是这个。

1797
01:27:57,640 --> 01:28:00,630
So I think if we go and run this version of the application,
所以，我认为，如果我们运行这个版本的应用程序，

1798
01:28:00,630 --> 01:28:02,350
we have some nice new features.
我们将拥有一些不错的新功能。

1799
01:28:02,350 --> 01:28:04,200
Let me go ahead and do Flask--
让我继续做 Flask——

1800
01:28:04,200 --> 01:28:07,530
let me kill Flask in the other window just so it's not using the same port.
让我在另一个窗口中关闭 Flask，这样它就不会使用相同的端口。

1801
01:28:07,530 --> 01:28:11,040
Let me do flask run inside of froshims4.
让我在 froshims4 中运行 flask。

1802
01:28:11,040 --> 01:28:12,420
So far, so good.
到目前为止，一切顺利。

1803
01:28:12,420 --> 01:28:14,110
Let me go over to my other tab.
让我转到另一个选项卡。

1804
01:28:14,110 --> 01:28:14,710
Let me reload.
让我重新加载。

1805
01:28:14,710 --> 01:28:15,900
So I get the latest HTML.
所以，我得到了最新的 HTML。

1806
01:28:15,900 --> 01:28:18,150
I'm going to go ahead and type in something like David
我将输入类似于 David 之类的内容

1807
01:28:18,150 --> 01:28:20,495
but select no sport using radio buttons.
但使用单选按钮选择没有运动项目。

1808
01:28:20,495 --> 01:28:21,870
So, again, you can only pick one.
所以，再次说明，你只能选择一个。

1809
01:28:21,870 --> 01:28:25,350
And now not only am I seeing one grumpy cat there.
现在，我不仅在那里看到了一只生气的猫。

1810
01:28:25,350 --> 01:28:28,380
It's also telling me at the top that I'm missing the sport.
它还在顶部告诉我，我漏掉了运动项目。

1811
01:28:28,380 --> 01:28:31,830
Conversely, if I reload the page, don't give my name.
反过来，如果我重新加载页面，不输入我的名字。

1812
01:28:31,830 --> 01:28:33,900
But do give the sport and register.
但输入运动项目并注册。

1813
01:28:33,900 --> 01:28:36,060
Now you see that I'm missing name and not sport.
现在，你会看到我漏掉了名字，但没有漏掉运动项目。


1814
01:28:36,060 --> 01:28:39,480
So, again, the UI is not very pretty, but it has the building blocks
所以，再次强调，用户界面不是很好看，但它具备更适合的构建模块

1815
01:28:39,480 --> 01:28:41,860
of being much more appropriate.
变得更合适

1816
01:28:41,860 --> 01:28:43,470
Let me now cooperate on both fronts.
现在让我在这两个方面合作。

1817
01:28:43,470 --> 01:28:46,800
David wants to register for soccer, Register.
大卫想报名参加足球，注册。

1818
01:28:46,800 --> 01:28:48,750
And now notice where I am.
现在注意我在哪里。

1819
01:28:48,750 --> 01:28:51,930
Apparently, I got redirected to the registrants route,
显然，我被重定向到了注册者路由，

1820
01:28:51,930 --> 01:28:54,290
inside of which is this two column table.
里面是这个两列的表格。

1821
01:28:54,290 --> 01:28:55,540
It's not very interesting yet.
目前还不怎么有趣。

1822
01:28:55,540 --> 01:28:56,940
So let me go back to the form.
所以让我回到表单。

1823
01:28:56,940 --> 01:28:58,860
And let me register Carter, for instance,
让我注册卡特，例如，

1824
01:28:58,860 --> 01:29:00,990
for, say, basketball, Register.
例如，篮球，注册。

1825
01:29:00,990 --> 01:29:02,520
And now there's two of us.
现在我们有两个人了。

1826
01:29:02,520 --> 01:29:04,410
Let me actually go back to the form.
让我回到表单。

1827
01:29:04,410 --> 01:29:07,650
And let me register Yulia for ultimate Frisbee, Register.
让我注册尤利亚参加极限飞盘，注册。

1828
01:29:07,650 --> 01:29:08,920
Now there's three of us.
现在我们有三个了。

1829
01:29:08,920 --> 01:29:11,950
And, again, the CSS is ugly, but I do have an HTML table.
再次强调，CSS 很难看，但我确实有一个 HTML 表格。

1830
01:29:11,950 --> 01:29:14,790
And if I right-click and View page source,
如果我右键单击并查看页面源代码，

1831
01:29:14,790 --> 01:29:18,630
you'll see David, soccer; Carter, basketball; Yulia, ultimate Frisbee all
你会看到大卫、足球；卡特、篮球；尤利亚、极限飞盘都

1832
01:29:18,630 --> 01:29:20,280
as tr, tr, tr.
作为 tr、tr、tr。

1833
01:29:20,280 --> 01:29:23,850
So, again, if you now think about an app like Gmail in your inbox,
所以，再次强调，如果你现在想想像 Gmail 这样的收件箱应用程序，

1834
01:29:23,850 --> 01:29:27,010
odds are if your inbox is indeed a big table,
如果你的收件箱确实是一个大表格，

1835
01:29:27,010 --> 01:29:29,430
then it's probably tr, tr, tr, tr.
那么它可能是 tr、tr、tr、tr。

1836
01:29:29,430 --> 01:29:32,700
And Google is rendering all of that HTML dynamically
而谷歌正在动态渲染所有这些 HTML

1837
01:29:32,700 --> 01:29:36,120
based on all of the emails in some variable somewhere.
基于某处某个变量中的所有电子邮件。

1838
01:29:36,120 --> 01:29:39,810
Well, let me go back here and see, how did that redirect work?
好吧，让我回到这里看看，重定向是如何工作的？

1839
01:29:39,810 --> 01:29:41,580
Let's watch this a little more slowly.
让我们慢点看看。

1840
01:29:41,580 --> 01:29:44,060
Let me go up to the main form at slash.
让我回到斜杠上的主表单。

1841
01:29:44,060 --> 01:29:45,540
Let me type in David.
让我输入大卫。

1842
01:29:45,540 --> 01:29:47,520
Let me type in-- select soccer.
让我输入-- 选择足球。

1843
01:29:47,520 --> 01:29:49,380
And let me Zoom in to the URL.
让我放大 URL。

1844
01:29:49,380 --> 01:29:52,230
And notice that, when I submit this form,
注意，当我提交此表单时，

1845
01:29:52,230 --> 01:29:58,560
even though the action is /register, I'm indeed ending up at /registrants.
尽管操作是 /register，但我最终还是到了 /registrants。

1846
01:29:58,560 --> 01:30:00,225
So how is that actually happening?
那么这究竟是如何发生的？

1847
01:30:00,225 --> 01:30:02,100
Well, let me go back and do it one more time.
好吧，让我回到这里再做一次。

1848
01:30:02,100 --> 01:30:04,290
But, this time, let me open up Developer Tools.
但是，这次，让我打开开发者工具。

1849
01:30:04,290 --> 01:30:07,740
Let me go to the Network tab, which, recall, we played with last week.
让我转到网络选项卡，记得上周我们用过它。

1850
01:30:07,740 --> 01:30:09,640
And let me go ahead and do this again.
让我再次尝试。

1851
01:30:09,640 --> 01:30:13,560
So David, Soccer, and I'm going to click Register.
所以是大卫、足球，我要点击注册。

1852
01:30:13,560 --> 01:30:17,880
And now, notice, interesting, two routes were actually involved.
现在，注意，有趣的是，实际上涉及了两个路由。

1853
01:30:17,880 --> 01:30:19,680
The first one here is Register.
第一个是注册。

1854
01:30:19,680 --> 01:30:23,160
But notice if I go to headers, ah, 302 found.
但注意，如果我去标题，啊，302 找到。

1855
01:30:23,160 --> 01:30:25,350
302 indicated some kind of redirect.
302 表示某种重定向。

1856
01:30:25,350 --> 01:30:27,210
What's the redirect going to?
重定向到哪里？

1857
01:30:27,210 --> 01:30:29,610
Well, if I look-- scroll down here at response headers,
好吧，如果我看看-- 在这里向下滚动到响应标头，

1858
01:30:29,610 --> 01:30:31,527
there's a lot of stuff that's not interesting,
有很多东西不有趣，

1859
01:30:31,527 --> 01:30:35,280
but location was the one we cared about last week. /registrants, oh,
但是上周我们关心的是位置。/registrants，哦，

1860
01:30:35,280 --> 01:30:39,660
that's why the second request over here at left is actually /registrants.
这就是为什么左边第二个请求实际上是 /registrants。

1861
01:30:39,660 --> 01:30:43,260
And it is 200 OK because it's all of these basic building
它是 200 OK，因为它所有这些基本的构建

1862
01:30:43,260 --> 01:30:45,450
blocks from last week and now this.
块来自上周，现在又有了这个。

1863
01:30:45,450 --> 01:30:47,500
Where did that redirect come from?
重定向来自哪里？

1864
01:30:47,500 --> 01:30:50,530
Well, now you have the ability to do this.
现在你就可以做到这一点。

1865
01:30:50,530 --> 01:30:55,080
Notice that, in my register route, the last thing I said we had done
请注意，在我的注册路由中，我最后说我们已经完成了

1866
01:30:55,080 --> 01:30:58,740
was add the name and the value to this global dictionary.
就是将名称和值添加到这个全局字典中。

1867
01:30:58,740 --> 01:31:03,760
But the very last thing I did was redirect the user to the /registrants
但我最后做的是将用户重定向到 /registrants

1868
01:31:03,760 --> 01:31:04,260
route.
路由。

1869
01:31:04,260 --> 01:31:05,400
What is redirect?
什么是重定向？

1870
01:31:05,400 --> 01:31:07,500
Well, at the very top of this file, notice
好吧，在这个文件的顶部，请注意

1871
01:31:07,500 --> 01:31:11,940
that I proactively imported not just flask, render_template, and request.
我主动导入的不仅仅是 flask、render_template 和 request。

1872
01:31:11,940 --> 01:31:14,880
I also imported redirect this time, which
这次我还导入了重定向，它

1873
01:31:14,880 --> 01:31:20,580
is a function that comes with Flask that automatically issues the HTTP 302
是一个 Flask 附带的函数，它会自动发出 HTTP 302

1874
01:31:20,580 --> 01:31:25,650
redirect for you without you having to know anything about those numbers
为你进行重定向，而无需你了解任何关于这些数字的知识

1875
01:31:25,650 --> 01:31:27,150
or otherwise.
或其他。

1876
01:31:27,150 --> 01:31:30,720
Let's do one final example before we break for snacks.
在我们去吃零食之前，我们来做最后一个例子。

1877
01:31:30,720 --> 01:31:35,820
In this final example, froshims5, let's actually do something with SQL.
在这个最后的例子中，froshims5，让我们实际使用一下 SQL。

1878
01:31:35,820 --> 01:31:39,570
SQL, after all, allows us to persist the data because this version here,
SQL 毕竟允许我们持久化数据，因为这个版本，

1879
01:31:39,570 --> 01:31:43,740
with this global dictionary, what's the downside of using this global variable
用这个全局变量有什么缺点

1880
01:31:43,740 --> 01:31:46,910
to store all of our registrants?
来存储所有注册者？

1881
01:31:46,910 --> 01:31:47,960
What's the downside?
有什么缺点？

1882
01:31:47,960 --> 01:31:49,378
Yeah.
是的。

1883
01:31:49,378 --> 01:31:51,723
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1884
01:31:52,657 --> 01:31:54,990
DAVID J. MALAN: Exactly, so, as soon as the server quits
大卫·马兰：没错，所以，服务器一旦退出

1885
01:31:54,990 --> 01:31:57,485
or if something goes wrong like maybe the power goes out,
或者如果出现问题，比如断电，

1886
01:31:57,485 --> 01:31:59,610
or we have multiple servers or something like that,
或者我们有多个服务器，或者类似的情况，

1887
01:31:59,610 --> 01:32:01,920
we'll lose the contents of that dictionary.
我们会丢失字典的内容。

1888
01:32:01,920 --> 01:32:04,470
And so that's not really good to store data
所以，这不是一个好办法来存储数据

1889
01:32:04,470 --> 01:32:08,040
that you care about in the computer's memory alone or RAM.
你关心，仅仅在计算机内存或 RAM 中。

1890
01:32:08,040 --> 01:32:11,973
You want to store it on disk using something like fopen and fwrite
你想要将它存储在磁盘上，使用类似 fopen 和 fwrite 的东西

1891
01:32:11,973 --> 01:32:13,890
and all of the file I/O stuff we talked about.
以及我们讨论过的一切文件 I/O 操作。

1892
01:32:13,890 --> 01:32:17,070
But, in week seven, recall, we introduced SQL.
但是，记得第七周，我们介绍了 SQL。

1893
01:32:17,070 --> 01:32:19,960
So that writes things to disk in a .db file.
这样就会将东西写入磁盘上的 .db 文件。

1894
01:32:19,960 --> 01:32:22,290
So let's actually do that with one final example.
所以，让我们用最后一个例子来实际操作一下。

1895
01:32:22,290 --> 01:32:26,160
Let me go ahead and close these tabs here in my terminal.
让我继续，关闭我在终端中的这些选项卡。

1896
01:32:26,160 --> 01:32:29,550
Let me go ahead and close the old version of froshims
让我继续，关闭 froshims 的旧版本

1897
01:32:29,550 --> 01:32:32,040
and go into froshims5 now.
现在进入 froshims5。

1898
01:32:32,040 --> 01:32:37,080
And, in this version, let me show you, in app.py, the following.
在这个版本中，让我在 app.py 中向你展示如下内容。

1899
01:32:37,080 --> 01:32:40,290
It's almost the same in terms of what we're importing from Flask.
就从 Flask 导入的内容而言，它几乎相同。

1900
01:32:40,290 --> 01:32:43,320
But I'm also going to import from CS50's library
但我也将从 CS50 的库中导入

1901
01:32:43,320 --> 01:32:47,220
a SQL function, which we used briefly when we wrote code
一个 SQL 函数，我们在编写代码时简要使用过它

1902
01:32:47,220 --> 01:32:49,600
in Python to talk to a SQLite database.
用 Python 与 SQLite 数据库进行交互。

1903
01:32:49,600 --> 01:32:51,630
This is the one example of a CS50 training wheel
这是 CS50 辅助工具的一个例子

1904
01:32:51,630 --> 01:32:54,750
that we actually do keep on deliberately through the end of the term
我们确实故意保留到学期结束

1905
01:32:54,750 --> 01:32:56,500
because it's actually just really annoying
因为它实际上真的很烦人

1906
01:32:56,500 --> 01:33:00,572
to use most third-party libraries with SQL in as user friendly a way.
以用户友好的方式使用大多数与 SQL 相关的第三方库。

1907
01:33:00,572 --> 01:33:03,280
You're welcome to, but I do think that, even though you shouldn't
你可以使用，但我认为，即使你不应该

1908
01:33:03,280 --> 01:33:06,940
be using get in getstring, getfloat anymore the SQL function's actually
再使用 getstring、getfloat 中的 get，SQL 函数实际上

1909
01:33:06,940 --> 01:33:09,450
pretty darn useful, I would say.
非常有用，我认为。


1910
01:33:09,450 --> 01:33:10,600
So how do we use this?
那么我们如何使用它呢？

1911
01:33:10,600 --> 01:33:13,990
Everything in this file so far is pretty much the same except for that import,
到目前为止，此文件中的所有内容都与之前相同，除了那个导入，

1912
01:33:13,990 --> 01:33:15,890
including these lines here.
包括这里面的这些行。

1913
01:33:15,890 --> 01:33:20,020
But notice that I am opening up a file called froshims.db.
但请注意，我正在打开一个名为 froshims.db 的文件。

1914
01:33:20,020 --> 01:33:22,300
And that's a database that's empty initially.
这是一个最初为空的数据库。

1915
01:33:22,300 --> 01:33:23,382
But it is in my account.
但它在我的账户中。

1916
01:33:23,382 --> 01:33:24,590
So, actually, let me do this.
所以，实际上，让我这样做。

1917
01:33:24,590 --> 01:33:28,180
Let me run sqlite3 on froshims.db.
让我在 froshims.db 上运行 sqlite3。

1918
01:33:28,180 --> 01:33:29,950
Let me increase the size of my terminal.
让我扩大我的终端窗口大小。

1919
01:33:29,950 --> 01:33:30,790
Hit Enter.
按回车键。

1920
01:33:30,790 --> 01:33:35,280
What can I type to see the structure of this database?
我能输入什么来查看这个数据库的结构？

1921
01:33:35,280 --> 01:33:37,610
Sorry.
抱歉。

1922
01:33:37,610 --> 01:33:38,673
Wait, what?
等等，什么？

1923
01:33:38,673 --> 01:33:39,600
AUDIENCE: [INAUDIBLE]
观众：[听不见]

1924
01:33:39,600 --> 01:33:41,058
DAVID J. MALAN: Oh, yes, thank you.
大卫·马兰：哦，是的，谢谢。

1925
01:33:41,058 --> 01:33:42,240
.schema should show me.
.schema 应该能展示给我。

1926
01:33:42,240 --> 01:33:46,530
OK, it's actually a very simple database, a registrants table with one,
好的，它实际上是一个非常简单的数据库，一个名为 registrants 的表，它包含一个

1927
01:33:46,530 --> 01:33:50,170
two, three columns, an ID for a unique identifier,
两个，三个列，一个用于唯一标识的 ID，

1928
01:33:50,170 --> 01:33:52,660
a primary key, the name of the person, and the sport
一个主键，该人的姓名，以及参加的运动

1929
01:33:52,660 --> 01:33:53,910
for which they're registering.
他们注册的项目。

1930
01:33:53,910 --> 01:33:56,880
And, presumably, the ID will be automatically incremented for me.
并且，据推测，ID 会自动为我递增。

1931
01:33:56,880 --> 01:33:58,830
So let me exit out of that.
所以让我退出。

1932
01:33:58,830 --> 01:34:00,870
Go back to app.py.
回到 app.py。

1933
01:34:00,870 --> 01:34:04,800
And this line 8 here is just giving me access to that SQLite database.
而这第 8 行只是让我访问了那个 SQLite 数据库。

1934
01:34:04,800 --> 01:34:07,440
And recall that the three slashes are appropriate.
回想一下，这三个斜杠是合适的。

1935
01:34:07,440 --> 01:34:10,290
It's not a typo relative to something like a URL.
它与类似 URL 的东西相比不是一个拼写错误。

1936
01:34:10,290 --> 01:34:12,580
Here is my three sports that I want to support.
这里是我想要支持的三项运动。

1937
01:34:12,580 --> 01:34:15,670
Looks like my index route is pretty much the same.
看起来我的索引路由与之前基本相同。

1938
01:34:15,670 --> 01:34:16,930
So nothing new there.
所以那里没有新东西。

1939
01:34:16,930 --> 01:34:19,110
In fact, I'm using that same lesson as before
事实上，我正在使用与之前相同的课程

1940
01:34:19,110 --> 01:34:20,760
in passing in the whole sports list.
传递整个运动列表。

1941
01:34:20,760 --> 01:34:22,350
Notice that, OK, this is interesting.
请注意，好的，这很有趣。

1942
01:34:22,350 --> 01:34:26,668
Deregister, this version is going to let users sort of bow out of a sport
注销，这个版本将允许用户退出某项运动

1943
01:34:26,668 --> 01:34:28,710
as tends to happen over the course of a semester.
就像在一个学期中经常发生的那样。

1944
01:34:28,710 --> 01:34:29,877
But we'll come back to that.
但我们会回到这个话题。

1945
01:34:29,877 --> 01:34:31,530
But let's look at register now.
但现在让我们看看 register。

1946
01:34:31,530 --> 01:34:35,160
register is almost the same even though I do have some comments here.
register 与之前几乎相同，尽管我在这里有一些注释。

1947
01:34:35,160 --> 01:34:37,450
We're making sure to validate the form.
我们确保验证表单。

1948
01:34:37,450 --> 01:34:39,250
But this is where it gets interesting.
但这里就变得有趣了。

1949
01:34:39,250 --> 01:34:43,000
I'm now inserting rows into the database to register these registrants.
我现在正在将行插入数据库以注册这些注册者。

1950
01:34:43,000 --> 01:34:47,290
Notice that I'm using CS50's library to insert into the registrants table
请注意，我正在使用 CS50 的库将数据插入 registrants 表

1951
01:34:47,290 --> 01:34:50,440
into these two columns name and sport, these two values.
到这两个列 name 和 sport 中，这两个值。

1952
01:34:50,440 --> 01:34:54,100
And I'm being very careful to use question marks to escape the user's
而且我非常谨慎地使用问号来转义用户的

1953
01:34:54,100 --> 01:34:55,990
input to avoid injection attacks.
输入，以避免注入攻击。

1954
01:34:55,990 --> 01:34:58,030
And then I just redirect the user.
然后我只需重定向用户。

1955
01:34:58,030 --> 01:35:01,240
But what's going to be interesting about this version is this too,
但这个版本有趣的地方还在于，

1956
01:35:01,240 --> 01:35:05,980
/registrants no longer just uses Jinja and iterates over a global variable.
/registrants 不再仅仅使用 Jinja 并且遍历全局变量。

1957
01:35:05,980 --> 01:35:09,520
In this version, we're selecting all of the registrants
在这个版本中，我们正在选择所有注册者

1958
01:35:09,520 --> 01:35:12,370
and getting back a list of dictionaries.
并将它们作为字典列表返回。

1959
01:35:12,370 --> 01:35:15,730
And then we're passing that list of dictionaries
然后我们将这个字典列表

1960
01:35:15,730 --> 01:35:19,690
into the Jinja template called registrants.html.
传递给名为 registrants.html 的 Jinja 模板。

1961
01:35:19,690 --> 01:35:22,090
So, just to make clear what's going on there,
所以，为了清楚地说明那里发生了什么，

1962
01:35:22,090 --> 01:35:25,540
let me open up templates and registrants.html.
让我打开模板和 registrants.html。

1963
01:35:25,540 --> 01:35:27,700
It's almost the same as before.
它与之前几乎相同。

1964
01:35:27,700 --> 01:35:31,450
Notice that I'm using the dot notation this time, which Jinja also supports.
请注意，我这次使用了点表示法，Jinja 也支持它。

1965
01:35:31,450 --> 01:35:34,700
And it's almost always the same as the square bracket notation.
而且它几乎总是与方括号表示法相同。

1966
01:35:34,700 --> 01:35:37,270
So you'll see both in documentation online.
所以你将在网上的文档中看到这两种表示法。

1967
01:35:37,270 --> 01:35:42,133
But notice that I have a third column in the registrants table
但请注意，我在 registrants 表中有一个第三列

1968
01:35:42,133 --> 01:35:43,300
that's a little interesting.
有点意思。

1969
01:35:43,300 --> 01:35:45,580
And this will be the final lesson for froshims.
而这将是 froshims 的最后一课。

1970
01:35:45,580 --> 01:35:50,710
A button via which people can deregister themselves, like a bow out of froshims.
一个按钮，人们可以通过它注销自己，就像退出 froshims 一样。

1971
01:35:50,710 --> 01:35:51,560
So let's do this.
所以让我们这样做。

1972
01:35:51,560 --> 01:35:52,390
Open the terminal.
打开终端。

1973
01:35:52,390 --> 01:35:55,820
Let's do flask run in version 5 of this here.
让我们在版本 5 中运行 flask run。

1974
01:35:55,820 --> 01:36:01,750
Let me go into my other tab, close the Developer Tools, go to the /route,
让我进入另一个选项卡，关闭开发者工具，进入 /route，

1975
01:36:01,750 --> 01:36:04,040
and I have a form quite like before.
我有一个与之前非常相似的表单。

1976
01:36:04,040 --> 01:36:06,880
But now, when I register, David for soccer and click
但现在，当我注册 David 参加足球并点击

1977
01:36:06,880 --> 01:36:09,490
Register, notice that it's ugly UI.
注册，请注意它是一个丑陋的 UI。

1978
01:36:09,490 --> 01:36:13,240
But there's a button next to David to deregister themselves.
但 David 旁边有一个按钮可以让他们注销自己。

1979
01:36:13,240 --> 01:36:14,350
Let's go back to slash.
让我们回到斜杠。

1980
01:36:14,350 --> 01:36:18,100
Let me also register Carter, for instance, for basketball and so forth.
让我注册 Carter，例如，参加篮球等等。

1981
01:36:18,100 --> 01:36:19,390
There's now two buttons.
现在有两个按钮了。

1982
01:36:19,390 --> 01:36:23,350
This, now, is what really ties together our discussion of SQL
现在，这真正将我们对 SQL 的讨论

1983
01:36:23,350 --> 01:36:26,560
and primary keys with the world of the web.
和主键与网络世界联系在一起。

1984
01:36:26,560 --> 01:36:29,560
Suppose that there were two Davids in the class, which there surely are,
假设课堂上有两个 David，这肯定有，

1985
01:36:29,560 --> 01:36:32,380
two Carters, two Yulias, two of any names.
两个 Carter，两个 Yulia，以及两个任何名字的人。

1986
01:36:32,380 --> 01:36:34,900
We clearly can't rely on first names alone
我们显然不能仅仅依靠名字

1987
01:36:34,900 --> 01:36:37,670
to uniquely identify humans in a room like this.
来唯一识别像这样的房间里的人。

1988
01:36:37,670 --> 01:36:40,240
So we probably should use opaque identifiers,
因此我们可能应该使用不透明的标识符，

1989
01:36:40,240 --> 01:36:42,670
that is, those numbers, 1, 2, 3.
也就是说，那些数字，1、2、3。

1990
01:36:42,670 --> 01:36:44,590
Indeed, if I go into VS Code--
实际上，如果我进入 VS Code -

1991
01:36:44,590 --> 01:36:46,690
let me open another terminal and make it bigger.
让我打开另一个终端，并将其放大。

1992
01:36:46,690 --> 01:36:53,620
And, in my src9 froshims version 5, let me run sqlite3 of froshims.db.
在我的 src9 froshims 版本 5 中，让我运行 froshims.db 的 sqlite3。

1993
01:36:53,620 --> 01:37:00,230
And, sure enough, if I do SELECT * FROM registrants; I'll see the two of us
而且，果然，如果我执行 SELECT * FROM registrants；我会看到我们俩

1994
01:37:00,230 --> 01:37:00,730
thus far.
到目前为止。

1995
01:37:00,730 --> 01:37:02,770
And we've indeed been automatically-- been
并且我们实际上已经自动地 - 被

1996
01:37:02,770 --> 01:37:06,880
assigned an auto-incrementing primary key, 1, 2, respectively.
分配了自动递增的主键，分别是 1 和 2。

1997
01:37:06,880 --> 01:37:11,140
That's useful now in the web especially or user interfaces in general.
这在网络中尤其有用，或者在一般的用户界面中也是如此。

1998
01:37:11,140 --> 01:37:15,100
If I view this page as source, here in my browser,
如果我将此页面视为源代码，在我的浏览器中，

1999
01:37:15,100 --> 01:37:20,410
notice that both David and Carter have their own form in a third td
请注意，David 和 Carter 都在第三个 td 中有自己的表单

2000
01:37:20,410 --> 01:37:21,360
element next to them.
元素旁边。

2001
01:37:21,360 --> 01:37:22,610
And that's what gives us this.
这就是给我们这个的原因。

2002
01:37:22,610 --> 01:37:25,420
But notice that form, even though it's an ugly UI,
但请注意那个表单，即使它是一个丑陋的 UI，

2003
01:37:25,420 --> 01:37:32,620
is a form that will post to a /deregister route a hidden input,
是一个会将一个隐藏的输入发布到 /deregister 路由的表单，

2004
01:37:32,620 --> 01:37:36,520
the name of which is ID to match the primary key column,
它的名称是 ID，与主键列匹配，

2005
01:37:36,520 --> 01:37:40,870
the value of which is 1 for me and 2 for Carter.
它的值为 1（对我）和 2（对 Carter）。

2006
01:37:40,870 --> 01:37:44,410
So this is how you stitch together a browser and a server.
所以，这就是将浏览器和服务器连接起来的方式。



