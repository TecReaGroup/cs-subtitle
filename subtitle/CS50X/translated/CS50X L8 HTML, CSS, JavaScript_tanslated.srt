1
00:00:00,000 --> 00:00:02,994
[MUSIC PLAYING]
[音乐播放]

2
00:01:02,490 --> 00:01:03,540
DAVID MALAN: All right.
大卫·马兰：好的。

3
00:01:03,540 --> 00:01:04,980
This is CS50.
这是 CS50。

4
00:01:04,980 --> 00:01:06,960
And this is already Week 8.
现在已经是第八周了。

5
00:01:06,960 --> 00:01:11,580
But this is a CS50 bingo board from one of your classmates at Yale, Shoshannah,
但这是你耶鲁大学同学 Shoshannah 送来的一个 CS50 宾果盘，

6
00:01:11,580 --> 00:01:12,780
kindly sent this to us.
她好心地把它寄给了我们。

7
00:01:12,780 --> 00:01:16,400
And she's apparently been taking close notice of certain expressions
而且她显然一直密切关注着我经常说的某些表达方式，

8
00:01:16,400 --> 00:01:18,150
that I apparently tend to say quite a bit.
有些我意识到了，但不是所有。

9
00:01:18,150 --> 00:01:20,580
Some of which I'm aware of, but not all of them.
其中一些我意识到了，但不是所有。

10
00:01:20,580 --> 00:01:24,480
And the idea here as she described it is that if and when
她描述的想法是，如果我

11
00:01:24,480 --> 00:01:27,120
I say any of these expressions on the screen,
在屏幕上说了这些表达中的任何一个，

12
00:01:27,120 --> 00:01:29,260
you can draw a line through that box.
你就可以在那格上画一条线。

13
00:01:29,260 --> 00:01:32,370
And if you get five in a row, you win a fabulous prize.
如果你连续得到五个，你就会获得一个很棒的奖品。

14
00:01:32,370 --> 00:01:35,220
It seems only fair, then, if we maybe give away some cookies today
这样看来，如果我今天连续说了五次，那我们也许应该送点饼干

15
00:01:35,220 --> 00:01:38,790
if and when I actually do say five such things in a row.
如果我今天连续说了五次，那我们也许应该送点饼干。

16
00:01:38,790 --> 00:01:43,110
Perhaps it'll be all the more motivation to keep a rapt ear against everything
也许这会更有动力让我们专心聆听今天我们要谈论的一切。

17
00:01:43,110 --> 00:01:44,620
we're talking about today.
也许这会更有动力让我们专心聆听今天我们要谈论的一切。

18
00:01:44,620 --> 00:01:48,690
So if and when that happens, feel free to just yell out bingo.
所以，如果真的发生了，请随意喊出宾果。

19
00:01:48,690 --> 00:01:52,360
And then please see Carter during the break or after class for adjudication.
然后请在下课或课后找卡特进行判定。

20
00:01:52,360 --> 00:01:52,860
All right.
好的。

21
00:01:52,860 --> 00:01:56,370
So today, ultimately though, Week 8 is about the internet and, in turn,
所以，今天，虽然说到底，第八周是关于互联网，并且反过来，

22
00:01:56,370 --> 00:01:59,790
how it works and, in fact, how we can start building software on top of it.
是关于它是如何工作的，事实上，是关于我们如何开始在其之上构建软件。

23
00:01:59,790 --> 00:02:03,070
So up until now, of course, we've experimented with Scratch,
当然，到目前为止，我们一直在用 Scratch 实验，

24
00:02:03,070 --> 00:02:05,320
spent quite a bit of time with C, only really
花了不少时间学习 C，只是真正地

25
00:02:05,320 --> 00:02:09,130
spent a week plus so far on Python, and about the same on SQL.
花了不止一周的时间学习 Python，在 SQL 上也花了差不多时间。

26
00:02:09,130 --> 00:02:11,650
But ultimately, we're going to come full circle next week
但说到底，我们将在下周回到起点

27
00:02:11,650 --> 00:02:13,485
and tie all of those languages together.
并将所有这些语言联系在一起。

28
00:02:13,485 --> 00:02:15,610
But we're going to do it in the context of the web.
但我们将在 web 的背景下进行。

29
00:02:15,610 --> 00:02:17,610
And in fact to do that, we're going to introduce
实际上，为了做到这一点，我们将介绍

30
00:02:17,610 --> 00:02:20,560
three different languages today, but only one of which
三种不同的语言，但其中只有一种

31
00:02:20,560 --> 00:02:22,390
is a proper programming language.
是真正的编程语言。

32
00:02:22,390 --> 00:02:25,780
The other two are more about presentation, markup languages,
另外两种更多的是关于演示，标记语言，

33
00:02:25,780 --> 00:02:26,470
so to speak.
可以这么说。

34
00:02:26,470 --> 00:02:29,472
And those languages are HTML and CSS, commonly used in conjunction.
这些语言是 HTML 和 CSS，它们通常一起使用。

35
00:02:29,472 --> 00:02:32,680
Some of you might have done this middle school, high school even, if you ever
你们中有些人可能在中学，甚至高中做过，如果你曾经

36
00:02:32,680 --> 00:02:34,750
made a personal website of sorts.
制作过一个个人网站。

37
00:02:34,750 --> 00:02:37,000
And JavaScript, a programming language that
还有 JavaScript，一种编程语言，它

38
00:02:37,000 --> 00:02:39,400
is very commonly used in the context of browsers
在浏览器的环境中非常常见地被使用

39
00:02:39,400 --> 00:02:43,250
to make interfaces that are all the more interactive.
来制作更具交互性的界面。

40
00:02:43,250 --> 00:02:45,070
But it can also be used server side.
但它也可以用在服务器端。

41
00:02:45,070 --> 00:02:47,260
And what you'll find that is our goal this week,
你会发现，这是我们这周的目标，

42
00:02:47,260 --> 00:02:51,070
like last week, like two weeks ago is really to teach you ultimately
就像上周，就像两周前一样，真正地教你们

43
00:02:51,070 --> 00:02:54,070
how to program, how to program procedurally
如何编程，如何进行过程式编程，

44
00:02:54,070 --> 00:02:56,800
and also with elements of what we'll call functional
以及我们所说的函数式编程的元素，

45
00:02:56,800 --> 00:02:58,630
programming, object-oriented programming,
面向对象编程，

46
00:02:58,630 --> 00:03:02,230
concepts that you'll explore more if you pursue more programming or higher level
这些概念，如果你继续学习更多编程或更高层次

47
00:03:02,230 --> 00:03:02,930
classes.
的课程，就会进一步探索。

48
00:03:02,930 --> 00:03:05,110
But at the end of the day, you will exit this class
但说到底，你们将会走出这堂课

49
00:03:05,110 --> 00:03:08,740
having learned how to program, particularly
已经学会了如何编程，尤其是在

50
00:03:08,740 --> 00:03:12,100
in a context that's very much in vogue nowadays, be it for the web
当今非常流行的语境中，无论是 web

51
00:03:12,100 --> 00:03:13,810
or be it for mobile devices.
还是移动设备。

52
00:03:13,810 --> 00:03:16,870
And all of the ideas thus far will be applicable as we now
到目前为止，所有这些想法都将适用，因为我们现在

53
00:03:16,870 --> 00:03:19,100
begin to build on top of the internet.
开始在互联网的基础上进行构建。

54
00:03:19,100 --> 00:03:20,180
So what is it?
那么，它是什么呢？

55
00:03:20,180 --> 00:03:23,720
So back in the late '60s and 1970s, it wasn't much of anything.
所以，早在 60 年代后期和 70 年代，它并没有什么特别之处。

56
00:03:23,720 --> 00:03:26,560
This is an early diagram depicting a few access points
这是一张早期图表，描绘了美国西海岸的一些接入点，

57
00:03:26,560 --> 00:03:29,020
on the West Coast of the United States, which represents
代表了最初被称为 ARPANET 的东西。

58
00:03:29,020 --> 00:03:30,490
what was originally called ARPANET.
代表了最初被称为 ARPANET 的东西。

59
00:03:30,490 --> 00:03:33,010
And this was a project from the US Department of Defense
这是一个来自美国国防部的项目，

60
00:03:33,010 --> 00:03:36,160
to begin to internetwork computers by enabling
开始将计算机互联起来，方法是使它们能够

61
00:03:36,160 --> 00:03:39,460
them to exchange data using what's now known as packets,
通过使用现在被称为数据包的方式交换数据，

62
00:03:39,460 --> 00:03:41,360
packets of information back and forth.
来回传递信息包。

63
00:03:41,360 --> 00:03:44,050
It wasn't too long before East Coast was eventually connected
不久之后，东海岸也最终连接了起来，

64
00:03:44,050 --> 00:03:46,480
through MIT, Harvard, and others.
通过麻省理工学院、哈佛大学等。

65
00:03:46,480 --> 00:03:48,400
And nowadays, fast forward to present day,
而现在，快进到今天，

66
00:03:48,400 --> 00:03:51,370
just a few decades later, everything, it would seem,
仅仅几十年后，一切似乎

67
00:03:51,370 --> 00:03:54,970
is somehow interconnected, either with wires or wirelessly.
都以某种方式相互连接，无论是通过有线还是无线。

68
00:03:54,970 --> 00:03:57,580
But how do you actually get data from any of these points
但是，你如何真正地从这些点中的任何一个

69
00:03:57,580 --> 00:04:00,520
to any of these other points or all of the points that now exist?
传输到这些其他点中的任何一个或现在存在的所有点呢？

70
00:04:00,520 --> 00:04:02,440
Well, let me stipulate, for today's purposes,
好吧，为了今天目的，

71
00:04:02,440 --> 00:04:04,720
that the world nowadays is filled with routers,
我要说明的是，当今世界充满了路由器，

72
00:04:04,720 --> 00:04:09,160
simply computers, servers whose purpose in life is to route information from
仅仅是电脑，服务器，它们存在的目的就是从

73
00:04:09,160 --> 00:04:11,260
left to right, top to bottom, geographically,
左到右，从上到下，在地理位置上，

74
00:04:11,260 --> 00:04:14,920
so to speak, to just get data from point A to point B.
可以这么说，只是将数据从 A 点传输到 B 点。

75
00:04:14,920 --> 00:04:18,579
But typically, you're not going to have a direct connection between points A
但通常情况下，你不会在 A 点和 B 点之间有直接连接。你可能会有 C、D、E。换句话说，

76
00:04:18,579 --> 00:04:21,320
and B. You might have C, D, E. In other words,
你可能会有 C、D、E。换句话说，

77
00:04:21,320 --> 00:04:24,613
you might have many different servers between you and someone else.
你可能会有许多不同的服务器在你和其他人之间。

78
00:04:24,613 --> 00:04:26,530
So if you have a friend at Stanford University
所以，如果你有一个朋友在斯坦福大学，

79
00:04:26,530 --> 00:04:29,350
and you simply send them an email, well, odds
而你只是给他们发送了一封电子邮件，那么，很有可能

80
00:04:29,350 --> 00:04:33,130
are that email is going to be put inside what we're soon going to call a packet.
这封电子邮件将被放置在一个我们很快就会称之为数据包的东西里面。

81
00:04:33,130 --> 00:04:37,280
And that packet might actually pass through the hands, so to speak,
而这个数据包实际上可能会经过，可以这么说，

82
00:04:37,280 --> 00:04:41,800
of any number of routers, typically more than one or two,
任何数量的路由器，通常不止一个或两个，

83
00:04:41,800 --> 00:04:44,980
but typically fewer than 30 such routers.
但通常少于 30 个这样的路由器。

84
00:04:44,980 --> 00:04:49,510
And it's up to the IT administrators of the world to figure out how
而如何在这个服务器之间传输数据，这是全球 IT 管理员需要解决的问题。

85
00:04:49,510 --> 00:04:51,010
to route data between these servers.
而如何在这个服务器之间传输数据，这是全球 IT 管理员需要解决的问题。

86
00:04:51,010 --> 00:04:54,052
And we have software nowadays that dynamically figures out the best path.
现在我们拥有软件，可以动态地找出最佳路径。

87
00:04:54,052 --> 00:04:55,960
It's not necessarily a straight line, as it
它不一定是直线，就像

88
00:04:55,960 --> 00:04:57,502
might be in the world of mathematics.
数学领域一样。

89
00:04:57,502 --> 00:05:01,300
But hopefully, it's the fastest way to get data from point A to point B.
但希望这是从 A 点到 B 点传输数据最快的方式。

90
00:05:01,300 --> 00:05:04,300
So the teaching fellows, thanks to Zoom, kindly put together in years
所以，助教们，由于 Zoom 的帮助，在过去的几年里，他们好心地把这个演示放在一起。

91
00:05:04,300 --> 00:05:08,080
past a demonstration of this whereby each of the teaching fellows or TAs
所以，助教们，由于 Zoom 的帮助，在过去的几年里，他们好心地把这个演示放在一起。

92
00:05:08,080 --> 00:05:11,920
that you see on the screen here consider representing a router, that
你在这里屏幕上看到的每个人都代表一个路由器，也就是说

93
00:05:11,920 --> 00:05:14,530
is a device on the internet that its purpose in life
它是互联网上的一种设备，它存在于世上的目的

94
00:05:14,530 --> 00:05:16,120
is to get data, North, South.
就是接收数据，从北到南，从南到北。

95
00:05:16,120 --> 00:05:18,277
East, or West, between two points ultimately.
无论东西，最终都只是两点之间。

96
00:05:18,277 --> 00:05:20,110
And if we assume that Phyllis, for instance,
如果我们假设，比如，菲利斯

97
00:05:20,110 --> 00:05:24,220
wants to send a packet of information to Brian up here at top left,
想要把一包信息发送给位于左上角的布莱恩，

98
00:05:24,220 --> 00:05:29,380
from bottom right, it turns out that by design the internet can send that data
从右下角开始，结果表明，互联网可以通过设计将这些数据

99
00:05:29,380 --> 00:05:30,992
over any number of routes.
通过任意数量的路线发送。

100
00:05:30,992 --> 00:05:32,200
It can go up and to the left.
它可以向上再向左走。

101
00:05:32,200 --> 00:05:33,580
It can go left and then up.
它可以先向左再向上走。

102
00:05:33,580 --> 00:05:35,080
It can double back a little bit.
它可以稍微回退一点。

103
00:05:35,080 --> 00:05:37,030
Again, it's not necessarily a straight line.
再说一次，它不一定是一条直线。

104
00:05:37,030 --> 00:05:39,460
And this is a feature, not a bug.
而这是一种特性，而不是错误。

105
00:05:39,460 --> 00:05:41,650
The intent of the internet early on was to be
互联网的最初目标是

106
00:05:41,650 --> 00:05:44,570
able to route around downed servers.
能够绕过宕机的服务器。

107
00:05:44,570 --> 00:05:48,160
So if one router is overwhelmed, or if one router is offline,
所以如果一台路由器超负荷，或者一台路由器离线，

108
00:05:48,160 --> 00:05:52,070
the internet can still adapt dynamically and just route it some other direction.
互联网仍然可以动态地调整，并将其路由到其他方向。

109
00:05:52,070 --> 00:05:54,910
So here, for instance, is one representative route
所以这里，例如，是一条我们的数据包可能经过的典型路线

110
00:05:54,910 --> 00:05:56,950
that our packets might take.
我们的数据包可能会经过。

111
00:05:56,950 --> 00:05:58,120
Thanks to the team.
感谢团队。

112
00:05:58,120 --> 00:06:01,114
[CLASSICAL MUSIC PLAYING]
[古典音乐播放]

113
00:06:26,040 --> 00:06:27,370
So my thanks to the team.
所以我要感谢团队。

114
00:06:27,370 --> 00:06:29,520
And if you've ever used Zoom before, you know
如果你曾经使用过 Zoom，你会知道

115
00:06:29,520 --> 00:06:33,010
that you don't often see exactly the same layout that someone else sees.
你不会经常看到与其他人看到的完全相同的布局。

116
00:06:33,010 --> 00:06:35,220
So it took us forever to actually get that right.
所以我们花了很长时间才真正做到这一点。

117
00:06:35,220 --> 00:06:38,440
Because no one actually knew to whom they were necessarily passing it.
因为没有人真正知道他们是在把信息传递给谁。

118
00:06:38,440 --> 00:06:41,910
But if all of those TFs and TAs represent routers, well, what is it
但如果所有这些 TF 和 TA 代表路由器，那么，他们传递的是什么呢？

119
00:06:41,910 --> 00:06:42,660
they were handing?
他们传递的是什么呢？

120
00:06:42,660 --> 00:06:44,550
What is it that Phyllis wanted to send to Brian?
菲利斯想要发送给布莱恩的是什么呢？

121
00:06:44,550 --> 00:06:46,300
Well, I've called it generically a packet.
好吧，我把它通俗地称为数据包。

122
00:06:46,300 --> 00:06:49,050
And a packet is a generic term for some amount of information.
数据包是一个泛指，指一定量的信息。

123
00:06:49,050 --> 00:06:51,660
But it's kind of analogous to an envelope in the real world.
但这有点类似于现实世界中的信封。

124
00:06:51,660 --> 00:06:54,510
If you're still in the habit of sending letters or postal mail,
如果你仍然习惯于发送信件或邮政邮件，

125
00:06:54,510 --> 00:06:58,090
you typically put your information inside of an envelope such as this.
你通常会把你的信息放在这样的信封里。

126
00:06:58,090 --> 00:07:00,090
And then you hand it off to the mail carrier,
然后你把它交给邮递员，

127
00:07:00,090 --> 00:07:01,590
or you drop it into the mail box.
或者你把它扔进邮箱。

128
00:07:01,590 --> 00:07:03,990
And then humans, in the case of the Postal Service,
然后人类，以邮政服务为例，

129
00:07:03,990 --> 00:07:06,300
actually get it from point A to point B.
实际上把它从 A 点送到 B 点。

130
00:07:06,300 --> 00:07:09,347
But odds are it goes through different cities, different countries, even.
但很有可能它会经过不同的城市，甚至不同的国家。

131
00:07:09,347 --> 00:07:12,180
So you can think of that as roughly analogous to these things called
所以你可以把这看作大致类似于这些被称为

132
00:07:12,180 --> 00:07:12,780
routers.
路由器的东西。

133
00:07:12,780 --> 00:07:15,960
But the technical term for what it is the TFs were just doing
但是 TF 们所做的事情的技术术语是

134
00:07:15,960 --> 00:07:20,880
is they were implementing a protocol that we know as TCP/IP.
他们正在实现一个我们所知的协议，叫做 TCP/IP。

135
00:07:20,880 --> 00:07:23,670
And this is actually probably a pair of acronyms
这实际上可能是一对首字母缩略词

136
00:07:23,670 --> 00:07:26,560
that you've probably seen, maybe on your Mac, PC, or phone,
你可能在你的 Mac、PC 或手机上见过，

137
00:07:26,560 --> 00:07:29,270
even if you haven't really thought much about it.
即使你没有真正想过它。

138
00:07:29,270 --> 00:07:31,990
But this is actually a pair of protocols, two protocols
但这实际上是一对协议，两个协议

139
00:07:31,990 --> 00:07:35,020
that the internet generally uses nowadays and has
互联网目前通常使用，并且已经

140
00:07:35,020 --> 00:07:37,750
for some time to get data from point A to point B.
使用了一段时间来将数据从 A 点传送到 B 点。

141
00:07:37,750 --> 00:07:39,940
And let's consider each of these halves so you
让我们考虑这两个部分中的每一个，以便你

142
00:07:39,940 --> 00:07:43,960
have a sense of what it is the internet is doing when you do send an email
了解互联网在你发送电子邮件时所做的事情

143
00:07:43,960 --> 00:07:45,160
or do anything else.
或者做其他事情。

144
00:07:45,160 --> 00:07:48,430
Well, first, IP stands for internet protocol.
首先，IP 代表互联网协议。

145
00:07:48,430 --> 00:07:51,850
And you've probably even heard this in popular media, since a lot of humans
你可能甚至在流行媒体中听到过这个词，因为很多人类

146
00:07:51,850 --> 00:07:54,700
are indeed familiar with this notion of IP.
确实熟悉 IP 这个概念。

147
00:07:54,700 --> 00:07:58,060
And they associate it typically with IP addresses, as you might.
他们通常将其与 IP 地址联系起来，就像你一样。

148
00:07:58,060 --> 00:08:02,110
So I'll stipulate for today that every computer, every internet work
因此，今天我将规定，世界上每台电脑，每个互联网工作

149
00:08:02,110 --> 00:08:06,250
device in the world has an IP address, an internet protocol
设备都有一个 IP 地址，一个互联网协议

150
00:08:06,250 --> 00:08:09,340
address similar in spirit to buildings in the physical world.
地址，类似于现实世界中的建筑物。

151
00:08:09,340 --> 00:08:15,850
Here we are at 45 Quincy Street, Cambridge, Massachusetts, 02138, USA.
我们位于美国马萨诸塞州剑桥市昆西街 45 号。

152
00:08:15,850 --> 00:08:20,390
That is a unique string, theoretically, that uniquely identifies this building.
理论上，这是一个独特的字符串，它唯一地标识了这栋建筑。

153
00:08:20,390 --> 00:08:23,800
Similarly, in the world of computers, we use a simpler mechanism, just
类似地，在计算机的世界里，我们使用一个更简单的机制，只是

154
00:08:23,800 --> 00:08:28,120
numbers of this format that uniquely represent computers.
这种格式的数字，它们唯一地代表了计算机。

155
00:08:28,120 --> 00:08:29,650
Now that's a bit of a white lie.
现在，这有点像善意的谎言。

156
00:08:29,650 --> 00:08:32,230
Because there's actually a way to share IP addresses.
因为实际上有一种方法可以共享 IP 地址。

157
00:08:32,230 --> 00:08:35,559
And within your home, often within your dorm, or your apartment,
在你家，通常是在你的宿舍或你的公寓里，

158
00:08:35,559 --> 00:08:39,700
you'll actually have what appears to be the same IP address as your roommates
你实际上会有看起来与你的室友一样的 IP 地址

159
00:08:39,700 --> 00:08:40,520
or family members.
或家人。

160
00:08:40,520 --> 00:08:42,520
But for now, let's keep things simple and assume
但现在，让我们保持简单，并假设

161
00:08:42,520 --> 00:08:44,500
that every Mac, PC, and phone in the world
世界上每台 Mac、PC 和手机

162
00:08:44,500 --> 00:08:48,730
has a unique IP address that's formatted like this, number dot number
都有一个唯一的 IP 地址，格式是这样的：数字点数字

163
00:08:48,730 --> 00:08:50,230
dot number dot number.
点数字点数字。

164
00:08:50,230 --> 00:08:55,365
Each of these number signs represents a value between 0 and 255.
这些数字符号中的每一个都代表 0 到 255 之间的值。

165
00:08:55,365 --> 00:08:58,240
And even though we haven't played around with this kind of arithmetic
即使我们有一段时间没有玩过这种算术

166
00:08:58,240 --> 00:09:02,800
in some time, if each of these placeholders is 0 through 255,
有一段时间了，如果这些占位符中的每一个都是 0 到 255，

167
00:09:02,800 --> 00:09:08,070
how many bits are being used to represent each number?
每个数字要用多少位来表示？

168
00:09:08,070 --> 00:09:09,630
Think back to Week 0, Week 1.
回顾一下第 0 周、第 1 周。

169
00:09:09,630 --> 00:09:11,160
Yeah, so 8, in fact.
是的，实际上是 8。

170
00:09:11,160 --> 00:09:13,110
8 bits in total, or 1 byte.
总共 8 位，或 1 字节。

171
00:09:13,110 --> 00:09:17,520
So IP addresses are generally 4 bytes or 32 bits.
所以 IP 地址通常是 4 字节或 32 位。

172
00:09:17,520 --> 00:09:21,630
And the other math we kept doing early on is if you've got 4 bytes or 32 bits,
而我们早期一直在做的另一个数学问题是，如果你有 4 字节或 32 位，

173
00:09:21,630 --> 00:09:25,560
that's a maximum of 2 to the 32nd power total number of values.
那么，最大值的数量就是 2 的 32 次方。

174
00:09:25,560 --> 00:09:28,680
How many IP addresses can you have, it would seem, maximally in the world?
似乎，世界上最多可以有多少个 IP 地址？

175
00:09:31,300 --> 00:09:31,900
Enough.
足够了。

176
00:09:31,900 --> 00:09:34,270
Actually, not enough would be a better answer nowadays.
实际上，现在不够才是更好的答案。

177
00:09:34,270 --> 00:09:38,810
But roughly, 4 billion was the rough math that we typically
但粗略地说，40 亿是我们通常

178
00:09:38,810 --> 00:09:41,190
did anytime 2 to the 32 was involved.
在涉及 2 的 32 次方时所做的粗略计算。

179
00:09:41,190 --> 00:09:45,200
But it turns out with all of the humans, and all of the devices, servers,
但事实证明，随着所有的人类，以及所有设备，服务器，

180
00:09:45,200 --> 00:09:48,830
clients, PCs, Macs, phones, and everything else,
客户端、PC、Mac、手机以及其他一切，

181
00:09:48,830 --> 00:09:52,580
internet of things devices nowadays, even 4 billion is not quite enough.
如今，即使是 40 亿也不够。

182
00:09:52,580 --> 00:09:56,300
So the world is gradually in the process of transitioning
所以，世界正在逐步过渡

183
00:09:56,300 --> 00:10:01,460
from this format, which is technically IPv4, version 4, to IPv6.
从这种格式，即技术上称为 IPv4，版本 4，到 IPv6。

184
00:10:01,460 --> 00:10:05,690
And in the world of IPv6, we've actually bumped things up from 32 bits
在 IPv6 的世界里，我们实际上已经从 32 位

185
00:10:05,690 --> 00:10:11,930
to 128 bits, which is a crazy number of possible permutations, 2 to the 128.
增加到了 128 位，这是一种可能的排列方式的疯狂数量，2 的 128 次方。

186
00:10:11,930 --> 00:10:13,890
So you'll gradually see that over time.
所以，随着时间的推移，你会逐渐看到这种情况。

187
00:10:13,890 --> 00:10:17,780
But those are a lot messier of a format because there's so much larger.
但是，这些格式要混乱得多，因为它们要大得多。

188
00:10:17,780 --> 00:10:20,570
So we'll use the more commonplace ones IPv4.
因此，我们将使用更常见的 IPv4。

189
00:10:20,570 --> 00:10:24,860
Now just to get into the weeds briefly, this is some ASCII art.
现在，为了简要地深入探讨，这是一些 ASCII 艺术。

190
00:10:24,860 --> 00:10:27,320
That is, someone wrote this up decades ago in a text
也就是说，几十年前有人用文本

191
00:10:27,320 --> 00:10:30,470
file to represent the layout of one of these packets.
文件来表示这些数据包之一的布局。

192
00:10:30,470 --> 00:10:34,730
So think of this as, like, the digital representation of this here envelope.
所以把它想象成，比如，这个信封的数字表示。

193
00:10:34,730 --> 00:10:38,250
And even though we won't get into the weeds of what this represents,
虽然我们不会深入探讨其代表的含义，

194
00:10:38,250 --> 00:10:41,190
up here you just have some values saying that this is byte 0.
这里只是一些值，表示这是字节 0。

195
00:10:41,190 --> 00:10:42,300
This is byte 10.
这是字节 10。

196
00:10:42,300 --> 00:10:43,140
This is byte 20.
这是字节 20。

197
00:10:43,140 --> 00:10:45,930
And this is byte 32, but 0 indexed.
这是字节 32，但从 0 开始索引。

198
00:10:45,930 --> 00:10:50,100
So that is to say that this is just kind of an artist's rendition of a grid
也就是说，这只是艺术家对网格的演绎

199
00:10:50,100 --> 00:10:52,950
of bits, top to bottom, left to right.
由比特组成，从上到下，从左到右。

200
00:10:52,950 --> 00:10:57,540
And what's going to be interesting for us today is not most of these fields.
而今天对我们来说有趣的是，不是这些字段中的大多数。

201
00:10:57,540 --> 00:11:00,360
There's a whole bunch of information that's encapsulated inside
在这些数据包的内部封装了大量的信息。

202
00:11:00,360 --> 00:11:01,560
of any one of these packets.
在这些数据包的内部封装了大量的信息。

203
00:11:01,560 --> 00:11:05,520
But we'll focus initially on these two, source address and destination address.
但我们最初将关注这两个，源地址和目标地址。

204
00:11:05,520 --> 00:11:08,370
Maybe the most important thing IP does is
也许 IP 做的最重要的事情是

205
00:11:08,370 --> 00:11:11,860
it standardizes what you put, so to speak,
它规范了你在这些信封上放什么，可以说是

206
00:11:11,860 --> 00:11:13,890
on the outside of these envelopes.
在这些信封的外面。

207
00:11:13,890 --> 00:11:17,070
It says that every computer is going to have a unique address of that form,
它说每台电脑都将拥有这种形式的唯一地址，

208
00:11:17,070 --> 00:11:19,240
something dot something dot something dot something.
某某某某。

209
00:11:19,240 --> 00:11:21,600
And so just like in the real world, if I want
所以就像在现实世界中，如果我想

210
00:11:21,600 --> 00:11:23,910
to send this packet from Phyllis to Brian,
将这个数据包从菲利斯发送给布莱恩，

211
00:11:23,910 --> 00:11:26,940
and suppose that Brian's IP address is a number,
假设布莱恩的 IP 地址是一个数字，

212
00:11:26,940 --> 00:11:31,980
like, very simply 1.2.3.4, what Phyllis would do
比如，非常简单的 1.2.3.4，菲利斯会怎么做

213
00:11:31,980 --> 00:11:34,758
is put that IP address in the middle of this envelope,
就是把那个 IP 地址放到这个信封的中间，

214
00:11:34,758 --> 00:11:37,050
just like you would address a letter in the real world.
就像你在现实世界中写信一样。

215
00:11:37,050 --> 00:11:41,760
But so that Brian could reply to her, if only to confirm receipt,
但为了让布莱恩能回复她，即使只是确认收到，

216
00:11:41,760 --> 00:11:44,280
she's also going to put in the top left of this envelope,
她还要在这个信封的左上角放上，

217
00:11:44,280 --> 00:11:47,700
virtually, her own IP address, which for the sake of discussion
虚拟地，她自己的 IP 地址，为了讨论，

218
00:11:47,700 --> 00:11:50,085
is maybe 5.6.7.8.
可能是 5.6.7.8。

219
00:11:50,085 --> 00:11:51,960
In practice, they won't be as pretty as that.
实际上，它们不会像那样漂亮。

220
00:11:51,960 --> 00:11:53,590
But it's the general idea.
但这是基本的想法。

221
00:11:53,590 --> 00:11:58,110
So you have a source address from which it's coming and a destination |
所以，你有一个来源地址，它来自这里，还有一个目标地址，

222
00:11:58,110 --> 00:11:59,610
to which it's going.
它要到那里去。

223
00:11:59,610 --> 00:12:01,140
And that's what IP does.
这就是 IP 做的事情。

224
00:12:01,140 --> 00:12:04,440
It sort of standardizes, in addition to a bunch of other numbers and values
除了这些信封里必须有的其他数字和值外，它还规范了

225
00:12:04,440 --> 00:12:06,450
that need to be in this envelope, too.
这些信封里必须有的其他数字和值外，它还规范了

226
00:12:06,450 --> 00:12:09,630
It really just mandates that computers on the internet minimally
它实际上只是要求互联网上的电脑至少

227
00:12:09,630 --> 00:12:11,670
provide a source address and a destination
提供源地址和目标地址

228
00:12:11,670 --> 00:12:15,900
address so that the envelope can get from point A to point B.
地址，以便这个信封可以从 A 点到达 B 点。

229
00:12:15,900 --> 00:12:17,250
But that's not quite enough.
但这还不够。

230
00:12:17,250 --> 00:12:21,240
Because it turns out, and if you saw the bloopers from the TFs' Zoom
事实证明，如果你看到了 TFs 的 Zoom

231
00:12:21,240 --> 00:12:24,690
session there, you would see that it's very common not only for humans
会议上的花絮，你会发现，不仅对于人类来说

232
00:12:24,690 --> 00:12:27,060
to physically drop an envelope like that,
实际上丢掉这样的信封是很常见的，

233
00:12:27,060 --> 00:12:29,460
and frankly, even in the real world, for mail carriers
而且坦白地说，即使在现实世界中，对于邮递员来说

234
00:12:29,460 --> 00:12:33,550
to lose mail occasionally, undelivered to recipients.
偶尔丢失邮件，无法送达收件人也是很常见的。

235
00:12:33,550 --> 00:12:38,160
And so it turns out that IP alone is not enough to guarantee delivery
事实证明，仅仅 IP 还不够保证投递成功

236
00:12:38,160 --> 00:12:41,670
because sometimes the packet just might not get to its destination.
因为有时数据包可能无法到达目的地。

237
00:12:41,670 --> 00:12:45,930
More technically, that might happen because the router is overwhelmed.
更准确地说，这可能是因为路由器不堪重负。

238
00:12:45,930 --> 00:12:47,400
It only has so much memory.
它的内存有限。

239
00:12:47,400 --> 00:12:49,020
It only has so fast a CPU.
它的 CPU 速度也有限。

240
00:12:49,020 --> 00:12:51,300
And if it's receiving way too many packets
如果它接收到的数据包太多

241
00:12:51,300 --> 00:12:54,400
because so many people are on the internet at some moment in time,
因为在某个时间点有太多人上网，

242
00:12:54,400 --> 00:12:57,660
well, it might just kind of get overwhelmed and metaphorically
那么，它可能会不堪重负，从比喻意义上说

243
00:12:57,660 --> 00:13:01,140
drop certain packets in the sense that there's just not
丢弃一些数据包，因为它的内存不足以跟上流量。

244
00:13:01,140 --> 00:13:04,510
enough room in its memory to keep up with the traffic.
丢弃一些数据包，因为它的内存不足以跟上流量。

245
00:13:04,510 --> 00:13:08,230
So the effect for the sender is that the packet just doesn't get through.
所以，对于发送者来说，数据包就无法通过了。

246
00:13:08,230 --> 00:13:12,510
And so there's this other protocol, TCP, that humans typically
因此，就有了另一种协议，TCP，人类通常

247
00:13:12,510 --> 00:13:15,060
use in conjunction with IP via their Macs,
通过他们的 Mac、

248
00:13:15,060 --> 00:13:18,820
PCs, and phones that does a couple of other things for us.
PC 和手机与 IP 结合使用，为我们做了一些其他事情。

249
00:13:18,820 --> 00:13:23,010
One, it guarantees delivery, or really "guarantees" delivery.
第一，它保证投递，或者说是“保证”投递。

250
00:13:23,010 --> 00:13:26,070
And it does that actually by doing this.
它实际上是通过这样做来实现的。

251
00:13:26,070 --> 00:13:30,420
It does that by having Phyllis write on the outside of the envelope not
它让菲利斯在信封外面写上

252
00:13:30,420 --> 00:13:32,590
just the source address and destination address,
不仅仅是源地址和目标地址，

253
00:13:32,590 --> 00:13:34,600
but also what we'll call a sequence number.
还有我们将要称之为的序列号。

254
00:13:34,600 --> 00:13:38,112
So, for instance, this would be packet one of two
例如，这将是菲利斯可能发送给布莱恩的两个数据包中的第一个。

255
00:13:38,112 --> 00:13:39,570
that she might be sending to Brian.
例如，这将是菲利斯可能发送给布莱恩的两个数据包中的第一个。

256
00:13:39,570 --> 00:13:42,480
So maybe in, like, the memo field, she could write one of two.
所以，也许在备忘录栏里，她可以写上“两个中的一个”。

257
00:13:42,480 --> 00:13:45,360
And then, if she happens to send a second packet to Brian,
然后，如果她碰巧向布莱恩发送了第二个数据包，

258
00:13:45,360 --> 00:13:49,660
she might write similarly a source address and destination address.
她可能会类似地写上源地址和目标地址。

259
00:13:49,660 --> 00:13:51,450
But she might write two out of two.
但她可能会写上“两个中的两个”。

260
00:13:51,450 --> 00:13:54,960
Because now, logically, if Brian only gets one of these,
因为现在，逻辑上，如果布莱恩只收到其中一个，

261
00:13:54,960 --> 00:13:57,330
that sequence number is enough information for him
这个序列号对他来说就足够了

262
00:13:57,330 --> 00:13:59,700
to know wait a minute, I need to ask Phyllis to resend
他知道，等等，我需要请菲利斯重新发送

263
00:13:59,700 --> 00:14:02,160
number one, or maybe resend number two.
第一个，或者可能重新发送第二个。

264
00:14:02,160 --> 00:14:04,620
If both of them don't get through, I mean, honestly,
如果这两个都没有通过，我的意思是，说真的，

265
00:14:04,620 --> 00:14:07,710
that's probably when Phyllis hits reload or resends the email.
那可能是菲利斯点击重新加载或重新发送电子邮件的时候。

266
00:14:07,710 --> 00:14:12,000
But in general, these sequence numbers help with guaranteeing delivery.
但总的来说，这些序列号有助于保证投递成功。

267
00:14:12,000 --> 00:14:15,990
But if Phyllis and Brian are each representing computers in this story,
但如果菲利斯和布莱恩在故事中分别代表电脑，

268
00:14:15,990 --> 00:14:17,580
they can be doing different things.
他们可以做不同的事情。

269
00:14:17,580 --> 00:14:21,420
They can be doing email, chat, video conferencing, direct messaging,
他们可以发邮件、聊天、视频会议、直接消息，

270
00:14:21,420 --> 00:14:24,540
or any number of services on the internet nowadays.
或者现在互联网上的任何服务。

271
00:14:24,540 --> 00:14:28,860
So TCP gives us one other feature, namely port numbers.
所以 TCP 给我们提供了另一个功能，即端口号。

272
00:14:28,860 --> 00:14:31,380
Because when Brian receives that envelope, assuming he's
因为当布莱恩收到那个信封时，假设他确实是一台电脑，

273
00:14:31,380 --> 00:14:33,750
indeed a computer, how does he know that what's
确实是一台电脑，他怎么知道那个信封里的东西

274
00:14:33,750 --> 00:14:37,900
inside of that envelope is indeed an email, versus a direct message,
是不是一封电子邮件，而不是一条直接消息，

275
00:14:37,900 --> 00:14:43,060
versus a little bit of video, versus sound, versus any other type of media.
而不是一段视频，而不是一段声音，而不是其他任何类型的媒体。

276
00:14:43,060 --> 00:14:46,540
Ideally, the outside of the envelope would have a bit of a clue for him
理想情况下，信封外面应该有一些线索告诉他

277
00:14:46,540 --> 00:14:49,840
that indicates this is the type of data herein.
这表明这里面的数据类型是什么。

278
00:14:49,840 --> 00:14:52,900
Or more specifically, this is the program, really,
或者更确切地说，这才是真正应该打开这个信封的程序，电子邮件程序，视频会议程序

279
00:14:52,900 --> 00:14:56,710
that should open this envelope, the email program, the video conferencing
应该打开这个信封的程序，电子邮件程序，视频会议程序

280
00:14:56,710 --> 00:14:58,310
program, or whatever else.
或任何其他程序。

281
00:14:58,310 --> 00:15:04,060
So what Phyllis would typically do on the outside of this envelope lastly,
所以，菲利斯通常会在信封外面最后写上

282
00:15:04,060 --> 00:15:08,440
in addition to the source address, destination address,
除了源地址，目的地址

283
00:15:08,440 --> 00:15:13,360
and the memo field, the sequence number, she would also write a port number.
以及备忘录字段，序列号，她还会写一个端口号。

284
00:15:13,360 --> 00:15:17,290
And it turns out two of the most common port numbers in the world of TCP
事实证明，在 TCP 世界中，两个最常见的端口号是

285
00:15:17,290 --> 00:15:20,080
are these two, 80, which represents the web.
这两个：80，代表网络。

286
00:15:20,080 --> 00:15:23,320
That is to say, something called HTTP, more on that today,
也就是说，某种叫做 HTTP 的东西，今天我们会详细了解它，

287
00:15:23,320 --> 00:15:27,760
or HTTPS, which most everyone nowadays probably knows means secure,
或者 HTTPS，如今几乎所有人都知道它意味着安全，

288
00:15:27,760 --> 00:15:30,130
so it's some kind of secure version of HTTP.
所以它是一种安全版的 HTTP。

289
00:15:30,130 --> 00:15:32,323
And that number happens to be 443.
而那个数字恰好是 443。

290
00:15:32,323 --> 00:15:34,240
There's no mathematical significance of these.
这些数字之间没有数学上的意义。

291
00:15:34,240 --> 00:15:35,532
They're just kind of arbitrary.
它们只是任意选定的。

292
00:15:35,532 --> 00:15:38,580
But humans decades ago decided to standardize on these numbers.
但几十年前的人们决定将这些数字标准化。

293
00:15:38,580 --> 00:15:42,230
So what it means for Phyllis is that on the outside of her envelope,
所以，对于菲利斯来说，这意味着，在她信封的外面

294
00:15:42,230 --> 00:15:46,460
she should generally put a colon after the destination
她通常应该在目的地后面加一个冒号

295
00:15:46,460 --> 00:15:51,350
address and then the number of the port that she wants to receive this packet.
地址，然后是她想要接收这个数据包的端口号。

296
00:15:51,350 --> 00:15:54,530
So if she's actually not sending an email, but maybe making a web request,
所以，如果她实际上不是在发送电子邮件，而是在发起一个网络请求，

297
00:15:54,530 --> 00:15:57,510
and Brian is a web server and Phyllis is a web browser,
而布莱恩是一个 Web 服务器，菲利斯是一个 Web 浏览器，

298
00:15:57,510 --> 00:15:58,910
she would write colon 80.
她就会写冒号 80。

299
00:15:58,910 --> 00:16:04,070
Or if she's using HTTPS securely, we would change that 80 to a 443.
或者，如果她使用的是安全的 HTTPS，我们就会把 80 改成 443。

300
00:16:04,070 --> 00:16:06,750
There's other stuff on the outside of that envelope.
信封外面还有其他东西。

301
00:16:06,750 --> 00:16:10,610
In fact, just like with IP, there might be fields that look like this.
事实上，就像 IP 一样，可能会有看起来像这样的字段。

302
00:16:10,610 --> 00:16:14,840
But just to give you a sense of this, which is a TCP packet,
但为了让你对这个 TCP 数据包有一个概念

303
00:16:14,840 --> 00:16:18,290
you'll see that indeed sequence numbers are actually really big.
你会发现，序列号实际上非常大。

304
00:16:18,290 --> 00:16:22,160
They use all 32 bits of this part of the picture, which
它们使用了图片中这部分的全部 32 位，这意味着

305
00:16:22,160 --> 00:16:24,620
is to say that generally computers are sending way
一般来说，计算机发送的不仅仅是一个或两个数据包。

306
00:16:24,620 --> 00:16:26,240
more than one packet or two.
它们可能发送数十个、数百个、甚至数千个数据包

307
00:16:26,240 --> 00:16:28,430
They might be sending dozens, hundreds, thousands
取决于数据的大小。

308
00:16:28,430 --> 00:16:31,070
even, depending on the size of the data in question.
其中还有一些其他功能，包括

309
00:16:31,070 --> 00:16:33,440
And there's some other features therein, including
源端口和目标端口。

310
00:16:33,440 --> 00:16:36,000
source port and destination port.
目标端口就是我之前提到的 80 或 443。

311
00:16:36,000 --> 00:16:39,530
Destination port is the 80 or the 443 that I mentioned earlier.
但长话短说，菲利斯也可以选择一个源端口，以唯一地

312
00:16:39,530 --> 00:16:44,810
But long story short, Phyllis also gets to pick a source port to uniquely
识别这个特定的请求。

313
00:16:44,810 --> 00:16:47,180
identify this particular request.
但我们下次再谈这个。

314
00:16:47,180 --> 00:16:49,320
But more on that another time.
现在，只需要知道 TCP 是互联网用来从 A 点

315
00:16:49,320 --> 00:16:52,490
For now, just know that TCP is the pair of protocols
到 B 点获取数据的两套协议。IP 标准化了地址的工作方式。

316
00:16:52,490 --> 00:16:54,740
that the internet uses to get data from point A
而 TCP 使用那些序列号保证数据传送

317
00:16:54,740 --> 00:16:58,700
to point B. IP standardizes how the addresses work.
并帮助服务器同时完成多个任务，帮助它们进行多路复用

318
00:16:58,700 --> 00:17:02,630
And TCP guarantees delivery with those sequence numbers
可以这么说，在电子邮件、网络、视频会议中

319
00:17:02,630 --> 00:17:06,650
and also helps the servers do more than one thing, helps them multiplex,
通过使用那些端口号。

320
00:17:06,650 --> 00:17:09,859
so to speak, among email, web, video conferencing
所以，归根结底，即使现在，课程已经进行了几周，

321
00:17:09,859 --> 00:17:11,760
by using those port numbers.
一切都归结为 0 和 1，或者换句话说，数字，

322
00:17:11,760 --> 00:17:14,720
So at the end of the day, everything, even now, weeks into the class,
就像我们在这个例子中所考虑的那样。

323
00:17:14,720 --> 00:17:19,369
it all boils down somehow to zeros and ones, or in turn, numbers,
关于这些构成要素，你们有什么问题吗？

324
00:17:19,369 --> 00:17:22,200
as we might think of them in this case.
有什么问题吗？

325
00:17:22,200 --> 00:17:29,020
Questions on any of these building blocks thus far?
没有？

326
00:17:29,020 --> 00:17:31,470
Questions on any of these?
好的。

327
00:17:31,470 --> 00:17:32,050
No?
信封外面只是一些任意的数字，1，2，

328
00:17:32,050 --> 00:17:32,550
All right.
3，4，5，6，7，8。

329
00:17:32,550 --> 00:17:35,717
Well, on the outside of this envelope are just some arbitrary numbers, 1, 2,
很明显，这并不是你和我在平时习惯输入的东西。

330
00:17:35,717 --> 00:17:37,320
3, 4, 5, 6, 7, 8.
比如，当我们实际访问网站时，我和你

331
00:17:37,320 --> 00:17:40,080
That's obviously not what you and I are in the habit of typing.
通常会习惯输入 harvard.edu，或 yale.edu，

332
00:17:40,080 --> 00:17:42,750
When we actually visit websites, for instance, you and I
或 google.com，或类似的东西，也就是所谓的域名。

333
00:17:42,750 --> 00:17:46,230
are generally in the habit of typing harvard.edu, or yale.edu,
但你的 Mac，你的 PC，最终必须

334
00:17:46,230 --> 00:17:49,620
or google.com, or the like, otherwise known as domain names.
用实际的 IP 地址来识别那些虚拟信封，也就是数据包。

335
00:17:49,620 --> 00:17:53,880
But your Mac, your PC has to, at the end of the day,
在那些我们屏幕上显示的图片中，没有空间存放单词、英语字母。

336
00:17:53,880 --> 00:17:58,860
address those virtual envelopes, AKA packets, with actual IP addresses.
它只有 32 位，这里也有 32 位。

337
00:17:58,860 --> 00:18:02,662
There is no room for words, letters of the English alphabet in those pictures
所以，在互联网上，还有另一种类型的服务器。

338
00:18:02,662 --> 00:18:03,870
that we showed on the screen.
这种服务器不像路由器，路由器负责将信息从 A 点路由到 B 点，

339
00:18:03,870 --> 00:18:07,060
It's just 32 bits, here 32 bits here.
还有另一种类型的服务器，它们遍布各个地方，坦率地说，

340
00:18:07,060 --> 00:18:10,680
So it turns out, on the internet, there's another type of server.
在你家、校园、互联网上的公司

341
00:18:10,680 --> 00:18:14,370
That, unlike routers, which route information from point A to point B,
更广义地说，在互联网上被称为 DNS 服务器，域名系统服务器。

342
00:18:14,370 --> 00:18:17,730
there's another type of server that are all over the place, frankly,
那么这些东西是做什么的呢？

343
00:18:17,730 --> 00:18:21,480
in your home, on campus, in a company on the internet
这只是互联网上的一种服务器类型，其生命中的目标

344
00:18:21,480 --> 00:18:26,890
more broadly, known as DNS servers, domain name system servers.
就是回答以下形式的问题：这个域名的 IP 地址是什么？

345
00:18:26,890 --> 00:18:28,230
So what do these things do?
例如，如果你打开你的浏览器

346
00:18:28,230 --> 00:18:31,300
This is just a type of server on the internet whose purpose in life
在你的 Mac、PC 或手机上，输入

347
00:18:31,300 --> 00:18:36,110
is to answer questions of the form, what is the IP address for this domain name.
harvard.edu 然后按下回车，你的设备的设计目的

348
00:18:36,110 --> 00:18:38,320
So for instance, if you do pull up your browser
就是向校园里、你的移动运营商网络里、你的公寓或宿舍网络里的某个本地 DNS 服务器询问：

349
00:18:38,320 --> 00:18:40,540
on your Mac or PC or your phone, you type
harvard.edu 或者 yale.edu 的 IP 地址是什么？

350
00:18:40,540 --> 00:18:45,460
in harvard.edu and hit Enter, what your device is designed to do
无论你实际输入了什么，希望附近有一个 DNS 服务器能够用以下形式的数字地址进行回复

351
00:18:45,460 --> 00:18:51,130
is to ask some local DNS server on campus, on your mobile carrier's
something dot something dot something dot something。

352
00:18:51,130 --> 00:18:54,670
network, on your apartment or dorm's network, what is the IP
这就是你的计算机、你的设备实际上将在虚拟信封外面使用的数字。

353
00:18:54,670 --> 00:18:57,340
address of harvard.edu, or yale.edu?
所以，你可以将 DNS 服务器视为

354
00:18:57,340 --> 00:18:59,620
Whatever you actually typed in, hopefully there
符合我们一直坚持的模型，这个模型就是字典的概念，

355
00:18:59,620 --> 00:19:03,003
is a nearby DNS server that will respond with a numeric address of the form
或者更确切地说，是哈希表的概念，在 DNS 服务器内部

356
00:19:03,003 --> 00:19:05,170
something dot something dot something dot something.
本质上就是一个字典，一个两列的电子表格或数据库表格，

357
00:19:05,170 --> 00:19:07,240
And that's the number that your computer,
如果你愿意的话。

358
00:19:07,240 --> 00:19:11,260
your device will actually use on the outside of that virtual envelope.
在一列中是域名，harvard.edu、yale.edu、google.com。

359
00:19:11,260 --> 00:19:14,110
So you can think of DNS servers, honestly,
在右边一列，也就是右边的列

360
00:19:14,110 --> 00:19:17,500
as fitting the model that we keep coming back to, this notion of a dictionary,
只是相应的 IP 地址。

361
00:19:17,500 --> 00:19:22,570
or a hash table, more specifically, whereby inside of a DNS server
就是这样。

362
00:19:22,570 --> 00:19:27,410
is essentially a dictionary, a two column spreadsheet or database table,
技术上来说，它们通常不只是被称为域名，

363
00:19:27,410 --> 00:19:27,910
if you will.
而是被称为域名系统，

364
00:19:27,910 --> 00:19:32,410
And in one column are domain names, harvard.edu, yale.edu, google.com.
也就是 DNS 服务器，它们

365
00:19:32,410 --> 00:19:34,570
On the right-hand side, right-hand column
通常会存储域名，

366
00:19:34,570 --> 00:19:36,610
are just the corresponding IP addresses.
以便在网络中使用。

367
00:19:36,610 --> 00:19:37,570
And that's it.
这就是 DNS 服务器的作用。

368
00:19:37,570 --> 00:19:40,780
To be technical, if they're not generally called just domain names,
它们将域名映射到对应的 IP 地址，

369
00:19:40,780 --> 00:19:43,810
they're called domain name system servers, or DNS servers.
反之亦然。

370
00:19:43,810 --> 00:19:45,280
That's the technical name.
这就是 DNS 服务器的用处。

371
00:19:45,280 --> 00:19:48,420
But I think you'll agree, these two columns,
所以，这些 DNS 服务器的作用就是存储这些映射关系。

372
00:19:48,420 --> 00:19:51,090
what they're doing really is storing this mapping,
对于大多数互联网用户来说，他们并不知道这些服务器的存在，

373
00:19:51,090 --> 00:19:54,020
and for most internet users, they don't know they're even there.
但实际上，它们一直在后台运行，

374
00:19:54,020 --> 00:19:57,770
But they're actually running behind the scenes,
并且对于我们能够访问互联网来说至关重要。

375
00:19:57,770 --> 00:20:01,080
and they're critical to us being able to visit websites.
这就是 DNS 服务器背后的机制。

376
00:20:01,080 --> 00:20:04,290
That's the mechanism behind DNS servers.
谢谢大家。

377
00:20:04,290 --> 00:20:05,780
Thanks, everyone.


369
00:19:40,780 --> 00:19:43,360
technically, it's a fully qualified domain name.
从技术上来说，它是一个完全限定的域名。

370
00:19:43,360 --> 00:19:44,590
More on that another time.
我们下次再聊这个。

371
00:19:44,590 --> 00:19:47,380
But domain names as we know them, generally have different parts.
但我们所知的域名通常包含不同的部分。

372
00:19:47,380 --> 00:19:51,340
And we'll soon see how to tease them apart beyond the usual.
我们很快就会看到如何将它们拆开，而不是像往常那样。

373
00:19:51,340 --> 00:19:56,290
Questions though, on what DNS server's purpose in life is
不过，我想问一下，DNS 服务器的职责是什么

374
00:19:56,290 --> 00:19:59,960
or how this might work?
或者它是如何工作的？

375
00:19:59,960 --> 00:20:00,600
No.
没有。

376
00:20:00,600 --> 00:20:01,100
All right.
好的。

377
00:20:01,100 --> 00:20:03,860
So how does your Mac, how does your PC, how does your phone
那么你的 Mac，你的 PC，你的手机是如何

378
00:20:03,860 --> 00:20:05,810
know what these IP addresses are?
知道这些 IP 地址的呢？

379
00:20:05,810 --> 00:20:08,140
Well, they don't come from the manufacturer this way.
嗯，它们不是以这种方式从制造商那里获得的。

380
00:20:08,140 --> 00:20:10,640
And there's this whole hierarchy in the world of DNS servers
在 DNS 服务器的世界里存在着一个完整的层次结构

381
00:20:10,640 --> 00:20:13,760
such that your phone, your Mac, your PC, will generally
使得你的手机，你的 Mac，你的 PC 通常会

382
00:20:13,760 --> 00:20:18,170
ask the nearest DNS server, which is usually owned by your internet service
询问最近的 DNS 服务器，该服务器通常归你的互联网服务提供商所有

383
00:20:18,170 --> 00:20:22,230
provider at home, in your apartment, or by your university or by your company.
在家，在你的公寓里，或者在你的大学或公司里。

384
00:20:22,230 --> 00:20:23,690
But it's a hierarchical system.
但这是一个分层系统。

385
00:20:23,690 --> 00:20:25,550
And it's kind of a recursive design.
它是一种递归设计。

386
00:20:25,550 --> 00:20:28,910
In that if that local DNS server does not have the answer,
如果该本地 DNS 服务器没有答案，

387
00:20:28,910 --> 00:20:31,640
it's going to ask someone bigger, more important than it.
它就会询问比它更大，更重要的其他人。

388
00:20:31,640 --> 00:20:34,910
If that one doesn't know, it might ask someone, again, recursively for it.
如果那个人也不知道，它可能会递归地询问另一个人。

389
00:20:34,910 --> 00:20:37,130
And throughout the world, there's a finite number
在全世界范围内，有一个有限的数字

390
00:20:37,130 --> 00:20:41,270
of what are called root servers that essentially know about all the dot
被称为根服务器，它们基本上知道所有点

391
00:20:41,270 --> 00:20:44,390
coms in the world, all of the dot edus in the world, all
coms 在世界上，所有 dot edus 在世界上，所有

392
00:20:44,390 --> 00:20:46,440
of the dot whatever is in the world.
dot whatever 在世界上。

393
00:20:46,440 --> 00:20:49,460
And so someone, at the end of the day, knows about those systems.
所以最终，有人会了解这些系统。

394
00:20:49,460 --> 00:20:53,900
And in fact, if you've ever bought, or in the future might buy a domain name,
事实上，如果你曾经购买过，或者将来可能会购买域名，

395
00:20:53,900 --> 00:20:58,760
part of that process is paying someone to associate an IP address for you
该过程的一部分是付钱给某人，将一个 IP 地址与你将实际使用的服务器关联起来

396
00:20:58,760 --> 00:21:01,670
with the actual server that you're going to actually be using.
与你将实际使用的服务器关联起来。

397
00:21:01,670 --> 00:21:04,920
So your final projects, for instance, in CS50, it's sometimes common for folks
例如，在 CS50 中，你的最终项目，人们有时会

398
00:21:04,920 --> 00:21:07,170
to actually buy for personal use their own domain name
为了个人使用而购买自己的域名

399
00:21:07,170 --> 00:21:08,670
for a few dollars a year, typically.
通常每年只需几美元。

400
00:21:08,670 --> 00:21:11,003
So you're sort of renting it more than you're buying it.
所以你更像是租用它，而不是购买它。

401
00:21:11,003 --> 00:21:13,080
But among the steps you'll go through if you ever
但是，如果你曾经

402
00:21:13,080 --> 00:21:17,970
do that is to essentially inform the world what will be the IP address or IP
这样做，你本质上是在通知全世界，你的 IP 地址或 IP 地址将是什么

403
00:21:17,970 --> 00:21:20,790
addresses of your particular domain name that you've
你所购买的特定域名的 IP 地址，

404
00:21:20,790 --> 00:21:23,740
bought for, say, that calendar year.
比如说，是在那一历年。

405
00:21:23,740 --> 00:21:24,240
All right.
好的。

406
00:21:24,240 --> 00:21:26,100
So how does all this get started?
那么这一切是如何开始的呢？

407
00:21:26,100 --> 00:21:30,225
Well, back in the day, when you arrived on campus here at Yale, anyone,
嗯，在过去，当你在耶鲁大学的校园里时，任何人，

408
00:21:30,225 --> 00:21:33,420
or in the world, you would actually configure your Mac or PC
或者在世界上，你实际上会配置你的 Mac 或 PC

409
00:21:33,420 --> 00:21:38,625
to know the IP addresses of your nearest router, of your nearest DNS server.
以了解你最近的路由器和 DNS 服务器的 IP 地址。

410
00:21:38,625 --> 00:21:40,500
So literally, someone would come to your home
所以实际上，过去，当人们注册互联网服务时，有人会来到你家

411
00:21:40,500 --> 00:21:42,667
back in the day when signing up for internet service
来到你家

412
00:21:42,667 --> 00:21:45,180
and configure your Mac or PC for you.
为你配置你的 Mac 或 PC。

413
00:21:45,180 --> 00:21:48,900
Of course, nowadays I don't remember anyone really touching my computer
当然，现在我记不清有人真正碰过我的电脑了

414
00:21:48,900 --> 00:21:50,460
recently to configure it for me.
最近来为我配置它。

415
00:21:50,460 --> 00:21:52,315
It all seems to happen automatically.
这一切似乎都是自动发生的。

416
00:21:52,315 --> 00:21:54,940
And indeed, there's this other type of server now in the world,
事实上，现在世界上还有另一种类型的服务器，

417
00:21:54,940 --> 00:21:59,640
another solution to a human made problem known as DHCP.
另一个解决人为问题的方案被称为 DHCP。

418
00:21:59,640 --> 00:22:04,680
And I think this is among the remaining acronyms for today, dynamic host
我认为这属于今天的剩余缩略词，动态主机

419
00:22:04,680 --> 00:22:05,757
configuration protocol.
配置协议。

420
00:22:05,757 --> 00:22:08,340
And it's not that intellectually interesting to memorize that.
记住它并没有那么有趣。

421
00:22:08,340 --> 00:22:11,610
But what DHCP servers do is answer questions
但是 DHCP 服务器的作用是回答问题

422
00:22:11,610 --> 00:22:17,430
of the form "what should be my DNS server and router," quote, unquote.
诸如“我的 DNS 服务器和路由器应该是什么”之类的问答。

423
00:22:17,430 --> 00:22:20,730
So nowadays, when you turn on your phone in the morning,
所以现在，当你早上打开手机时，

424
00:22:20,730 --> 00:22:23,640
if you actually powered it off, if you open
如果你真的关机了，如果你打开

425
00:22:23,640 --> 00:22:27,690
your laptop lid for the first day of classes or the like, your Mac, your PC,
你的笔记本电脑盖子，开始上课，你的 Mac，你的 PC，

426
00:22:27,690 --> 00:22:30,810
your phone is essentially broadcasting a Hello, World message,
你的手机本质上是在广播一条“Hello, World”消息，

427
00:22:30,810 --> 00:22:34,860
unbeknownst to you, that's just asking the local network, hey,
你不知道的是，它只是在询问本地网络，嘿，

428
00:22:34,860 --> 00:22:39,060
what IP address should I use for my DNS server and for my router.
我的 DNS 服务器和路由器应该使用什么 IP 地址。

429
00:22:39,060 --> 00:22:42,540
And hopefully, Harvard or Yale or your apartment or your home more
希望哈佛或耶鲁，或者你的公寓，或者你家更

430
00:22:42,540 --> 00:22:46,380
generally has a DHCP server nearby whose purpose in life
普遍地，会有一个 DHCP 服务器在附近，它的职责是

431
00:22:46,380 --> 00:22:49,170
is just to hand out answers to that question.
仅仅是回答这个问题。

432
00:22:49,170 --> 00:22:51,750
And what these DHCP servers also do is they
这些 DHCP 服务器还做的另一件事是，它们

433
00:22:51,750 --> 00:22:54,510
tell your Mac, your PC, your phone, what IP
告诉你的 Mac，你的 PC，你的手机，你的设备应该使用什么 IP 地址，因为这

434
00:22:54,510 --> 00:22:57,720
address your device should use because that too
也是不再手动配置了。

435
00:22:57,720 --> 00:23:00,490
is no longer manually configured.
不再手动配置了。

436
00:23:00,490 --> 00:23:03,010
So this all just nowadays happens automatically.
所以现在这一切都是自动发生的。

437
00:23:03,010 --> 00:23:05,190
And in the case of a campus like this or at Yale,
对于像这样的校园，或者耶鲁大学来说，

438
00:23:05,190 --> 00:23:09,210
it's because, at the very beginning of your visit to campus,
这是因为在你访问校园之初，

439
00:23:09,210 --> 00:23:10,800
you did register somehow.
你以某种方式注册了。

440
00:23:10,800 --> 00:23:12,000
You probably logged in.
你可能登录了。

441
00:23:12,000 --> 00:23:15,840
You authenticated against your Harvard account or your Yale account.
你用你的哈佛账户或耶鲁账户进行了身份验证。

442
00:23:15,840 --> 00:23:19,800
And that is what enabled the DHCP servers henceforth
而这正是使得 DHCP 服务器从此

443
00:23:19,800 --> 00:23:23,100
and forever to recognize your particular computer
并且永远识别你的特定电脑

444
00:23:23,100 --> 00:23:25,920
and answer those questions for you.
并为你回答这些问题。

445
00:23:25,920 --> 00:23:26,550
All right.
好的。

446
00:23:26,550 --> 00:23:29,490
So that's it for how the internet works, at least so
所以，关于互联网是如何工作的，至少就

447
00:23:29,490 --> 00:23:31,080
far as we are concerned today.
今天我们所关心的而言，就是这些了。

448
00:23:31,080 --> 00:23:33,090
We're going to now start building on top of it.
现在我们将开始在它的基础上构建。

449
00:23:33,090 --> 00:23:35,970
And undoubtedly, the most popular form of the internet
毫无疑问，现在最流行的互联网形式是

450
00:23:35,970 --> 00:23:38,010
nowadays is something called HTTP.
一种叫做 HTTP 的东西。

451
00:23:38,010 --> 00:23:42,180
That is the World Wide Web, though most people don't really say it in long form
那就是万维网，尽管大多数人不再用长形式说它了

452
00:23:42,180 --> 00:23:42,810
anymore.
了。

453
00:23:42,810 --> 00:23:49,020
But HTTP is just another protocol that governs how web browsers
但是 HTTP 只是另一个协议，它管理着网页浏览器

454
00:23:49,020 --> 00:23:51,960
and how web servers speak, just like IP is
以及 web 服务器是如何通信的，就像 IP 是

455
00:23:51,960 --> 00:23:55,320
a protocol that governs how computers address each other on the internet,
一个管理着电脑在互联网上如何互相寻址的协议，

456
00:23:55,320 --> 00:23:59,730
and how TCP governs how computers keep track of sequences of packets
以及 TCP 如何管理着电脑对从 A 点到 B 点的报文序列进行跟踪

457
00:23:59,730 --> 00:24:03,360
from point A to point B and also multiplex among different services
以及如何通过不同的服务进行多路复用

458
00:24:03,360 --> 00:24:04,920
using those port numbers.
使用这些端口号。

459
00:24:04,920 --> 00:24:09,333
And to be clear, what's a protocol-- well, in the human world,
需要澄清的是，什么是协议？——嗯，在人类世界中，

460
00:24:09,333 --> 00:24:10,500
it's a very common protocol.
这是一种非常普遍的协议。

461
00:24:10,500 --> 00:24:11,830
And I can't reach any of you.
我无法接触到你们中的任何一个人。

462
00:24:11,830 --> 00:24:14,205
But if I were to reach over and say hi, nice to meet you.
但如果我要伸出手说嗨，很高兴认识你。

463
00:24:14,205 --> 00:24:17,240
You presumably, if we weren't five feet apart, would extend your hand.
如果我们不是相隔五英尺，你可能会伸出手。

464
00:24:17,240 --> 00:24:19,990
We would sort of acknowledge, in this strange cultural convention.
我们会在这种奇怪的文化习俗中，进行某种形式的回应。

465
00:24:19,990 --> 00:24:21,000
But that's a protocol.
但那是一种协议。

466
00:24:21,000 --> 00:24:21,870
I know how to do it.
我知道怎么做。

467
00:24:21,870 --> 00:24:22,930
You know how to do it.
你也知道怎么做。

468
00:24:22,930 --> 00:24:23,700
I'm initiating.
我正在发起。

469
00:24:23,700 --> 00:24:24,450
You're responding.
你在回应。

470
00:24:24,450 --> 00:24:27,158
And that's exactly what's happening all the time on the internet.
而这正是互联网上一直发生的事情。

471
00:24:27,158 --> 00:24:30,250
You have a client, like me in this case, that's initiating a request.
你有一个客户端，比如我，正在发起请求。

472
00:24:30,250 --> 00:24:32,250
You have a server, like you in this case, that's
你有一个服务器，比如你，正在

473
00:24:32,250 --> 00:24:33,720
responding to that request.
回应那个请求。

474
00:24:33,720 --> 00:24:37,080
Or analogously, if you're in a restaurant,
或者，类比一下，如果你在餐厅，

475
00:24:37,080 --> 00:24:39,242
you might be the client sitting down at the table.
你可能是坐在餐桌旁的顾客。

476
00:24:39,242 --> 00:24:40,200
You want to order food.
你想点餐。

477
00:24:40,200 --> 00:24:44,220
And there's a server that serves you that food after you have requested it.
然后会有一个服务员在你点餐后为你提供食物。

478
00:24:44,220 --> 00:24:48,310
So computers, really, on the internet are implementing that same paradigm.
所以，实际上，互联网上的计算机正在实现相同的模式。

479
00:24:48,310 --> 00:24:52,462
So when it comes very specifically to the web, which is different, of course,
所以，当我们具体谈到网络时，它当然与

480
00:24:52,462 --> 00:24:54,170
from email and video conferencing and all
电子邮件和视频会议以及其他

481
00:24:54,170 --> 00:24:57,690
of these other services on the internet, the world wide web
互联网服务不同，万维网

482
00:24:57,690 --> 00:25:01,230
uses this protocol, HTTP, which standardizes
使用这种协议，HTTP，它标准化了

483
00:25:01,230 --> 00:25:04,710
what goes inside of those envelopes in order
这些信封中的内容，以便

484
00:25:04,710 --> 00:25:09,790
to allow a web browser to request and receive information from a web server.
让网页浏览器向网页服务器请求和接收信息。

485
00:25:09,790 --> 00:25:12,990
So we've talked about really the lower level details up until now,
所以到目前为止，我们已经讨论了底层细节，

486
00:25:12,990 --> 00:25:14,350
the outside of the envelope.
信封的外部。

487
00:25:14,350 --> 00:25:18,210
Let's now look inside of the envelope when it comes to actual web pages
现在让我们来看看信封里面的内容，也就是实际的网页

488
00:25:18,210 --> 00:25:22,350
that you might visit or soon today, you yourselves might design.
你们可能会访问的，或者很快你们自己可能会设计的。

489
00:25:22,350 --> 00:25:27,660
So HTTP stands for Hypertext Transfer Protocol, which is another mouthful,
所以 HTTP 代表超文本传输协议，这又是一个很长的词，

490
00:25:27,660 --> 00:25:31,080
but, again, just standardizes how we're going to get web traffic from point A
但是，它只是标准化了我们如何从 A 点

491
00:25:31,080 --> 00:25:33,990
to point B, from browser to server and back.
到 B 点，从浏览器到服务器，再返回。

492
00:25:33,990 --> 00:25:38,110
HTTPS is literally the secure version of that.
HTTPS 实际上是它的安全版本。

493
00:25:38,110 --> 00:25:41,550
And what that means for today's purposes is that the connection is somehow
而对于今天来说，这意味着连接以某种方式

494
00:25:41,550 --> 00:25:44,490
encrypted, scrambled using very fancy mathematics
被加密，使用非常复杂的数学方法进行加密

495
00:25:44,490 --> 00:25:48,360
so that it is very, very, very unlikely that anyone
使得任何人都极不可能

496
00:25:48,360 --> 00:25:52,230
who intercepts your traffic, your packets between point A and point B
截获你的流量，你的 A 点和 B 点之间的数据包

497
00:25:52,230 --> 00:25:55,110
will have any idea what is inside of those envelopes.
知道这些信封里面是什么。

498
00:25:55,110 --> 00:25:57,540
They might intercept the packet itself digitally.
他们可能会数字地截获数据包本身。

499
00:25:57,540 --> 00:25:59,230
They might try to open it up.
他们可能会尝试打开它。

500
00:25:59,230 --> 00:26:02,500
But it's going to look metaphorically like random zeros
但它看起来就像里面是随机的零

501
00:26:02,500 --> 00:26:08,110
and ones on the inside when using HTTPS because of what's called encryption.
和一，这是因为使用了所谓的加密。

502
00:26:08,110 --> 00:26:10,738
But let's look at some canonical URLs.
但是让我们来看一些规范的 URL。

503
00:26:10,738 --> 00:26:13,780
All of us are in the habit of seeing these and typing these all the time.
我们都习惯于经常看到和输入这些 URL。

504
00:26:13,780 --> 00:26:16,280
Well, let's actually tease apart some of the jargon here.
好吧，让我们来解析一下这里的一些术语。

505
00:26:16,280 --> 00:26:20,450
So here is an example URL with all of the usual components.
这是一个包含所有常用组件的 URL 示例。

506
00:26:20,450 --> 00:26:23,680
So here, for instance, with the yellow slash,
例如，这里带有黄色的斜杠，

507
00:26:23,680 --> 00:26:26,860
this generally means, even though you rarely type it
这通常意味着，即使你很少输入它

508
00:26:26,860 --> 00:26:34,000
and you rarely see it nowadays, this means the default page for the website.
而且如今你也很少看到它，这意味着这是网站的默认页面。

509
00:26:34,000 --> 00:26:37,070
Give me the root of the website, so to speak.
可以说是，给我网站的根目录。

510
00:26:37,070 --> 00:26:39,400
So this is to say this represents a folder,
所以，这意味着这代表一个文件夹，

511
00:26:39,400 --> 00:26:43,310
like, the default folder inside of which is presumably the default web page.
比如，默认文件夹，里面可能就是默认的网页。

512
00:26:43,310 --> 00:26:45,880
And we'll see what that means more concretely in just a bit.
我们很快就会更具体地了解它的含义。

513
00:26:45,880 --> 00:26:48,970
If, though, you're visiting a more specific URL,
但是，如果你访问的是更具体的 URL，

514
00:26:48,970 --> 00:26:51,160
we're going to henceforth call this a path.
我们今后将称之为路径。

515
00:26:51,160 --> 00:26:55,720
So slash something is representative of a path, maybe a file, maybe a folder,
所以，斜杠后面接东西，代表一个路径，可能是一个文件，也可能是一个文件夹，

516
00:26:55,720 --> 00:26:58,960
just like in the world of Macs, PCs, and cloud services.
就像 Mac、PC 和云服务的世界一样。

517
00:26:58,960 --> 00:27:02,410
Specifically, you might sometimes be in the habit of visiting an actual file,
具体来说，你可能有时习惯于访问实际的文件，

518
00:27:02,410 --> 00:27:05,230
something like /file.html.
比如 /file.html。

519
00:27:05,230 --> 00:27:08,050
Nowadays, this is kind of very '90s, early 2000s.
现在，这有点像 90 年代初和 2000 年代初。

520
00:27:08,050 --> 00:27:11,330
Nowadays most web servers hide the file extension,
现在大多数 Web 服务器隐藏了文件扩展名，

521
00:27:11,330 --> 00:27:14,330
the dot HTML, even if it's there on the server.
也就是 .html，即使它在服务器上存在。

522
00:27:14,330 --> 00:27:16,270
It just looks a little messy nowadays.
现在看起来有点乱。

523
00:27:16,270 --> 00:27:18,460
It sort of reveals information that's not necessary.
它有点暴露了不必要的 信息。

524
00:27:18,460 --> 00:27:22,960
So very often you won't see dot HTML, even if there is actually
所以你经常不会看到 .html，即使实际上

525
00:27:22,960 --> 00:27:25,150
a file ending in that suffix.
存在以该后缀结尾的文件。

526
00:27:25,150 --> 00:27:27,700
You might instead see /folder, with a slash.
你可能会看到 /folder，带一个斜杠。

527
00:27:27,700 --> 00:27:30,130
Maybe not a slash, maybe a slash, but that generally
可能没有斜杠，可能有一个斜杠，但这通常

528
00:27:30,130 --> 00:27:32,020
represents a folder on the server.
代表服务器上的一个文件夹。

529
00:27:32,020 --> 00:27:34,480
And sometimes there are, of course, files in folders.
当然，有时文件夹中也会有文件。

530
00:27:34,480 --> 00:27:38,560
So all of this stuff you're probably familiar with on Macs and PCs and even
所以所有这些东西你可能在 Mac 和 PC 上甚至

531
00:27:38,560 --> 00:27:39,790
Google Drive and the like.
谷歌云盘等地方都很熟悉。

532
00:27:39,790 --> 00:27:43,000
Those same semantics exist in the context of URLs.
这些相同的语义也存在于 URL 的上下文中。

533
00:27:43,000 --> 00:27:48,040
So there's a mapping between this URL and something on a hard drive somewhere
所以，这个 URL 与某个服务器硬盘上的某个东西之间存在映射。

534
00:27:48,040 --> 00:27:49,160
on some server.
在某个服务器上。

535
00:27:49,160 --> 00:27:49,660
All right.
好的。

536
00:27:49,660 --> 00:27:51,110
What about the other parts?
其他部分呢？

537
00:27:51,110 --> 00:27:55,952
So this is the fully qualified domain name, so the full domain name.
所以这是完全限定域名，也就是完整域名。

538
00:27:55,952 --> 00:27:57,910
Even though you and I, when we say domain name,
即使你和我，当我们说域名时，

539
00:27:57,910 --> 00:28:01,250
we typically just mean this example.com, for instance.
我们通常只指的是这个 example.com，比如。

540
00:28:01,250 --> 00:28:06,460
So technically, the W-W-W is what we would typically call a host name.
所以从技术上讲，www 通常被称为主机名。

541
00:28:06,460 --> 00:28:11,020
A host name is like the name of a specific server that lives somewhere
主机名就像某个特定服务器的名称，它存在于某个地方

542
00:28:11,020 --> 00:28:12,130
in that domain.
在这个域名中。

543
00:28:12,130 --> 00:28:13,810
And this is just a human convention.
这只是一个人类约定。

544
00:28:13,810 --> 00:28:19,450
Even though most URLs still probably start with W-W-W dot something,
即使大多数 URL 仍然可能以 www. 开头，

545
00:28:19,450 --> 00:28:21,070
that's not strictly required.
但这不是严格要求的。

546
00:28:21,070 --> 00:28:22,930
That's just a configuration detail.
这只是一个配置细节。

547
00:28:22,930 --> 00:28:26,290
And historically, this was just to kind of signal
从历史上看，这只是为了给

548
00:28:26,290 --> 00:28:29,620
to less technical people in particular, when you would see a URL in print,
特别是技术水平较低的人，当你看到印刷的 URL 时，

549
00:28:29,620 --> 00:28:31,600
that oh, this is a web address.
就会发现，哦，这是一个网络地址。

550
00:28:31,600 --> 00:28:34,180
This is an address on that new world wide web.
这是一个新的万维网上的地址。

551
00:28:34,180 --> 00:28:36,430
W-W-W just kind of connotes that.
www 只是暗示了这一点。

552
00:28:36,430 --> 00:28:39,400
But decreasingly, do you see websites using this?
但是，你是否看到越来越少的网站使用它？

553
00:28:39,400 --> 00:28:42,370
I mean, some of CS50's own tools, it's just cs50.dev.
我的意思是，CS50 自己的一些工具，它就是 cs50.dev。

554
00:28:42,370 --> 00:28:44,020
It's just CS50.ai.
它就是 CS50.ai。

555
00:28:44,020 --> 00:28:46,780
Because most of us are now conditioned to know that,
因为我们大多数人现在已经被训练成知道，

556
00:28:46,780 --> 00:28:51,190
oh, OK, that's probably a URL, even though there's no explicit W-W-W.
哦，好的，这可能是一个 URL，即使没有明确的 W-W-W。

557
00:28:51,190 --> 00:28:56,020
And in fact, even if you type the W-W-W using tricks that we'll soon see,
事实上，即使你使用我们很快就会看到的技巧输入 W-W-W，

558
00:28:56,020 --> 00:28:58,480
you can redirect the user from one to another.
你可以将用户从一个重定向到另一个。

559
00:28:58,480 --> 00:29:01,870
Essentially, remove the W-W-W or add it to the server,
本质上，删除 W-W-W 或将其添加到服务器，

560
00:29:01,870 --> 00:29:04,450
to the address bar in their browser.
到他们浏览器中的地址栏。

561
00:29:04,450 --> 00:29:07,180
This thing here is called the top level domain.
这里的东西叫做顶级域名。

562
00:29:07,180 --> 00:29:09,800
And many of the domain names that you and I are in the habit,
而你和我习惯使用的许多域名，

563
00:29:09,800 --> 00:29:14,500
certainly in the US nowadays, end in .com, which stands for commercial,
当然，现在在美国，它们以 .com 结尾，代表商业，

564
00:29:14,500 --> 00:29:18,040
.edu stands for educational, .gov stands for US government.
.edu 代表教育，.gov 代表美国政府。

565
00:29:18,040 --> 00:29:21,340
But of course, there's hundreds of country codes, too, that by convention
当然，还有数百个国家代码，根据惯例

566
00:29:21,340 --> 00:29:22,180
are two letters.
是两个字母。

567
00:29:22,180 --> 00:29:25,690
So .uk for the United Kingdom, .jp for Japan,
所以 .uk 代表英国，.jp 代表日本，

568
00:29:25,690 --> 00:29:29,030
and two characters for every other country in the world.
以及世界上其他每个国家的两个字符。

569
00:29:29,030 --> 00:29:32,540
But even those have kind of been used in clever ways.
但即使是那些也以巧妙的方式使用。

570
00:29:32,540 --> 00:29:38,020
So .tv, for instance, is actually a country code that's been used by a lot
例如，.tv 实际上是一个国家代码，已被很多

571
00:29:38,020 --> 00:29:40,870
of the English-speaking world to represent television,
英语世界的人用来代表电视，

572
00:29:40,870 --> 00:29:42,730
for TV shows and the like.
用于电视节目等。

573
00:29:42,730 --> 00:29:46,310
.ai, similarly, does not actually mean artificial intelligence.
类似地，.ai 实际上并不意味着人工智能。

574
00:29:46,310 --> 00:29:50,410
It's a two character country code that has been used by the world nowadays
它是一个由当今世界使用的两个字符的国家代码

575
00:29:50,410 --> 00:29:51,910
to represent AI.
来代表 AI。

576
00:29:51,910 --> 00:29:58,880
.ly for bitly and CS50.ly, too, that's a country code that allows people like us
.ly 代表 bitly 和 CS50.ly，也是一个国家代码，它允许像我们这样的人

577
00:29:58,880 --> 00:30:02,120
to essentially buy domain names in that subdomain.
基本上购买那个子域中的域名。

578
00:30:02,120 --> 00:30:04,430
But long story short, back in the day there only
但长话短说，在过去，只

579
00:30:04,430 --> 00:30:06,630
used to be a few of these top level domains.
存在少数几个顶级域名。

580
00:30:06,630 --> 00:30:08,490
Now there are hundreds of them.
现在有数百个。

581
00:30:08,490 --> 00:30:12,290
So I do think, over time, it's going to become
所以我认为，随着时间的推移，它将变得

582
00:30:12,290 --> 00:30:17,390
a lot less regimented as it seems to be now as to what URLs actually look like.
不那么死板，就像现在一样，关于 URL 的实际外观。

583
00:30:17,390 --> 00:30:23,840
Lastly, beyond the :// here is the scheme, or the protocol.
最后，这里 :// 之后的，是方案或协议。

584
00:30:23,840 --> 00:30:25,940
And this just means that this URL is going
而这仅仅意味着这个 URL 将

585
00:30:25,940 --> 00:30:32,690
to be securely accessing the server thanks to the HTTPS instead of HTTP.
通过 HTTPS 而不是 HTTP 安全地访问服务器。

586
00:30:32,690 --> 00:30:33,320
Mouthful.
说起来有点长。

587
00:30:33,320 --> 00:30:35,570
But just to get some vocabulary out there.
但只是为了介绍一些词汇。

588
00:30:35,570 --> 00:30:38,780
Questions on these here URLs that we've probably
关于这些我们可能已经

589
00:30:38,780 --> 00:30:40,430
been taking for granted for years?
多年来一直认为理所当然的 URL 的问题？

590
00:30:40,430 --> 00:30:42,810
AUDIENCE: Who approves .edu?
听众：谁批准 .edu？

591
00:30:42,810 --> 00:30:45,030
DAVID MALAN: Really good question, who approves .edu.
大卫·马兰：真是个好问题，谁批准了 .edu。

592
00:30:45,030 --> 00:30:49,172
So you have to be in an accredited educational institution to use .edu.
所以你必须在经认可的教育机构才能使用 .edu。

593
00:30:49,172 --> 00:30:51,630
I don't recall the name of the organization that does this.
我不记得进行这项工作的组织的名称。

594
00:30:51,630 --> 00:30:53,255
But it can't be anyone on the internet.
但这不能是互联网上的任何人。

595
00:30:53,255 --> 00:30:55,920
You actually have to apply and be a seemingly legitimate
你实际上必须申请并成为一个看似合法的

596
00:30:55,920 --> 00:30:57,450
educational institution.
教育机构。

597
00:30:57,450 --> 00:30:59,910
That is not true of a lot of domain names.
对于许多域名来说，情况并非如此。

598
00:30:59,910 --> 00:31:01,350
Anyone can buy a .com.
任何人都可以购买 .com。

599
00:31:01,350 --> 00:31:05,593
Anyone can buy .org, a .net, not a .gov, for instance.
任何人都可以购买 .org，.net，例如，不是 .gov。

600
00:31:05,593 --> 00:31:08,010
And then different countries might have their own policies
然后不同的国家可能会有他们自己的政策

601
00:31:08,010 --> 00:31:12,280
over who can be in what domain or subdomain as well.
关于谁可以在哪个域或子域。

602
00:31:12,280 --> 00:31:12,780
All right.
好的。

603
00:31:12,780 --> 00:31:16,530
So now that we have URLs so defined, there's
因此，既然我们已经定义了 URL，那么

604
00:31:16,530 --> 00:31:19,680
a couple of verbs with which to be familiar in the context of the web,
在 Web 的上下文中，有一些动词需要熟悉，

605
00:31:19,680 --> 00:31:21,180
namely GET and POST.
即 GET 和 POST。

606
00:31:21,180 --> 00:31:23,400
And that is to say, there's two different ways
也就是说，有两种不同的方式

607
00:31:23,400 --> 00:31:25,530
to request information from a server.
从服务器请求信息。

608
00:31:25,530 --> 00:31:28,140
That is, there's two different ways to format requests
也就是说，有两种不同的方式来格式化请求

609
00:31:28,140 --> 00:31:29,700
that go inside of this envelope.
放入这个信封中。

610
00:31:29,700 --> 00:31:33,990
And the default, daresay, and the most common one is just what's called GET,
默认的，可以说，最常见的一种就是所谓的 GET，

611
00:31:33,990 --> 00:31:36,390
literally the verb, the English verb get.
就是动词，英文中的动词 get。

612
00:31:36,390 --> 00:31:40,113
And we'll see in a moment what this means exactly concretely.
我们很快就会看到，这在实际中具体意味着什么。

613
00:31:40,113 --> 00:31:42,280
But just know that there's an alternative that we'll
但只要知道，还有一个选择，我们会

614
00:31:42,280 --> 00:31:44,650
play with over time known as POST.
随着时间的推移进行尝试，被称为 POST。

615
00:31:44,650 --> 00:31:49,660
And whereas GET, as the verb suggests, is all about just getting information,
而 GET，正如动词所暗示的，仅仅是获取信息，

616
00:31:49,660 --> 00:31:53,740
POST, as the verb kind of suggests, is more about sending information.
POST，正如动词所暗示的，更多地是发送信息。

617
00:31:53,740 --> 00:31:56,620
So POST is used when you submit a credit card.
所以，当你提交信用卡时，会使用 POST。

618
00:31:56,620 --> 00:31:59,380
Because you're sort of sending potentially sensitive information.
因为你正在发送可能敏感的信息。

619
00:31:59,380 --> 00:32:03,190
POST is used when you upload an image to a website or the like,
当你将图像上传到网站或类似的地方时，会使用 POST，

620
00:32:03,190 --> 00:32:05,830
but GET is used when you're just clicking on links
但当你只是点击链接

621
00:32:05,830 --> 00:32:09,950
and visiting web pages and not really pushing any information to the server.
并访问网页，并没有真正将任何信息推送到服务器时，会使用 GET。

622
00:32:09,950 --> 00:32:13,540
So for today, we'll focus primarily on GET.
所以，今天，我们将主要关注 GET。

623
00:32:13,540 --> 00:32:16,150
So what does this mean?
那么，这意味着什么？

624
00:32:16,150 --> 00:32:19,930
Inside of this envelope, probably unbeknownst to you up until now,
在这个信封里面，可能你直到现在还不知道，

625
00:32:19,930 --> 00:32:22,330
is our messages that look like this.
是我们这样的消息。

626
00:32:22,330 --> 00:32:26,920
These are HTTP messages that are being put automatically
这些是 HTTP 消息，它们被自动地

627
00:32:26,920 --> 00:32:30,940
in these virtual envelopes for you by your Mac, your PC, for your phone.
放入这些虚拟信封中，由你的 Mac，你的 PC，你的手机为你完成。

628
00:32:30,940 --> 00:32:38,440
So for instance, if you were to visit HTTPS://www.harvard.edu,
例如，如果你要访问 HTTPS://www.harvard.edu，

629
00:32:38,440 --> 00:32:39,880
you would hit Enter.
你将按下回车键。

630
00:32:39,880 --> 00:32:41,830
What your Mac, PC, or phone is going to do
你的 Mac，PC 或手机将要做的是

631
00:32:41,830 --> 00:32:44,260
is put a textual message that looks literally
将一个文本消息放入信封中，这个消息看起来完全

632
00:32:44,260 --> 00:32:48,190
like this inside of a virtual envelope, address it on the outside
像这样，放入一个虚拟信封中，在信封外面写上地址

633
00:32:48,190 --> 00:32:51,760
to the appropriate IP address for harvard.edu using your own IP
到 harvard.edu 的正确 IP 地址，使用你自己的 IP

634
00:32:51,760 --> 00:32:55,060
address as the source address, and then hand it off to some nearest router.
地址作为源地址，然后将其交给最近的路由器。

635
00:32:55,060 --> 00:32:58,750
But inside of this envelope is enough information to the server
但在这个信封里面，包含足够的信息让服务器

636
00:32:58,750 --> 00:33:00,440
to know what it is you want.
知道你想要什么。

637
00:33:00,440 --> 00:33:02,292
So for instance, GET is the verb.
例如，GET 是动词。

638
00:33:02,292 --> 00:33:04,000
So you just want to get some information.
所以你只是想要获取一些信息。

639
00:33:04,000 --> 00:33:05,920
The information you want to get is /, which
你想要获取的信息是 /，它

640
00:33:05,920 --> 00:33:09,730
I defined earlier as just the default page on the website.
我之前定义过，就是网站上的默认页面。

641
00:33:09,730 --> 00:33:13,810
HTTP/2 just means what version of HTTP we're talking about.
HTTP/2 仅仅意味着我们正在讨论 HTTP 的哪个版本。

642
00:33:13,810 --> 00:33:17,110
You'll see nowadays in the wild, 1.1, you'll see 2,
现在你会在现实中看到 1.1，你会看到 2，

643
00:33:17,110 --> 00:33:19,180
you'll start to see version 3 over time.
随着时间的推移，你会开始看到版本 3。

644
00:33:19,180 --> 00:33:21,220
But I'll use 2 for all of my examples here.
但我在这里的所有例子中都会使用 2。

645
00:33:21,220 --> 00:33:23,440
And you'll see inside of this envelope, too,
你会在这个信封里面看到，

646
00:33:23,440 --> 00:33:27,910
what we're going to start calling an HTTP header, a single line of text that
我们接下来将要称之为 HTTP 标头，是一行文本，它

647
00:33:27,910 --> 00:33:32,770
literally tells the server what fully qualified domain name it's looking for.
字面上告诉服务器它正在寻找哪个完全限定域名。

648
00:33:32,770 --> 00:33:37,910
And this is important only insofar as nowadays, generally on a server,
这很重要，因为如今，通常在一台服务器上，

649
00:33:37,910 --> 00:33:40,300
you might have multiple websites being hosted.
你可能会托管多个网站。

650
00:33:40,300 --> 00:33:44,050
This is not going to be true probably of Google or of Microsoft
这可能不适用于 Google 或微软

651
00:33:44,050 --> 00:33:46,352
or Meta or massive companies like that.
或 Meta 或类似的大公司。

652
00:33:46,352 --> 00:33:49,060
But it's definitely going to be true of smaller enterprises, even
但这肯定适用于较小的企业，甚至

653
00:33:49,060 --> 00:33:52,180
places like Harvard that don't need thousands of web servers,
像哈佛这样的地方，不需要成千上万的 Web 服务器，

654
00:33:52,180 --> 00:33:54,770
but maybe just a couple, or maybe just a few.
但也许只需要两三个，或者只有一两个。

655
00:33:54,770 --> 00:33:58,780
So in this case, this ensures that when the server receives this packet,
因此，在这种情况下，这确保当服务器收到此数据包时，

656
00:33:58,780 --> 00:34:02,350
it knows to serve up harvard.edu and not yale.edu
它知道要提供 harvard.edu，而不是 yale.edu

657
00:34:02,350 --> 00:34:04,990
or some other website that, by coincidence, might just be
或其他一些巧合可能只是

658
00:34:04,990 --> 00:34:08,409
hosted on the same server because both Harvard and Yale are maybe
托管在同一台服务器上，因为哈佛和耶鲁都可能

659
00:34:08,409 --> 00:34:11,900
paying the same cloud provider to host their websites.
向同一个云提供商付费来托管他们的网站。

660
00:34:11,900 --> 00:34:14,980
So dot dot dot just means there's other HTTP headers.
因此，点点点意味着还有其他 HTTP 标头。

661
00:34:14,980 --> 00:34:18,830
But notice the colon here is just giving us yet another one of those key value
但请注意，此处的冒号只是为我们提供了另一个键值对。

662
00:34:18,830 --> 00:34:19,330
pairs.
对。

663
00:34:19,330 --> 00:34:20,230
The key is HOST.
键是 HOST。

664
00:34:20,230 --> 00:34:22,600
The value is www.harvard.edu.
值为 www.harvard.edu。

665
00:34:22,600 --> 00:34:25,389
There, again, are those dictionaries that I
再次出现了那些字典，我

666
00:34:25,389 --> 00:34:28,330
claimed we would continue to see all over the place.
声称我们会继续在各处看到。

667
00:34:28,330 --> 00:34:30,820
What then comes back from the server?
那么服务器会返回什么？

668
00:34:30,820 --> 00:34:34,449
If this is what's inside the message from browser to server,
如果这就是浏览器到服务器消息的内容，

669
00:34:34,449 --> 00:34:36,070
what does the server send back?
服务器会发回什么？

670
00:34:36,070 --> 00:34:38,170
Ideally, the server sends back a message that
理想情况下，服务器会发送一条消息，

671
00:34:38,170 --> 00:34:41,560
looks like this, an acknowledgment of what version is being used,
看起来像这样，确认正在使用哪个版本，

672
00:34:41,560 --> 00:34:45,699
a status code, which is going to be an arcane looking number, like 200.
一个状态码，它将是一个看起来很神秘的数字，比如 200。

673
00:34:45,699 --> 00:34:48,429
It's going to then have another HTTP header of its own saying
它随后将有另一个自己的 HTTP 标头，说明

674
00:34:48,429 --> 00:34:51,730
what type of content is in this envelope, ideally,
这个信封中的内容类型是什么，理想情况下，

675
00:34:51,730 --> 00:34:53,469
something called text/html.
称为 text/html 的东西。

676
00:34:53,469 --> 00:34:56,350
That is hypertext markup language, which we're about to see.
这就是超文本标记语言，我们即将看到。

677
00:34:56,350 --> 00:34:57,820
And then some other stuff.
然后是一些其他的东西。

678
00:34:57,820 --> 00:35:00,790
That's what's coming back from the server to the browser.
这就是从服务器返回到浏览器的內容。

679
00:35:00,790 --> 00:35:02,680
And we can actually now see this.
我们现在实际上可以看到这一点。

680
00:35:02,680 --> 00:35:05,240
Let me actually go over to VS Code here.
让我实际到 VS Code 这里。

681
00:35:05,240 --> 00:35:08,620
Let me maximize my terminal window just so we can see more at once.
让我最大化我的终端窗口，以便我们能够一次看到更多内容。

682
00:35:08,620 --> 00:35:11,200
And let me go ahead and type in this command,
让我继续输入这个命令，

683
00:35:11,200 --> 00:35:21,520
curl -I https://www.harvard.edu/, so a complete URL that's secure,
curl -I https://www.harvard.edu/，因此这是一个安全的完整 URL，

684
00:35:21,520 --> 00:35:24,340
that's got the host name of W-W-W.
它包含 W-W-W 的主机名。

685
00:35:24,340 --> 00:35:27,040
And curl just means connect to a URL.
curl 只是意味着连接到一个 URL。

686
00:35:27,040 --> 00:35:30,960
It's a command line program that comes with Linux, comes with Mac OS, Windows.
它是一个命令行程序，随 Linux 一起提供，随 Mac OS 一起提供，随 Windows 一起提供。

687
00:35:30,960 --> 00:35:32,710
You might have to install it individually.
你可能需要单独安装它。

688
00:35:32,710 --> 00:35:35,180
And it just lets me simulate being a browser,.
它只是让我模拟成为一个浏览器，

689
00:35:35,180 --> 00:35:37,900
It's going to let me simulate sending a packet like this
它将让我模拟发送一个像这样的数据包

690
00:35:37,900 --> 00:35:40,460
without caring what the website actually looks like,
而不关心网站实际上是什么样子，

691
00:35:40,460 --> 00:35:45,410
so no pictures, no images, no text, no nothing, just what's inside
因此没有图片，没有图像，没有文本，什么都没有，只有服务器响应的信封内

692
00:35:45,410 --> 00:35:47,900
of the envelope in terms of the server's response.
的内容。

693
00:35:47,900 --> 00:35:52,070
And here's mostly dot dot dot, the ellipses I raised my hand at earlier?
这里大部分是点点点，我之前举手提到的省略号？

694
00:35:52,070 --> 00:35:54,210
There's a lot of these key value pairs.
这里有很多这样的键值对。

695
00:35:54,210 --> 00:35:57,770
But if I scroll up to the top, you'll see that 200
但如果我向上滚动到顶部，你会看到 200

696
00:35:57,770 --> 00:35:59,450
is the status code that came back.
是返回的状态码。

697
00:35:59,450 --> 00:36:04,790
And you'll see that the content type is indeed text/html.
你会看到内容类型确实是 text/html。

698
00:36:04,790 --> 00:36:07,340
And there's a whole lot of other stuff here, clearly.
这里还有很多其他的东西，很明显。

699
00:36:07,340 --> 00:36:08,900
A lot of this is diagnostic.
很多都是诊断信息。

700
00:36:08,900 --> 00:36:10,820
It reveals information about the server that
它揭示了有关服务器的信息，

701
00:36:10,820 --> 00:36:13,520
might be useful generally to more technical people than me
对于比我更技术的人来说，通常可能是有用的

702
00:36:13,520 --> 00:36:17,270
at this point in the conversation, or maybe my Mac or my PC or my phone.
在这个对话的阶段，或者可能是我的 Mac 或我的 PC 或我的手机。

703
00:36:17,270 --> 00:36:19,820
For now, we can focus really on just the essence
现在，我们真的可以只关注

704
00:36:19,820 --> 00:36:22,400
of this response, which is this here.
这个响应的本质，就是这里。

705
00:36:22,400 --> 00:36:25,040
But here's where even these arcane numbers might start
但这里，即使是这些神秘的数字也可能开始

706
00:36:25,040 --> 00:36:28,310
to get a little more familiar, in fact.
变得更熟悉一些，事实上。

707
00:36:28,310 --> 00:36:31,658
Suppose that I want to see this in my browser.
假设我想在浏览器中看到它。

708
00:36:31,658 --> 00:36:32,700
Actually, let me do this.
实际上，让我这样做。

709
00:36:32,700 --> 00:36:35,430
Let me go back to VS Code here.
让我回到 VS Code 这里。

710
00:36:35,430 --> 00:36:37,820
Let me open up incognito mode here, which
让我在这里打开隐身模式，它

711
00:36:37,820 --> 00:36:40,250
generally is to give you private browsing, so to speak.
通常是让你进行私密浏览，可以这么说。

712
00:36:40,250 --> 00:36:41,958
And we'll talk more about this next week.
我们下周会详细讨论这个。

713
00:36:41,958 --> 00:36:47,070
In incognito mode or private mode, you have no history, you have no cookies,
在隐身模式或私密模式下，你没有历史记录，你没有 cookie，

714
00:36:47,070 --> 00:36:49,682
you have no sessions, terms we'll define next week.
你没有会话，这些术语我们下周会定义。

715
00:36:49,682 --> 00:36:51,390
I'm going to use it again and again today
我今天将反复使用它

716
00:36:51,390 --> 00:36:53,182
to make sure that my browser is essentially
以确保我的浏览器基本上

717
00:36:53,182 --> 00:36:57,510
starting from scratch, freshly, so that I don't have anything in my history
从头开始，全新地，这样我的历史记录中就不会有任何东西

718
00:36:57,510 --> 00:36:58,652
from previous examples.
来自之前的示例。

719
00:36:58,652 --> 00:37:00,360
And what I'm going to do, actually, first
我实际上要做的第一件事是

720
00:37:00,360 --> 00:37:04,320
is open up, via my browser's menu, so-called developer tools.
通过我的浏览器的菜单打开所谓的开发者工具。

721
00:37:04,320 --> 00:37:07,380
These are going to look a little different in Chrome
这些在 Chrome 中看起来会略有不同

722
00:37:07,380 --> 00:37:12,510
versus Edge versus Firefox versus Safari versus other browsers as well.
与 Edge、Firefox、Safari 或其他浏览器相比。

723
00:37:12,510 --> 00:37:15,870
But almost any modern browser, whatever your favorite is nowadays,
但几乎所有现代浏览器，无论你目前最喜欢哪个，

724
00:37:15,870 --> 00:37:17,970
has built into it developer tools.
都内置了开发者工具。

725
00:37:17,970 --> 00:37:20,470
And you might have to click a different button to access it.
你可能需要点击不同的按钮才能访问它。

726
00:37:20,470 --> 00:37:22,950
But these are tools for developers, like,
但这些是为开发者准备的工具，比如，

727
00:37:22,950 --> 00:37:26,460
web developers that want to not just use the browser to go places,
想要不仅仅使用浏览器去访问地方的 Web 开发人员，

728
00:37:26,460 --> 00:37:30,400
but use the browser to develop their own websites and web applications.
而是使用浏览器来开发他们自己的网站和 Web 应用程序。

729
00:37:30,400 --> 00:37:32,190
Now there's a whole bunch of tabs here.
这里有一堆标签。

730
00:37:32,190 --> 00:37:34,650
And I'm going to focus on the Network tab initially.
我最初将关注网络标签。

731
00:37:34,650 --> 00:37:39,120
Essentially, this is like diagnostic information, kind of like debug50,
本质上，这就像诊断信息，有点像 debug50，

732
00:37:39,120 --> 00:37:39,990
like a debugger.
就像调试器。

733
00:37:39,990 --> 00:37:43,090
But it's specific to the web and the web browser here.
但它特定于这里 Web 和 Web 浏览器。

734
00:37:43,090 --> 00:37:46,440
So with my developer tools open and with the Network tab open,
因此，在我的开发者工具打开并且网络标签打开的情况下，

735
00:37:46,440 --> 00:37:53,880
I'm going to go up to the URL bar and type in https://www.harvard.edu/.
我将向上转到 URL 栏，并输入 https://www.harvard.edu/。

736
00:37:53,880 --> 00:37:58,380
So the exact same thing that I typed in curl a moment ago in my terminal,
因此，与我之前在终端中输入的 curl 命令完全一样，

737
00:37:58,380 --> 00:38:01,360
I'm just typing in my browser like I would normally do.
我只是像平时一样在浏览器中输入。

738
00:38:01,360 --> 00:38:04,620
And if I hit Enter, what's interesting about developer tools,
如果我按回车键，开发者工具的有趣之处在于，

739
00:38:04,620 --> 00:38:07,500
and let me go ahead and drag them to the top and maximize the window,
让我继续将它们拖到顶部并最大化窗口，

740
00:38:07,500 --> 00:38:12,900
is you see all of the HTTP requests, all of the virtual envelopes
你将看到所有 HTTP 请求，所有虚拟信封

741
00:38:12,900 --> 00:38:16,650
that just went instantaneously it would seem back and forth
似乎瞬间就来回切换了，在我这边的 Mac 和哈佛大学自己的网页服务器之间。

742
00:38:16,650 --> 00:38:20,310
between my Mac here and Harvard's own web server.
似乎瞬间就来回切换了，在我这边的 Mac 和哈佛大学自己的网页服务器之间。

743
00:38:20,310 --> 00:38:22,680
And notice it's way more than a single envelope.
而且请注意，这远不止一个信封。

744
00:38:22,680 --> 00:38:24,180
It's way more than a single request.
这远不止一个请求。

745
00:38:24,180 --> 00:38:24,690
Why?
为什么？

746
00:38:24,690 --> 00:38:27,780
For now, assume that each of those rows of output
现在，假设这些输出中的每一行都代表着可能下载的内容。

747
00:38:27,780 --> 00:38:30,810
represents maybe a sound that was downloaded,
现在，假设这些输出中的每一行都代表着可能下载的内容。

748
00:38:30,810 --> 00:38:32,970
a video, an image, some text.
比如声音、视频、图像或文本。

749
00:38:32,970 --> 00:38:35,340
There's all sorts of media in web pages nowadays.
现在网页中包含各种各样的媒体。

750
00:38:35,340 --> 00:38:38,040
And they might actually be spread across multiple files.
而且它们可能实际上分布在多个文件中。

751
00:38:38,040 --> 00:38:41,010
Browsers are designed, if you will, to recursively get
如果要这么说的话，浏览器被设计成递归地获取

752
00:38:41,010 --> 00:38:44,550
all of the media for a single web page and download it automatically
单个网页上的所有媒体并自动下载，

753
00:38:44,550 --> 00:38:48,780
with we humans only typing the URL itself once.
我们人类只需输入一次 URL 本身。

754
00:38:48,780 --> 00:38:49,740
But watch this.
但是请看。

755
00:38:49,740 --> 00:38:52,110
At the very top of this output, I scrolled all the way
在这个输出的最上面，我向下滚动到底部。

756
00:38:52,110 --> 00:38:53,820
to the top of my network tab.
到达了我的网络选项卡的顶部。

757
00:38:53,820 --> 00:38:56,550
I'll see a request, a row that represents
我看到一个请求，一行代表着

758
00:38:56,550 --> 00:38:58,590
my original request for the website.
我对网站的原始请求。

759
00:38:58,590 --> 00:39:03,060
And if I Zoom in here, we'll see that 200 means apparently OK.
如果我在这里放大，我们会看到 200 似乎代表着“OK”。

760
00:39:03,060 --> 00:39:04,350
So all is well.
所以一切正常。

761
00:39:04,350 --> 00:39:06,360
Here's the contents of the website.
这是网站的内容。

762
00:39:06,360 --> 00:39:07,420
But there's a lot.
但是很多。

763
00:39:07,420 --> 00:39:09,720
In fact, if I look at the very bottom of the window,
事实上，如果我看看窗口的最底部，

764
00:39:09,720 --> 00:39:14,190
harvard.edu is composed of 91 separate files it would seem.
似乎 harvard.edu 由 91 个独立的文件组成。

765
00:39:14,190 --> 00:39:16,890
And that's just the landing page itself, not
而这仅仅是主页本身，而不是

766
00:39:16,890 --> 00:39:20,400
to mention everything else we might click on ultimately.
我们最终可能点击的任何其他内容。

767
00:39:20,400 --> 00:39:22,470
But 200, OK, is a good thing.
但是 200，OK，是一件好事。

768
00:39:22,470 --> 00:39:25,920
And odds are you've never actually seen that, because it's, indeed, OK.
而且很有可能你从未真正见过它，因为它确实很正常。

769
00:39:25,920 --> 00:39:28,920
So let's consider actually what else could
所以，让我们考虑一下，当你发出这些请求时，还可能发生什么。

770
00:39:28,920 --> 00:39:30,780
happen when you make these requests.
所以，让我们考虑一下，当你发出这些请求时，还可能发生什么。

771
00:39:30,780 --> 00:39:32,940
Well, here, for instance, is a shorter request.
好吧，例如，这是一个较短的请求。

772
00:39:32,940 --> 00:39:37,010
Suppose that I omit the W-W-W just because it's faster to type.
假设我省略了 WWW，仅仅因为它输入起来更快。

773
00:39:37,010 --> 00:39:38,760
And honestly, you and I are almost always,
说实话，你我几乎总是

774
00:39:38,760 --> 00:39:43,050
nowadays I bet, in the habit of just typing something.com, or something.edu.
现在我敢打赌，已经习惯于仅仅输入 something.com 或 something.edu。

775
00:39:43,050 --> 00:39:46,590
We don't bother typing the HTTPS, the so-called scheme or protocol.
我们不费心输入 HTTPS，也就是所谓的方案或协议。

776
00:39:46,590 --> 00:39:48,453
We probably don't bother typing the W-W-W.
我们可能不费心输入 WWW。

777
00:39:48,453 --> 00:39:50,370
You can probably think of someone in your life
你可能能想到你生活中某个人

778
00:39:50,370 --> 00:39:53,280
who's very pedantic like that, typing it out in its full.
他非常迂腐地那样，完整地输入它。

779
00:39:53,280 --> 00:39:56,350
But you don't need to do that typically for a couple of reasons.
但你通常不需要那样做，原因有几个。

780
00:39:56,350 --> 00:39:59,910
If I, in fact, go back to VS Code here, let
如果我实际上回到这里的 VS Code，让我再次使用 curl 连接到另一个类似的 URL。

781
00:39:59,910 --> 00:40:03,375
me use curl again to connect to another URL that's similar,
如果我实际上回到这里的 VS Code，让我再次使用 curl 连接到另一个类似的 URL。

782
00:40:03,375 --> 00:40:07,500
https://harvard.edu.
https://harvard.edu。

783
00:40:07,500 --> 00:40:11,910
Now notice before I went to W-W-W. And that's indeed Harvard's preferred URL,
现在请注意，之前我使用了 WWW。而那确实是哈佛大学首选的 URL，

784
00:40:11,910 --> 00:40:12,660
if you will.
如果要这么说的话。

785
00:40:12,660 --> 00:40:14,640
But harvard.edu will still work.
但 harvard.edu 仍然可以工作。

786
00:40:14,640 --> 00:40:16,590
But watch what happens when I hit Enter.
但请看，当我按下回车键时发生了什么。

787
00:40:16,590 --> 00:40:19,103
I'm going to get back the contents of the virtual envelope
我会收到哈佛大学发回给我的虚拟信封的内容。

788
00:40:19,103 --> 00:40:20,520
that Harvard just sent back to me.
我会收到哈佛大学发回给我的虚拟信封的内容。

789
00:40:20,520 --> 00:40:22,200
But it's not OK.
但它不是 OK。

790
00:40:22,200 --> 00:40:23,920
It's not 200 anymore.
它不再是 200 了。

791
00:40:23,920 --> 00:40:27,360
It's actually this number here, 301, which
它实际上是这里这个数字 301，它

792
00:40:27,360 --> 00:40:29,010
actually means something specific.
实际上意味着一些特定的东西。

793
00:40:29,010 --> 00:40:34,450
301 actually means that Harvard's website moved permanently, so to speak.
301 实际上意味着哈佛大学的网站永久地迁移了，可以这么说。

794
00:40:34,450 --> 00:40:36,510
In other words, Harvard, Yale, any server
换句话说，哈佛大学、耶鲁大学，任何服务器

795
00:40:36,510 --> 00:40:39,900
can configure itself to redirect the user to another place
都可以配置自身将用户重定向到另一个地方，

796
00:40:39,900 --> 00:40:43,000
if they prefer to canonicalize on some other URL.
如果他们更喜欢在另一个 URL 上标准化。

797
00:40:43,000 --> 00:40:45,850
So by default for branding purposes, most websites still
所以默认情况下，出于品牌目的，大多数网站仍然

798
00:40:45,850 --> 00:40:48,730
probably use www.something.something.
可能使用 www.something.something。

799
00:40:48,730 --> 00:40:50,358
So Harvard is, in fact, doing this.
所以哈佛大学实际上正在这样做。

800
00:40:50,358 --> 00:40:52,150
And for reasons we'll talk about next week,
而且由于下周我们将讨论的原因，

801
00:40:52,150 --> 00:40:55,090
there's technical motivations to do so related to something
这样做有技术上的原因，与一些东西有关，

802
00:40:55,090 --> 00:40:56,660
called cookies and sessions.
叫做 cookies 和 sessions。

803
00:40:56,660 --> 00:41:01,340
But for now, that just seems to be a different status code.
但现在，这似乎只是一个不同的状态码。

804
00:41:01,340 --> 00:41:05,320
But if I now open up another browser window and I'll do this again in,
但是如果我现在打开另一个浏览器窗口，并且我将在

805
00:41:05,320 --> 00:41:11,860
let's say, how about incognito mode, just to start fresh with a brand
比如，隐身模式中重新开始，

806
00:41:11,860 --> 00:41:12,580
new window.
新窗口。

807
00:41:12,580 --> 00:41:14,980
Let me open my developer tools again.
让我再次打开我的开发者工具。

808
00:41:14,980 --> 00:41:22,540
Let me go to the URL bar and only type https://harvard.edu/ Enter.
让我去 URL 栏，只输入 https://harvard.edu/ 回车。

809
00:41:22,540 --> 00:41:24,350
I'm still in my network tab here.
我仍然在我的网络选项卡中。

810
00:41:24,350 --> 00:41:26,770
And if I scroll to the very top of this, notice, ah,
如果我滚动到最上面，请注意，啊，

811
00:41:26,770 --> 00:41:29,050
the top row looks a little different now.
最上面的那行看起来现在有些不同。

812
00:41:29,050 --> 00:41:30,670
It's not 200 anymore.
它不再是 200 了。

813
00:41:30,670 --> 00:41:32,390
And I can click on that here.
我可以在此处点击它。

814
00:41:32,390 --> 00:41:37,100
And what I'm now seeing in yellow is that 301, AKA, moved permanently.
现在，我在黄色中看到的是 301，也就是“永久移动”。

815
00:41:37,100 --> 00:41:40,450
So this is to say you've been able to do this all this time in your browser
所以，这意味着你可以一直以来都在浏览器中做这件事，

816
00:41:40,450 --> 00:41:41,730
if you care to.
如果你愿意的话。

817
00:41:41,730 --> 00:41:45,500
You can see what's going on underneath the hood, if you will.
如果你愿意的话，你可以看到幕后发生了什么。

818
00:41:45,500 --> 00:41:46,760
Check that off, I think.
我认为，这已经确定了。

819
00:41:46,760 --> 00:41:50,930
Underneath the hood so as to just understand what's going on.
了解幕后发生了什么，仅仅是为了理解发生了什么。

820
00:41:50,930 --> 00:41:54,290
Now for users, this is not that useful or intellectually interesting.
现在，对于用户来说，这并不那么有用，也不那么具有智力上的趣味性。

821
00:41:54,290 --> 00:41:57,410
But for developers, this can be very useful for understanding things
但对于开发者来说，这对于理解事情非常有用，

822
00:41:57,410 --> 00:42:00,380
and also diagnosing problems ultimately.
并且最终用于诊断问题。

823
00:42:00,380 --> 00:42:05,090
So that's just a couple of the status codes that can come back, not just 200,
所以，这只是可以返回的几种状态码中的两种，不仅仅是 200，

824
00:42:05,090 --> 00:42:06,530
but perhaps 301.
也可能是 301。

825
00:42:06,530 --> 00:42:12,110
There's also this one now, with which humans generally are familiar, 404.
现在还有这个，人类通常很熟悉，404。

826
00:42:12,110 --> 00:42:16,353
Well, it turns out 404 is what happens when a file is not found.
事实证明，404 是指文件未找到时发生的情况。

827
00:42:16,353 --> 00:42:17,520
So I can simulate that here.
所以我可以在此处模拟它。

828
00:42:17,520 --> 00:42:19,710
Let me go back to VS Code and my terminal window.
让我回到 VS Code 和我的终端窗口。

829
00:42:19,710 --> 00:42:24,290
Let me do curl -I https://www--
让我执行 curl -I https://www--

830
00:42:24,290 --> 00:42:27,800
because Harvard prefers that-- harvard.edu/cats.
因为哈佛大学更喜欢这样——harvard.edu/cats。

831
00:42:27,800 --> 00:42:30,980
Let's see if there's a page about cats within Harvard's website.
我们看看哈佛大学的网站上是否有关于猫的页面。

832
00:42:30,980 --> 00:42:32,370
I'm pretty sure there's not.
我相当确定没有。

833
00:42:32,370 --> 00:42:36,710
And so, indeed, when I hit Enter, a whole lot of output, a lot of HTTP
所以，当我按下回车键时，确实产生了大量输出，很多 HTTP

834
00:42:36,710 --> 00:42:37,250
headers.
头信息。

835
00:42:37,250 --> 00:42:39,710
But notice at the top, 404.
但请注意，最上面是 404。

836
00:42:39,710 --> 00:42:41,390
It's File Not Found.
意思是文件未找到。

837
00:42:41,390 --> 00:42:44,720
Now what you see in the browser is going to completely depend on the website.
现在，你在浏览器中看到的内容将完全取决于网站。

838
00:42:44,720 --> 00:42:48,740
Some websites just display an error message or a status code number.
一些网站只显示一条错误消息或一个状态码。

839
00:42:48,740 --> 00:42:52,960
And that's why you and I have seen probably in the world 404 messages.
这就是为什么你和我在世界上可能都看到过 404 消息。

840
00:42:52,960 --> 00:42:54,710
Sometimes they're much more user friendly.
有时它们更加人性化。

841
00:42:54,710 --> 00:42:57,377
Sometimes there are links back to the home page to help you out.
有时会有链接返回主页来帮助你。

842
00:42:57,377 --> 00:42:58,700
It's entirely up to the server.
这完全取决于服务器。

843
00:42:58,700 --> 00:43:02,185
But that status code indicates that something has gone wrong.
但这个状态码表明有些地方出错了。

844
00:43:02,185 --> 00:43:04,560
And in fact, there's a whole bunch of these status codes.
事实上，存在很多这种状态码。

845
00:43:04,560 --> 00:43:06,740
Some of which you'll now start to see in the class.
其中一些你会在课堂上开始看到。

846
00:43:06,740 --> 00:43:07,667
200's OK.
200 表示 OK。

847
00:43:07,667 --> 00:43:09,500
And it's a good thing if you never see that,
如果你从未见过它，那是一件好事，

848
00:43:09,500 --> 00:43:11,090
because it means everything's working.
因为这意味着一切正常。

849
00:43:11,090 --> 00:43:12,890
404 is not found.
404 表示未找到。

850
00:43:12,890 --> 00:43:14,690
301 is moved permanently.
301 表示永久移动。

851
00:43:14,690 --> 00:43:17,750
Any of these that start with 3 relate to redirects.
所有以 3 开头的状态码都与重定向相关。

852
00:43:17,750 --> 00:43:21,350
Long story short, there's different ways to redirect the user from one place
简而言之，有很多种方法可以将用户从一个地方重定向

853
00:43:21,350 --> 00:43:25,340
to another, as we saw from that location header a moment ago.
到另一个地方，正如我们刚才从 Location 标头中看到的。

854
00:43:25,340 --> 00:43:27,240
400s are generally bad.
400 状态码一般代表错误。

855
00:43:27,240 --> 00:43:30,890
It means that the user, the browser somehow did something wrong.
这意味着用户或浏览器以某种方式做错了什么。

856
00:43:30,890 --> 00:43:36,290
Like, 403 forbidden probably means you're not logged in.
例如，403 Forbidden 可能意味着你没有登录。

857
00:43:36,290 --> 00:43:39,410
500 you're going to start doing next week most likely.
500 状态码你下周可能会开始遇到。

858
00:43:39,410 --> 00:43:42,965
500 is, like, the segfault of the web, if you will.
500 就相当于网络中的段错误，如果你理解的话。

859
00:43:42,965 --> 00:43:44,840
So there's no pointers or anything like that.
所以没有指针或任何类似的东西。

860
00:43:44,840 --> 00:43:48,470
But 500 means that you wrote some buggy code, as invariably we all will
但是 500 状态码意味着你写了一些有错误的代码，正如我们每个人都会不可避免地

861
00:43:48,470 --> 00:43:49,430
next week.
在下周遇到一样。

862
00:43:49,430 --> 00:43:52,640
418 is an April Fool's joke from years ago.
418 是几年前愚人节的一个玩笑。

863
00:43:52,640 --> 00:43:53,810
Some servers honor this.
一些服务器会遵守这个。

864
00:43:53,810 --> 00:43:56,300
But someone wrote up literally this long technical document
但有人写了整整一份技术文档

865
00:43:56,300 --> 00:44:00,420
proposing a response that says I'm a teapot for a server,
建议服务器返回一个“我是一个茶壶”的响应，

866
00:44:00,420 --> 00:44:03,590
even though it was just a joke on April 1 some years ago,
即使这只是几年前愚人节的一个玩笑，

867
00:44:03,590 --> 00:44:06,270
so sort of geek humor, if you will.
所以这算是一种极客幽默，如果你理解的话。

868
00:44:06,270 --> 00:44:10,400
So those are then the status codes that are available to us.
所以这些就是我们可用的状态码。

869
00:44:10,400 --> 00:44:11,960
Let me show you one other.
我再向你展示一个。

870
00:44:11,960 --> 00:44:15,260
Has anyone been to this URL here?
有人访问过这个 URL 吗？

871
00:44:15,260 --> 00:44:15,870
So you have?
你访问过？

872
00:44:15,870 --> 00:44:16,370
All right.
好的。

873
00:44:16,370 --> 00:44:18,680
So without spoiling here, let me actually--
所以不剧透了，我实际上 -

874
00:44:18,680 --> 00:44:23,220
well, let me go into incognito mode here.
好吧，我进入隐身模式。

875
00:44:23,220 --> 00:44:25,220
Someone's pulling it up on their phone, clearly.
显然有人用他们的手机打开了它。

876
00:44:25,220 --> 00:44:26,955
Safetyschool.org/ Enter.
safetyschool.org/ 进入。

877
00:44:29,810 --> 00:44:31,940
Oh, my goodness.
我的天哪。

878
00:44:31,940 --> 00:44:34,670
Another box gets crossed out today, too, I think.
我想今天又有一个方框被划掉了。

879
00:44:34,670 --> 00:44:36,020
So how is that working?
所以这是怎么工作的？

880
00:44:36,020 --> 00:44:39,980
Well, if we actually diagnose this with curl-- let me go into VS Code,
好吧，如果我们用 curl 来诊断它 - 我进入 VS Code，

881
00:44:39,980 --> 00:44:45,080
curl -I HTTP-- and it doesn't support HTTPS because this is an old website--
curl -I HTTP - 因为它不支持 HTTPS，因为这是一个老网站 -

882
00:44:45,080 --> 00:44:52,850
://safetyschool.org/ Enter, all this server does is return an HTTP 301
://safetyschool.org/ 进入，这个服务器只返回一个 HTTP 301

883
00:44:52,850 --> 00:44:58,010
response with a location that literally refers us back to yale.edu.
响应，其中 Location 指向了 yale.edu。

884
00:44:58,010 --> 00:44:58,880
And this is amazing.
这太神奇了。

885
00:44:58,880 --> 00:45:02,480
Someone has been paying for this domain name for decades.
有人已经为这个域名支付了数十年的费用。

886
00:45:02,480 --> 00:45:05,240
And all it does is literally this.
它所做的仅仅是这些。

887
00:45:05,240 --> 00:45:08,510
Now I know for our friends at Yale who are watching this,
现在我知道对于观看这场直播的耶鲁大学的朋友们来说，

888
00:45:08,510 --> 00:45:10,550
it's not quite fair to poke fun.
拿它开玩笑并不公平。

889
00:45:10,550 --> 00:45:12,240
It turns out Yale got us even better.
结果耶鲁大学给我们准备了更棒的东西。

890
00:45:12,240 --> 00:45:15,890
So later today, we'll turn the tables a little bit.
所以今天晚些时候，我们会反过来。

891
00:45:15,890 --> 00:45:16,700
All right.
好的。

892
00:45:16,700 --> 00:45:21,140
So let's go ahead and take a look now at what
所以让我们现在来看看

893
00:45:21,140 --> 00:45:25,550
it is that composes this web page when it is indeed 200 OK.
是什么构成了这个网页，当它确实是 200 OK 时。

894
00:45:25,550 --> 00:45:28,820
Let's introduce another language here, or an actual language
让我们在这里介绍另一种语言，或者说是一种真正的语言

895
00:45:28,820 --> 00:45:33,180
called HTML, which is not a programming language but is a mark up language.
叫做 HTML，它不是一种编程语言，而是一种标记语言。

896
00:45:33,180 --> 00:45:35,180
Which is to say it's all about aesthetics, like,
也就是说它完全是关于美观的，比如

897
00:45:35,180 --> 00:45:38,840
mocking up a web page so that you can see the information you care about.
模拟一个网页，这样你就可以看到你关心的信息。

898
00:45:38,840 --> 00:45:42,400
But HTML is not going to have functions and loops and conditionals
但 HTML 不会包含函数、循环和条件语句

899
00:45:42,400 --> 00:45:44,560
and all of that stuff we talked about in Week 0
以及我们在第 0 周讨论的所有内容。

900
00:45:44,560 --> 00:45:46,970
It's just about presenting information.
它仅仅是用来呈现信息。

901
00:45:46,970 --> 00:45:49,300
So here are some of the building blocks of HTML.
所以这里是一些 HTML 的构建块。

902
00:45:49,300 --> 00:45:52,330
You're about to see really only two vocabulary words.
你将只看到两个词汇。

903
00:45:52,330 --> 00:45:56,138
HTML honestly is the kind of language that you learn in, like, 30 minutes
坦白地说，HTML 是一种你可以在 30 分钟内学会的语言

904
00:45:56,138 --> 00:45:58,930
and then you're just kind of off and running with online tutorials,
然后你就可以通过在线教程开始使用它了，

905
00:45:58,930 --> 00:46:00,250
documentation, and the like.
文档等等。

906
00:46:00,250 --> 00:46:02,200
I still remember years ago just learning it
我还记得多年前刚学它

907
00:46:02,200 --> 00:46:04,900
from a teaching fellow who kind of gave me a crash course
是一位助教给了我一个速成课程

908
00:46:04,900 --> 00:46:07,360
and then you kind of fill in the blanks yourself
然后你就可以自己填补空白了

909
00:46:07,360 --> 00:46:10,780
because it has relatively few concepts associated with it.
因为它相关的概念很少。

910
00:46:10,780 --> 00:46:13,330
Even though, in fairness, it can take years
尽管公平地说，这可能需要很多年

911
00:46:13,330 --> 00:46:17,320
to get good at making pretty websites, today we
才能熟练地制作漂亮的网站，但今天我们

912
00:46:17,320 --> 00:46:21,040
can get good very quickly at making functional websites, so
可以很快地学会制作功能完备的网站，所以

913
00:46:21,040 --> 00:46:22,390
that artistic disclaimer.
这就是艺术方面的免责声明。

914
00:46:22,390 --> 00:46:26,735
So in the world of HTML, there's really two concepts, tags and attributes.
所以，在 HTML 的世界里，实际上只有两个概念，标签和属性。

915
00:46:26,735 --> 00:46:29,110
And those of you who have played with websites growing up
而那些从小就接触过网站的人

916
00:46:29,110 --> 00:46:31,130
might be familiar with some of these already.
可能已经熟悉其中的一些了。

917
00:46:31,130 --> 00:46:34,120
So here is some sample HTML.
所以这里是一些 HTML 示例。

918
00:46:34,120 --> 00:46:35,872
HTML is just a text-based language.
HTML 仅仅是一种基于文本的语言。

919
00:46:35,872 --> 00:46:37,330
You type it out with your keyboard.
你用键盘输入它。

920
00:46:37,330 --> 00:46:38,955
Again, it's not a programming language.
再说一次，它不是一种编程语言。

921
00:46:38,955 --> 00:46:41,180
So you can't call functions or write logic.
所以你不能调用函数或编写逻辑。

922
00:46:41,180 --> 00:46:43,290
But you can mock up a web page.
但你可以模拟一个网页。

923
00:46:43,290 --> 00:46:45,350
And this web page, for instance, is quite simply
例如，这个网页很简单

924
00:46:45,350 --> 00:46:48,770
going to say hello, title in its title bar, or the tab.
将会显示“hello”，标题栏或标签中的标题。

925
00:46:48,770 --> 00:46:51,200
And then the body of it, the big white box,
然后是它的主体，那个大白框，

926
00:46:51,200 --> 00:46:55,340
it's going to say hello comma body, just to distill this really into its essence
它会显示“hello, body”，只是为了将这个东西真正地概括为它的本质

927
00:46:55,340 --> 00:46:57,200
before we make more interesting pages.
在我们制作更有趣的页面之前。

928
00:46:57,200 --> 00:47:02,960
So what's going on in this HTML is enough detail
所以，这段 HTML 中的代码足够详细

929
00:47:02,960 --> 00:47:06,300
that the server can display the information for it.
使得服务器能够显示它所包含的信息。

930
00:47:06,300 --> 00:47:09,300
So in fact, let me go ahead and reveal this as follows.
所以事实上，让我按照以下步骤来展示它。

931
00:47:09,300 --> 00:47:13,040
I'm going to go over to VS Code here.
我要转到 VS Code。

932
00:47:13,040 --> 00:47:18,330
I'm going to create a new file here called, for instance--
我将在这里创建一个新文件，比如 -

933
00:47:18,330 --> 00:47:21,110
let's just call it hello.html.
就叫它 hello.html 吧。

934
00:47:21,110 --> 00:47:24,140
And I'm going to really quickly whip up that same web page from memory.
我将很快地从记忆中写出相同的网页。

935
00:47:24,140 --> 00:47:29,870
So DOCTYPE html html lang equals quote, unquote "en" close bracket.
所以 DOCTYPE html html lang 等于引号，引号 "en" 关闭括号。

936
00:47:29,870 --> 00:47:35,480
Open head, open title, hello comma title.
打开头部，打开标题，hello逗号标题。

937
00:47:35,480 --> 00:47:37,040
And then down here, open body.
然后在下面，打开主体。

938
00:47:37,040 --> 00:47:40,130
And you'll notice I'm actually not quite as fast as I might seem to be.
你会注意到，我实际上并没有像看起来那样快。

939
00:47:40,130 --> 00:47:44,220
VS Code is configured to automatically finish half of my thought for me.
VS Code 被配置为自动完成我一半的想法。

940
00:47:44,220 --> 00:47:47,330
So when I open one of these things that we're about to call tags,
所以当我打开我们即将称之为标签的东西之一时，

941
00:47:47,330 --> 00:47:50,000
VS Code is doing some of the heavy lifting for me.
VS Code 正在为我做一些繁重的工作。

942
00:47:50,000 --> 00:47:52,700
And in here, I'm going to do hello comma body.
在这里，我将做 hello逗号主体。

943
00:47:52,700 --> 00:47:55,370
But I think this is the entirety of the file
但我认为这是整个文件

944
00:47:55,370 --> 00:47:58,440
that I just proposed in the slide version thereof.
我刚刚在幻灯片版本中提出的。

945
00:47:58,440 --> 00:48:03,470
So this is clearly now a text file in my code space within VS Code.
所以现在这显然是我在 VS Code 中的代码空间中的一个文本文件。

946
00:48:03,470 --> 00:48:06,530
How do I actually view it with a web browser?
我如何使用网络浏览器实际查看它？

947
00:48:06,530 --> 00:48:08,960
So if this file were created on my Mac or PC,
所以如果这个文件是在我的 Mac 或 PC 上创建的，

948
00:48:08,960 --> 00:48:12,470
I could literally double click it and Chrome or my default browser
我可以直接双击它，Chrome 或我的默认浏览器

949
00:48:12,470 --> 00:48:14,510
would open up and show me this web page.
会打开并向我显示这个网页。

950
00:48:14,510 --> 00:48:17,300
But this file, technically, is not on my Mac or PC.
但这个文件，从技术上讲，不在我的 Mac 或 PC 上。

951
00:48:17,300 --> 00:48:18,140
It's in the cloud.
它在云端。

952
00:48:18,140 --> 00:48:19,590
It's in your code space.
它在你的代码空间中。

953
00:48:19,590 --> 00:48:23,210
So all that we need to do is actually turn on a web server
所以我们所需要做的就是实际打开一个网络服务器

954
00:48:23,210 --> 00:48:27,290
to serve this file to me or to anyone else in the world, in fact.
来向我或世界上任何其他人提供这个文件，事实上。

955
00:48:27,290 --> 00:48:31,820
And the command we're going to run now is literally called http-server.
而我们现在要运行的命令字面上称为 http-server。

956
00:48:31,820 --> 00:48:33,830
This is a piece of software that someone else
这是一段其他人写的软件

957
00:48:33,830 --> 00:48:36,620
wrote that we pre-installed in everyone's code space.
我们预先安装在每个人的代码空间中。

958
00:48:36,620 --> 00:48:40,160
And by running this, it starts a server whose purpose in life
通过运行它，它启动一个服务器，其生命中的目的是

959
00:48:40,160 --> 00:48:42,563
is to listen for HTTP requests.
监听 HTTP 请求。

960
00:48:42,563 --> 00:48:44,480
And as soon as it receives one from a browser,
一旦它从浏览器收到一个请求，

961
00:48:44,480 --> 00:48:48,870
be it mine or anyone else's, it will respond with the contents of that file.
无论是我的还是任何其他人的，它都将使用该文件的内容进行响应。

962
00:48:48,870 --> 00:48:51,210
So let me go into VS Code here.
所以让我进入这里的 VS Code。

963
00:48:51,210 --> 00:48:53,220
Let me reopen my terminal window.
让我重新打开我的终端窗口。

964
00:48:53,220 --> 00:48:58,400
And I'm going to go ahead and literally run http-server Enter.
我会继续直接运行 http-server Enter。

965
00:48:58,400 --> 00:49:01,190
And now you'll see a whole bunch of output, most of which
现在你会看到一大堆输出，其中大部分

966
00:49:01,190 --> 00:49:03,080
isn't germane to our discussion yet.
还没有与我们的讨论相关。

967
00:49:03,080 --> 00:49:05,790
But here is this URL here.
但这里就是这个 URL。

968
00:49:05,790 --> 00:49:10,280
And if I hover over it, I'll see a little Open URL pop up
如果我将鼠标悬停在它上面，我会看到一个小的“打开 URL”弹出窗口

969
00:49:10,280 --> 00:49:14,840
that I can click on, or on my Mac, I can Command click on the URL itself,
我可以点击它，或者在我的 Mac 上，我可以使用 Command 点击 URL 本身，

970
00:49:14,840 --> 00:49:19,260
and that will open up in a new tab this folder.
这将在新标签中打开此文件夹。

971
00:49:19,260 --> 00:49:22,460
So this is going to look a little esoteric at first glance.
所以乍一看，这将看起来有点深奥。

972
00:49:22,460 --> 00:49:25,100
But this is what's called a directory listing.
但这就是所谓的目录列表。

973
00:49:25,100 --> 00:49:27,630
It's just literally the contents of the folder that I'm in.
它只是我所在的文件夹的内容。

974
00:49:27,630 --> 00:49:29,630
So I'm in my Codespaces default folder.
所以我位于我的 Codespaces 默认文件夹中。

975
00:49:29,630 --> 00:49:31,850
I deleted everything from last week and weeks prior.
我删除了上周和更早几周的所有内容。

976
00:49:31,850 --> 00:49:33,975
Your folder will, of course, have many other things
你的文件夹当然会有很多其他东西

977
00:49:33,975 --> 00:49:35,330
that you've created and kept.
你已经创建并保留了。

978
00:49:35,330 --> 00:49:37,610
I have a Source 8 directory that I downloaded
我有一个 Source 8 目录，我已经提前下载了

979
00:49:37,610 --> 00:49:40,580
in advance because it's got all of today's examples made in advance.
提前，因为它包含了今天所有提前制作的示例。

980
00:49:40,580 --> 00:49:42,140
But there's the file I just created.
但那是刚刚创建的文件。

981
00:49:42,140 --> 00:49:45,140
And there's some other information here, like the date and time at which
这里还有一些其他信息，比如我创建此文件的日期和时间，等等。

982
00:49:45,140 --> 00:49:47,430
I created this file, and so forth.
我创建了这个文件，等等。

983
00:49:47,430 --> 00:49:51,540
But you'll see that this is just a web page that lives at this URL here.
但你会看到，这只是一个位于此 URL 的网页。

984
00:49:51,540 --> 00:49:54,890
And this is actually somewhat specific to Codespaces,
而这实际上是针对 Codespaces 的，

985
00:49:54,890 --> 00:49:57,060
the infrastructure we're using.
我们正在使用的基础设施。

986
00:49:57,060 --> 00:50:01,160
But if I Zoom in up here, you'll see that I am effectively
但如果我在上面放大，你会看到我实际上是在

987
00:50:01,160 --> 00:50:04,910
running my own web server at this weird looking URL
在我的这个奇怪的 URL 上运行自己的网络服务器

988
00:50:04,910 --> 00:50:08,070
that GitHub dynamically generated for us, for me.
GitHub 为我们动态生成的，为我生成的。

989
00:50:08,070 --> 00:50:10,190
And you'll have a different unique one as well.
你也会有不同的唯一 URL。

990
00:50:10,190 --> 00:50:13,640
You'll see that baked into this URL is actually a port number.
你会看到实际上在 URL 中包含一个端口号。

991
00:50:13,640 --> 00:50:15,170
And they're doing some trickery.
他们正在做一些欺骗。

992
00:50:15,170 --> 00:50:20,270
Normally, I would have to access this web server at Port 80, or 443,
通常，我必须在端口 80 或 443 上访问此网络服务器，

993
00:50:20,270 --> 00:50:21,650
or even 8080.
甚至 8080。

994
00:50:21,650 --> 00:50:25,370
And the reason for this is because cs50.dev,
而原因是，因为 cs50.dev，

995
00:50:25,370 --> 00:50:28,430
that is to say Codespaces, the tool that we're using in the cloud,
也就是说 Codespaces，我们在云端使用的工具，

996
00:50:28,430 --> 00:50:30,740
is obviously itself already a web server.
本身就已经是一个网络服务器了。

997
00:50:30,740 --> 00:50:35,120
And it's GitHub's web server that's listening already on Port 80 and 443.
并且它是 GitHub 的网络服务器，已经在端口 80 和 443 上监听了。

998
00:50:35,120 --> 00:50:38,840
So if I want to run my own web server on their web server,
所以如果我想在他们的网络服务器上运行自己的网络服务器，

999
00:50:38,840 --> 00:50:40,650
I just have to pick another port number.
我只需要选择另一个端口号。

1000
00:50:40,650 --> 00:50:43,430
And so what you're seeing in the URL here is a hint of that.
所以你在这里看到的 URL 就是一个暗示。

1001
00:50:43,430 --> 00:50:48,590
By convention, the program I just ran, http-server, does not try to use 80.
按照惯例，我刚刚运行的程序 http-server 不会尝试使用 80。

1002
00:50:48,590 --> 00:50:50,330
It does not try to use 443.
它不会尝试使用 443。

1003
00:50:50,330 --> 00:50:54,350
It uses 8080 by default. And that's why you see it in the URL here.
它默认使用 8080。这就是你在 URL 中看到它的原因。

1004
00:50:54,350 --> 00:50:59,000
And underneath the hood, that virtual envelope actually contains Port 8080.
在幕后，那个虚拟信封实际上包含了端口 8080。

1005
00:50:59,000 --> 00:51:00,930
Because this is not an official web server.
因为这不是一个官方的网络服务器。

1006
00:51:00,930 --> 00:51:04,370
This is not CS50.dev or GitHub.dev.
这不是 CS50.dev 或者 GitHub.dev。

1007
00:51:04,370 --> 00:51:09,410
This is little old me trying to serve up my brand new hello.html file.
这是我这个老家伙试图提供我的全新的 hello.html 文件。

1008
00:51:09,410 --> 00:51:11,150
But the point here is this.
但重点在这里。

1009
00:51:11,150 --> 00:51:15,260
When I click on this file, I should see the results of my hard work.
当我点击这个文件时，我应该看到我辛勤工作的成果。

1010
00:51:15,260 --> 00:51:19,100
And there is a big white box, otherwise known as the view port, inside of which
而且有一个大的白色框，也称为视窗，在其中

1011
00:51:19,100 --> 00:51:22,080
are the only words in the body of my page, hello, body.
是我的页面主体中唯一的单词，hello, body。

1012
00:51:22,080 --> 00:51:26,550
And if I scroll up further, you'll see in my tab here hello comma title.
如果我继续向上滚动，你会在我的标签中看到 hello逗号标题。

1013
00:51:26,550 --> 00:51:29,420
So this now maps back to the code we just saw.
所以现在它映射回我们刚刚看到的代码。

1014
00:51:29,420 --> 00:51:32,300
Here is the HTML that I just pulled up in my browser.
这是我刚刚在浏览器中打开的 HTML。

1015
00:51:32,300 --> 00:51:36,052
And it is what told the browser what to do visually.
并且它告诉了浏览器在视觉上该怎么做。

1016
00:51:36,052 --> 00:51:37,760
So let's walk through this top to bottom.
所以让我们从上到下走一遍。

1017
00:51:37,760 --> 00:51:41,370
This first line here is what's called the document type declaration.
这里的第一行叫做文档类型声明。

1018
00:51:41,370 --> 00:51:43,380
Honestly, you just copy paste this nowadays.
老实说，你 nowadays 只是复制粘贴它。

1019
00:51:43,380 --> 00:51:47,250
And it means hey, browser, I'm using version 5 of HTML.
这意味着嘿，浏览器，我正在使用 HTML 第 5 版。

1020
00:51:47,250 --> 00:51:49,290
Odds are in some number of years, this line
在几年后，这一行

1021
00:51:49,290 --> 00:51:51,720
might change over time to indicate different versions.
可能会随着时间的推移而改变，以指示不同的版本。

1022
00:51:51,720 --> 00:51:55,080
But for now, this just means I'm using the latest version of this HTML
但现在，这仅仅意味着我正在使用此 HTML 的最新版本

1023
00:51:55,080 --> 00:51:55,860
language.
语言。

1024
00:51:55,860 --> 00:51:58,110
That's kind of anomaly, because you're not going
这有点异常，因为你不会

1025
00:51:58,110 --> 00:52:00,150
to see this exclamation point again.
再次看到这个感叹号。

1026
00:52:00,150 --> 00:52:02,910
Everywhere else, you're going to see a lot of less than signs
在其他地方，你会看到很多小于号

1027
00:52:02,910 --> 00:52:05,910
and greater than signs or angled brackets, so to speak.
和大于号，或者说是尖括号。

1028
00:52:05,910 --> 00:52:10,110
But they're almost always going to be symmetric, as follows.
但它们几乎总是对称的，如下所示。

1029
00:52:10,110 --> 00:52:16,530
This tag here, this is an HTML tag, says, hey browser, here comes my HTML.
这里这个标签，这是一个 HTML 标签，意思是，浏览器，我的 HTML 代码来了。

1030
00:52:16,530 --> 00:52:18,880
And this is what's known as an attribute.
而这被称为属性。

1031
00:52:18,880 --> 00:52:22,260
So anything after the name of a tag is what we'd call an attribute.
所以，标签名后面的任何东西我们都称之为属性。

1032
00:52:22,260 --> 00:52:23,910
And attributes can have values.
属性可以有值。

1033
00:52:23,910 --> 00:52:27,060
Those values that are associated with the attributes with an equal sign
与属性相关联的值用等号

1034
00:52:27,060 --> 00:52:30,180
and typically quotation marks, single quotes or double quotes,
以及通常的引号，单引号或双引号，

1035
00:52:30,180 --> 00:52:31,210
as in this case.
就像这种情况。

1036
00:52:31,210 --> 00:52:35,250
So here we, again, have that paradigm of a dictionary, key, value, pairs.
所以在这里，我们再次看到了字典的模式，键值对。

1037
00:52:35,250 --> 00:52:38,160
They're everywhere in computing, even though the syntax obviously
它们在计算领域无处不在，尽管语法显然

1038
00:52:38,160 --> 00:52:42,260
keeps changing, whether when we're in SQL, or Python, or now HTML.
一直在改变，无论是在 SQL 中，还是在 Python 中，抑或是在现在的 HTML 中。

1039
00:52:42,260 --> 00:52:47,400
This tag at the very bottom now means hey, browser, that's it for my HTML.
最下面的这个标签意思是，浏览器，我的 HTML 代码到此为止了。

1040
00:52:47,400 --> 00:52:50,180
So when you see a tag that looks like another,
所以，当你看到一个标签看起来像另一个标签，

1041
00:52:50,180 --> 00:52:52,228
but starts with a forward slash--
但以正斜杠开头 -

1042
00:52:52,228 --> 00:52:54,770
and you do not need to repeat the attributes, that would just
而且你不必重复属性，那样的话，

1043
00:52:54,770 --> 00:52:57,530
be very annoying to have to type it here and here, we
在这里和这里输入就会很烦人，所以我们

1044
00:52:57,530 --> 00:53:03,620
keep it succinct-- this is what's known as a close tag, or an end tag that
保持简洁 - 这被称为闭合标签，或结束标签，它

1045
00:53:03,620 --> 00:53:07,910
conceptually corresponds to this start tag or open tag.
在概念上对应于这个开始标签或打开标签。

1046
00:53:07,910 --> 00:53:09,590
So they're sort of symmetric.
所以它们有点对称。

1047
00:53:09,590 --> 00:53:12,030
Inside of that are two children, so to speak.
在里面有两个孩子，可以这么说。

1048
00:53:12,030 --> 00:53:15,770
So there's actually a notion of a family tree-type hierarchy here, or a tree,
所以这里实际上有一个家族树类型的层次结构，或者说是一棵树，

1049
00:53:15,770 --> 00:53:17,420
as we've discussed in data structures.
正如我们在数据结构中所讨论的。

1050
00:53:17,420 --> 00:53:20,390
The HTML tag, per the indentation here, has
HTML 标签，根据这里的缩进，它有

1051
00:53:20,390 --> 00:53:25,100
one child called head and another child called body.
一个叫做 head 的孩子，另一个叫做 body 的孩子。

1052
00:53:25,100 --> 00:53:27,680
Everything between the start tag and an end tag
开始标签和结束标签之间的所有内容

1053
00:53:27,680 --> 00:53:30,780
here is what's also generically known as an element.
这里也被通称为元素。

1054
00:53:30,780 --> 00:53:32,640
So this is the head element.
所以这是 head 元素。

1055
00:53:32,640 --> 00:53:33,708
This is the body element.
这是 body 元素。

1056
00:53:33,708 --> 00:53:36,500
A bunch of new vocab, but it's not that intellectually interesting.
一堆新的词汇，但并不那么有趣。

1057
00:53:36,500 --> 00:53:38,600
It's just jargon that we'll use.
这只是我们使用的术语。

1058
00:53:38,600 --> 00:53:42,100
Here means hey, browser, here comes the head of my page.
这里的意思是，浏览器，我的页面头部来了。

1059
00:53:42,100 --> 00:53:44,700
So like the very top of it, which generally for now
所以，就像最上面的部分，目前一般来说

1060
00:53:44,700 --> 00:53:46,350
means just the title bar.
指的是标题栏。

1061
00:53:46,350 --> 00:53:52,650
In fact, this means, hey, browser, here comes the title of my page.
事实上，这意味着，浏览器，我的页面标题来了。

1062
00:53:52,650 --> 00:53:54,940
And then here, notice there's no more angle brackets.
然后在这里，注意没有更多尖括号了。

1063
00:53:54,940 --> 00:53:56,310
This is literally raw text.
这纯粹是原始文本。

1064
00:53:56,310 --> 00:54:01,050
And this is why we saw in the actual gray tab of my browser hello comma
而这就是为什么我们在浏览器的灰色标签中看到了 hello,

1065
00:54:01,050 --> 00:54:01,680
title.
title。

1066
00:54:01,680 --> 00:54:03,930
This means, hey, browser, that's it for the title.
这意味着，浏览器，标题到此为止了。

1067
00:54:03,930 --> 00:54:06,000
This means, hey, browser, that's it for the head.
这意味着，浏览器，头部到此为止了。

1068
00:54:06,000 --> 00:54:10,410
Meanwhile, down here, hey, browser, here comes the body of my main page.
同时，在下面，浏览器，我的主页面主体来了。

1069
00:54:10,410 --> 00:54:13,500
Like, 90-plus percent of the page inside of the so-called viewport,
比如，90% 以上的页面都在所谓的视窗内，

1070
00:54:13,500 --> 00:54:16,590
the big rectangular region, hey, browser, here comes the body.
这个大的矩形区域，浏览器，主体来了。

1071
00:54:16,590 --> 00:54:18,550
Hey, browser, sir, that's it for the body.
浏览器，主体到此为止了。

1072
00:54:18,550 --> 00:54:19,650
What is in the body?
主体里有什么？

1073
00:54:19,650 --> 00:54:23,280
In this super simple case, literally just hello comma body.
在这个超级简单的例子中，只是 hello, body。

1074
00:54:23,280 --> 00:54:24,150
That's it.
就是这样。

1075
00:54:24,150 --> 00:54:26,190
So HTML really is that pedantic.
所以 HTML 真的很刻板。

1076
00:54:26,190 --> 00:54:28,620
It just tells the browser start doing this.
它只是告诉浏览器开始执行此操作。

1077
00:54:28,620 --> 00:54:29,380
Stop doing this.
停止执行此操作。

1078
00:54:29,380 --> 00:54:29,880
Start.
开始。

1079
00:54:29,880 --> 00:54:30,210
Stop.
停止。

1080
00:54:30,210 --> 00:54:30,510
Start.
开始。

1081
00:54:30,510 --> 00:54:31,010
Stop.
停止。

1082
00:54:31,010 --> 00:54:33,370
And that's how it knows what to do, top to bottom,
这就是它如何知道要做什么，从上到下，

1083
00:54:33,370 --> 00:54:38,080
left to right when actually reading the code therein.
从左到右，当实际读取其中的代码时。

1084
00:54:38,080 --> 00:54:38,580
All right.
好的。

1085
00:54:38,580 --> 00:54:43,200
Questions about any of this here HTML code.
关于这里任何 HTML 代码的问题？

1086
00:54:43,200 --> 00:54:45,860
And yeah, in front?
还有，前面？

1087
00:54:45,860 --> 00:54:49,623
AUDIENCE: Would browsers be considered a HTML interpreter?
观众：浏览器可以被视为 HTML 解释器吗？

1088
00:54:49,623 --> 00:54:50,790
DAVID MALAN: Say that again?
大卫·马兰：再说一遍？

1089
00:54:50,790 --> 00:54:53,850
AUDIENCE: Would browsers be considered a HTML code interpreter?
观众：浏览器可以被视为 HTML 代码解释器吗？

1090
00:54:53,850 --> 00:54:55,860
DAVID MALAN: Oh, yes.
大卫·马兰：哦，是的。

1091
00:54:55,860 --> 00:54:57,180
I think that's fair.
我认为这是合理的。

1092
00:54:57,180 --> 00:55:00,480
The question is, can browsers be considered HTML interpreters?
问题是，浏览器可以被视为 HTML 解释器吗？

1093
00:55:00,480 --> 00:55:02,790
Yes, I don't think people tend to call it that.
是的，我不认为人们倾向于这样称呼它。

1094
00:55:02,790 --> 00:55:05,470
Interpretation generally implies that you're
解释通常意味着你正在

1095
00:55:05,470 --> 00:55:08,220
parsing something that's logical in nature, your functions, loops,
解析本质上是逻辑的东西，你的函数、循环，

1096
00:55:08,220 --> 00:55:09,690
conditionals, and so forth.
条件语句等等。

1097
00:55:09,690 --> 00:55:12,510
Parser is a term you might indeed hear much more often.
解析器是你可能经常听到的一个词。

1098
00:55:12,510 --> 00:55:16,020
A parser is a piece of software that analyzes code,
解析器是一段分析代码的软件，

1099
00:55:16,020 --> 00:55:18,270
analyzes text top to bottom, left to right,
从上到下，从左到右分析文本，

1100
00:55:18,270 --> 00:55:22,440
breaks it down into chunks that have semantic meaning, like the tags,
将其分解成具有语义含义的块，比如标签，

1101
00:55:22,440 --> 00:55:25,740
like the attributes, like the elements that we're talking about
比如属性，比如我们正在谈论的元素，

1102
00:55:25,740 --> 00:55:27,820
and then it displays them, in this case.
然后它显示它们，在这种情况下。

1103
00:55:27,820 --> 00:55:31,440
There's not as much to interpret in quite the same way.
没有那么多东西需要以完全相同的方式解释。

1104
00:55:31,440 --> 00:55:32,970
But that's reasonable, nonetheless.
但这仍然是合理的。

1105
00:55:32,970 --> 00:55:33,470
Yeah?
是吗？

1106
00:55:33,470 --> 00:55:35,178
AUDIENCE: With all the frameworks, do you
观众：有了所有的框架，你

1107
00:55:35,178 --> 00:55:37,440
think is is worth learning HTML from scratch
认为是否值得从头开始学习 HTML

1108
00:55:37,440 --> 00:55:39,133
or just use a Bootstrap [INAUDIBLE]?
还是直接使用 Bootstrap？

1109
00:55:39,133 --> 00:55:40,550
DAVID MALAN: Really good question.
大卫·马兰：非常好的问题。

1110
00:55:40,550 --> 00:55:41,750
With all the frameworks out there, should you
有了所有的框架，你是否应该

1111
00:55:41,750 --> 00:55:44,625
bother learning HTML and writing it from scratch or using frameworks,
费心学习 HTML 并从头开始编写，还是使用框架，

1112
00:55:44,625 --> 00:55:45,958
like something called Bootstrap.
比如像 Bootstrap 这样的东西。

1113
00:55:45,958 --> 00:55:48,980
Well, we spent a few minutes today talking about that very framework.
好吧，我们今天花了几分钟时间谈论了这个框架。

1114
00:55:48,980 --> 00:55:51,530
But even frameworks like Bootstrap absolutely
但即使像 Bootstrap 这样的框架也绝对

1115
00:55:51,530 --> 00:55:54,230
assume that something about HTML, something
假设一些关于 HTML 的东西，一些

1116
00:55:54,230 --> 00:55:57,440
also about something called CSS, more on that in a bit, and better still,
也关于一些叫做 CSS 的东西，稍后会详细介绍，更重要的是，

1117
00:55:57,440 --> 00:55:59,330
something about JavaScript.
一些关于 JavaScript 的东西。

1118
00:55:59,330 --> 00:56:01,910
If you really don't want to know and understand these things,
如果你真的不想了解和理解这些东西，

1119
00:56:01,910 --> 00:56:04,118
that's when you reach for like a third party service,
这时你就会选择第三方服务，

1120
00:56:04,118 --> 00:56:08,360
like Squarespace nowadays or Wix, where you really just click and drag and drop
比如现在的 Squarespace 或 Wix，在那里你只需要点击、拖动和放置

1121
00:56:08,360 --> 00:56:12,380
and create websites that are, at the end of the day, still HTML.
然后创建网站，最终它们仍然是 HTML。

1122
00:56:12,380 --> 00:56:15,170
But the developers at Wix and Squarespace
但 Wix 和 Squarespace 的开发者

1123
00:56:15,170 --> 00:56:18,180
have automated the process with a graphical user interface
已经用图形用户界面自动化了这个过程

1124
00:56:18,180 --> 00:56:19,850
or GUI of letting you create it.
或者说 GUI 让你创建它。

1125
00:56:19,850 --> 00:56:23,953
But even then, most web developers, or even just business people


1126
00:56:23,953 --> 00:56:26,120
who want to create their own website and they're not


1127
00:56:26,120 --> 00:56:28,310
programmers themselves or technical folks,


1128
00:56:28,310 --> 00:56:31,350
they might still like to know a little something about HTML, CSS,


1129
00:56:31,350 --> 00:56:34,910
and JavaScript because then you can open like the advanced settings


1130
00:56:34,910 --> 00:56:36,090
and configure things.


1131
00:56:36,090 --> 00:56:37,923
And indeed, that's a frustration that you'll


1132
00:56:37,923 --> 00:56:42,280
tend to feel if you can't quite drop down conceptually to that level.


1133
00:56:42,280 --> 00:56:42,780
All right.


1134
00:56:42,780 --> 00:56:45,570
So just to make this a little more--


1135
00:56:45,570 --> 00:56:47,720
to give you more of a mental model for this,


1136
00:56:47,720 --> 00:56:50,460
this indentation is not strictly necessary.


1137
00:56:50,460 --> 00:56:54,660
Kind of, like, in C, where we care, where style50 cares, but not


1138
00:56:54,660 --> 00:56:56,850
Clang, about what your code looks like.


1139
00:56:56,850 --> 00:56:58,805
Similarly, browsers are pretty tolerant.


1140
00:56:58,805 --> 00:57:01,680
You can have all of this white space, all of this pretty indentation.


1141
00:57:01,680 --> 00:57:02,910
Or you cannot.


1142
00:57:02,910 --> 00:57:06,393
It's not going to care, generally, one way or the other.


1143
00:57:06,393 --> 00:57:08,310
However, this is certainly much more readable.


1144
00:57:08,310 --> 00:57:11,980
But we'll see next week as we start to generate HTML automatically,


1145
00:57:11,980 --> 00:57:16,410
it's not always important that the code you generate be pretty printed.


1146
00:57:16,410 --> 00:57:18,780
But when you're writing in this format, it absolutely


1147
00:57:18,780 --> 00:57:22,180
should be when you're collaborating or submitting to other people.


1148
00:57:22,180 --> 00:57:25,900
So this, though, is what we would call a tree representation of this.


1149
00:57:25,900 --> 00:57:27,332
So here is that hierarchy.


1150
00:57:27,332 --> 00:57:30,540
So if we think of the whole web page as what's generally known as a document,


1151
00:57:30,540 --> 00:57:34,800
that document has a root element called the HTML element, which


1152
00:57:34,800 --> 00:57:36,900
it's open HTML tag and its closed tag.


1153
00:57:36,900 --> 00:57:38,910
It has, as I claim, two children.


1154
00:57:38,910 --> 00:57:40,800
The head tag has one child title.


1155
00:57:40,800 --> 00:57:44,370
And then both of those leaf nodes, or leaves


1156
00:57:44,370 --> 00:57:49,140
to borrow the family tree vernacular, have text nodes of hello, title


1157
00:57:49,140 --> 00:57:51,040
and hello, body, respectively.


1158
00:57:51,040 --> 00:57:54,270
So this is going to be useful later today because it turns out,


1159
00:57:54,270 --> 00:57:57,480
with JavaScript, an actual programming language,


1160
00:57:57,480 --> 00:58:01,800
we can start to modify this tree in the computer's memory or RAM


1161
00:58:01,800 --> 00:58:05,220
and make the page dynamically change by essentially


1162
00:58:05,220 --> 00:58:09,750
creating new HTML on the fly, even if that didn't come from the server.


1163
00:58:09,750 --> 00:58:13,020
Case in point, many of you use Gmail or maybe Outlook.


1164
00:58:13,020 --> 00:58:15,660
Generally speaking, you don't have to reload the page


1165
00:58:15,660 --> 00:58:16,950
to see if you've got new mail.


1166
00:58:16,950 --> 00:58:20,550
It just magically appears at the top of the page in kind of a stack.


1167
00:58:20,550 --> 00:58:23,340
And it just keeps pushing old mail down, down, down.


1168
00:58:23,340 --> 00:58:26,130
Well, that's going to be the result of some JavaScript


1169
00:58:26,130 --> 00:58:28,860
code updating this tree in memory.


1170
00:58:28,860 --> 00:58:31,110
And it has the effect of just dynamically generating


1171
00:58:31,110 --> 00:58:36,340
more and more HTML that represents your email's inbox, for instance.


1172
00:58:36,340 --> 00:58:36,840
All right.


1173
00:58:36,840 --> 00:58:39,870
So with that said, why don't we go ahead and actually


1174
00:58:39,870 --> 00:58:42,190
try this out in a couple of ways.


1175
00:58:42,190 --> 00:58:44,290
So let me go back to VS Code here.


1176
00:58:44,290 --> 00:58:50,440
Let me propose to actually tweak my code here a little bit.


1177
00:58:50,440 --> 00:58:55,980
So let me go into, let's see, my VS Code editor here.


1178
00:58:55,980 --> 00:58:57,000
Let me zoom out.


1179
00:58:57,000 --> 00:59:00,090
And notice down below, actually, all this time


1180
00:59:00,090 --> 00:59:04,650
as I was clicking on hello.html, my HTTP server program


1181
00:59:04,650 --> 00:59:07,860
actually is outputting sort of the logs from a server.


1182
00:59:07,860 --> 00:59:11,610
It turns out any time you request a page with a browser from a server,


1183
00:59:11,610 --> 00:59:14,520
that server is probably logging a little something about you.


1184
00:59:14,520 --> 00:59:16,980
One, it's probably logging your IP address.


1185
00:59:16,980 --> 00:59:19,170
Two, it's probably logging the type of browser


1186
00:59:19,170 --> 00:59:22,500
you're using Chrome, or Safari, or Edge, or something like that.


1187
00:59:22,500 --> 00:59:25,810
It's probably logging the operating system version you're using,


1188
00:59:25,810 --> 00:59:28,800
be it Windows, or Mac OS, or Android, or iOS, or the like,


1189
00:59:28,800 --> 00:59:30,922
and maybe some other information as well.


1190
00:59:30,922 --> 00:59:32,130
We won't dwell on this today.


1191
00:59:32,130 --> 00:59:36,000
But there's a lot of information that will be logged about you, even if you


1192
00:59:36,000 --> 00:59:38,790
are in incognito mode or private mode.


1193
00:59:38,790 --> 00:59:40,180
So more on that next week.


1194
00:59:40,180 --> 00:59:43,380
And today, unlike all past lectures, even though by default you


1195
00:59:43,380 --> 00:59:46,530
see this in your own code space, you see here


1196
00:59:46,530 --> 00:59:51,240
a ports tab, which for the most part is not that useful for us today.


1197
00:59:51,240 --> 00:59:55,660
But you will see that this row here mentions HTTP server.


1198
00:59:55,660 --> 00:59:56,160
Why?


1199
00:59:56,160 --> 00:59:58,680
Because in my terminal, that command is still running.


1200
00:59:58,680 --> 00:59:59,640
It is a server.


1201
00:59:59,640 --> 01:00:02,880
And it's just there living to serve now by waiting and waiting and waiting


1202
01:00:02,880 --> 01:00:04,650
for me to click on more of those links.


1203
01:00:04,650 --> 01:00:08,290
And every time I do click on a link, I'll see another line of output here.


1204
01:00:08,290 --> 01:00:12,330
But it turns out that all this time in your ports tab of VS Code, you


1205
01:00:12,330 --> 01:00:16,740
can see all of the TCP ports, for instance, that are in use.


1206
01:00:16,740 --> 01:00:20,340
Now generally, you haven't needed any of those, at least for your own work.


1207
01:00:20,340 --> 01:00:24,660
But notice that HTTP server is indeed listening on Port 8080.


1208
01:00:24,660 --> 01:00:26,940
CS50 has some of its own customizations.


1209
01:00:26,940 --> 01:00:28,570
And this is a bit of a geek Easter egg.


1210
01:00:28,570 --> 01:00:34,420
But we presume to use Port 1337, which perhaps those more comfortable


1211
01:00:34,420 --> 01:00:35,420
will know what it means.


1212
01:00:35,420 --> 01:00:36,378
This is like leetspeak.


1213
01:00:36,378 --> 01:00:39,700
So it actually spells Leet if you're cool and use a 1, 7, and 2, 3.


1214
01:00:39,700 --> 01:00:40,200
OK.


1215
01:00:40,200 --> 01:00:42,838
So anyhow, we chose that port number.


1216
01:00:42,838 --> 01:00:44,130
But there are some conventions.


1217
01:00:44,130 --> 01:00:46,920
Next week we're going to actually start using Port 5,000, which


1218
01:00:46,920 --> 01:00:48,060
isn't in use at the moment.
目前没有使用。

1219
01:00:48,060 --> 01:00:52,118
But long story short, you can see this stuff underneath the hood.
但长话短说，你可以在引擎盖下面看到这些东西。

1220
01:00:52,118 --> 01:00:53,910
And indeed, we're just sort of peeling back
事实上，我们只是剥开

1221
01:00:53,910 --> 01:00:56,565
some of these layers that have been there now for some time.
一些已经存在了一段时间的层。

1222
01:00:56,565 --> 01:00:57,940
Well, let's go ahead and do this.
好吧，让我们继续做吧。

1223
01:00:57,940 --> 01:01:03,210
I'm going to go ahead and create another terminal window using my plus icon down
我将继续使用我的加号图标创建一个新的终端窗口

1224
01:01:03,210 --> 01:01:04,300
here in the console.
这里在控制台中。

1225
01:01:04,300 --> 01:01:08,370
Notice that at the right-hand side of my screen, I now have two bash shells.
注意，在我的屏幕右侧，现在我有两个 bash shell。

1226
01:01:08,370 --> 01:01:13,230
Bash is the name of your prompt, so to speak, where the dollar sign is.
Bash 就是你的提示符的名称，可以这么说，美元符号所在的地方。

1227
01:01:13,230 --> 01:01:16,138
If I click on the first one, there's HTTP server.
如果我点击第一个，那里有 HTTP 服务器。

1228
01:01:16,138 --> 01:01:16,930
It's still running.
它还在运行。

1229
01:01:16,930 --> 01:01:18,430
And I want it to keep running today.
我今天想让它继续运行。

1230
01:01:18,430 --> 01:01:22,360
But I'd also like to be able to run more commands in my code space.
但我也想在我的代码空间中运行更多命令。

1231
01:01:22,360 --> 01:01:24,270
So I've simply created a second terminal.
所以我只是创建了第二个终端。

1232
01:01:24,270 --> 01:01:26,760
And I can go back and forth by clicking it right.
我可以通过点击它来回切换。

1233
01:01:26,760 --> 01:01:32,190
Let me go ahead now and copy hello.html like that and create a brand new file
现在让我继续复制 hello.html，就像那样，创建一个全新的文件

1234
01:01:32,190 --> 01:01:33,360
called--
叫做——

1235
01:01:33,360 --> 01:01:36,450
how about paragraphs.html?
paragraphs.html 怎么样？

1236
01:01:36,450 --> 01:01:39,790
And in paragraphs.html, I'm going to first paste all of that.
在 paragraphs.html 中，我将首先粘贴所有这些。

1237
01:01:39,790 --> 01:01:43,600
I'm going to hide my terminal window now without stopping HTTP server.
我将现在隐藏我的终端窗口，而不会停止 HTTP 服务器。

1238
01:01:43,600 --> 01:01:46,690
And I'm going to go ahead and just create some paragraphs of text.
我将继续创建一些文本段落。

1239
01:01:46,690 --> 01:01:49,160
And in fact, let me go ahead and cheat here real quick.
事实上，让我在这里快速作弊一下。

1240
01:01:49,160 --> 01:01:54,010
I'm going to go ahead and, in my other window here secretly, open up
我将继续，在我的另一个窗口里偷偷地打开

1241
01:01:54,010 --> 01:02:00,200
a whole bunch of text so that I can grab some Latin-like text to copy paste.
一大堆文本，这样我就可以获取一些类似拉丁文的文本进行复制粘贴。

1242
01:02:00,200 --> 01:02:01,120
So now I'm back.
所以现在我回来了。

1243
01:02:01,120 --> 01:02:03,765
And all I did was secretly copy paste a whole bunch of text.
我所做的就是偷偷地复制粘贴了一大堆文本。

1244
01:02:03,765 --> 01:02:06,640
I'm going to make a couple of changes to this file, where I currently
我将对这个文件做一些修改，我现在

1245
01:02:06,640 --> 01:02:08,530
have just a title and a body.
只有标题和正文。

1246
01:02:08,530 --> 01:02:12,220
One, I'm going to rename this to paragraphs, just so I can keep straight
第一，我将把它重命名为 paragraphs，这样我就可以保持直观

1247
01:02:12,220 --> 01:02:13,420
which file is which.
哪个文件是哪个。

1248
01:02:13,420 --> 01:02:17,890
And down here, I'm going to go ahead and paste in a big paragraph of text.
在这里，我将继续粘贴一段很长的文本。

1249
01:02:17,890 --> 01:02:19,360
This is not actually Latin.
这实际上不是拉丁语。

1250
01:02:19,360 --> 01:02:23,650
It's sort of lorem ipsum text, which is Latin-like random words that's
这是一种 lorem ipsum 文本，它是一种类似拉丁语的随机词语

1251
01:02:23,650 --> 01:02:24,925
meant to look like Latin.
看起来像拉丁语。

1252
01:02:24,925 --> 01:02:27,550
And typographers historically used this as sort of placeholders
排版人员历史上使用它作为占位符

1253
01:02:27,550 --> 01:02:28,540
for actual text.
用于实际文本。

1254
01:02:28,540 --> 01:02:31,900
But notice this is a pretty decently long paragraph.
但请注意，这是一个相当长的段落。

1255
01:02:31,900 --> 01:02:34,580
And so it's going to make my web page a bit bigger.
所以它会让我的网页变得更大。

1256
01:02:34,580 --> 01:02:39,490
So let me go back to my other tab, where I have hello.html open from before.
所以让我回到我的另一个标签页，在那里我之前打开了 hello.html。

1257
01:02:39,490 --> 01:02:40,570
Let me click back.
让我点击回去。

1258
01:02:40,570 --> 01:02:45,195
And now notice, in my directory listing, I have a new file, paragraphs.html.
现在请注意，在我的目录列表中，我有一个新的文件，paragraphs.html。

1259
01:02:45,195 --> 01:02:46,570
Let me go ahead and open that up.
让我继续打开它。

1260
01:02:46,570 --> 01:02:50,260
And voila, there is a big paragraph of text.
瞧，那里有一段很长的文本。

1261
01:02:50,260 --> 01:02:53,780
Just for fun, let me create three such paragraphs.
为了好玩，让我创建三个这样的段落。

1262
01:02:53,780 --> 01:02:58,112
So I'm going to cheat temporarily and just copy and paste two more times.
所以我将暂时作弊，复制粘贴两次。

1263
01:02:58,112 --> 01:03:00,070
But I'm going to separate it with a blank line,
但我会用空白行隔开它，

1264
01:03:00,070 --> 01:03:03,040
as you would in, like, Google Docs or Microsoft Word for paragraphs
就像你在 Google Docs 或 Microsoft Word 中对段落所做的那样

1265
01:03:03,040 --> 01:03:04,600
in English or any language.
在英语或任何语言中。

1266
01:03:04,600 --> 01:03:06,520
And I'm going to go back to my paragraphs.
我将回到我的段落。

1267
01:03:06,520 --> 01:03:10,990
Nothing has changed yet because HTTP, just like the exercise with Phyllis
还没有变化，因为 HTTP，就像与 Phyllis 的练习一样

1268
01:03:10,990 --> 01:03:14,320
and Brian, requires that we send the packets back and forth if we
和 Brian 一样，要求我们在想要获取更新的内容时来回发送数据包。

1269
01:03:14,320 --> 01:03:16,010
want to get updated content.
想要获取更新的内容。

1270
01:03:16,010 --> 01:03:20,860
So I have to click my browser's reload button, or hit Control R or Command R,
所以我必须点击浏览器的刷新按钮，或者按下 Control R 或 Command R，

1271
01:03:20,860 --> 01:03:24,850
depending on your browser or OS, and notice that when I do that,
取决于你的浏览器或操作系统，请注意，当我这样做时，

1272
01:03:24,850 --> 01:03:26,630
I definitely get more text.
我肯定会得到更多文本。

1273
01:03:26,630 --> 01:03:31,240
But it just looks like one big blob, not three separate paragraphs.
但它看起来像一个大块，而不是三个独立的段落。

1274
01:03:31,240 --> 01:03:33,760
What might your intuition be for why that
你的直觉是什么，为什么

1275
01:03:33,760 --> 01:03:39,190
is, even though I've clearly indented this and given blank lines between?
是这样的，即使我清楚地缩进了它并在它们之间留下了空白行？

1276
01:03:39,190 --> 01:03:39,850
Yeah?
是吧？

1277
01:03:39,850 --> 01:03:41,590
AUDIENCE: HTML doesn't care about the whitespace.
观众：HTML 不关心空白。

1278
01:03:41,590 --> 01:03:42,340
DAVID MALAN: Yeah.
大卫·马兰：是的。

1279
01:03:42,340 --> 01:03:45,070
So HTML doesn't care about the whitespace or technically,
所以 HTML 不关心空白，或者更准确地说，

1280
01:03:45,070 --> 01:03:47,290
more than one whitespace.
不止一个空白。

1281
01:03:47,290 --> 01:03:49,840
I can hit as many Enters as I want.
我可以按任意多个 Enter 键。

1282
01:03:49,840 --> 01:03:52,540
All of them are going to be ignored except for a single space.
除了一个空格之外，所有这些都会被忽略。

1283
01:03:52,540 --> 01:03:55,090
It's going to be normalized to just a single space.
它将被规范化为一个空格。

1284
01:03:55,090 --> 01:03:56,680
In general, this is useful.
总的来说，这很有用。

1285
01:03:56,680 --> 01:04:00,430
Because it means I can pretty print my HTML and indent things visually,
因为这意味着我可以美化我的 HTML 并直观地缩进东西，

1286
01:04:00,430 --> 01:04:03,393
even if I don't want the browser to indent anything manually for me.
即使我不希望浏览器为我手动缩进任何东西。

1287
01:04:03,393 --> 01:04:05,560
But here's where we're going to need some more tags.
但这里我们需要一些额外的标签。

1288
01:04:05,560 --> 01:04:08,020
And it turns out the simplest fix for this problem
事实证明，解决这个问题最简单的办法

1289
01:04:08,020 --> 01:04:10,150
is to use the paragraph tag.
就是使用段落标签。

1290
01:04:10,150 --> 01:04:13,373
And for short, it's just open bracket p close bracket.
简而言之，就是左尖括号 p 右尖括号。

1291
01:04:13,373 --> 01:04:15,790
I'm going to be a little pedantic, and even though VS Code
我要有点迂腐，即使 VS Code

1292
01:04:15,790 --> 01:04:18,640
is being a little annoying because it's trying to autocomplete my thoughts
有点烦人，因为它试图自动完成我的想法

1293
01:04:18,640 --> 01:04:20,290
but I don't want it to autocomplete just yet,
但我现在不想让它自动完成，

1294
01:04:20,290 --> 01:04:22,332
sometimes you have to fight with the text editor.
有时你必须与文本编辑器作斗争。

1295
01:04:22,332 --> 01:04:25,600
So these autocomplete features have upsides and downsides.
所以这些自动完成功能有优点也有缺点。

1296
01:04:25,600 --> 01:04:28,480
But I'm going to go ahead and put a paragraph tag,
但我将继续添加一个段落标签，

1297
01:04:28,480 --> 01:04:31,600
open and close around each of these paragraphs.
在每个段落的开头和结尾添加一个。

1298
01:04:31,600 --> 01:04:33,850
And I'm going to maintain my indentation, just to keep
我将保持我的缩进，只是为了保持

1299
01:04:33,850 --> 01:04:35,690
it visually clean on the screen.
它在屏幕上视觉上整洁。

1300
01:04:35,690 --> 01:04:40,250
And now I'm going to put this one last close tag on this line here.
现在我要在这行里添加最后一个闭合标签。

1301
01:04:40,250 --> 01:04:42,770
And so it's a lot more verbose.
所以它更加冗长。

1302
01:04:42,770 --> 01:04:46,100
But notice that it's effectively telling the browser start a paragraph,
但请注意，它实际上是在告诉浏览器开始一个段落，

1303
01:04:46,100 --> 01:04:49,860
end a paragraph, start a paragraph, end a paragraph, and so forth.
结束一个段落，开始一个段落，结束一个段落，等等。

1304
01:04:49,860 --> 01:04:53,240
So if I go back to my other tab and I click Reload,
所以如果我回到另一个标签页并点击刷新，

1305
01:04:53,240 --> 01:04:55,950
now we have some semblance of what I expected,
现在我们有一些我期望的东西，

1306
01:04:55,950 --> 01:04:58,830
which is three separate paragraphs in this case.
在这种情况下，就是三个独立的段落。

1307
01:04:58,830 --> 01:04:59,330
All right?
好吧？

1308
01:04:59,330 --> 01:05:01,323
So that's the p tag, the paragraph tag.
所以这就是 p 标签，段落标签。

1309
01:05:01,323 --> 01:05:03,740
P for short, because as you'll see, many of these tags are
p 是缩写，因为你会看到，许多标签都是

1310
01:05:03,740 --> 01:05:06,410
abbreviated just because they're slightly faster to type.
缩写的，因为它们输入起来稍微快一点。

1311
01:05:06,410 --> 01:05:08,010
Let's do another example.
让我们再举一个例子。

1312
01:05:08,010 --> 01:05:10,020
Let me go back to VS Code here.
让我回到 VS Code。

1313
01:05:10,020 --> 01:05:11,400
I'm going to copy this text.
我要复制这段文字。

1314
01:05:11,400 --> 01:05:13,130
I'm going to create a new file called--
我要创建一个新文件，叫做——

1315
01:05:13,130 --> 01:05:17,000
how about headings.html?
叫 headings.html 好吗？

1316
01:05:17,000 --> 01:05:21,180
And I'm going to paste this, close my terminal just to give me more room.
然后我粘贴它，关闭我的终端，以便给我更多的空间。

1317
01:05:21,180 --> 01:05:23,060
I'm going to rename the title to be Headings,
我要把标题重命名为 Headings，

1318
01:05:23,060 --> 01:05:24,770
just to keep straight which is which.
仅仅为了区分它们。

1319
01:05:24,770 --> 01:05:27,873
I'm going to delete all of these paragraphs to make it-- actually,
我要删除所有这些段落，以便—— 实际上，

1320
01:05:27,873 --> 01:05:28,790
no, let's not do that.
不，我们别这样做。

1321
01:05:28,790 --> 01:05:30,200
Let's keep the paragraphs.
让我们保留这些段落。

1322
01:05:30,200 --> 01:05:33,390
But like an academic paper or a textbook,
但是就像一篇学术论文或一本教科书，

1323
01:05:33,390 --> 01:05:37,130
let's give these chapter headings or section headings or the like.
让我们给这些章节标题或段落标题之类的。

1324
01:05:37,130 --> 01:05:40,820
Well, I could just do something like this.
嗯，我可以这样去做。

1325
01:05:40,820 --> 01:05:42,740
How about 1?
1 怎么样？

1326
01:05:42,740 --> 01:05:47,210
And then down here I could put 2, and then down here I could put 3.
然后在这里我可以写 2，然后在这里我可以写 3。

1327
01:05:47,210 --> 01:05:52,130
But of course, if I reload this, it's not really going to look as I-- whoops,
但是当然，如果我重新加载这个，它看起来并不像我—— 哎呦，

1328
01:05:52,130 --> 01:05:57,260
if I go back to this directory listing, open up headings.html, it's fine.
如果我回到这个目录列表，打开 headings.html，它看起来没问题。

1329
01:05:57,260 --> 01:05:58,370
It's not super pretty.
它并不非常漂亮。

1330
01:05:58,370 --> 01:06:01,370
But it would be nice to give a little more prominence to these headings.
但是，给这些标题多一点突出显示效果会更好。

1331
01:06:01,370 --> 01:06:03,740
And in fact, there's a bunch of tags for this.
实际上，有很多标签可以实现这个。

1332
01:06:03,740 --> 01:06:07,730
I can use H1, for instance, for one really big heading.
例如，我可以使用 H1 来表示一个非常大的标题。

1333
01:06:07,730 --> 01:06:10,308
And then let me close the tag over here and indent.
然后让我在这里关闭标签并缩进。

1334
01:06:10,308 --> 01:06:12,600
Then down here-- and, again, whitespace doesn't matter,
然后在这里—— 再次说明，空格并不重要，

1335
01:06:12,600 --> 01:06:15,380
so I'm going to give myself a little bit of breathing room just so it's clear
所以我要给自己一点呼吸空间，这样看起来就很清楚

1336
01:06:15,380 --> 01:06:16,550
which of these is which.
哪些是哪些。

1337
01:06:16,550 --> 01:06:19,070
For this, maybe it's not Chapter 2, but Section 2.
对于这个，也许它不是第 2 章，而是第 2 节。

1338
01:06:19,070 --> 01:06:20,660
So let me do H2.
所以让我使用 H2。

1339
01:06:20,660 --> 01:06:24,260
And then inside of this, I'm going to go ahead and do 2.
然后在这个里面，我会继续使用 2。

1340
01:06:24,260 --> 01:06:27,712
And just to be clear, I don't have to put these on their own lines.
为了更清楚，我不必把它们放在单独的行上。

1341
01:06:27,712 --> 01:06:29,420
I'm just doing that to be a bit pedantic.
我只是这样做的，有点迂腐。

1342
01:06:29,420 --> 01:06:32,030
You can technically just do this and keep everything on one line.
你实际上可以这样做，把所有东西都放在一行上。

1343
01:06:32,030 --> 01:06:33,500
But I'll be consistent, at least.
但是，至少我会保持一致。

1344
01:06:33,500 --> 01:06:35,060
But either approach is fine.
但是两种方法都可以。

1345
01:06:35,060 --> 01:06:37,770
And then, down here, I'm going to use maybe a sub subsection.
然后，在这里，我可能会使用一个子子部分。

1346
01:06:37,770 --> 01:06:39,735
So let me delete this and do h3.
所以让我删除这个并使用 h3。

1347
01:06:39,735 --> 01:06:41,360
I'm just going to write the word three.
我只是要写单词 three。

1348
01:06:41,360 --> 01:06:45,210
And then just to be neat, I'm going to indent everything like this here.
然后，为了整洁，我将在这里将所有内容缩进。

1349
01:06:45,210 --> 01:06:47,810
So now if I go back to headings and I reload,
所以现在，如果我回到 headings 并重新加载，

1350
01:06:47,810 --> 01:06:49,692
I'm going to get some default formatting.
我将获得一些默认格式。

1351
01:06:49,692 --> 01:06:51,650
It might not be the formatting you want, but it
它可能不是你想要的格式，但是它

1352
01:06:51,650 --> 01:06:54,470
looks like it's big and bold, but in decreasing order.
看起来它很大，很粗体，但是按照降序排列。

1353
01:06:54,470 --> 01:06:56,270
H1 is the biggest.
H1 是最大的。

1354
01:06:56,270 --> 01:06:57,560
H2 is smaller.
H2 更小。

1355
01:06:57,560 --> 01:06:58,940
H3 is even smaller.
H3 更小。

1356
01:06:58,940 --> 01:07:00,560
And you can go down to h6.
你可以一直到 h6。

1357
01:07:00,560 --> 01:07:02,040
And it gets smaller and smaller.
它会越来越小。

1358
01:07:02,040 --> 01:07:04,850
And at that point, if you've got, like, sub sub sub sub
在这一点上，如果你有，像，子子子子

1359
01:07:04,850 --> 01:07:08,730
subsections of your book or paper, you're probably organizing it poorly.
你书或论文的子部分，你可能组织得不好。

1360
01:07:08,730 --> 01:07:10,740
So they stop at some point there.
所以它们会在某个点停止。

1361
01:07:10,740 --> 01:07:11,240
All right.
好的。

1362
01:07:11,240 --> 01:07:12,740
Well, what else can we do in HTML?
好吧，我们还能在 HTML 中做什么？

1363
01:07:12,740 --> 01:07:13,948
These things are omnipresent.
这些东西无处不在。

1364
01:07:13,948 --> 01:07:17,930
Let me copy this HTML and close that tab, open my terminal,
让我复制这个 HTML 并关闭那个标签，打开我的终端，

1365
01:07:17,930 --> 01:07:21,470
and create a new file, like, code list.html.
并创建一个新文件，例如，code list.html。

1366
01:07:21,470 --> 01:07:23,430
And let's make a list of information.
让我们做一个信息列表。

1367
01:07:23,430 --> 01:07:26,960
Let me just paste that HTML, just to save some time today, and change
让我只是粘贴那个 HTML，仅仅是为了节省今天的一些时间，并改变

1368
01:07:26,960 --> 01:07:28,310
my title to list.
我的标题为 list。

1369
01:07:28,310 --> 01:07:32,370
Let me get rid of all of these paragraphs, just to simplify things.
让我去掉所有这些段落，仅仅为了简化。

1370
01:07:32,370 --> 01:07:35,810
So now I'm sort of back to where I began.
所以现在我回到了开始的地方。

1371
01:07:35,810 --> 01:07:39,800
And then inside of the body of this page, let me go ahead and make a list,
然后在这个页面的 body 中，让我继续创建一个列表，

1372
01:07:39,800 --> 01:07:41,395
like foo, bar, baz.
像 foo、bar、baz。

1373
01:07:41,395 --> 01:07:43,520
If you've never heard these words, these are, like,
如果你从未听说过这些词，这些词，就像，

1374
01:07:43,520 --> 01:07:45,230
computer scientists go-to words.
计算机科学家的常用词。

1375
01:07:45,230 --> 01:07:48,030
A mathematician might choose x, y, and z by default.
一个数学家可能会默认选择 x、y 和 z。

1376
01:07:48,030 --> 01:07:51,990
CS people tend to go with foo, bar, and baz for historical reasons.
CS 人倾向于使用 foo、bar 和 baz，出于历史原因。

1377
01:07:51,990 --> 01:07:54,690
So here's a list of three arbitrary words.
所以这里是一个包含三个任意词的列表。

1378
01:07:54,690 --> 01:07:59,120
If I go over to my other tab, go back to my directory listing,
如果我切换到另一个标签，回到我的目录列表，

1379
01:07:59,120 --> 01:08:00,240
there's my new file.
这是我的新文件。

1380
01:08:00,240 --> 01:08:03,300
Let's click on list.html, same problem.
让我们点击 list.html，同样的问题。

1381
01:08:03,300 --> 01:08:03,990
It's a list.
它是一个列表。

1382
01:08:03,990 --> 01:08:06,140
But it's not one after the other.
但是它们不是一个接一个。

1383
01:08:06,140 --> 01:08:08,670
Last time, of course, we fixed this with paragraphs.
上次，当然，我们用段落解决了这个问题。

1384
01:08:08,670 --> 01:08:09,380
But you know what'd be nice?
但你知道什么会更好吗？

1385
01:08:09,380 --> 01:08:11,390
To make it a little prettier, like a bulleted list, which
把它弄得更漂亮一些，就像一个项目符号列表，它

1386
01:08:11,390 --> 01:08:12,807
are kind of everywhere these days.
现在到处都是。

1387
01:08:12,807 --> 01:08:15,350
So I could try to simulate this.
所以我可以尝试模拟它。

1388
01:08:15,350 --> 01:08:18,350
And you might be in the habit of doing this in some programs.
你可能习惯在一些程序中这样做。

1389
01:08:18,350 --> 01:08:21,649
But of course, if I go back to my other tab, Reload,
但是当然，如果我回到另一个标签，重新加载，

1390
01:08:21,649 --> 01:08:23,930
I'm just sort of making the problem worse visually.
我只是让这个问题在视觉上更糟糕。

1391
01:08:23,930 --> 01:08:25,790
But it turns out--
但是事实证明——

1392
01:08:25,790 --> 01:08:30,740
let me undo that-- there is an unordered list tag, otherwise known
让我撤销—— 有一个无序列表标签，也称为

1393
01:08:30,740 --> 01:08:33,560
as ul for short, that I can put all three
简称 ul，我可以把所有三个

1394
01:08:33,560 --> 01:08:35,819
of these words in an unordered list.
词放到一个无序列表中。

1395
01:08:35,819 --> 01:08:38,750
Let me go ahead and indent everything consistently.
让我继续并将所有内容缩进。

1396
01:08:38,750 --> 01:08:41,689
But to have three items in this list, I actually
但是为了在这个列表中拥有三个项目，我实际上

1397
01:08:41,689 --> 01:08:44,330
need another tag, a list item tag.
需要另一个标签，一个列表项标签。

1398
01:08:44,330 --> 01:08:50,210
And I'm going to go ahead and add that tag there, list item here and there,
我会继续在那里添加那个标签，这里和那里添加列表项，

1399
01:08:50,210 --> 01:08:52,290
and then another list item tag here.
然后在这里添加另一个列表项标签。

1400
01:08:52,290 --> 01:08:54,770
And here's where it's a stylistic choice.
而这里是一个风格选择。

1401
01:08:54,770 --> 01:08:57,598
I could move foo and bar and baz onto their own lines.
我可以将 foo、bar 和 baz 移动到它们自己的行上。

1402
01:08:57,598 --> 01:09:00,140
But this is going to start to get excessively tall, like, too
但是这样会开始变得过高，就像，太多

1403
01:09:00,140 --> 01:09:00,848
much white space.
空白。

1404
01:09:00,848 --> 01:09:02,520
So reasonable people will disagree.
所以，理性的人会不同意。

1405
01:09:02,520 --> 01:09:04,399
But this feels a little more readable to me.
但是，我觉得这样更易读。

1406
01:09:04,399 --> 01:09:05,990
So I'm going to leave it as such.
所以我会保持不变。

1407
01:09:05,990 --> 01:09:07,310
Go back to my other tab.
回到我的另一个标签。

1408
01:09:07,310 --> 01:09:11,132
And now when I reload, you get a nice bulleted list by default.
现在，当我重新加载时，你会得到一个默认的漂亮项目符号列表。

1409
01:09:11,132 --> 01:09:12,590
And you see these all over the web.
你可以在网上看到这些。

1410
01:09:12,590 --> 01:09:16,550
What if I want to have a numbered list, that is to say, ordered list?
如果我想有一个编号列表，也就是说，有序列表呢？

1411
01:09:16,550 --> 01:09:20,930
Any instincts for changing these bullets to numbers?
您想将这些项目符号改为数字吗？

1412
01:09:20,930 --> 01:09:22,640
So ol is a good instinct.
所以用 ol 标签是一个不错的直觉。

1413
01:09:22,640 --> 01:09:25,310
And, indeed, sometimes HTML makes perfect sense.
确实，有时 HTML 非常合乎逻辑。

1414
01:09:25,310 --> 01:09:29,870
As in this case, if I change ul to ol, I don't have to manually number anything.
就像在这种情况下，如果我将 ul 改为 ol，我就不用手动编号了。

1415
01:09:29,870 --> 01:09:33,590
Because when I reload, it's going to use Arabic numerals automatically
因为当我重新加载时，它会自动使用阿拉伯数字

1416
01:09:33,590 --> 01:09:35,450
for me like this, top to bottom.
像这样，从上到下。

1417
01:09:35,450 --> 01:09:39,260
And what's nice about this is, if I go in and I insert things in the middle,
好处是，如果我在中间插入内容，

1418
01:09:39,260 --> 01:09:41,189
I don't have to manually renumber things.
我不用手动重新编号。

1419
01:09:41,189 --> 01:09:43,180
The browser is going to do the counting for me.
浏览器会帮我计数。

1420
01:09:43,180 --> 01:09:45,180
And if you're doing an outline, you can actually
如果你正在做大纲，你可以实际上

1421
01:09:45,180 --> 01:09:49,020
specify whether you want 1, 2, 3, or A, B, C, or I,
指定你想要 1, 2, 3 还是 A, B, C 或者 I，

1422
01:09:49,020 --> 01:09:50,939
double I, triple I, or so forth.
双 I，三 I 等等。

1423
01:09:50,939 --> 01:09:53,010
There's different numbering systems you can use.
你可以使用不同的编号系统。

1424
01:09:53,010 --> 01:09:56,640
But by default, we get our decimal numbers here.
但默认情况下，我们会在这里得到十进制数字。

1425
01:09:56,640 --> 01:09:57,450
I'm going quickly.
我讲得很快。

1426
01:09:57,450 --> 01:10:01,080
But it's hard to get too excited about bulleted lists and such.
但很难对项目符号列表之类的东西过于兴奋。

1427
01:10:01,080 --> 01:10:06,300
But any questions on these tags thus far?
到目前为止，对这些标签还有什么问题吗？

1428
01:10:06,300 --> 01:10:09,670
We'll by design try to escalate quickly momentarily.
我们设计上会尽快升级。

1429
01:10:09,670 --> 01:10:10,230
All right.
好的。

1430
01:10:10,230 --> 01:10:14,340
So how about just a few other tags to make things more visually interesting?
那么，我们来学习一些其他的标签，让内容看起来更有趣吧？

1431
01:10:14,340 --> 01:10:18,030
Let me go ahead here and cheat by opening up a file
我来打开一个我提前准备好的文件，

1432
01:10:18,030 --> 01:10:21,940
that I made in advance that's going to demonstrate what a table looks like.
来展示一个表格长什么样。

1433
01:10:21,940 --> 01:10:25,650
So here let me open a file that I brought with me called table.html.
我来打开一个我带来的名为 table.html 的文件。

1434
01:10:25,650 --> 01:10:29,220
And because I brought it with me, I actually included a comment at the top.
因为我把它带来了，我在顶部加了一个注释。

1435
01:10:29,220 --> 01:10:31,720
And in fact, if you download today's files from the website,
事实上，如果你从网站上下载今天的文件，

1436
01:10:31,720 --> 01:10:33,630
you'll see that they're generally commented,
你会发现它们通常都有注释，

1437
01:10:33,630 --> 01:10:35,640
like our C code and Python code was.
就像我们的 C 代码和 Python 代码一样。

1438
01:10:35,640 --> 01:10:36,660
It's a little weird.
有点奇怪。

1439
01:10:36,660 --> 01:10:39,720
But here is the syntax for a comment in HTML.
但这是 HTML 中注释的语法。

1440
01:10:39,720 --> 01:10:45,140
It's a less than sign, or open bracket, then an exclamation point, then dash
是一个小于号，或左括号，然后是一个感叹号，然后是连字符

1441
01:10:45,140 --> 01:10:46,470
dash, two hyphens.
连字符，两个连字符。

1442
01:10:46,470 --> 01:10:50,910
Then at the very end of the comment, it's almost the opposite but not quite.
然后在注释的最后，它几乎是相反的，但并不完全一样。

1443
01:10:50,910 --> 01:10:53,160
It's hyphen hyphen close bracket instead.
而是连字符连字符右括号。

1444
01:10:53,160 --> 01:10:54,840
Why these symbols?
为什么是这些符号？

1445
01:10:54,840 --> 01:10:56,940
Humans probably decided years ago that there's
人们可能在很多年前就决定了，

1446
01:10:56,940 --> 01:11:00,420
no way someone's going to accidentally type or rather, intentionally
没有人会意外地输入，或者说，故意输入

1447
01:11:00,420 --> 01:11:02,110
type those characters visually.
这些字符。

1448
01:11:02,110 --> 01:11:04,260
So let's use them for comment symbols as well.
所以我们也用它们作为注释符号。

1449
01:11:04,260 --> 01:11:06,760
If you really want to type them, there is a way around that.
如果你真的想输入它们，有一种方法可以绕过。

1450
01:11:06,760 --> 01:11:08,890
But here is my table title.
但这是我的表格标题。

1451
01:11:08,890 --> 01:11:12,910
And here is just kind of a little, maybe, guessing game.
这有点像一个小游戏，猜猜看。

1452
01:11:12,910 --> 01:11:16,870
Here is a table tag with a tr child.
这里有一个 table 标签，它有一个 tr 子标签。

1453
01:11:16,870 --> 01:11:18,550
And here's the closed child.
这是它的闭合子标签。

1454
01:11:18,550 --> 01:11:20,980
And then there's a bunch of td tags.
然后还有很多 td 标签。

1455
01:11:20,980 --> 01:11:23,920
So I'll give you tr stands for table row.
我告诉你 tr 代表 table row（表格行）。

1456
01:11:23,920 --> 01:11:28,090
td stands for table data, AKA cell, to borrow language
td 代表 table data（表格数据），也称为 cell（单元格），借用一下

1457
01:11:28,090 --> 01:11:29,950
from, like, spreadsheet software.
类似于电子表格软件中的术语。

1458
01:11:29,950 --> 01:11:32,050
Does anyone want to guess what this file is
有人想猜猜看，如果我在浏览器中打开 table.html，这个文件会

1459
01:11:32,050 --> 01:11:37,603
going to look like if I open table.html in my browser?
看起来像什么吗？

1460
01:11:37,603 --> 01:11:38,770
What is this reminiscent of?
它让人想起什么？

1461
01:11:38,770 --> 01:11:39,400
Yeah?
是吗？

1462
01:11:39,400 --> 01:11:40,150
AUDIENCE: Num pad.
观众：数字键盘。

1463
01:11:40,150 --> 01:11:40,540
DAVID MALAN: Yeah.
DAVID MALAN：是的。

1464
01:11:40,540 --> 01:11:42,603
So it's like a numeric keypad from a phone,
所以它就像手机上的数字键盘，

1465
01:11:42,603 --> 01:11:45,020
for instance, if you're dialing someone's number manually.
例如，当你手动拨打某人的电话号码时。

1466
01:11:45,020 --> 01:11:46,870
So let me actually go to my other tab.
所以，我来切换到另一个标签。

1467
01:11:46,870 --> 01:11:49,030
Go back to my directory index.
回到我的目录索引。

1468
01:11:49,030 --> 01:11:50,385
There's table.html.
这里有 table.html。

1469
01:11:50,385 --> 01:11:52,010
And it's not going to look very pretty.
它看起来不太好看。

1470
01:11:52,010 --> 01:11:54,293
But it is structured in the way I might expect.
但它的结构符合我的预期。

1471
01:11:54,293 --> 01:11:56,710
And in my browser, I'm going to go ahead and just zoom in.
在我的浏览器中，我将放大。

1472
01:11:56,710 --> 01:11:59,080
Command plus or Control plus will generally do this.
Command 加号或 Control 加号通常可以做到这一点。

1473
01:11:59,080 --> 01:12:02,530
It does look like it's laid out tabular in rows and columns
它看起来像以表格形式排列成行和列

1474
01:12:02,530 --> 01:12:04,360
with everything very nicely aligned.
所有的内容都整齐地对齐。

1475
01:12:04,360 --> 01:12:07,510
So that might be useful as we get to larger and larger data sets.
因此，当我们处理越来越大的数据集时，这可能很有用。

1476
01:12:07,510 --> 01:12:09,350
Let me go back to VS Code here.
我回到 VS Code。

1477
01:12:09,350 --> 01:12:12,130
Let me create one more program, for instance.
我再创建一个程序。

1478
01:12:12,130 --> 01:12:15,130
And how about code image.html?
就叫 image.html 吧？

1479
01:12:15,130 --> 01:12:18,040
And just to save time, let me paste that code.
为了节省时间，我粘贴一下代码。

1480
01:12:18,040 --> 01:12:21,550
And also, let me secretly copy over a file
另外，我偷偷复制一个文件

1481
01:12:21,550 --> 01:12:23,860
that I brought with me that we've seen in the past.
我之前带过的文件。

1482
01:12:23,860 --> 01:12:25,360
Let me close my terminal.
我关闭一下终端。

1483
01:12:25,360 --> 01:12:28,593
I'm going to delete everything about tables from this file
我将删除这个文件中所有关于表格的内容

1484
01:12:28,593 --> 01:12:30,760
because I'm just saving time by copying and pasting.
因为我只是用复制粘贴来节省时间。

1485
01:12:30,760 --> 01:12:32,553
But I'm going to rename the top to image.
但我将把顶部改名为 image。

1486
01:12:32,553 --> 01:12:35,470
I'm going to get rid of the comment because it's no longer applicable.
我要删除注释，因为它不再适用。

1487
01:12:35,470 --> 01:12:40,250
But in the body of this page, I'm going to link to maybe an image of the Weeks
但在页面的主体部分，我将链接到 Weeks

1488
01:12:40,250 --> 01:12:41,540
bridge by the river.
桥的图片。

1489
01:12:41,540 --> 01:12:45,200
So I'm going to use an image tag, img for short.
所以我要使用一个 image 标签，简称 img。

1490
01:12:45,200 --> 01:12:49,850
And now, huh, it's obviously not going to be sufficient to just say image tag.
现在，显然只写 image 标签是不够的。

1491
01:12:49,850 --> 01:12:50,940
Because what image?
因为哪张图片呢？

1492
01:12:50,940 --> 01:12:53,690
So here is where attributes, again, get useful.
所以，这里属性再次发挥作用了。

1493
01:12:53,690 --> 01:12:56,570
This attribute earlier, though I didn't quite highlight it,
这个属性之前，虽然我没有特别强调它，

1494
01:12:56,570 --> 01:12:59,930
seems to indicate that this page is largely in English, as have
似乎表明这个页面大部分是用英语写的，就像我之前的页面一样，除了拉丁语的页面。

1495
01:12:59,930 --> 01:13:01,910
been my past ones, the Latin one aside.
这个属性在 HTML 标签上非常有用，

1496
01:13:01,910 --> 01:13:07,190
That attribute on the HTML tag is useful for browsers that have Google Translate
对于那些内置了 Google Translate 或类似功能的浏览器。

1497
01:13:07,190 --> 01:13:08,760
or something similar built in.
它对搜索引擎优化（SEO）也有用。

1498
01:13:08,760 --> 01:13:11,630
And also, it's useful for SEO, search engine optimization.
因为当 Google 和 Bing 在未来自动爬取我的网页时，

1499
01:13:11,630 --> 01:13:14,030
Because when Google and Bing sort of automatically
它们会知道我想要的大部分内容的语言是什么，这可以帮助它们索引

1500
01:13:14,030 --> 01:13:17,090
crawl my web page in the future, they'll know what language
我的网页，并将其保存到搜索结果中。

1501
01:13:17,090 --> 01:13:20,720
I intend for most of the content to be in, which might help them index
因此，对于 image 标签，我也需要一个属性。

1502
01:13:20,720 --> 01:13:22,770
it and keep track of it for search results.
这个属性叫做 source，简称 src。

1503
01:13:22,770 --> 01:13:26,330
So here, for the image tag, I'm similarly going to need an attribute.
你可以在它的引号内放置你想包含的图片名称，

1504
01:13:26,330 --> 01:13:29,370
And that attribute is called source, src for short.
可以使用双引号或单引号。

1505
01:13:29,370 --> 01:13:32,990
And what you put inside of its quotes for its value, double quotes
就是这样。

1506
01:13:32,990 --> 01:13:36,600
or single quotes, is the name of the image that you want to include.


1507
01:13:36,600 --> 01:13:39,020
And I include it in advance in my code space,
我提前在我的代码空间中包含了它，

1508
01:13:39,020 --> 01:13:43,800
a file called bridge dot ping from Week 4 when we played around with images.
一个名为 bridge.png 的文件，来自第 4 周，当时我们玩过图像。

1509
01:13:43,800 --> 01:13:48,710
And if I go ahead now and go to my other tab, go back to my directory index
如果我现在继续，然后转到我的另一个选项卡，回到我的目录索引

1510
01:13:48,710 --> 01:13:52,460
and zoom out, you'll see now not only bridge.png,
然后缩小，你会看到不仅有 bridge.png，

1511
01:13:52,460 --> 01:13:55,640
portable network graphic, which I manually copied in, but also
便携式网络图形，我手动复制了它，还有

1512
01:13:55,640 --> 01:13:57,950
image.html, which I just created.
image.html，我刚刚创建了它。

1513
01:13:57,950 --> 01:14:01,220
And voila, here is that same Weeks bridge.
瞧，这就是同一周的桥。

1514
01:14:01,220 --> 01:14:03,300
It's a little too big for my browser window.
它对于我的浏览器窗口来说有点太大了。

1515
01:14:03,300 --> 01:14:06,380
We'll see in a little bit how we can fix things like that.
我们将在稍后看到如何解决类似的问题。

1516
01:14:06,380 --> 01:14:10,850
But indeed, that's an image that's now embedded into the page.
但确实，那是一张现在嵌入到页面中的图像。

1517
01:14:10,850 --> 01:14:13,460
But notice, if this image were ever broken,
但请注意，如果这幅图像曾经损坏，

1518
01:14:13,460 --> 01:14:17,180
or if I had visual difficulties such that I might have screen reader
或者如果我视力有问题，以至于我可能安装了屏幕阅读器

1519
01:14:17,180 --> 01:14:19,250
software for accessibility installed, it's
用于辅助功能的软件，那么

1520
01:14:19,250 --> 01:14:22,610
generally good practice to also make sure
通常的做法是确保

1521
01:14:22,610 --> 01:14:24,510
that pages are accessible as possible.
页面尽可能地可访问。

1522
01:14:24,510 --> 01:14:27,560
And so some tags have additional attributes you can include.
因此，某些标签可以包含额外的属性。

1523
01:14:27,560 --> 01:14:29,390
Like, for an image here, there's actually
例如，对于这里的一幅图像，实际上

1524
01:14:29,390 --> 01:14:32,840
an Alt attribute that specifies alternative text
有一个 Alt 属性，它指定了替代文本

1525
01:14:32,840 --> 01:14:34,070
to describe this image.
来描述这幅图像。

1526
01:14:34,070 --> 01:14:36,080
This is what a human would see if they have
如果一个人有

1527
01:14:36,080 --> 01:14:37,640
a very slow interconnect connection.
非常慢的互连连接。

1528
01:14:37,640 --> 01:14:40,880
And before the image downloads, they can see this alternative text.
在图像下载之前，他们可以看到这个替代文本。

1529
01:14:40,880 --> 01:14:43,310
Or if I'm blind, I need a screen reader, I
或者如果我失明了，需要一个屏幕阅读器，我

1530
01:14:43,310 --> 01:14:47,000
could have these words recited to me verbally by providing this clue.
可以通过提供这个提示，让这些单词被口头朗读给我。

1531
01:14:47,000 --> 01:14:50,780
So it's best practice to include this, like, photo of bridge
所以最好包含这个，比如，桥的照片

1532
01:14:50,780 --> 01:14:54,660
so that all users can know what they're looking at, clicking on, or the like,
这样所有用户都知道他们正在看什么，点击什么，或者类似的东西，

1533
01:14:54,660 --> 01:14:56,460
so keeping that in mind, too.
所以也要记住这一点。

1534
01:14:56,460 --> 01:14:56,960
All right.
好的。

1535
01:14:56,960 --> 01:14:59,210
Let's do one other piece of multimedia.
让我们再做一项多媒体。

1536
01:14:59,210 --> 01:15:01,340
Let me close these two tabs.
让我关闭这两个选项卡。

1537
01:15:01,340 --> 01:15:06,290
Let me open my terminal and open up a file called video.html.
让我打开我的终端，并打开一个名为 video.html 的文件。

1538
01:15:06,290 --> 01:15:10,970
Let me go ahead and copy, secretly, a file called video.mp4,
让我继续复制，秘密地，一个名为 video.mp4 的文件，

1539
01:15:10,970 --> 01:15:15,020
which is a common video file format, and close my terminal window
这是一种常见的视频文件格式，然后关闭我的终端窗口

1540
01:15:15,020 --> 01:15:18,470
and go ahead and paste in here some HTML from before.
然后继续在这里粘贴一些之前的 HTML。

1541
01:15:18,470 --> 01:15:23,120
But let's now embed a video file, as you might if making a video-based website.
但现在让我们嵌入一个视频文件，就像你可能在制作一个基于视频的网站时一样。

1542
01:15:23,120 --> 01:15:25,220
Let me rename this one, too, to video.
让我把这个也重命名为 video。

1543
01:15:25,220 --> 01:15:27,890
Let me get rid of the old comment, which is not applicable.
让我删除旧的注释，它不再适用。

1544
01:15:27,890 --> 01:15:30,410
And it turns out videos are almost as simple.
事实证明，视频几乎一样简单。

1545
01:15:30,410 --> 01:15:33,110
There is a video tag.
有一个 video 标签。

1546
01:15:33,110 --> 01:15:36,505
There is a bunch of different attributes we can put on that.
我们可以添加很多不同的属性。

1547
01:15:36,505 --> 01:15:38,130
But I'll come back to that in a moment.
但我过一会儿会回到这一点。

1548
01:15:38,130 --> 01:15:42,202
But videos, because you might want to have high resolution, low resolution,
但视频，因为你可能想要有高分辨率，低分辨率，

1549
01:15:42,202 --> 01:15:44,910
depending on people's bandwidth, because these things can be big,
取决于人们的带宽，因为这些东西可能很大，

1550
01:15:44,910 --> 01:15:47,240
they actually have source children.
它们实际上有 source 子节点。

1551
01:15:47,240 --> 01:15:52,880
And confusingly, it's actually S-O-U-R-C-E, not S-R-C, in this case.
令人困惑的是，在这种情况下，实际上是 S-O-U-R-C-E，而不是 S-R-C。

1552
01:15:52,880 --> 01:15:57,440
And even more annoyingly, it takes an attribute called source.src.
更令人讨厌的是，它接受一个名为 source.src 的属性。

1553
01:15:57,440 --> 01:15:58,730
This is not good design.
这不是一个好的设计。

1554
01:15:58,730 --> 01:16:01,923
But this is what we're stuck with, video.mp4.
但这就是我们不得不接受的，video.mp4。

1555
01:16:01,923 --> 01:16:04,340
And then the type of this video, which you could generally
然后是这个视频的类型，你通常可以

1556
01:16:04,340 --> 01:16:07,550
look up if the browser doesn't recognize it, video/mp4.
查找，如果浏览器不识别它，video/mp4。

1557
01:16:07,550 --> 01:16:10,593
This is what's known as a content type or mime type.
这被称为内容类型或 MIME 类型。

1558
01:16:10,593 --> 01:16:12,260
And then, I can actually configure this.
然后，我实际上可以配置它。

1559
01:16:12,260 --> 01:16:14,570
And you would only know this by taking a class, reading a book,
你只有通过上课，读书，

1560
01:16:14,570 --> 01:16:16,080
looking at an online reference.
查看在线参考才能知道这一点。

1561
01:16:16,080 --> 01:16:19,610
I can actually add some video controls to the website,
我实际上可以为网站添加一些视频控件，

1562
01:16:19,610 --> 01:16:21,800
like a Play button, a Pause button, and all of that.
比如播放按钮，暂停按钮等等。

1563
01:16:21,800 --> 01:16:24,530
I can mute the video by default. And so this
我可以默认静音视频。所以这

1564
01:16:24,530 --> 01:16:26,930
is just going to modify the behavior of this video tag.
只是会修改这个 video 标签的行为。

1565
01:16:26,930 --> 01:16:28,430
But this is anomalous.
但这反常。

1566
01:16:28,430 --> 01:16:32,840
For some attributes, it just doesn't make sense to have values.
对于某些属性，拥有值是没有意义的。

1567
01:16:32,840 --> 01:16:36,380
Because muted, it sort of says all the information we need.
因为静音，它表示了我们需要的所有信息。

1568
01:16:36,380 --> 01:16:38,780
We could do, quote, unquote, "true."
我们可以做，“true”。

1569
01:16:38,780 --> 01:16:41,690
But humans decided years ago not to bother with that.
但人类几年前就决定不再理会这个问题。

1570
01:16:41,690 --> 01:16:44,300
So some attributes do not need value.
因此，某些属性不需要值。

1571
01:16:44,300 --> 01:16:46,810
So you do not need equal signs or quotation marks.
所以你不需要等号或引号。

1572
01:16:46,810 --> 01:16:49,600
And you would only know this from, say, documentation.
你只能从文档中知道这一点。

1573
01:16:49,600 --> 01:16:50,440
All right.
好的。

1574
01:16:50,440 --> 01:16:52,300
Let me go back to my directory listing.
让我回到我的目录列表。

1575
01:16:52,300 --> 01:16:54,970
Let me go back here to this here.
让我回到这里。

1576
01:16:54,970 --> 01:16:59,793
You'll see that there's now not only video.mp4, but also video.html.
你会看到，现在不仅有 video.mp4，还有 video.html。

1577
01:16:59,793 --> 01:17:01,210
I hope you'll forgive me for this.
我希望你能原谅我。

1578
01:17:01,210 --> 01:17:02,300
There's at least no sound.
至少没有声音。

1579
01:17:02,300 --> 01:17:05,150
But when I click on this page, it embeds a video here,
但当我点击这个页面时，它会在这里嵌入一个视频，

1580
01:17:05,150 --> 01:17:07,150
which I can then click on the controls for.
然后我可以点击它的控件。

1581
01:17:07,150 --> 01:17:11,180
And you see some short video file playing here, albeit without sound.
你会看到这里播放了一个简短的视频文件，尽管没有声音。

1582
01:17:11,180 --> 01:17:11,680
All right.
好的。

1583
01:17:11,680 --> 01:17:14,080
None of that, let me go back here to my VS Code.
这些都不重要，让我回到我的 VS Code。

1584
01:17:14,080 --> 01:17:17,720
And let's play around now with what the web is really known for,
现在让我们玩一玩，看看网络真正以什么而闻名，

1585
01:17:17,720 --> 01:17:19,210
which is hyperlinks.
那就是超链接。

1586
01:17:19,210 --> 01:17:22,570
So hypertext markup language, HTML, is all
所以超文本标记语言，HTML，都是

1587
01:17:22,570 --> 01:17:26,200
about linking one site to another, one page to another.
关于将一个网站链接到另一个网站，一个页面链接到另一个页面。

1588
01:17:26,200 --> 01:17:28,330
And nothing we've done thus far is interactive
到目前为止，我们所做的一切都没有交互性

1589
01:17:28,330 --> 01:17:30,010
beyond this own video controls.
除了这个视频自身的控件。

1590
01:17:30,010 --> 01:17:31,710
So let me go ahead and do this.
所以让我继续做这件事。

1591
01:17:38,500 --> 01:17:41,260
Let me go into VS Code here.
让我进入这里的 VS Code。

1592
01:17:41,260 --> 01:17:44,590
And let me go ahead and create the simplest of files
然后让我继续创建一个最简单的文件

1593
01:17:44,590 --> 01:17:46,670
that just allows me to click on a link.
它只允许我点击一个链接。

1594
01:17:46,670 --> 01:17:49,360
So let me go ahead and copy this to save time,
所以让我继续复制它以节省时间，

1595
01:17:49,360 --> 01:17:51,280
open up VS code's terminal window.
打开 VS Code 的终端窗口。

1596
01:17:51,280 --> 01:17:54,070
Code a file called link.html.
创建一个名为 link.html 的文件。

1597
01:17:54,070 --> 01:17:55,240
I'll close my terminal.
我会关闭我的终端。

1598
01:17:55,240 --> 01:17:56,110
Paste this code.
粘贴这段代码。

1599
01:17:56,110 --> 01:17:57,610
Rename video to link.
将 video 重命名为 link。

1600
01:17:57,610 --> 01:17:59,410
Get rid of the actual video tag.
删除实际的 video 标签。

1601
01:17:59,410 --> 01:18:02,710
And in the body of this page, let's do something simple like invite people
在页面的主体中，让我们做一些简单的事情，比如邀请人们

1602
01:18:02,710 --> 01:18:06,380
to visit, for instance, Harvard.
访问，例如，哈佛大学。

1603
01:18:06,380 --> 01:18:06,880
All right.
好的。

1604
01:18:06,880 --> 01:18:11,800
If I now go to my directory index and reload, we'll now see link.html.
如果我现在转到我的目录索引并重新加载，我们现在将看到 link.html。

1605
01:18:11,800 --> 01:18:15,250
And of course, this doesn't really do anything useful,
当然，这并没有真正发挥任何作用，

1606
01:18:15,250 --> 01:18:17,480
because I literally just used English text.
因为我实际上只是使用了英文文本。

1607
01:18:17,480 --> 01:18:17,980
All right.
好的。

1608
01:18:17,980 --> 01:18:20,147
Well, what if I do what you're in the habit of doing
那么，如果我做你习惯做的事情呢

1609
01:18:20,147 --> 01:18:25,180
on social media and various websites, visit harvard.edu.
在社交媒体和各种网站上，访问 harvard.edu。

1610
01:18:25,180 --> 01:18:27,580
Let me go back to the web page, reload.
让我回到网页，重新加载。

1611
01:18:27,580 --> 01:18:28,750
The text changes.
文本改变了。

1612
01:18:28,750 --> 01:18:31,180
But it's clearly not automatically linking.
但它显然没有自动链接。

1613
01:18:31,180 --> 01:18:32,830
I still can't click on this.
我仍然无法点击它。

1614
01:18:32,830 --> 01:18:33,340
All right.
好的。

1615
01:18:33,340 --> 01:18:36,670
Well, maybe it needs to be www.harvard.edu.
好吧，也许它需要是 www.harvard.edu。

1616
01:18:36,670 --> 01:18:38,930
Let me go back, reload.
让我回去，重新加载。

1617
01:18:38,930 --> 01:18:39,430
All right.
好的。

1618
01:18:39,430 --> 01:18:40,690
Still not auto linking.
仍然没有自动链接。

1619
01:18:40,690 --> 01:18:41,530
Let me go over here.
让我到这边去。

1620
01:18:41,530 --> 01:18:46,300
And maybe it needs https:// and a slash at the end, like a full URL.
也许它需要 https:// 并在末尾加上一个斜杠，就像一个完整的 URL。

1621
01:18:46,300 --> 01:18:47,980
Let's go over here, reload.
让我们到这边去，重新加载。

1622
01:18:47,980 --> 01:18:49,720
And it's still not working.
它仍然没有工作。

1623
01:18:49,720 --> 01:18:52,600
I can highlight and copy it, but that's not very user friendly.
我可以选中并复制它，但这并不太人性化。

1624
01:18:52,600 --> 01:18:53,680
So what's going on?
所以发生了什么事呢？

1625
01:18:53,680 --> 01:18:57,490
Well, all of today's social media sites, when you copy paste a URL,
嗯，今天所有的社交媒体网站，当您复制粘贴 URL 时，

1626
01:18:57,490 --> 01:19:00,640
someone at the server side wrote code, be it
服务器端的人员会编写代码，无论它

1627
01:19:00,640 --> 01:19:03,100
in Python or JavaScript or anything else,
是用 Python 还是 JavaScript 或者其他任何语言，

1628
01:19:03,100 --> 01:19:06,580
to automatically notice and detect URLs and then
自动识别和检测 URL，然后

1629
01:19:06,580 --> 01:19:11,330
wrap them with HTML tags that actually hyperlink them.
用 HTML 标签将其包装起来，实际上将它们链接起来。

1630
01:19:11,330 --> 01:19:14,200
So what I actually need to do here is this.
所以，我实际上需要在这里做的是这样。

1631
01:19:14,200 --> 01:19:18,290
I'm going to introduce an anchor tag, a for short.
我将引入一个锚点标签，简称为 a。

1632
01:19:18,290 --> 01:19:21,610
The hyper reference attribute of which is the URL that I want
它的超链接属性是我想要的 URL

1633
01:19:21,610 --> 01:19:25,180
to send the user to, so href for short.
发送给用户的，简称为 href。

1634
01:19:25,180 --> 01:19:26,830
I'm going to close the tag.
我要关闭标签。

1635
01:19:26,830 --> 01:19:29,920
But then, in between the start tag and close tag,
但是，在开始标签和结束标签之间，

1636
01:19:29,920 --> 01:19:33,650
I'm now going to put the text that I want the human to see.
我现在要放上我想让人看到的文本。

1637
01:19:33,650 --> 01:19:35,740
So it's a lot more verbose.
所以它更加冗长。

1638
01:19:35,740 --> 01:19:38,770
But this is what websites like social media sites
但这就是像社交媒体网站这样的网站

1639
01:19:38,770 --> 01:19:42,850
are generating automatically for you when they just detect with a pattern
在它们通过模式检测到您输入的内容确实看起来像 URL 时，自动为您生成的内容。

1640
01:19:42,850 --> 01:19:45,940
that you have typed something that indeed looks like a URL.
您输入的内容确实看起来像 URL。

1641
01:19:45,940 --> 01:19:47,440
Let me go back to VS Code.
让我回到 VS Code。

1642
01:19:47,440 --> 01:19:49,460
Let me go back to this tab here and reload.
让我回到这里的这个选项卡并重新加载。

1643
01:19:49,460 --> 01:19:52,990
And now we actually see a working link.
现在我们实际上看到了一个有效的链接。

1644
01:19:52,990 --> 01:19:54,530
And this is going to be super small.
而且这将非常小。

1645
01:19:54,530 --> 01:19:56,090
You're not going to be able to see this quite well.
您可能无法很好地看到它。

1646
01:19:56,090 --> 01:19:59,140
But if you hover over this link, you'll generally see in most browsers
但如果您将鼠标悬停在这个链接上，您通常会在大多数浏览器中看到

1647
01:19:59,140 --> 01:20:01,630
a little clue at the bottom as to where you're going
在底部有一个小小的提示，告诉你将要前往哪里

1648
01:20:01,630 --> 01:20:03,320
to be directed before you click there.
在您点击它之前。

1649
01:20:03,320 --> 01:20:04,870
This can help if you're a little suspicious
这可以帮助您，如果您有点怀疑

1650
01:20:04,870 --> 01:20:06,610
and might not want to click on the actual link.
可能不想点击实际的链接。

1651
01:20:06,610 --> 01:20:09,152
It's small on my screen, but hopefully more visible on yours.
在我的屏幕上它很小，但希望在您的屏幕上更清晰。

1652
01:20:09,152 --> 01:20:13,070
That's not generally the case on mobile in quite, though, the same way.
不过，在手机上通常情况并非如此，情况不太一样。

1653
01:20:13,070 --> 01:20:16,810
But notice that this very simple primitive of anchor tags like this
但请注意，像这样简单的锚点标签

1654
01:20:16,810 --> 01:20:20,440
can pretty quickly be abused, unfortunately.
不幸的是，很快就会被滥用。

1655
01:20:20,440 --> 01:20:24,340
In fact, let me go ahead here and go back to VS Code.
事实上，让我继续，回到 VS Code。

1656
01:20:24,340 --> 01:20:26,590
And I could do something malicious like this,
我可以做一些像这样的恶意行为，

1657
01:20:26,590 --> 01:20:30,430
like, actually trick someone into applying to Harvard instead of Yale
比如，实际上欺骗某人申请哈佛而不是耶鲁大学

1658
01:20:30,430 --> 01:20:35,180
by just changing the href to not match the text that the human is seeing.
只需更改 href，使其与人看到的文本不匹配即可。

1659
01:20:35,180 --> 01:20:37,300
And if I reload the page here, you'll see
如果我在此处重新加载页面，您将看到

1660
01:20:37,300 --> 01:20:39,070
that it looks like I'm going to Yale.
它看起来像我要去耶鲁大学。

1661
01:20:39,070 --> 01:20:42,190
But notice, super small, bottom left-hand of my screen,
但请注意，我的屏幕左下角非常小，

1662
01:20:42,190 --> 01:20:44,050
it still says the real URL.
它仍然显示真实的 URL。

1663
01:20:44,050 --> 01:20:45,880
But you can get even more malicious.
但你还可以变得更加恶意。

1664
01:20:45,880 --> 01:20:47,020
You can not just say Yale.
你不应该仅仅说耶鲁大学。

1665
01:20:47,020 --> 01:20:50,800
You could literally say https://www.yale.edu/.
你可以直接说 https://www.yale.edu/。

1666
01:20:50,800 --> 01:20:54,460
You can make it look like a real URL, reload it.
你可以让它看起来像一个真实的 URL，然后重新加载它。

1667
01:20:54,460 --> 01:20:57,220
And now it's really quite malicious.
现在它真的非常恶意。

1668
01:20:57,220 --> 01:21:00,940
And this is representative of what you all probably know already as phishing
这代表着你们可能已经知道的钓鱼攻击

1669
01:21:00,940 --> 01:21:05,650
attacks, P-H-I-S-H-I-N-G, whereby you're being socially engineered.
攻击，P-H-I-S-H-I-N-G，它是一种社会工程学攻击。

1670
01:21:05,650 --> 01:21:07,990
People are trying to dupe you into clicking something
人们试图欺骗你点击一些东西

1671
01:21:07,990 --> 01:21:10,720
that leads you to your PayPal account, typically,
它通常会把你带到你的 PayPal 帐户，

1672
01:21:10,720 --> 01:21:12,970
so that you log into some bogus website.
这样你就会登录到一个虚假的网站。

1673
01:21:12,970 --> 01:21:16,150
Now you've given them access to your account and you're out some money.
现在你已经给了他们访问你帐户的权限，你会损失一些钱。

1674
01:21:16,150 --> 01:21:19,090
It's this simple because of, unfortunately,
之所以如此简单，是因为不幸的是，

1675
01:21:19,090 --> 01:21:22,780
these building blocks of HTML.
这些 HTML 的构建块。

1676
01:21:22,780 --> 01:21:23,410
All right.
好的。

1677
01:21:23,410 --> 01:21:29,100
With that said, any questions on this?
话虽如此，对此有什么问题吗？

1678
01:21:29,100 --> 01:21:29,600
No?
没有吗？

1679
01:21:29,600 --> 01:21:30,100
All right.
好的。

1680
01:21:30,100 --> 01:21:34,640
How about just for one final flourish before snacks will be served,
在提供点心之前，我们再做一个最后的润色，怎么样？

1681
01:21:34,640 --> 01:21:39,500
let me propose to introduce some final features herein.
我建议在这里介绍一些最终功能。

1682
01:21:39,500 --> 01:21:42,830
It turns out, and I'll open some of these premade already.
事实证明，我将打开一些已经预先制作好的文件。

1683
01:21:42,830 --> 01:21:48,050
Let me open up VS Code and open up a file called meta0.html.
让我打开 VS Code 并打开一个名为 meta0.html 的文件。

1684
01:21:48,050 --> 01:21:51,410
This has nothing to do with Meta, the social media company.
这与 Meta（社交媒体公司）无关。

1685
01:21:51,410 --> 01:21:55,070
It has to do with metadata, or specifically, meta tag.
它与元数据有关，或者更具体地说，与元标签有关。

1686
01:21:55,070 --> 01:21:58,470
It turns out that in the head of the web pages that we've written thus far,
事实证明，在我们迄今为止编写的网页的头部中，

1687
01:21:58,470 --> 01:21:59,630
we've only had titles.
我们只有标题。

1688
01:21:59,630 --> 01:22:02,120
But it turns out there's actually literally a tag
但事实证明，实际上确实有一个标签

1689
01:22:02,120 --> 01:22:06,110
called meta that has a couple of attributes like name and content.
名为 meta，它具有几个属性，如 name 和 content。

1690
01:22:06,110 --> 01:22:09,530
And this one here, it's a little arcane, but it's very common
而这一个，它有点深奥，但它非常常见

1691
01:22:09,530 --> 01:22:12,500
to copy paste these into the source code for websites
将这些内容复制粘贴到网站的源代码中

1692
01:22:12,500 --> 01:22:15,680
nowadays because essentially, this makes them mobile friendly.
如今，因为本质上，这使它们对移动设备友好。

1693
01:22:15,680 --> 01:22:18,410
Instead of making the font some default small size,
而不是将字体设置为默认的小尺寸，

1694
01:22:18,410 --> 01:22:21,050
it will take into account the width of the phone
它会考虑手机的宽度

1695
01:22:21,050 --> 01:22:24,090
or the tablet and sort of scale the font proportionally.
或平板电脑，并按比例缩放字体。

1696
01:22:24,090 --> 01:22:27,650
So there's some useful accessibility and user friendly tips like this.
因此，这里有一些有用的辅助功能和用户友好提示。

1697
01:22:27,650 --> 01:22:30,970
There's other use cases for meta tags like this.
像这样的元标签还有其他用例。

1698
01:22:30,970 --> 01:22:34,590
Let me open a file called meta1.html that I made in advance.
让我打开一个名为 meta1.html 的文件，我之前已经制作好了。

1699
01:22:34,590 --> 01:22:38,070
Here are three meta tags inside of this file.
在这个文件中，有三个元标签。

1700
01:22:38,070 --> 01:22:42,460
They're using a property attribute with a content attribute as well.
它们也使用 property 属性和 content 属性。

1701
01:22:42,460 --> 01:22:44,220
And this is a little more specific.
这是更具体的例子。

1702
01:22:44,220 --> 01:22:47,160
But nowadays, too, on social media, when you copy and paste
但如今，在社交媒体上，当你复制粘贴

1703
01:22:47,160 --> 01:22:50,400
a URL into a message online and hit Enter,
一个 URL 到在线消息并按下回车键时，

1704
01:22:50,400 --> 01:22:52,638
you very often see a preview of that link.
你会经常看到链接的预览。

1705
01:22:52,638 --> 01:22:54,180
It's sort of automatically generated.
它是自动生成的。

1706
01:22:54,180 --> 01:22:56,880
It makes a nice pretty image and some nice fonts.
它会生成一个漂亮好看的图片和一些漂亮的字体。

1707
01:22:56,880 --> 01:22:58,750
Where does that image come from?
这个图片是从哪里来的？

1708
01:22:58,750 --> 01:23:00,765
Where does that information come from?
信息从哪里来呢？

1709
01:23:00,765 --> 01:23:04,740
From these meta tags, any web page can have meta tags like this
从这些元标签，任何网页都可以有这样的元标签

1710
01:23:04,740 --> 01:23:07,590
so that when this page's URL is copy pasted
所以当这个页面的 URL 被复制粘贴

1711
01:23:07,590 --> 01:23:10,440
into social media sites or others, those sites
到社交媒体网站或其他网站时，这些网站

1712
01:23:10,440 --> 01:23:13,080
know what preview to show to humans.
就知道该向用户显示什么预览。

1713
01:23:13,080 --> 01:23:15,960
It comes literally from the values of these tags.
它实际上来自这些标签的值。

1714
01:23:15,960 --> 01:23:18,690
So for instance, this would create some user friendly preview
例如，这将创建一个用户友好的预览

1715
01:23:18,690 --> 01:23:21,292
that says CS50, Introduction to The Intellectual Enterprises
上面写着 CS50，计算机科学的智力事业导论

1716
01:23:21,292 --> 01:23:23,250
of Computer Science and The Art of Programming.
和编程艺术。

1717
01:23:23,250 --> 01:23:25,710
And in this case, it would show a picture of a cat
在这种情况下，它会显示一张猫的图片

1718
01:23:25,710 --> 01:23:28,230
as the default image for that particular page.
作为该页面的默认图片。

1719
01:23:28,230 --> 01:23:33,330
You have full control as a web developer over those kinds of things.
作为一名网页开发者，你可以完全控制这些东西。

1720
01:23:33,330 --> 01:23:39,810
Lastly, when it comes to features of HTML, let's go ahead and quickly
最后，关于 HTML 的功能，让我们快速

1721
01:23:39,810 --> 01:23:41,580
reimplement Google, if we may.
重新实现 Google，如果可以的话。

1722
01:23:41,580 --> 01:23:47,550
So let me go ahead and create a new file here called search.html.
所以，让我在这里创建一个新的文件，叫做 search.html。

1723
01:23:47,550 --> 01:23:50,050
Let me copy paste some code to save time.
为了节省时间，我复制粘贴了一些代码。

1724
01:23:50,050 --> 01:23:53,580
Let me go ahead and get rid of all of these meta
让我删除所有这些元

1725
01:23:53,580 --> 01:23:55,890
tags to make a different point with this one.
标签，为这个例子说明一个不同的点。

1726
01:23:55,890 --> 01:23:57,390
Let me get rid of that comment.
让我删除那个注释。

1727
01:23:57,390 --> 01:24:01,950
Change this title to be, say, search instead.
把这个标题改成搜索，例如，search。

1728
01:24:01,950 --> 01:24:04,470
And inside of the body here, let's do this.
在 body 中，让我们做这个。

1729
01:24:04,470 --> 01:24:06,480
I'm going to introduce a form tag.
我将引入一个 form 标签。

1730
01:24:06,480 --> 01:24:10,650
And now in the form tag, I'm going to create an input, a text input.
现在在 form 标签中，我将创建一个输入框，一个文本输入框。

1731
01:24:10,650 --> 01:24:15,240
And let's go ahead and let's just say that.
让我们继续并说一下。

1732
01:24:15,240 --> 01:24:18,670
And now I'm going to have a button that has,
现在我将有一个按钮，上面有

1733
01:24:18,670 --> 01:24:25,770
let's say, button, that has a value of search, so super simple and not yet
例如，一个按钮，它的值是搜索，非常简单，还没有

1734
01:24:25,770 --> 01:24:26,280
complete.
完成。

1735
01:24:26,280 --> 01:24:29,220
But let me go to my directory index and back.
但让我回到我的目录索引。

1736
01:24:29,220 --> 01:24:31,260
Let me open up search.html.
让我打开 search.html。

1737
01:24:31,260 --> 01:24:33,420
And I actually have the beginnings of a search
我实际上有了搜索的雏形

1738
01:24:33,420 --> 01:24:35,692
form, an interactive form for the web.
表单，一个网页的交互式表单。

1739
01:24:35,692 --> 01:24:37,650
But it doesn't actually do anything useful yet.
但它还没有真正做任何有用的事情。

1740
01:24:37,650 --> 01:24:38,680
But let me do this.
但让我做这个。

1741
01:24:38,680 --> 01:24:41,040
Let me go to the actual google.com.
让我访问真正的 google.com。

1742
01:24:41,040 --> 01:24:43,748
Let me search for something like cats, C-A-T-S.
让我搜索一些东西，比如猫，C-A-T-S。

1743
01:24:43,748 --> 01:24:46,290
And of course, we're going to see a whole bunch of cats here.
当然，我们将会看到一堆猫。

1744
01:24:46,290 --> 01:24:50,100
And we're going to see that the search box was automatically
我们将会看到，搜索框自动

1745
01:24:50,100 --> 01:24:52,180
populated at the very top of the page.
填充到了页面顶部。

1746
01:24:52,180 --> 01:24:55,020
Now the URL that Google led me to, even though I
现在 Google 带我到的 URL，尽管我

1747
01:24:55,020 --> 01:24:59,062
started at the very simple google.com, is actually pretty long.
从最简单的 google.com 开始，实际上很长。

1748
01:24:59,062 --> 01:25:01,770
And I'm going to frankly just delete anything I don't understand.
坦白地说，我会删除任何我不理解的东西。

1749
01:25:01,770 --> 01:25:05,340
Because I'm going to distill this URL to just this one here.
因为我将把这个 URL 简化为这里这个。

1750
01:25:05,340 --> 01:25:09,150
It turns out that in URLs you can also put user input
事实证明，在 URL 中，你也可以加入用户输入

1751
01:25:09,150 --> 01:25:11,080
in the form of key value pairs.
以键值对的形式。

1752
01:25:11,080 --> 01:25:14,610
So in any URL, you can actually have not only a path
所以，在任何 URL 中，你实际上可以不只拥有路径

1753
01:25:14,610 --> 01:25:18,780
like we saw earlier, you can have a path with a key
就像我们之前看到的那样，你可以拥有一个带键的路径

1754
01:25:18,780 --> 01:25:21,672
and a value prefixed with a single question mark.
和一个带单问号前缀的值。

1755
01:25:21,672 --> 01:25:23,880
And in fact, if you want to have two keys and values,
实际上，如果你想拥有两个键值对，

1756
01:25:23,880 --> 01:25:27,070
you just interpose them with an ampersand instead.
你只需要用一个与号将它们隔开即可。

1757
01:25:27,070 --> 01:25:30,690
So this is to say there is a standard way in HTML
所以，也就是说，在 HTML 中有一种标准的方式

1758
01:25:30,690 --> 01:25:35,065
and really HTTP for sending input from a browser to a server.
以及 HTTP，用于将来自浏览器的输入发送到服务器。

1759
01:25:35,065 --> 01:25:36,690
And it's generally formatted like this.
它的格式通常是这样的。

1760
01:25:36,690 --> 01:25:39,180
What this means is actually this.
这实际上意味着这个。

1761
01:25:39,180 --> 01:25:42,190
Let me zoom out, close that tab, and open a brand new one.
让我缩小，关闭那个标签，然后打开一个全新的标签。

1762
01:25:42,190 --> 01:25:44,760
And let me manually go to-- and I'll zoom
让我手动去-- 我会放大

1763
01:25:44,760 --> 01:25:53,880
in-- https://wwww.google.com/search?q=dogs.
-- https://wwww.google.com/search?q=dogs。

1764
01:25:53,880 --> 01:25:56,940
Now it has to be q, because that's what Larry and Sergey of Google fame
它必须是 q，因为那是 Google 创始人 Larry 和 Sergey

1765
01:25:56,940 --> 01:25:59,940
decided two decades ago when they made Google itself.
二十年前在创建 Google 时决定的。

1766
01:25:59,940 --> 01:26:01,140
Q stands for query.
Q 代表查询。

1767
01:26:01,140 --> 01:26:03,460
But they could have called that key anything they want.
但他们本可以给那个键取任何他们想要的名字。

1768
01:26:03,460 --> 01:26:05,520
I'm going to hit Enter after zooming out.
我会缩小后按下回车键。

1769
01:26:05,520 --> 01:26:08,850
And what you'll see is that I don't need google.com to search for me.
你会看到，我不需要 google.com 来帮我搜索。

1770
01:26:08,850 --> 01:26:13,735
I can literally go to a URL of all of the dog search results manually.
我可以直接手动访问包含所有狗狗搜索结果的 URL。

1771
01:26:13,735 --> 01:26:15,360
Now no one's normally going to do that.
通常没有人会这样做。

1772
01:26:15,360 --> 01:26:16,200
That makes no sense.
那毫无意义。

1773
01:26:16,200 --> 01:26:20,100
But it does suggest how simple the mechanics of the web are.
但这的确表明了网页机制的简单性。

1774
01:26:20,100 --> 01:26:23,850
If you want to pass input to a server, you suffix the URL
如果你想向服务器传递输入，你需要在 URL 后面加上

1775
01:26:23,850 --> 01:26:26,370
with a question mark, key equals value.
问号，键等于值。

1776
01:26:26,370 --> 01:26:30,480
Key equals value may be separated you buy these ampersands, as I proposed.
键等于值可以通过与号隔开，正如我提出的那样。

1777
01:26:30,480 --> 01:26:31,870
So what does this mean?
所以，这意味着什么？

1778
01:26:31,870 --> 01:26:34,890
Well, Google really did the hard part, the back end, the database.
好吧，Google 做了最难的部分，后端，数据库。

1779
01:26:34,890 --> 01:26:37,590
They crawled the internet and found all of these cats and dogs.
他们爬取了互联网，找到了所有这些猫和狗。

1780
01:26:37,590 --> 01:26:39,810
But I can make the front end, that is the user
但我可以制作前端，也就是用户

1781
01:26:39,810 --> 01:26:41,640
interface that still works for it.
接口，它仍然可以使用。

1782
01:26:41,640 --> 01:26:42,930
And I'm going to do this.
我会这样做。

1783
01:26:42,930 --> 01:26:45,600
I'm going to add an attribute to my form tag that
我将添加一个属性到我的 form 标签，它

1784
01:26:45,600 --> 01:26:55,140
specifies an action attribute of https://www.google.com/search.
指定了 action 属性为 https://www.google.com/search。

1785
01:26:55,140 --> 01:26:58,140
And I'm going to specify that the method I want the browser to use
我将指定我想让浏览器使用的 method 为

1786
01:26:58,140 --> 01:26:59,010
is indeed get.
get。

1787
01:26:59,010 --> 01:27:00,120
This is inconsistent.
这与之前不一致。

1788
01:27:00,120 --> 01:27:02,730
I capitalized it as all caps before.
之前我把它写成了大写。

1789
01:27:02,730 --> 01:27:04,793
In HTML, you actually do it as lowercase.
在 HTML 中，你实际上应该写成小写。

1790
01:27:04,793 --> 01:27:06,960
But that's also the default. So strictly speaking, I
但这也是默认值。严格来说，我

1791
01:27:06,960 --> 01:27:08,380
don't even need to specify that.
甚至不需要指定它。

1792
01:27:08,380 --> 01:27:10,440
But I will, just to be pedantic.
但我还是会指定，只是为了严谨。

1793
01:27:10,440 --> 01:27:13,260
Inside of my input, my text box, which used
在我的输入框中，我的文本框，之前

1794
01:27:13,260 --> 01:27:15,700
to look like this, just a big white rectangle,
看起来像这样，只是一个大的白色矩形，

1795
01:27:15,700 --> 01:27:18,330
I'm going to actually give it a name of q, because I
我将给它一个名为 q 的名称，因为我

1796
01:27:18,330 --> 01:27:20,310
know that's what Google servers expect.
知道这是 Google 服务器所期望的。

1797
01:27:20,310 --> 01:27:24,900
And I'm also going to specify--
我还要指定——

1798
01:27:24,900 --> 01:27:26,100
eh, just that for now.
嗯，就现在这样。

1799
01:27:26,100 --> 01:27:28,130
Let me go back now and reload.
我现在回去重新加载。

1800
01:27:28,130 --> 01:27:30,200
And it's going to still look very simple.
它看起来仍然非常简单。

1801
01:27:30,200 --> 01:27:31,100
But notice this.
但是请注意。

1802
01:27:31,100 --> 01:27:35,390
If I type in cats and click Search, in just a moment,
如果我在里面输入 "cats" 然后点击 "搜索"，马上就会...

1803
01:27:35,390 --> 01:27:39,380
I'm going to be whisked away from my own Codespaces URL ending
我会从我自己的 Codespaces URL 结尾，

1804
01:27:39,380 --> 01:27:45,980
in search.html to, after zooming out and clicking Search, the actual google.com.
在搜索.html 中，缩小并点击搜索后，转向真正的 google.com。

1805
01:27:45,980 --> 01:27:50,060
Which prepopulates the URL with q equals cats up top,
它会预先填充 URL，q 等于 "cats" 放在最上面，

1806
01:27:50,060 --> 01:27:52,950
prepopulates this text box with the user's input,
预先填充这个文本框，内容是用户的输入，

1807
01:27:52,950 --> 01:27:57,080
which is to say, like, the front end of google.com is trivial,
也就是说，像 google.com 的前端非常简单，

1808
01:27:57,080 --> 01:27:58,730
as is most every website.
大多数网站都是如此。

1809
01:27:58,730 --> 01:28:03,477
It's as simple as these key value pairs and things like web forms like that.
它就像这些键值对，以及像这样的网页表单一样简单。

1810
01:28:03,477 --> 01:28:05,060
Now I can make this a little prettier.
现在我可以把它弄得漂亮一些。

1811
01:28:05,060 --> 01:28:08,630
And just so you've seen it, if I specified that the type of this input
为了让你看到，如果我指定这个输入的类型

1812
01:28:08,630 --> 01:28:11,720
isn't text, which is the default, but is search,
不是默认的文本，而是搜索，

1813
01:28:11,720 --> 01:28:13,140
I actually get some nice features.
我实际上会得到一些不错的功能。

1814
01:28:13,140 --> 01:28:14,390
Let me reload this now.
我现在重新加载它。

1815
01:28:14,390 --> 01:28:17,360
And if I start typing in, like, dogs, now I get this little x
如果我开始输入，比如 "dogs"，现在我会得到这个小 x

1816
01:28:17,360 --> 01:28:18,570
to click, which clears it.
来点击，它会清除它。

1817
01:28:18,570 --> 01:28:19,862
So a lot of websites have that.
所以很多网站都有这个。

1818
01:28:19,862 --> 01:28:21,170
It's a little bit of a nicety.
这算是有点小贴心。

1819
01:28:21,170 --> 01:28:23,393
If you don't know what you want the user to type in,
如果你不知道你想让用户输入什么，

1820
01:28:23,393 --> 01:28:25,310
you can actually be kind of explicit for them.
你可以为他们明确地说明。

1821
01:28:25,310 --> 01:28:29,573
And you can add a placeholder attribute that says query or keywords
你可以添加一个占位符属性，上面写着 "查询" 或 "关键词"

1822
01:28:29,573 --> 01:28:30,990
or whatever you want to show them.
或者你想让他们看到什么就写什么。

1823
01:28:30,990 --> 01:28:33,420
If I go back to the browser and reload, you'll
如果我回到浏览器并重新加载，你就会

1824
01:28:33,420 --> 01:28:36,270
see a grayed out text that's not actually there.
看到一个灰色的文本，但实际上并不存在。

1825
01:28:36,270 --> 01:28:38,710
It goes away if I type in bird, for instance.
例如，如果我输入 "bird"，它就会消失。

1826
01:28:38,710 --> 01:28:41,610
But it's explanatory, placeholder text for the user.
但这对用户来说是解释性的占位符文本。

1827
01:28:41,610 --> 01:28:45,330
You'll notice that it wants to autocomplete cats or bird or dog
你会注意到，它想要自动补全 "cats" 或 "bird" 或 "dog"

1828
01:28:45,330 --> 01:28:46,770
or anything I've typed before.
或者我之前输入的任何东西。

1829
01:28:46,770 --> 01:28:48,030
You can disable that.
你可以禁用它。

1830
01:28:48,030 --> 01:28:51,930
There is an attribute called autocomplete
有一个叫做 "autocomplete" 的属性

1831
01:28:51,930 --> 01:28:55,830
whose value can be either on, which is default, or off, which
它的值可以是 "on"，这是默认值，也可以是 "off"，

1832
01:28:55,830 --> 01:28:57,510
can be explicitly specified.
可以明确地指定。

1833
01:28:57,510 --> 01:28:58,770
And notice this, too.
还有要注意的。

1834
01:28:58,770 --> 01:29:03,030
When I reload the page, it's actually annoying in terms of user experience.
当我重新加载页面时，从用户体验的角度来说，这实际上很烦人。

1835
01:29:03,030 --> 01:29:05,610
Before I can search for anything, I have to move my cursor,
在我搜索任何东西之前，我必须移动鼠标，

1836
01:29:05,610 --> 01:29:06,990
I have to click in the text box.
我必须点击文本框。

1837
01:29:06,990 --> 01:29:08,850
And now it has focus, so to speak.
现在它获得了焦点，可以这么说。

1838
01:29:08,850 --> 01:29:11,160
It gets highlighted in some color, usually blue.
它会用某种颜色高亮显示，通常是蓝色。

1839
01:29:11,160 --> 01:29:12,570
That's not the best website.
这不是最好的网站。

1840
01:29:12,570 --> 01:29:15,750
Why are you making the users pick up their mouse or their trackpad just
为什么要让用户拿起他们的鼠标或触控板来

1841
01:29:15,750 --> 01:29:18,270
to click on the only thing they're going to do anyway?
点击他们本来就一定会做的事情？

1842
01:29:18,270 --> 01:29:20,670
So there's another attribute that's handy,
所以还有一个属性很方便，

1843
01:29:20,670 --> 01:29:24,795
Auto Focus, which will just move the cursor there for the user.
自动聚焦，它会直接将光标移动到那里，方便用户。

1844
01:29:24,795 --> 01:29:27,420
So this is to say, even though a lot of websites don't do this,
也就是说，尽管很多网站都没有这样做，

1845
01:29:27,420 --> 01:29:30,300
there's a lot of functionality that you can enable by just
但你只需了解这门语言，就能启用很多功能。

1846
01:29:30,300 --> 01:29:32,700
knowing the language all the more.
了解得更多。

1847
01:29:32,700 --> 01:29:36,120
So with that, we now have a pretty useful feature.
有了它，我们现在拥有了一个非常有用的功能。

1848
01:29:36,120 --> 01:29:38,550
In fact, heck, I can say this is Google Search,
实际上，我可以说这就是谷歌搜索，

1849
01:29:38,550 --> 01:29:41,230
change the value of that button, reload.
更改那个按钮的值，然后重新加载。

1850
01:29:41,230 --> 01:29:45,570
And now I'll go ahead and type in birds, Enter, and voila.
现在我会继续输入 "birds"，然后回车，然后瞧。

1851
01:29:45,570 --> 01:29:49,450
Now we have a whole bunch of birds as well.
现在我们也有一大堆鸟了。

1852
01:29:49,450 --> 01:29:50,852
So that's a lot.
所以很多。

1853
01:29:50,852 --> 01:29:52,560
I think it's definitely time for a snack.
我想是时候吃点零食了。

1854
01:29:52,560 --> 01:29:53,890
So let's take a 10-minute break for a snack.
所以让我们休息 10 分钟吃点零食。

1855
01:29:53,890 --> 01:29:56,730
And when we come back, we'll make all of this look prettier.
我们回来后，会让这一切看起来更漂亮。

1856
01:29:56,730 --> 01:29:57,810
All right.
好的。

1857
01:29:57,810 --> 01:29:59,220
So we are back.
所以我们回来了。

1858
01:29:59,220 --> 01:30:02,520
And it was brought to my attention during break
在休息的时候，有人提醒我，

1859
01:30:02,520 --> 01:30:05,730
that we were pretty darn close to clearing one of these rows.
我们离清空这些行中的一个已经非常接近了。

1860
01:30:05,730 --> 01:30:09,120
And I will concede that your classmates, Darwin and Jude,
我承认，你的同学达尔文和朱德，

1861
01:30:09,120 --> 01:30:12,450
socially engineered me into saying one of the remaining squares
用社会工程学技巧让我说出剩下方格中他们需要的那一个。

1862
01:30:12,450 --> 01:30:13,270
that they needed.
他们需要的那个。

1863
01:30:13,270 --> 01:30:17,100
And so I'm sad to say that bingo was declared during break, which Carter
所以我很遗憾地说，在休息的时候，宾果游戏被宣布成功，卡特已经确认了，因为我被骗着对一个简短的问题做出了长篇大论。

1864
01:30:17,100 --> 01:30:19,530
has already confirmed, because I was tricked into giving
因为我被骗着对一个简短的问题做出了长篇大论。

1865
01:30:19,530 --> 01:30:21,840
a long answer to a short question.
对一个简短的问题做出了长篇大论。

1866
01:30:21,840 --> 01:30:24,030
So congratulations to those two.
所以祝贺这两位。

1867
01:30:24,030 --> 01:30:29,430
I do dare say, too, that whole bit with safetyschool.org probably
我还要说，safetyschool.org 的那件事可能

1868
01:30:29,430 --> 01:30:30,990
isn't going over well in New Haven.
在新港并没有得到很好的反响。

1869
01:30:30,990 --> 01:30:33,210
So I'm pretty sure we can check off this box here.
所以我相当确定我们可以在这里打勾了。

1870
01:30:33,210 --> 01:30:37,550
However, as promised, in fairness, since we love them both equally,
但是，正如承诺，为了公平起见，因为我们同样爱他们俩，

1871
01:30:37,550 --> 01:30:42,120
I thought it only fair to resume now with a look at perhaps one of the best
我认为，现在继续看一看，也许是最好的

1872
01:30:42,120 --> 01:30:44,940
Harvard-Yale pranks that was actually on us,
哈佛-耶鲁恶作剧，实际上是我们被捉弄了，

1873
01:30:44,940 --> 01:30:50,880
with this 2.5-minute glimpse at how our classmates at Yale pranked Harvard some
通过这段 2 分 30 秒的视频，我们可以看到耶鲁的同学们是如何捉弄哈佛的。

1874
01:30:50,880 --> 01:30:51,390
years back.
几年前。

1875
01:30:51,390 --> 01:30:53,580
If we could dim the lights now for this.
如果现在可以调暗灯光。

1876
01:30:53,580 --> 01:30:54,570
[VIDEO PLAYBACK]
[视频播放]

1877
01:30:54,570 --> 01:30:57,540
[MUSIC PLAYING]
[音乐播放]

1878
01:31:16,845 --> 01:31:17,835
[CHEERING]
[欢呼声]

1879
01:31:17,835 --> 01:31:21,300
[BAND MUSIC PLAYING]
[乐队音乐播放]

1880
01:31:23,975 --> 01:31:26,100
- All the way at the top and then you pass it down.
- 一直传到最上面，然后传下去。

1881
01:31:26,100 --> 01:31:26,642
[CROWD NOISE]
[人群噪音]

1882
01:31:26,642 --> 01:31:29,230
- [INAUDIBLE] this for you, Yale.
- [听不清] 献给你们，耶鲁。

1883
01:31:29,230 --> 01:31:30,430
We love you, Yale.
我们爱你，耶鲁。

1884
01:31:30,430 --> 01:31:32,790
- We're here to cheer for Harvard.
- 我们来为哈佛加油。

1885
01:31:32,790 --> 01:31:33,478
- Yeah!
- 耶！

1886
01:31:33,478 --> 01:31:34,374
Go Harvard!
哈佛加油！

1887
01:31:34,374 --> 01:31:36,170
- Go Harvard!
- 哈佛加油！

1888
01:31:36,170 --> 01:31:37,790
- [INAUDIBLE] one and pass it down?
- [听不清] 传一个，传下去？

1889
01:31:37,790 --> 01:31:40,250
- Pass them down.
- 传下去。

1890
01:31:40,250 --> 01:31:41,834
- Great.
- 太棒了。

1891
01:31:41,834 --> 01:31:44,030
- It says go Harvard.
- 上面写着 "哈佛加油"。

1892
01:31:44,030 --> 01:31:45,650
- We're nice.
- 我们很好。

1893
01:31:45,650 --> 01:31:47,092
- You see that [BLEEP]?
- 你看到那个 [哔] 了吗？

1894
01:31:47,092 --> 01:31:48,054
- Look at them.
- 看看他们。

1895
01:31:48,054 --> 01:31:49,020
They have the paper!
他们有纸！

1896
01:31:49,020 --> 01:31:51,688
- It's going to happen.
- 要开始了。

1897
01:31:51,688 --> 01:31:54,320
- It's actually gonna happen!
- 这真的要发生了！

1898
01:31:54,320 --> 01:31:55,670
- I can't [BLEEP] believe this!
- 我简直不敢相信！

1899
01:31:55,670 --> 01:31:57,770
- What do you think of Yale?
- 你觉得耶鲁怎么样？

1900
01:31:57,770 --> 01:31:58,910
- They don't think good.
- 他们不太会思考。

1901
01:31:58,910 --> 01:31:59,426
[LAUGHTER]
[笑声]

1902
01:31:59,426 --> 01:32:00,593
- It may be a complete mess.
- 这可能是一团糟。

1903
01:32:00,593 --> 01:32:02,540
I don't know.
- 我不知道。

1904
01:32:02,540 --> 01:32:03,790
- Dude, does everyone have it?
- 老兄，大家都有吗？

1905
01:32:03,790 --> 01:32:05,080
Does everyone have their stuff?
- 大家都有他们的东西了吗？

1906
01:32:05,080 --> 01:32:06,320
Does everyone have their stuff?
- 大家都有他们的东西了吗？

1907
01:32:06,320 --> 01:32:09,320
- The probability that it's going to be legible it's very small, though.
- 不过，它能被辨认出来的概率非常小。

1908
01:32:09,320 --> 01:32:10,278
- I agree.
- 我同意。

1909
01:32:10,278 --> 01:32:11,236
- It's too complicated.
- 太复杂了。

1910
01:32:11,236 --> 01:32:12,190
- [INAUDIBLE].
- [听不清]

1911
01:32:12,190 --> 01:32:12,760
- I know.
- 我知道。

1912
01:32:12,760 --> 01:32:14,280
But it's too complicated.
- 但它太复杂了。

1913
01:32:14,280 --> 01:32:16,307
- What houses are you guys in?
- 你们住哪个宿舍？

1914
01:32:16,307 --> 01:32:16,890
- [INAUDIBLE].
- [听不清]

1915
01:32:16,890 --> 01:32:17,790
- That's not a real house.
- 那不是真宿舍。

1916
01:32:17,790 --> 01:32:18,990
- How many extra are there?
- 有多少个额外的？

1917
01:32:18,990 --> 01:32:19,350
- Ho-fo.
- Ho-fo。

1918
01:32:19,350 --> 01:32:19,850
- Yeah.
- 是的。

1919
01:32:22,603 --> 01:32:24,270
- You guys aren't from Harvard, are you?
- 你们不是哈佛的吧？

1920
01:32:24,270 --> 01:32:26,010
- Fo-ho.
- Fo-ho。

1921
01:32:26,010 --> 01:32:26,850
- Pforzheimer.
- Pforzheimer。

1922
01:32:26,850 --> 01:32:28,000
- Yeah, but you said ho-fi.
- 是的，但你说的是ho-fi。

1923
01:32:28,000 --> 01:32:28,830
- Just make sure everyone has it.
- 确保每个人都有。

1924
01:32:28,830 --> 01:32:30,020
- Well, she's probably drunk.
- 她可能喝醉了。

1925
01:32:30,020 --> 01:32:31,185
- It looks like they're still passing.
- 看起来他们还在发牌。

1926
01:32:31,185 --> 01:32:32,734
Are all the cards distributed?
- 牌都发完了吗？

1927
01:32:32,734 --> 01:32:34,090
- [INAUDIBLE].
- [听不清]

1928
01:32:34,090 --> 01:32:34,590
- All right.
- 好吧。

1929
01:32:34,590 --> 01:32:35,589
Let's do it now.
- 现在就开始吧。

1930
01:32:35,589 --> 01:32:38,523
[CHEERING]
[欢呼声]

1931
01:32:47,325 --> 01:32:48,792
- Hold up your signs!
- 举起你们的牌子！

1932
01:32:48,792 --> 01:32:50,740
- [BLEEP].
- [消音]

1933
01:32:50,740 --> 01:32:51,240
[CHANTING]
[喊叫声]

1934
01:32:51,240 --> 01:32:52,320
- You suck.
- 你烂透了。

1935
01:32:52,320 --> 01:32:53,400
You suck.
- 你烂透了。

1936
01:32:53,400 --> 01:32:54,360
You suck.
- 你烂透了。

1937
01:32:54,360 --> 01:32:55,290
You suck.
- 你烂透了。

1938
01:32:55,290 --> 01:32:56,220
You suck.
- 你烂透了。

1939
01:32:56,220 --> 01:32:57,030
You [BLEEP].
- 你 [消音]

1940
01:32:57,030 --> 01:32:58,172
- Did it.
- 做到了。

1941
01:32:58,172 --> 01:32:58,672
- [BLEEP].
- [消音]

1942
01:32:58,672 --> 01:32:59,780
- You suck.
- 你烂透了。

1943
01:32:59,780 --> 01:33:00,680
You suck.
- 你烂透了。

1944
01:33:00,680 --> 01:33:01,490
You suck.
- 你烂透了。

1945
01:33:01,490 --> 01:33:02,240
You suck.
- 你烂透了。

1946
01:33:02,240 --> 01:33:02,870
You suck.
- 你烂透了。

1947
01:33:02,870 --> 01:33:05,290
You suck.
- 你烂透了。

1948
01:33:05,290 --> 01:33:07,550
- What do you think of Yale, sir?
- 先生，您觉得耶鲁怎么样？

1949
01:33:07,550 --> 01:33:08,930
- [INAUDIBLE].
- [听不清]

1950
01:33:08,930 --> 01:33:09,880
- One more time!
- 再来一次！

1951
01:33:09,880 --> 01:33:10,510
One more time!
- 再来一次！

1952
01:33:17,880 --> 01:33:20,628
- Oh, and there it goes again!
- 哦，又来了！

1953
01:33:20,628 --> 01:33:21,128
[CHANTING]
[喊叫声]

1954
01:33:21,128 --> 01:33:22,559
- Harvard sucks!
- 哈佛烂透了！

1955
01:33:22,559 --> 01:33:23,990
Harvard sucks!
- 哈佛烂透了！

1956
01:33:23,990 --> 01:33:25,421
Harvard sucks!
- 哈佛烂透了！

1957
01:33:25,421 --> 01:33:27,329
Harvard sucks!
- 哈佛烂透了！

1958
01:33:27,329 --> 01:33:28,760
Harvard sucks!
- 哈佛烂透了！

1959
01:33:28,760 --> 01:33:30,210
Harvard sucks!
- 哈佛烂透了！

1960
01:33:30,210 --> 01:33:30,815
Harvard sucks!
- 哈佛烂透了！

1961
01:33:30,815 --> 01:33:32,037
Harvard sucks!
- 哈佛烂透了！

1962
01:33:32,037 --> 01:33:33,498
Harvard sucks!
- 哈佛烂透了！

1963
01:33:33,498 --> 01:33:34,472
Harvard sucks!
- 哈佛烂透了！

1964
01:33:34,472 --> 01:33:35,837
Harvard sucks!
- 哈佛烂透了！

1965
01:33:35,837 --> 01:33:36,420
Harvard sucks!
- 哈佛烂透了！

1966
01:33:36,420 --> 01:33:37,037
[END PLAYBACK]
[结束播放]

1967
01:33:37,037 --> 01:33:38,840
DAVID MALAN: So fair is fair there.
DAVID MALAN:  所以那里公平就公平。

1968
01:33:38,840 --> 01:33:41,740
So now back to some HTML.
所以现在回到一些 HTML。

1969
01:33:41,740 --> 01:33:44,770
And we will transition momentarily then to this other language, CSS,
然后我们会过渡到另一种语言，CSS，

1970
01:33:44,770 --> 01:33:47,110
by which we can style things all the more.
通过这种语言，我们可以更加灵活地设置样式。

1971
01:33:47,110 --> 01:33:51,050
So there's this feature in HTML that's actually present in Python,
所以 HTML 中有一个特性，实际上也存在于 Python 中，

1972
01:33:51,050 --> 01:33:53,800
even though we didn't use it yet, and that's present in JavaScript
虽然我们还没有使用它，但它也存在于 JavaScript 中

1973
01:33:53,800 --> 01:33:57,410
and, really, most modern languages known as regular expressions.
以及，实际上，大多数现代语言都称为正则表达式。

1974
01:33:57,410 --> 01:33:59,710
Which is otherwise known as regexes, which
也称为正则表达式，它

1975
01:33:59,710 --> 01:34:04,660
is a way of using patterns to validate input
是一种使用模式来验证输入的方法

1976
01:34:04,660 --> 01:34:06,970
or to extract information from strings.
或者从字符串中提取信息。

1977
01:34:06,970 --> 01:34:08,200
And so by that I mean this.
我的意思是这个。

1978
01:34:08,200 --> 01:34:10,640
Let me go over to VS Code here.
让我看看 VS Code。

1979
01:34:10,640 --> 01:34:14,380
Let me go ahead and create a new file called register.html.
让我创建一个名为 register.html 的新文件。

1980
01:34:14,380 --> 01:34:17,890
I'm going to copy paste some code from earlier, just to save some keystrokes.
为了节省一些按键，我会复制粘贴之前的一些代码。

1981
01:34:17,890 --> 01:34:21,220
And in here, I'm going to go ahead and change my title to register.
在这里，我会将我的标题改为 register。

1982
01:34:21,220 --> 01:34:24,610
And in my code, I'm going to go ahead and create a very simple form
在代码中，我将创建一个非常简单的表单

1983
01:34:24,610 --> 01:34:26,980
representative of a registration form now.
来代表一个注册表单。

1984
01:34:26,980 --> 01:34:30,525
So in this body, I'm going to do a form tag.
所以在这个 body 中，我会使用一个 form 标签。

1985
01:34:30,525 --> 01:34:33,650
I'm not going to bother sending it to Google or to any server in particular
我不会费心把它发送到谷歌或任何特定的服务器

1986
01:34:33,650 --> 01:34:34,160
here.
这里。

1987
01:34:34,160 --> 01:34:38,480
I'm going to give it an input tag with autocomplete equals off, as before.
我会给它一个 input 标签，autocomplete 属性设置为 off，就像之前一样。

1988
01:34:38,480 --> 01:34:40,610
I'm going to have auto focus on as before.
我会像之前一样设置 autofocus 为 on。

1989
01:34:40,610 --> 01:34:44,957
I'm going to give this form field the name of email this time instead of q.
这次我会给这个表单域命名为 email，而不是 q。

1990
01:34:44,957 --> 01:34:46,790
I'm going to give it a placeholder of quote,
我会给它一个占位符，用引号括起来，

1991
01:34:46,790 --> 01:34:50,480
unquote "email," just so that the user knows what they're supposed to type.
“email”，这样用户就知道应该输入什么。

1992
01:34:50,480 --> 01:34:57,020
And it turns out that browsers have not only type text or search, but also
而且事实证明，浏览器不仅有 type text 或 search，还有

1993
01:34:57,020 --> 01:35:00,230
type email, whereby you can rely on the browser to ensure that the human has
type email，你可以依赖浏览器来确保用户输入的是

1994
01:35:00,230 --> 01:35:02,070
actually typed in an email address.
一个真正的电子邮件地址。

1995
01:35:02,070 --> 01:35:03,440
Now I'm going to go ahead and have a button
现在我将添加一个按钮

1996
01:35:03,440 --> 01:35:05,090
that this time will be called Register.
这次它将被命名为 Register。

1997
01:35:05,090 --> 01:35:09,140
And now let's go over to my other tab, reload my directory index.
现在让我们切换到另一个选项卡，重新加载我的目录索引。

1998
01:35:09,140 --> 01:35:10,790
There's register.html.
这里有 register.html。

1999
01:35:10,790 --> 01:35:13,490
And we'll see a relatively simple form field now.
现在，我们将看到一个相对简单的表单字段。

2000
01:35:13,490 --> 01:35:16,110
But it's prompting me to register with some email address.
但它提示我用一些电子邮件地址注册。

2001
01:35:16,110 --> 01:35:19,730
If I go ahead and sort of type in just my name and try Register,
如果我继续输入我的名字并尝试注册，

2002
01:35:19,730 --> 01:35:22,880
you'll notice that the browser sort of yells at me with the built-in error
你会注意到浏览器用内置错误信息对我大喊大叫。

2003
01:35:22,880 --> 01:35:25,970
message saying, oh, please include an at in the email address.
信息说，哦，请在电子邮件地址中包含一个@符号。

2004
01:35:25,970 --> 01:35:29,930
And it's pretty good in that if I do mail an at, but nothing more,
而且它很棒，因为如果我输入一个@符号，但没有其他内容，

2005
01:35:29,930 --> 01:35:33,380
which is also not valid, and try to register, it's telling me still
这也是无效的，我尝试注册，它仍然告诉我

2006
01:35:33,380 --> 01:35:34,400
that it's incomplete.
它是不完整的。

2007
01:35:34,400 --> 01:35:39,590
So built into browsers is some defense against incorrect user input
因此，浏览器内置了一些防御机制，来抵御用户输入错误。

2008
01:35:39,590 --> 01:35:40,640
in this way.
就这样。

2009
01:35:40,640 --> 01:35:44,240
If I finally do type in malan@harvard.edu and click Register,
如果我最终输入 malan@harvard.edu 并点击注册，

2010
01:35:44,240 --> 01:35:47,630
then the form would be submitted successfully to the server.
那么表单将成功提交到服务器。

2011
01:35:47,630 --> 01:35:52,280
If, though, I want to tolerate only .edu addresses because I'm making
但是，如果我只想容忍 .edu 地址，因为我正在制作

2012
01:35:52,280 --> 01:35:55,340
an education-themed website for students in the US,
一个面向美国学生的教育主题网站，

2013
01:35:55,340 --> 01:35:59,210
I can actually add another attribute here, which is actually quite useful,
我实际上可以在这里添加另一个属性，它实际上非常有用，

2014
01:35:59,210 --> 01:35:59,750
too.
也是。

2015
01:35:59,750 --> 01:36:01,940
I can add a pattern attribute.
我可以添加一个 pattern 属性。

2016
01:36:01,940 --> 01:36:05,270
And inside of its value, I can put one of these things called
在它的值里面，我可以放一个叫做

2017
01:36:05,270 --> 01:36:07,190
a regular expression, or a regex.
正则表达式或正则表达式的东西。

2018
01:36:07,190 --> 01:36:09,890
That is an actual pattern that the browser
这实际上是一个模式，浏览器

2019
01:36:09,890 --> 01:36:13,310
should match the user's input against and make sure it indeed matches.
应该与用户的输入进行匹配，并确保它确实匹配。

2020
01:36:13,310 --> 01:36:15,320
And this is going to look a little cryptic.
这看起来有点神秘。

2021
01:36:15,320 --> 01:36:17,150
But I'm going to go ahead and do this.
但我还是会这样做。

2022
01:36:17,150 --> 01:36:22,850
.+@.+ backslash dot edu.
.+@.+ 反斜杠点 edu。

2023
01:36:22,850 --> 01:36:24,210
Now this looks a little weird.
现在这看起来有点奇怪。

2024
01:36:24,210 --> 01:36:26,960
But it turns out I'm using certain building blocks that we'll just
但事实证明，我正在使用一些构建块，我们只是

2025
01:36:26,960 --> 01:36:28,280
scratch the surface of today.
今天触及表面。

2026
01:36:28,280 --> 01:36:32,510
But it's an incredibly useful and powerful feature in programming
但它在编程语言中是一个非常有用和强大的功能，

2027
01:36:32,510 --> 01:36:33,680
languages more generally.
更一般地说。

2028
01:36:33,680 --> 01:36:35,862
Because in the world of regular expressions,
因为在正则表达式的世界里，

2029
01:36:35,862 --> 01:36:37,820
there are certain patterns that mean something.
有一些模式是有意义的。

2030
01:36:37,820 --> 01:36:40,160
And here's a really good URL of some documentation
这里有一个关于文档的很好的 URL

2031
01:36:40,160 --> 01:36:43,250
they're for in the world of the web and JavaScript, specifically.
它们是关于 Web 和 JavaScript 世界的，特别是。

2032
01:36:43,250 --> 01:36:46,040
And here's kind of a short cheat sheet, some excerpts thereof.
这里有一个简短的速查表，里面有一些摘录。

2033
01:36:46,040 --> 01:36:48,950
It turns out in the world of regular expressions or patterns,
事实证明，在正则表达式或模式的世界里，

2034
01:36:48,950 --> 01:36:52,820
a dot represents any single character except line terminators,
一个点代表除换行符以外的任何单个字符，

2035
01:36:52,820 --> 01:36:54,290
like backslash n.
比如反斜杠 n。

2036
01:36:54,290 --> 01:36:58,850
A star or an asterisk represents 0 or more times.
一个星号或一个星号代表 0 次或更多次。

2037
01:36:58,850 --> 01:37:00,800
A plus means one or more times.
一个加号表示一次或多次。

2038
01:37:00,800 --> 01:37:03,230
A question mark means 0 or one time.
一个问号表示 0 次或 1 次。

2039
01:37:03,230 --> 01:37:07,970
A number inside of curly braces means n times, or n occurrences.
花括号中的数字表示 n 次或 n 次出现。

2040
01:37:07,970 --> 01:37:11,150
And then two numbers in curly braces, n comma n,
然后是花括号中的两个数字，n 逗号 n，

2041
01:37:11,150 --> 01:37:15,590
means at least n times, but at most, m times or occurrences.
表示至少 n 次，但最多 m 次或出现次数。

2042
01:37:15,590 --> 01:37:17,330
And then there's a few other, actually.
实际上还有几个其他的。

2043
01:37:17,330 --> 01:37:18,420
So what does that mean?
那是什么意思？

2044
01:37:18,420 --> 01:37:21,530
Well, let me go over to VS Code again.
好吧，让我再回到 VS Code。

2045
01:37:21,530 --> 01:37:24,110
And let me zoom in on the pattern I used.
让我放大我使用的模式。

2046
01:37:24,110 --> 01:37:28,370
And it would seem that, in this case, a dot represents any character.
看起来，在这种情况下，一个点代表任何字符。

2047
01:37:28,370 --> 01:37:29,810
Plus means one or more.
加号表示一个或多个。

2048
01:37:29,810 --> 01:37:34,160
So one or more characters to the left of an sign, then literally the at sign.
因此，@符号左边的一个或多个字符，然后是@符号本身。

2049
01:37:34,160 --> 01:37:38,360
Then another dot plus means one or more characters to the right of the at sign.
然后另一个点加号表示@符号右边的一个或多个字符。

2050
01:37:38,360 --> 01:37:42,050
But the whole thing has to end in .edu.
但整个字符串必须以 .edu 结尾。

2051
01:37:42,050 --> 01:37:45,830
But there's this additional backslash before the last dot.
但最后一个点前面有一个额外的反斜杠。

2052
01:37:45,830 --> 01:37:48,500
And why might that be, intuitively?
直觉上，为什么可能是这样呢？

2053
01:37:48,500 --> 01:37:49,820
Even though I've not said?
即使我没有说过？

2054
01:37:49,820 --> 01:37:54,120
Because I want a literal dot, a literal period, not any one character there.
因为我想要一个字面上的点，一个字面上的句号，而不是那里的任何一个字符。

2055
01:37:54,120 --> 01:37:56,180
So I escape the period to make it have not
所以我对句号进行转义，使它没有

2056
01:37:56,180 --> 01:37:59,880
special significance per this cheat sheet, but rather a literal period.
根据这个速查表，特殊的意义，而是一个字面上的句号。

2057
01:37:59,880 --> 01:38:03,020
So what this means is if I go actually back to VS Code here
所以这意味着，如果我实际上回到这里的 VS Code

2058
01:38:03,020 --> 01:38:08,000
and I try to claim to work at like malan@harvard.com and click Register,
我尝试声称我在 malan@harvard.com 工作，然后点击注册，

2059
01:38:08,000 --> 01:38:10,320
that's a valid-looking email address.
这是一个看起来有效的电子邮件地址。

2060
01:38:10,320 --> 01:38:11,700
But when I click Register now.
但当我点击注册时。

2061
01:38:11,700 --> 01:38:12,200
Whoops!
哎呀！

2062
01:38:12,200 --> 01:38:12,770
Sorry.
抱歉。

2063
01:38:12,770 --> 01:38:16,380
It went through because I did not reload the page after making the change.
它成功了，因为我在更改后没有重新加载页面。

2064
01:38:16,380 --> 01:38:17,120
So I screwed up.
所以我搞砸了。

2065
01:38:17,120 --> 01:38:21,560
Let me go back to the register.html URL.
让我回到 register.html URL。

2066
01:38:21,560 --> 01:38:26,660
Let me reload the page and type in malan@harvard.com, for instance,
让我重新加载页面并输入 malan@harvard.com，例如，

2067
01:38:26,660 --> 01:38:27,860
and even-- sorry.
甚至 - 抱歉。

2068
01:38:27,860 --> 01:38:30,800
Let me type in malan@harvard.com.
让我输入 malan@harvard.com。

2069
01:38:30,800 --> 01:38:35,330
And even though it's a valid-looking URL, it does not in fact and in .edu.
即使它看起来是一个有效的 URL，它实际上并没有以 .edu 结尾。

2070
01:38:35,330 --> 01:38:37,890
So the browser can defend against that in this way.
所以浏览器可以这样防御这种情况。

2071
01:38:37,890 --> 01:38:40,370
But the more important takeaway for now is
但现在更重要的是

2072
01:38:40,370 --> 01:38:44,090
that as useful as this is, as user friendly as this,
虽然它很有用，也很人性化，

2073
01:38:44,090 --> 01:38:47,780
this is not generally the best technique for validating user input
但这通常不是验证用户输入的最佳方法

2074
01:38:47,780 --> 01:38:50,810
and protecting against invalid user input.
以及防止无效的用户输入。

2075
01:38:50,810 --> 01:38:51,590
Why?
为什么？

2076
01:38:51,590 --> 01:38:53,120
Browsers can't be trusted.
浏览器不可信。

2077
01:38:53,120 --> 01:38:55,530
Or more generally, clients can't be trusted.
或者更一般地说，客户端不可信。

2078
01:38:55,530 --> 01:38:56,030
Why?
为什么？

2079
01:38:56,030 --> 01:38:59,240
Because the way HTML works as we've seen it thus far
因为我们迄今为止所看到的 HTML 的工作方式

2080
01:38:59,240 --> 01:39:02,960
is that everything is happening on my own Mac, or your own PC,
是所有事情都发生在我的 Mac 或你的 PC 上，

2081
01:39:02,960 --> 01:39:05,120
or your own phone locally.
或者你的手机本地。

2082
01:39:05,120 --> 01:39:08,988
Per the envelope story we told earlier, your browser is downloading the HTML,
根据我们之前讲过的信封故事，你的浏览器正在下载 HTML，

2083
01:39:08,988 --> 01:39:11,030
reading it top to bottom, left to right, and then
从上到下、从左到右阅读它，然后

2084
01:39:11,030 --> 01:39:13,160
displaying it on your computer.
在你的电脑上显示它。

2085
01:39:13,160 --> 01:39:15,930
But we've already seen that my computer, for instance,
但我们已经看到，我的电脑，例如，

2086
01:39:15,930 --> 01:39:18,380
has built into it these developer tools.
内置了这些开发者工具。

2087
01:39:18,380 --> 01:39:21,200
And there among the tabs here, are not just that network tab,
并且在这里的选项卡中，不仅仅是那个网络选项卡，

2088
01:39:21,200 --> 01:39:25,220
let me actually go to the Elements tab, which we haven't seen previously.
让我实际去到 Elements 选项卡，我们之前没有看到它。

2089
01:39:25,220 --> 01:39:29,840
In the Elements tab, you actually will see a pretty, printed version
在 Elements 选项卡中，你实际上会看到一个漂亮、打印的版本

2090
01:39:29,840 --> 01:39:31,400
of the same HTML.
相同的 HTML。

2091
01:39:31,400 --> 01:39:34,530
But what that means is that you can not only see the HTML,
但这意味着，你不仅可以看到 HTML，

2092
01:39:34,530 --> 01:39:36,270
you can actually change it.
你实际上可以改变它。

2093
01:39:36,270 --> 01:39:38,800
Now you're not going to be able to change it on the server.
现在你无法在服务器上更改它。

2094
01:39:38,800 --> 01:39:41,530
But I can absolutely change my own copy thereof.
但我绝对可以更改我自己的副本。

2095
01:39:41,530 --> 01:39:43,462
So suppose I'm now a hacker in the story.
假设我现在是故事中的黑客。

2096
01:39:43,462 --> 01:39:45,420
And I really want to register for this website,
我真的很想注册这个网站，

2097
01:39:45,420 --> 01:39:48,010
but it's apparently restricted to people with .edu addresses.
但它似乎只允许使用 .edu 地址的人注册。

2098
01:39:48,010 --> 01:39:50,550
I don't have a .edu address, let me propose.
我没有 .edu 地址，让我来提议。

2099
01:39:50,550 --> 01:39:51,540
So that's fine.
没问题。

2100
01:39:51,540 --> 01:39:55,050
Let me actually go into the developer tools.
让我实际进入开发者工具。

2101
01:39:55,050 --> 01:39:57,540
Let me just double click on the attribute
让我双击一下这个属性

2102
01:39:57,540 --> 01:39:59,280
there, highlight it, and boom.
然后，选中它，然后砰的一声。

2103
01:39:59,280 --> 01:40:02,760
Now gone is that pattern entirely.
现在，这个模式完全消失了。

2104
01:40:02,760 --> 01:40:07,110
The web browser now will let me register with malan@harvard.com
现在，网页浏览器将允许我使用 malan@harvard.com 注册

2105
01:40:07,110 --> 01:40:10,900
because the developer tools give you full-fledged access to the underlying
因为开发者工具允许你完全访问底层的

2106
01:40:10,900 --> 01:40:11,400
HTML.
HTML。

2107
01:40:11,400 --> 01:40:14,640
So if I've changed the HTML, the defense is no longer in place.
因此，如果我修改了 HTML，防御措施就不再起作用了。

2108
01:40:14,640 --> 01:40:18,090
Now what's the takeaway then is client-side validation
那么，客户端验证的收获是什么呢？

2109
01:40:18,090 --> 01:40:19,770
is wonderfully user friendly.
它非常人性化。

2110
01:40:19,770 --> 01:40:21,190
But it's not secure.
但它不安全。

2111
01:40:21,190 --> 01:40:21,870
It's not safe.
它不安全。

2112
01:40:21,870 --> 01:40:24,420
So next week, we'll spend more time server-side
下周，我们将花更多时间在服务器端

2113
01:40:24,420 --> 01:40:28,050
at making sure that even if someone messes with my HTML or my website,
确保即使有人修改了我的 HTML 或我的网站，

2114
01:40:28,050 --> 01:40:32,075
they still can't actually get through and do anything bad on the server.
他们仍然无法真正突破并对服务器做任何坏事。

2115
01:40:32,075 --> 01:40:33,450
And this is true in general, too.
这在一般情况下也是如此。

2116
01:40:33,450 --> 01:40:39,420
Let me actually, just for fun, go to, maybe, let's say, harvard.edu.
让我实际去，只是为了好玩，去，也许，比方说，harvard.edu。

2117
01:40:39,420 --> 01:40:41,670
Let me open up my development tools.
让我打开我的开发工具。

2118
01:40:41,670 --> 01:40:45,630
And let's see where I might go here.
让我们看看我能去哪里。

2119
01:40:45,630 --> 01:40:48,180
Suppose that I want to hack into harvard.edu.
假设我想侵入 harvard.edu。

2120
01:40:48,180 --> 01:40:50,610
Well, notice that I'm on my elements tab and there's
注意，我正在我的元素选项卡上，并且有一个

2121
01:40:50,610 --> 01:40:52,777
a lot of HTML that composes this page.
很多构成此页面的 HTML。

2122
01:40:52,777 --> 01:40:55,860
And notice that these triangles indicate that most of it's been collapsed.
注意，这些三角形表示大多数内容都被折叠了。

2123
01:40:55,860 --> 01:40:59,380
But if I expanded them, I could see more and more of the tags and attributes.
但是，如果我展开它们，我就可以看到越来越多的标签和属性。

2124
01:40:59,380 --> 01:41:01,200
But suppose I'm now a hacker.
但假设我现在是黑客。

2125
01:41:01,200 --> 01:41:03,700
And I want to maybe delete this menu.
我想也许删除这个菜单。

2126
01:41:03,700 --> 01:41:05,910
Notice that you can also right click or Control
注意，你也可以右键单击或按住 Control

2127
01:41:05,910 --> 01:41:08,790
click on any element in a web page, typically.
单击网页上的任何元素，通常。

2128
01:41:08,790 --> 01:41:12,930
With these developer tools, click Inspect or some similarly named menu
使用这些开发者工具，单击“检查”或一些类似命名的菜单

2129
01:41:12,930 --> 01:41:18,090
option, and you can actually been whisked away to the actual HTML tags
选项，你实际上会被带到实现网页该功能的实际 HTML 标签

2130
01:41:18,090 --> 01:41:20,143
that implement that feature of the web page.
中。

2131
01:41:20,143 --> 01:41:22,560
One, it's wonderfully useful for learning how things work,
首先，它非常有用，可以学习事物的工作原理，

2132
01:41:22,560 --> 01:41:25,092
teaching yourself new tricks, and even fixing problems.
自学新技巧，甚至解决问题。

2133
01:41:25,092 --> 01:41:27,300
Here, though, I'm going to try to use it maliciously.
但是，在这里，我将尝试恶意地使用它。

2134
01:41:27,300 --> 01:41:31,092
And I'm going to highlight this tag here, div tag, as it's called.
我将在此处突出显示此标签，div 标签，就像它的名字一样。

2135
01:41:31,092 --> 01:41:32,050
I'm going to delete it.
我将删除它。

2136
01:41:32,050 --> 01:41:34,140
And watch what happens at top right.
看看右上角发生了什么。

2137
01:41:34,140 --> 01:41:35,690
Gone is the menu.
菜单不见了。

2138
01:41:35,690 --> 01:41:39,210
Now, of course, if you go to harvard.edu right now, the menu is still there.
现在，当然，如果你现在访问 harvard.edu，菜单仍然在那里。

2139
01:41:39,210 --> 01:41:42,060
If I reload harvard.edu the menu is back.
如果我重新加载 harvard.edu，菜单就回来了。

2140
01:41:42,060 --> 01:41:43,760
So it's only my own local copy.
所以这只是我自己的本地副本。

2141
01:41:43,760 --> 01:41:45,920
But this does speak to how you should not
但这也说明了你不应该

2142
01:41:45,920 --> 01:41:48,530
trust anything happening client side.
信任客户端发生的事情。

2143
01:41:48,530 --> 01:41:51,360
Because someone can be mutating that same code.
因为有人可能会修改相同的代码。

2144
01:41:51,360 --> 01:41:53,690
Now it turns out there's other patterns that you
现在事实证明，还有其他模式可以用来

2145
01:41:53,690 --> 01:41:55,490
can use in regular expressions.
在正则表达式中使用。

2146
01:41:55,490 --> 01:41:58,130
For instance, these are what are called character classes.
例如，这些被称为字符类。

2147
01:41:58,130 --> 01:42:01,070
You can, for instance, specify in square brackets
例如，你可以在方括号中指定

2148
01:42:01,070 --> 01:42:04,370
some number of digits or characters that you want to match against.
一些你想要匹配的数字或字符。

2149
01:42:04,370 --> 01:42:06,695
This is a range of characters, 0 through 9.
这是一个字符范围，从 0 到 9。

2150
01:42:06,695 --> 01:42:09,320
So it's effectively the same thing as that, but easier to type.
所以它实际上与那个相同，但更容易输入。

2151
01:42:09,320 --> 01:42:14,030
There are certain shortcuts, backslash lowercase d means any decimal digit.
有一些快捷方式，反斜杠小写 d 表示任何十进制数字。

2152
01:42:14,030 --> 01:42:17,690
Backslash capital d means anything that's not a decimal digit.
反斜杠大写 D 表示任何不是十进制数字的字符。

2153
01:42:17,690 --> 01:42:20,390
And dot dot dot, there's bunches of other patterns.
等等，还有很多其他模式。

2154
01:42:20,390 --> 01:42:23,808
You might use these to maybe validate a phone number in a web page,
你可能使用这些来验证网页中的电话号码，

2155
01:42:23,808 --> 01:42:26,850
if you want it to be formatted in a certain way, for better or for worse.
如果你希望它以某种特定的方式格式化，无论好坏。

2156
01:42:26,850 --> 01:42:29,900
But long story short, regular expressions will be,
但长话短说，正则表达式将是

2157
01:42:29,900 --> 01:42:34,880
someday, your friend as you try to solve certain problems with data.
有一天，你尝试用数据解决某些问题时的朋友。

2158
01:42:34,880 --> 01:42:37,240
As an aside, it does escalate quickly.
顺便说一句，它确实会迅速升级。

2159
01:42:37,240 --> 01:42:39,930
So this is typically the regular expression
所以，这通常是

2160
01:42:39,930 --> 01:42:43,650
that browsers nowadays use to validate email addresses.
如今浏览器用来验证电子邮件地址的正则表达式。

2161
01:42:43,650 --> 01:42:48,180
It is way more complicated than . +@.+.
它比 . +@.+ 复杂得多。

2162
01:42:48,180 --> 01:42:48,870
Why?
为什么？

2163
01:42:48,870 --> 01:42:50,540
Because you can't have @@@.edu.
因为你不能有 @@@.edu。

2164
01:42:53,225 --> 01:42:55,350
There's certain characters you don't want to allow.
有些字符你不想允许。

2165
01:42:55,350 --> 01:42:57,433
There are certain characters you do want to allow.
有些字符你确实想允许。

2166
01:42:57,433 --> 01:43:01,110
So long story short, this is a much larger regular expression
所以长话短说，这是一个更大的正则表达式

2167
01:43:01,110 --> 01:43:04,920
that is more correct when it comes to valid email addresses.
在验证有效电子邮件地址时，它更准确。

2168
01:43:04,920 --> 01:43:05,520
All right.
好的。

2169
01:43:05,520 --> 01:43:10,080
So with that said, there's one tool with which you should be familiar.
因此，有这样一个工具，你应该熟悉它。

2170
01:43:10,080 --> 01:43:13,860
And that is at this URL here, validator.w3.org.
它位于此 URL：validator.w3.org。

2171
01:43:13,860 --> 01:43:17,820
And this is a free web service from the World Wide Web Consortium,
这是一个来自万维网联盟的免费网络服务，

2172
01:43:17,820 --> 01:43:21,638
which is the group that essentially standardizes this HTML language.
它是一个基本标准化 HTML 语言的组织。

2173
01:43:21,638 --> 01:43:24,180
And if you go to their web page, there's a few different ways
如果你访问他们的网页，有几种不同的方法

2174
01:43:24,180 --> 01:43:25,830
to validate your own code.
来验证你自己的代码。

2175
01:43:25,830 --> 01:43:29,850
Essentially, check it for correctness by typing in its URL,
本质上，通过输入其 URL 来检查其正确性，

2176
01:43:29,850 --> 01:43:34,150
otherwise known more generally as a URI, by uploading a file or by direct input.
更广义地说，也就是 URI，通过上传文件或直接输入。

2177
01:43:34,150 --> 01:43:37,210
So just for kicks, for instance, I'm going to go into VS Code
所以，只是为了好玩，例如，我将进入 VS Code

2178
01:43:37,210 --> 01:43:39,880
and grab my HTML that I just made.
并获取我刚创建的 HTML。

2179
01:43:39,880 --> 01:43:44,830
I'm going to go back to validator.w3.org and paste it into the direct input box
我将返回 validator.w3.org 并将其粘贴到直接输入框中

2180
01:43:44,830 --> 01:43:45,910
and click Check.
然后点击“检查”。

2181
01:43:45,910 --> 01:43:49,180
And it's just a nice handy website that, if I scroll down, in green,
这是一个非常方便的网站，如果我向下滚动，用绿色显示，

2182
01:43:49,180 --> 01:43:53,380
you will hopefully see this, no errors or warnings to show.
你将有望看到，没有错误或警告显示。

2183
01:43:53,380 --> 01:43:56,830
So it's a handy feature just to make sure that at least syntactically
所以，它是一个方便的功能，可以确保至少语法上

2184
01:43:56,830 --> 01:44:01,600
your code is correct, even if it's not behaving the way that you might want.
你的代码是正确的，即使它没有按照你想要的方式运行。

2185
01:44:01,600 --> 01:44:02,170
All right.
好的。

2186
01:44:02,170 --> 01:44:04,902
With that said, the second of today's three languages,
话虽如此，今天的三种语言中的第二种，

2187
01:44:04,902 --> 01:44:07,360
and we'll just scratch the surface ultimately of JavaScript
我们最终只是触及了 JavaScript 的皮毛

2188
01:44:07,360 --> 01:44:09,838
to give you a sense of its capabilities, but CSS
让你了解它的功能，但 CSS

2189
01:44:09,838 --> 01:44:12,880
is something that's worth understanding some of the basic building blocks
是一些值得了解的基本构建块

2190
01:44:12,880 --> 01:44:13,580
thereof.
其中一些。

2191
01:44:13,580 --> 01:44:19,090
So let me propose that there are some additional terms to know.
所以让我建议一些额外的术语需要了解。

2192
01:44:19,090 --> 01:44:23,030
In the world of CSS, we're, again, going to have key value pairs.
在 CSS 的世界里，我们又要用到键值对。

2193
01:44:23,030 --> 01:44:25,790
In this world, they're called properties instead of attributes.
在这个世界里，它们被称为属性而不是属性。

2194
01:44:25,790 --> 01:44:26,290
Why?
为什么？

2195
01:44:26,290 --> 01:44:29,350
It was invented by different people, but it's the same kinds of ideas.
它是不同的人发明的，但它是一样的想法。

2196
01:44:29,350 --> 01:44:31,240
In the world of CSS, you're going to have
在 CSS 的世界里，你将拥有

2197
01:44:31,240 --> 01:44:34,610
ways of specifying different selectors, as they're called.
指定不同选择器的方式，如它们所称。

2198
01:44:34,610 --> 01:44:36,920
That is to say we're going to be able to specify
也就是说，我们将能够指定

2199
01:44:36,920 --> 01:44:40,640
the font size, the color, the margins and a lot of aesthetics
字体大小、颜色、边距和许多美学效果

2200
01:44:40,640 --> 01:44:43,190
when it relates to tags in our web page.
当它与我们网页中的标签相关时。

2201
01:44:43,190 --> 01:44:46,220
And there's going to be different ways to select those tags,
而且会有不同的方法来选择这些标签，

2202
01:44:46,220 --> 01:44:47,390
as we'll soon see.
我们很快就会看到。

2203
01:44:47,390 --> 01:44:51,350
In an HTML page like this, this is our super simple one with which we began,
在一个像这样的 HTML 页面中，这是我们开始使用的超级简单的页面，

2204
01:44:51,350 --> 01:44:54,560
it turns out that you can also include a style
事实证明，你也可以包含一个样式

2205
01:44:54,560 --> 01:44:56,840
tag in the head of the page that has some
标签在页面的头部，它有一些

2206
01:44:56,840 --> 01:44:59,870
of your stylistic decisions, font sizes, colors, margins,
你的风格选择，字体大小，颜色，边距，

2207
01:44:59,870 --> 01:45:01,760
and all of those kinds of aesthetics.
以及所有这些美学效果。

2208
01:45:01,760 --> 01:45:05,300
We'll also see another approach whereby you can relegate all of that stuff
我们还将看到另一种方法，你可以将所有这些东西

2209
01:45:05,300 --> 01:45:09,220
to a separate file, like styles.css, or something .css.
放到一个单独的文件中，比如 styles.css 或类似 .css 的文件。

2210
01:45:09,220 --> 01:45:12,050
And you can link to it in the head of the page.
你可以在页面的头部链接到它。

2211
01:45:12,050 --> 01:45:16,370
Link here does not mean A, like, ideally our anchor tag before
这里的链接并不意味着 A，比如，理想情况下，我们之前使用的锚标签

2212
01:45:16,370 --> 01:45:17,790
would have been called a link.
会被称为链接。

2213
01:45:17,790 --> 01:45:18,500
But it's not.
但它不是。

2214
01:45:18,500 --> 01:45:22,650
This just means that these two files are linked in some way conceptually.
这仅仅意味着这两个文件在某种程度上是概念上连接的。

2215
01:45:22,650 --> 01:45:23,150
All right.
好吧。

2216
01:45:23,150 --> 01:45:29,130
So that is to say we can use these kinds of tags now to enhance our own code.
也就是说，我们现在可以使用这些类型的标签来增强我们自己的代码。

2217
01:45:29,130 --> 01:45:31,110
So let me propose that we do this.
所以，让我建议我们这样做。

2218
01:45:31,110 --> 01:45:32,970
Let me go into VS Code here.
让我进入 VS Code。

2219
01:45:32,970 --> 01:45:35,870
Let me go ahead and create a very, very simple home
让我创建一个非常非常简单的首页

2220
01:45:35,870 --> 01:45:42,950
page for someone like John Harvard by running code of-- how about home.html?
为像 John Harvard 这样的人运行代码，比如 home.html？

2221
01:45:42,950 --> 01:45:46,850
And in home.html, I'm going to copy paste some of my starter HTML
在 home.html 中，我将复制粘贴一些我之前开始使用的 HTML

2222
01:45:46,850 --> 01:45:47,810
from before.
从之前。

2223
01:45:47,810 --> 01:45:50,570
And now in the body of this page, I'm going to do a few things.
现在在页面的正文中，我要做几件事。

2224
01:45:50,570 --> 01:45:53,420
I'm going to have a web page with a paragraph
我将有一个网页，里面有一段

2225
01:45:53,420 --> 01:45:57,500
up here that just says John Harvard as the title thereof.
上面的内容就是 John Harvard 作为标题。

2226
01:45:57,500 --> 01:45:59,450
Another paragraph that says something simple
另一段内容简单地说

2227
01:45:59,450 --> 01:46:02,790
like welcome to my home page exclamation point.
像欢迎来到我的主页！

2228
01:46:02,790 --> 01:46:05,630
And then, like, a footer at the bottom and a third paragraph
然后，就像一个页脚在底部，第三段

2229
01:46:05,630 --> 01:46:10,470
that's a copyright, say, John Harvard, for instance.
是版权，比如 John Harvard，例如。

2230
01:46:10,470 --> 01:46:14,180
So super simple, but representative of a header, a main part of the page,
所以超级简单，但代表了页眉、页面的主要部分，

2231
01:46:14,180 --> 01:46:15,560
and a footer thereof.
以及页脚。

2232
01:46:15,560 --> 01:46:20,480
If I go into my other tab and reload my directory listing,
如果我进入我的另一个标签，并重新加载我的目录列表，

2233
01:46:20,480 --> 01:46:23,090
I will see now home.html.
我将看到 home.html。

2234
01:46:23,090 --> 01:46:25,370
And it's going to be pretty bare bones, right?
它将是非常基础的，对吧？

2235
01:46:25,370 --> 01:46:27,080
It's the same text, same font size.
它是一样的文本，一样的字体大小。

2236
01:46:27,080 --> 01:46:28,640
It is three separate paragraphs.
它有三段独立的段落。

2237
01:46:28,640 --> 01:46:31,370
But let me start to stylize this a little bit differently.
但让我尝试以稍微不同的方式来美化它。

2238
01:46:31,370 --> 01:46:35,600
Let me make the top bigger and bolder, perhaps, or rather,
让我使顶部更大更粗体，也许，或者说，

2239
01:46:35,600 --> 01:46:39,870
the top bigger and centered and make this text shrink thereafter.
顶部更大并居中，然后使这段文本缩小。

2240
01:46:39,870 --> 01:46:41,520
So I'm going to go ahead and do this.
所以我要继续这样做。

2241
01:46:41,520 --> 01:46:44,960
It turns out that you can have not necessarily a style tag,
事实证明，你并不一定需要一个 style 标签，

2242
01:46:44,960 --> 01:46:48,930
but even more simply, a style attribute on certain tags, like this.
但更简单的是，在某些标签上添加一个 style 属性，就像这样。

2243
01:46:48,930 --> 01:46:54,410
I'm going to add a style attribute that has a font size of maybe large.
我要添加一个 style 属性，它有一个字体大小，可能为 large。

2244
01:46:54,410 --> 01:47:00,770
And how about a style attribute here, a font size medium.
这里怎么样，style 属性，字体大小为 medium。

2245
01:47:00,770 --> 01:47:03,440
And then maybe down here-- oops, close quotes.
然后也许在这里—— 哦，闭合引号。

2246
01:47:03,440 --> 01:47:05,250
And then down here--
然后在这里——

2247
01:47:05,250 --> 01:47:05,990
whoops.
哎呀。

2248
01:47:05,990 --> 01:47:06,800
Thank you.
谢谢。

2249
01:47:06,800 --> 01:47:07,940
OK.
好的。

2250
01:47:07,940 --> 01:47:09,120
I owe you some cookies.
我欠你一些饼干。

2251
01:47:09,120 --> 01:47:14,610
All right, so style here of font size small, so relatively simple ideas.
好的，所以这里的 style 属性为 font-size 为 small，所以相对来说很简单。

2252
01:47:14,610 --> 01:47:18,173
And here is just another stupid syntax for key value pairs.
这仅仅是另一种愚蠢的键值对语法。

2253
01:47:18,173 --> 01:47:20,090
Again, left hand is not talking to right hand.
同样，左手和右手没有沟通。

2254
01:47:20,090 --> 01:47:24,980
In CSS, cascading style sheets, which is the language we're now talking about,
在 CSS 中，层叠样式表，是我们现在谈论的语言，

2255
01:47:24,980 --> 01:47:27,710
it's key colon value.
它是键冒号值。

2256
01:47:27,710 --> 01:47:31,520
In HTML, it's key equals quote unquote value.
在 HTML 中，它是键等于引号值引号。

2257
01:47:31,520 --> 01:47:34,770
It's just different techniques for the exact same dictionary-like idea.
这仅仅是针对完全相同字典式想法的不同技术。

2258
01:47:34,770 --> 01:47:35,270
All right.
好的。

2259
01:47:35,270 --> 01:47:39,270
If I go back to my other tab and reload, notice that it's a little subtle,
如果我返回到我的另一个标签并重新加载，你会注意到它有点微妙，

2260
01:47:39,270 --> 01:47:41,600
but it is large, medium, and small.
但它确实是 large、medium 和 small。

2261
01:47:41,600 --> 01:47:44,070
I didn't center things yet, so let me do that.
我还没有居中，所以让我来做。

2262
01:47:44,070 --> 01:47:45,830
It turns out that this thing collectively
事实证明，这个东西整体上

2263
01:47:45,830 --> 01:47:47,090
is what's called a property.
被称为属性。

2264
01:47:47,090 --> 01:47:49,430
And a property is defined by a key value pair.
一个属性是由一个键值对定义的。

2265
01:47:49,430 --> 01:47:52,400
If you want to have multiple properties for key value pairs,
如果你想为键值对有多个属性，

2266
01:47:52,400 --> 01:47:55,800
in CSS, you separate them with semicolons.
在 CSS 中，你需要用分号分隔它们。

2267
01:47:55,800 --> 01:47:56,760
So those are back.
所以这些都回来了。

2268
01:47:56,760 --> 01:48:00,860
And if I want to center the text, I can do text-align: center.
如果我想居中文本，我可以使用 text-align: center。

2269
01:48:00,860 --> 01:48:03,020
I could now end my thought with the semicolon.
我现在可以用分号结束我的想法。

2270
01:48:03,020 --> 01:48:04,880
It's not strictly necessary.
它不是严格必要的。

2271
01:48:04,880 --> 01:48:06,890
But I'll keep it just so that I'm consistent.
但我保留它，这样我就保持一致。

2272
01:48:06,890 --> 01:48:10,093
But it's only necessary if you have more than one.
但只有在你有多个属性时才需要。

2273
01:48:10,093 --> 01:48:12,260
I'm going to go ahead and center everything, though.
不过，我要继续将所有内容居中。

2274
01:48:12,260 --> 01:48:15,800
So I'm going to go down here and add a semicolon after medium, down here
所以我要在这里添加一个分号，在 medium 之后，在这里

2275
01:48:15,800 --> 01:48:17,570
and add a semicolon after small.
并在 small 之后添加一个分号。

2276
01:48:17,570 --> 01:48:22,100
So I align, text-align center, center, center for all three paragraphs.
所以，对于所有三段，我都使用 text-align: center 来居中。

2277
01:48:22,100 --> 01:48:25,580
If I go back to this other tab and I reload, voila.
如果我返回到另一个标签并重新加载，瞧。

2278
01:48:25,580 --> 01:48:27,830
Now it is, in fact, centered.
现在它确实居中了。

2279
01:48:27,830 --> 01:48:32,450
But here's where we can start to have a conversation about, maybe, design.
但在这里，我们可以开始谈论，也许，设计。

2280
01:48:32,450 --> 01:48:34,190
So I claim this is correct.
所以，我声称这是正确的。

2281
01:48:34,190 --> 01:48:36,680
But is this perhaps the best design?
但这也许不是最好的设计？

2282
01:48:36,680 --> 01:48:38,030
Well, maybe not.
好吧，也许不是。

2283
01:48:38,030 --> 01:48:41,210
I mean, these aren't really paragraphs, first of all, semantically.
我的意思是，首先，从语义上讲，这些并不是真正的段落。

2284
01:48:41,210 --> 01:48:43,160
It's not even complete sentences.
甚至不是完整的句子。

2285
01:48:43,160 --> 01:48:45,692
But there are three different divisions of the page,
但是页面有三个不同的部分，

2286
01:48:45,692 --> 01:48:48,650
right, like, the header up there, the main part in the middle, and then
比如，上面的标题，中间的主要部分，然后

2287
01:48:48,650 --> 01:48:49,340
the footer.
页脚。

2288
01:48:49,340 --> 01:48:52,670
So it turns out, and we saw a glimpse of this in Harvard's source code,
事实证明，我们在哈佛大学的源代码中看到了这一点，

2289
01:48:52,670 --> 01:48:58,120
there's another tag instead of p for paragraph called div, for division.
除了代表段落的“p”标签外，还有一个标签叫做“div”，代表“分隔”。

2290
01:48:58,120 --> 01:48:59,870
And even though this is actually not going
虽然这实际上并没有

2291
01:48:59,870 --> 01:49:02,660
to have much of a functional effect at first,
一开始会产生很多功能上的影响，

2292
01:49:02,660 --> 01:49:04,850
it's maybe semantically a bit better.
但从语义上讲可能好一些。

2293
01:49:04,850 --> 01:49:06,890
Because, again, these aren't really paragraphs.
因为，再说一次，这些并不是真正的段落。

2294
01:49:06,890 --> 01:49:09,900
So if I really want to nitpick, I do have three divisions of the page.
所以如果我真的想挑剔的话，我确实有三个页面分区。

2295
01:49:09,900 --> 01:49:14,180
So div is a very common way to give yourself just a rectangular region
所以，div 是一种非常常见的做法，它能为你提供一个矩形区域，

2296
01:49:14,180 --> 01:49:16,310
of the page to style as you see fit.
你可以根据自己的喜好对页面进行样式化。

2297
01:49:16,310 --> 01:49:20,360
If I go back now and reload, notice that it does tighten things up.
如果我现在回到页面并刷新，你会注意到它确实使内容变得紧凑。

2298
01:49:20,360 --> 01:49:23,480
The paragraph tag gave me some vertical whitespace for free.
段落标签免费给我提供了一些垂直空白。

2299
01:49:23,480 --> 01:49:24,380
So I've lost that.
所以我失去了那些空白。

2300
01:49:24,380 --> 01:49:26,780
But I could add it back if I really wanted to.
但如果我真的想要的话，我可以重新添加它们。

2301
01:49:26,780 --> 01:49:29,750
But now, let's come to this question of design.
但现在，让我们来谈谈设计问题。

2302
01:49:29,750 --> 01:49:32,760
What's redundant about what I've done thus far, even if you've never
到目前为止，我所做的事情有什么冗余之处，即使你以前从未

2303
01:49:32,760 --> 01:49:34,950
seen CSS before?
见过 CSS？

2304
01:49:34,950 --> 01:49:35,670
Yeah?
是吗？

2305
01:49:35,670 --> 01:49:36,900
AUDIENCE: [INAUDIBLE].
观众：[听不清]

2306
01:49:36,900 --> 01:49:37,650
DAVID MALAN: Yeah.
大卫·马兰：是的。

2307
01:49:37,650 --> 01:49:40,967
I mean, I had to center all three divs, which is just sort of stupid,
我的意思是，我不得不将所有三个 div 居中，这有点愚蠢，

2308
01:49:40,967 --> 01:49:41,550
it would seem.
看起来是这样的。

2309
01:49:41,550 --> 01:49:43,398
Copy paste has generally not been necessary.
通常不需要复制粘贴。

2310
01:49:43,398 --> 01:49:45,690
Even though I'm doing it to save time today in general,
尽管我今天这样做是为了节省时间，

2311
01:49:45,690 --> 01:49:48,600
when the results are copied and pasted, ultimately, this
但最终，复制粘贴的结果，这

2312
01:49:48,600 --> 01:49:51,120
has not been good practice in any of our languages.
在我们任何语言中都不是好的做法。

2313
01:49:51,120 --> 01:49:52,990
So it turns out I can do this.
事实证明我可以这样做。

2314
01:49:52,990 --> 01:49:54,750
Let me actually delete this one.
让我实际删除掉这个。

2315
01:49:54,750 --> 01:49:57,660
And I can keep or get rid of the semicolon, but I'll get rid of it
我可以保留或删除分号，但我将删除它，

2316
01:49:57,660 --> 01:49:59,460
for parity with our first version.
与我们的第一个版本保持一致。

2317
01:49:59,460 --> 01:50:01,350
I'm going to get rid of this one, too.
我也要删除掉这个。

2318
01:50:01,350 --> 01:50:02,710
And you know what?
你知道吗？

2319
01:50:02,710 --> 01:50:05,460
Here's the C in CSS cascading.
这就是 CSS 层叠样式表中的“C”。

2320
01:50:05,460 --> 01:50:07,390
It's more like a waterfall effect.
更像是一种瀑布效果。

2321
01:50:07,390 --> 01:50:10,620
And if I go up to a parent tag here, like, the body is
如果我向上移动到父标签，比如，body 是

2322
01:50:10,620 --> 01:50:15,150
the parent of all three divs, I could put the style attribute here
所有三个 div 的父标签，我可以在此放置 style 属性，

2323
01:50:15,150 --> 01:50:18,150
and say text-align: center there.
并说 text-align: center。

2324
01:50:18,150 --> 01:50:21,090
And that has the effect of cascading down onto all three
这将对所有三个嵌套在里面的

2325
01:50:21,090 --> 01:50:23,170
of the children that are nested inside of it.
子标签产生级联效果。

2326
01:50:23,170 --> 01:50:25,740
So now it's sort of better designed because I've only
所以现在设计好了一些，因为我只

2327
01:50:25,740 --> 01:50:27,660
said text-align: center once.
说了一次 text-align: center。

2328
01:50:27,660 --> 01:50:31,860
If I go back to the web page and reload, it has no functional impact visually.
如果我回到网页并刷新，从视觉上看它没有功能上的影响。

2329
01:50:31,860 --> 01:50:32,910
But it's better design.
但它是一个更好的设计。

2330
01:50:32,910 --> 01:50:35,640
Because if I want to align it left, or right, or center,
因为如果我想将其对齐到左边、右边或居中，

2331
01:50:35,640 --> 01:50:39,290
I can change it in one place and not three independent places.
我可以在一个地方更改它，而不是在三个独立的地方更改它。

2332
01:50:39,290 --> 01:50:39,790
All right.
好的。

2333
01:50:39,790 --> 01:50:42,710
What else might I change after this here?
接下来我还能改变什么？

2334
01:50:42,710 --> 01:50:48,830
Well, it turns out that I could do something a little clearer as well.
事实证明，我也可以做一些更清晰的事情。

2335
01:50:48,830 --> 01:50:50,170
This copyright symbol?
这个版权符号？

2336
01:50:50,170 --> 01:50:53,410
I mean, it's just sort of homemade with two parentheses and a C.
我的意思是，它只是用两个括号和一个 C 自制而成的。

2337
01:50:53,410 --> 01:50:56,920
It turns out that there are ways to get special symbols in HTML.
事实证明，在 HTML 中有一些方法可以获得特殊符号。

2338
01:50:56,920 --> 01:50:59,162
And you can use what are called HTML entities.
你可以使用被称为 HTML 实体的东西。

2339
01:50:59,162 --> 01:51:02,120
You would only know these by looking them up or memorizing the numbers.
你只有通过查找或记忆数字才能知道这些符号。

2340
01:51:02,120 --> 01:51:07,630
But it turns out that number 169 is the special HTML
但事实证明，数字 169 是特殊的 HTML

2341
01:51:07,630 --> 01:51:10,210
entity for an actual copyright symbol.
版权符号实体。

2342
01:51:10,210 --> 01:51:12,700
So let me zoom in here and then reload.
所以让我在这里放大，然后刷新。

2343
01:51:12,700 --> 01:51:16,750
And you'll see that the parenthetical C actually becomes the proper mark
你会看到括号中的 C 实际上变成了正确的标记，

2344
01:51:16,750 --> 01:51:19,090
for copyright, so marginally useful.
表示版权，所以有一点用。

2345
01:51:19,090 --> 01:51:21,250
Or you could copy paste it from some other website,
或者你可以从其他网站复制粘贴它，

2346
01:51:21,250 --> 01:51:24,125
for instance, if you didn't know how to type it on your own keyboard.
例如，如果你不知道如何在自己的键盘上输入它。

2347
01:51:24,125 --> 01:51:27,280
So that's an HTML entity, another feature with which to be familiar.
所以这就是一个 HTML 实体，另一个需要熟悉的特性。

2348
01:51:27,280 --> 01:51:32,150
But having three divs on a page isn't necessarily ideal nowadays,
但现在在一个页面上使用三个 div 不一定是理想的选择，

2349
01:51:32,150 --> 01:51:35,080
especially for search engine optimization, SEO,
特别是对于搜索引擎优化，SEO，

2350
01:51:35,080 --> 01:51:37,180
for screen readers for accessibility.
对于辅助功能的屏幕阅读器。

2351
01:51:37,180 --> 01:51:40,060
Because at a glance, I don't really know which of these divs
因为乍一看，我不知道这些 div 中的哪一个

2352
01:51:40,060 --> 01:51:41,830
is the most important.
是最重要的。

2353
01:51:41,830 --> 01:51:44,470
Arguably the footer is generally for the human reader,
可以说，页脚通常是为了人类读者，

2354
01:51:44,470 --> 01:51:48,110
like, the least information-bearing piece of content.
就像，信息量最少的内容部分。

2355
01:51:48,110 --> 01:51:51,670
So why don't I try to signal as much to the browser, to the screen reader,
那么为什么我不尝试向浏览器、屏幕阅读器发送更多信号呢？

2356
01:51:51,670 --> 01:51:53,240
to the search engine?
到搜索引擎？

2357
01:51:53,240 --> 01:51:56,320
So it turns out there are what are called semantic tags nowadays.
事实证明，现在有一些被称为语义标签的东西。

2358
01:51:56,320 --> 01:51:58,000
Indeed, we're up to version 5 of HTML.
确实，我们已经到了 HTML 的第 5 版。

2359
01:51:58,000 --> 01:52:01,840
And one of the relatively newer features is, instead of using generic divs,
其中一个比较新的特性是，不再使用泛型的 div，

2360
01:52:01,840 --> 01:52:04,270
you can actually use actual names of tags,
你实际上可以使用标签的真实名称，

2361
01:52:04,270 --> 01:52:07,690
like header and main and even footer.
比如 header、main 甚至 footer。

2362
01:52:07,690 --> 01:52:10,810
And here, too, the visual effect is not going
同样在这里，如果我去这里并刷新，视觉效果不会有任何不同。

2363
01:52:10,810 --> 01:52:13,870
to be any different if I go here and reload.
但它的引擎盖下有更多语义信息。

2364
01:52:13,870 --> 01:52:17,410
But there's more semantic information underneath the hood.
所以，再说一次，所有这些不同类型的

2365
01:52:17,410 --> 01:52:19,300
So that, again, all of those different types
服务，浏览器、屏幕阅读器等等

2366
01:52:19,300 --> 01:52:22,600
of services, the browser, the screen reader, and the like
只是对页面了解得更多一些。

2367
01:52:22,600 --> 01:52:24,910
just know a little more about the page.
也许现在屏幕阅读器会先关注页面的主要部分，

2368
01:52:24,910 --> 01:52:28,180
And maybe a screen reader now would focus on the main part of the page
然后再向人类朗读页脚中的所有细则，例如。

2369
01:52:28,180 --> 01:52:32,260
before reciting all of the fine print in the footer, for instance, to the human.
好的。

2370
01:52:32,260 --> 01:52:32,770
All right.
那么，我们还能在这里做什么呢？

2371
01:52:32,770 --> 01:52:34,520
Well, what else could we do here?
在某些时候，能够重复使用这些样式会很好。

2372
01:52:34,520 --> 01:52:38,470
Well, it would be nice at some point to be able to reuse these styles.
如果我发现自己制作的不是一个页面，而是两个页面，十个页面或一百个页面，

2373
01:52:38,470 --> 01:52:43,240
And if I find myself making not one page but two pages or 10 pages or 100 pages,
一遍又一遍地输入相同的样式就有点烦人。

2374
01:52:43,240 --> 01:52:47,230
it's kind of annoying to have to type out all of the same styles.
所以，如果能够把这些东西分解出来，是不是很不错？

2375
01:52:47,230 --> 01:52:50,060
So wouldn't it be nice to start to factor this stuff out?
我可以做到，

2376
01:52:50,060 --> 01:52:51,370
Well, I can do that, too.
让我实际做一下。

2377
01:52:51,370 --> 01:52:53,510
Let me actually go ahead and do this.
.

2378
01:52:53,510 --> 01:52:58,450
Let me get rid of this attribute and this attribute and this attribute.
让我去掉这个属性，还有这个属性，以及这个属性。

2379
01:52:58,450 --> 01:53:02,050
And honestly, too, as I do this, I would argue that the code
说实话，当我这样做的时候，我认为这段代码

2380
01:53:02,050 --> 01:53:04,030
looks just a little cleaner now.
现在看起来干净多了。

2381
01:53:04,030 --> 01:53:07,450
It's more obvious what is a tag and what the actual data of the page
现在很明显哪些是标签，哪些是页面的实际数据，

2382
01:53:07,450 --> 01:53:09,260
is, metadata and data, if you will.
也就是元数据和数据，如果你愿意的话。

2383
01:53:09,260 --> 01:53:10,870
But I've lost all of my styling.
但我的所有样式都消失了。

2384
01:53:10,870 --> 01:53:13,450
But wouldn't it be nice to preserve some of the styling
但保留一些样式不是很好吗？

2385
01:53:13,450 --> 01:53:15,670
by doing what I proposed earlier, which is using
通过之前提议的方法，也就是使用

2386
01:53:15,670 --> 01:53:19,060
not a style attribute, but a style tag.
不是样式属性，而是样式标签。

2387
01:53:19,060 --> 01:53:22,802
And indeed, you can put a style tag in the head of your web page
实际上，你可以在网页的头部放一个样式标签

2388
01:53:22,802 --> 01:53:24,760
where you can put all of those same properties.
在这里你可以放置所有相同的属性。

2389
01:53:24,760 --> 01:53:27,970
And you need a little more syntax, a few more keystrokes.
你只需要多一些语法，多按几个键。

2390
01:53:27,970 --> 01:53:29,140
But I can say this.
但是我可以说。

2391
01:53:29,140 --> 01:53:32,350
If I want to center the entire body of my page,
如果我想将整个页面的主体居中，

2392
01:53:32,350 --> 01:53:38,470
I can actually do so by specifying text-align: center;.
我可以通过指定 text-align: center; 来实现。

2393
01:53:38,470 --> 01:53:41,003
Here the semi-colons are going to be generally necessary,
这里分号通常是必需的，

2394
01:53:41,003 --> 01:53:42,670
especially have you multiple properties.
尤其是当你有多个属性的时候。

2395
01:53:42,670 --> 01:53:44,200
Next I'm going to say header.
接下来我会说标题。

2396
01:53:44,200 --> 01:53:47,260
And inside of these curly braces, font-size:
在这些花括号里面，font-size:

2397
01:53:47,260 --> 01:53:51,070
large, unlike C, where you could get away with no curly braces
large，不像C语言，你可以不使用花括号

2398
01:53:51,070 --> 01:53:54,070
if there's a single line, you do need them in CSS.
只有一行的时候，在CSS中你确实需要它们。

2399
01:53:54,070 --> 01:53:58,630
In the main tag, let's go ahead and style with font-size: medium.
在main标签中，让我们继续使用font-size: medium来设置样式。

2400
01:53:58,630 --> 01:54:04,700
And then in the footer tag, let's go ahead and style with font-size: small.
然后在footer标签中，让我们继续使用font-size: small来设置样式。

2401
01:54:04,700 --> 01:54:06,010
Now this looks a little worse.
现在看起来有点糟糕。

2402
01:54:06,010 --> 01:54:08,860
Because it just kind of blew up and it's a lot longer.
因为它只是爆炸了，而且长得多。

2403
01:54:08,860 --> 01:54:11,410
But it is a step toward factoring this out.
但这确实是在朝着将它分解的方向迈进。

2404
01:54:11,410 --> 01:54:13,720
And honestly, when it comes to web pages,
说实话，说到网页，

2405
01:54:13,720 --> 01:54:15,460
I'm not the best artist in the world.
我并不是世界上最好的艺术家。

2406
01:54:15,460 --> 01:54:17,440
I can make the data display.
我可以让数据显示出来。

2407
01:54:17,440 --> 01:54:20,140
But friends of mine are certainly better at making things really
但我的一些朋友肯定更擅长让东西看起来真的

2408
01:54:20,140 --> 01:54:22,400
pretty and pixel perfect, so to speak.
漂亮，像素完美，可以这么说。

2409
01:54:22,400 --> 01:54:26,440
So it's kind of nice if I can isolate all of the style to one part of my file
所以如果我能将所有样式隔离到文件中的一个部分，那就很好

2410
01:54:26,440 --> 01:54:27,867
and all of the content to another.
而所有内容都在另一个部分。

2411
01:54:27,867 --> 01:54:30,200
Because maybe I could now collaborate with someone else.
因为也许我现在可以与其他人合作。

2412
01:54:30,200 --> 01:54:33,490
So if I go back to now the other tab and reload,
所以如果我回到另一个标签并重新加载，

2413
01:54:33,490 --> 01:54:35,530
functionally, no different still.
功能上，仍然没有区别。

2414
01:54:35,530 --> 01:54:37,390
It still looks exactly the same.
它看起来仍然完全一样。

2415
01:54:37,390 --> 01:54:40,457
But I'm starting to make it a little better designed.
但我的设计正在变得更好。

2416
01:54:40,457 --> 01:54:42,290
And in fact, there's another way to do this.
事实上，还有另一种方法可以做到这一点。

2417
01:54:42,290 --> 01:54:47,592
Suppose that I find myself in the habit of very often centering text on a page.
假设我养成了在页面上经常居中文本的习惯。

2418
01:54:47,592 --> 01:54:49,300
And honestly, it's just a little annoying
说实话，这有点烦人

2419
01:54:49,300 --> 01:54:52,240
to have to type this out for every tag that I want centered.
每次都要为我想居中的标签输入这些内容。

2420
01:54:52,240 --> 01:54:57,640
Well, I could create what are called classes as well in CSS.
好吧，我也可以在CSS中创建所谓类。

2421
01:54:57,640 --> 01:54:59,763
It turns out you can make up your own words--
事实证明，你可以自己想词语--

2422
01:54:59,763 --> 01:55:01,930
but I'm going to choose some reasonably named ones--
但我将选择一些名字合理的名字--

2423
01:55:01,930 --> 01:55:04,340
by prefixing them with a dot or a period.
通过在它们前面加上一个点或句号。

2424
01:55:04,340 --> 01:55:06,880
And if I want to call this set of properties,
如果我想调用这组属性，

2425
01:55:06,880 --> 01:55:11,290
even though there's just one, centered, I can literally write .centered there
即使只有一个，居中，我也可以直接在这里写 .centered

2426
01:55:11,290 --> 01:55:11,980
instead.
代替。

2427
01:55:11,980 --> 01:55:13,660
I can write this .large.
我可以写这个 .large。

2428
01:55:13,660 --> 01:55:16,070
I can call this .medium.
我可以调用这个 .medium。

2429
01:55:16,070 --> 01:55:18,640
I can call this .small.
我可以调用这个 .small。

2430
01:55:18,640 --> 01:55:22,900
And what this means now is I have reusable sets of properties,
现在这意味着我拥有可重用的属性集，

2431
01:55:22,900 --> 01:55:25,900
kind of like containers whereby anywhere I use the word "centered,"
有点像容器，无论我在哪里使用“centered”这个词，

2432
01:55:25,900 --> 01:55:30,400
it's going to get that one text-align: center property applied.
它将应用于 text-align: center 这个属性。

2433
01:55:30,400 --> 01:55:33,250
Anywhere I use quote, unquote "large," it's going to be made large.
无论我在哪里使用“large”，它都将被放大。

2434
01:55:33,250 --> 01:55:37,410
And so if I scroll down now here, I do need to reintroduce another attribute--
所以如果我现在向下滚动，我确实需要重新引入另一个属性--

2435
01:55:37,410 --> 01:55:41,600
but it's a very common one in the world of HTML now-- that of class.
但它现在是HTML世界中非常常见的属性--class。

2436
01:55:41,600 --> 01:55:43,820
So class equals large.
所以class等于large。

2437
01:55:43,820 --> 01:55:46,910
Down here I'm going to do class equals medium.
在下面我将做class等于medium。

2438
01:55:46,910 --> 01:55:49,910
Down here I'm going to do class equals small.
在下面我将做class等于small。

2439
01:55:49,910 --> 01:55:53,930
And it's getting a little more verbose, but I'm not polluting all of my HTML
它变得更冗长了，但我没有污染我所有的HTML

2440
01:55:53,930 --> 01:55:55,158
with the actual styles.
用实际的样式。

2441
01:55:55,158 --> 01:55:57,200
I'm just kind of having this layer of indirection
我只是在这些非常具体的属性之上有一层间接

2442
01:55:57,200 --> 01:56:01,010
and of abstraction, if you will, on top of those very specific properties.
以及抽象，如果你愿意的话。

2443
01:56:01,010 --> 01:56:02,990
And then for the body, I can do the same idea.
然后对于主体，我可以使用相同的想法。

2444
01:56:02,990 --> 01:56:05,210
Class equals centered.
Class等于centered。

2445
01:56:05,210 --> 01:56:10,010
And if I go back to my web page here and reload, still looks exactly the same.
如果我回到我的网页并重新加载，看起来仍然完全一样。

2446
01:56:10,010 --> 01:56:12,680
But I've kind of centralized where I can do things.
但我已经将我可以做的事情集中起来了。

2447
01:56:12,680 --> 01:56:15,500
And frankly, I could do something like this, color: red;.
坦白说，我可以做这样的事情，color: red;。

2448
01:56:15,500 --> 01:56:19,530
I can package up multiple properties, go back to the page here, and reload.
我可以将多个属性打包起来，回到这个页面，然后重新加载。

2449
01:56:19,530 --> 01:56:22,350
And now that has applied to everything.
现在它已经应用于所有东西。

2450
01:56:22,350 --> 01:56:24,470
So I have a reusable set of properties.
所以我拥有一组可重用的属性。

2451
01:56:24,470 --> 01:56:27,020
Even though centered is maybe not the best name now,
即使centered现在可能不是最好的名字，

2452
01:56:27,020 --> 01:56:28,520
because it also makes things red.
因为它也使东西变红。

2453
01:56:28,520 --> 01:56:31,400
But I can come up with reusable sets of properties.
但我可以想出可重用的属性集。

2454
01:56:31,400 --> 01:56:33,410
And honestly, one final flourish here would
老实说，这里最后一次修饰会

2455
01:56:33,410 --> 01:56:36,830
be let's not assume that my buddy, whether it's
是让我们不要假设我的朋友，无论是

2456
01:56:36,830 --> 01:56:39,200
my project partner or a colleague in the real world,
我的项目合作伙伴还是现实世界中的同事，

2457
01:56:39,200 --> 01:56:41,600
it's kind of stupid to try to edit the same file.
尝试编辑同一个文件有点愚蠢。

2458
01:56:41,600 --> 01:56:44,430
Because invariably we're going to break things on each other.
因为我们总是会互相破坏东西。

2459
01:56:44,430 --> 01:56:45,880
So I could actually do this.
所以我可以这样做。

2460
01:56:45,880 --> 01:56:46,880
Let me take all of this.
让我把所有这些都拿走。

2461
01:56:46,880 --> 01:56:48,110
And I'll get rid of the red.
我会去掉红色。

2462
01:56:48,110 --> 01:56:52,290
Let me go ahead and highlight everything I just did and cut it to my clipboard.
让我继续选择我刚刚做的一切，并将它剪切到我的剪贴板。

2463
01:56:52,290 --> 01:56:54,740
I'm going to get rid of the style tag altogether.
我会完全去掉style标签。

2464
01:56:54,740 --> 01:56:59,690
But I am going to go into VS Code and create-- how about a file called
但我会进入VS Code，然后创建一个--怎么样，一个名为

2465
01:56:59,690 --> 01:57:02,660
home.css, just so I know what's what.
home.css的文件，这样我就能知道是什么东西。

2466
01:57:02,660 --> 01:57:06,530
And in this file, I'm just going to literally paste everything I just made.
在这个文件里，我只是要将我刚刚创建的所有东西粘贴进去。

2467
01:57:06,530 --> 01:57:08,820
But I'm going to go back to my home page here.
但我将回到我的主页。

2468
01:57:08,820 --> 01:57:16,610
And I'm going to add that other tag I proposed earlier, link href="home.css",
然后我会添加我之前提出的另一个标签，link href="home.css"，

2469
01:57:16,610 --> 01:57:18,740
and I need one weird attribute, too.
我还需要一个奇怪的属性。

2470
01:57:18,740 --> 01:57:24,890
The relationship of this link is that of quote, unquote "style sheets."
这个链接的关系是“样式表”。

2471
01:57:24,890 --> 01:57:27,530
And that's just the way it is according to the tag.
这就是标签所指示的方式。

2472
01:57:27,530 --> 01:57:30,710
And now one last time, if I reload this page, the red is going to go away.
现在最后一次，如果我重新加载此页面，红色将会消失。

2473
01:57:30,710 --> 01:57:31,790
Because I deleted that.
因为我删除了它。

2474
01:57:31,790 --> 01:57:35,310
But the font sizes and centering are still there.
但是字体大小和居中仍然存在。

2475
01:57:35,310 --> 01:57:37,670
But what I've done was introduce some basic building
但我已经引入了某些基本的构建

2476
01:57:37,670 --> 01:57:40,910
blocks in this language I claim is called CSS that's
模块，用我声称名为 CSS 的语言来实现，也就是

2477
01:57:40,910 --> 01:57:46,130
going to allow me to now centralize all of the styling, the aesthetics now
将允许我集中所有样式，即现在所有的美学

2478
01:57:46,130 --> 01:57:47,670
of my web page.
我的网页。

2479
01:57:47,670 --> 01:57:48,170
All right.
好的。

2480
01:57:48,170 --> 01:57:53,510
Let me pause here and see if there are any questions on these techniques
让我在这里暂停一下，看看这些技术方面是否有任何问题

2481
01:57:53,510 --> 01:57:54,650
thus far.
到目前为止。

2482
01:57:54,650 --> 01:57:58,140
It's just more key value pairs.
它只是更多键值对。

2483
01:57:58,140 --> 01:57:59,740
Questions on this?
对此有任何问题吗？

2484
01:57:59,740 --> 01:58:00,240
No?
没有？

2485
01:58:00,240 --> 01:58:00,740
All right.
好的。

2486
01:58:00,740 --> 01:58:03,720
So here's where things can get prettier quickly.
所以，这里就是事物可以快速变得更漂亮的地方。

2487
01:58:03,720 --> 01:58:06,360
Let me go ahead now and close these two tabs.
现在让我关闭这两个标签。

2488
01:58:06,360 --> 01:58:10,980
Let me go into a file we created earlier called link.html, which you'll recall
让我进入我们之前创建的一个名为 link.html 的文件，你应该记得

2489
01:58:10,980 --> 01:58:12,580
looked a little something like this.
看起来有点像这样。

2490
01:58:12,580 --> 01:58:16,540
And now we can make this web page behave a little more like the real world.
现在我们可以让这个网页的行为更像现实世界。

2491
01:58:16,540 --> 01:58:19,920
Let me undo the phishing attack and just literally say Harvard down here.
让我撤销钓鱼攻击，并且只是在这里说哈佛。

2492
01:58:19,920 --> 01:58:23,670
But let me go ahead and start to style the anchor tag as follows.
但是让我继续按照如下方式对锚点标签进行样式设置。

2493
01:58:23,670 --> 01:58:26,400
Previously, this page looked a little boring like this.
以前，这个页面看起来有点像这样，很无聊。

2494
01:58:26,400 --> 01:58:27,780
The link was blue originally.
链接最初是蓝色的。

2495
01:58:27,780 --> 01:58:31,605
But because I visited harvard.edu, by default, the browser changes to purple.
但因为我访问了 harvard.edu，默认情况下，浏览器会变为紫色。

2496
01:58:31,605 --> 01:58:33,480
Which is fine, but maybe you don't want that.
这很好，但也许你并不想要这样。

2497
01:58:33,480 --> 01:58:36,430
Maybe we want something that's a little more crimson, for instance.
例如，也许我们想要一些更深红色的东西。

2498
01:58:36,430 --> 01:58:37,480
So let me do this.
所以让我做这个。

2499
01:58:37,480 --> 01:58:40,230
Let me go into the head of this link.html page.
让我进入这个 link.html 页面的头部。

2500
01:58:40,230 --> 01:58:42,510
Let me add a style tag herein.
让我在这里添加一个 style 标签。

2501
01:58:42,510 --> 01:58:46,140
And in there, let me style the anchor tag as follows.
在里面，让我按照如下方式设置锚点标签的样式。

2502
01:58:46,140 --> 01:58:50,790
Inside of this anchor tag, I'm going to do color: red.
在这个锚点标签内，我将执行 color: red。

2503
01:58:50,790 --> 01:58:55,050
And let's go ahead and leave it as such for now.
现在让我们先这样，先保持这样。

2504
01:58:55,050 --> 01:58:56,978
Let me go back to the link page and reload.
让我回到链接页面，重新加载。

2505
01:58:56,978 --> 01:58:58,520
And it's going to be a little subtle.
它会有点微妙。

2506
01:58:58,520 --> 01:58:59,680
But right now it's purple.
但现在它是紫色的。

2507
01:58:59,680 --> 01:59:01,520
And now it's definitely red.
现在它绝对是红色的。

2508
01:59:01,520 --> 01:59:02,620
So I've modified that.
所以我已经修改了它。

2509
01:59:02,620 --> 01:59:05,050
Now underlining links is good for accessibility.
现在，给链接加下划线对于可访问性来说是好的。

2510
01:59:05,050 --> 01:59:08,883
But a lot of websites choose to not underline them and instead
但许多网站选择不给它们加下划线，而是

2511
01:59:08,883 --> 01:59:10,550
underline them when you hover over them.
当你的鼠标悬停在它们上面时，给它们加下划线。

2512
01:59:10,550 --> 01:59:13,840
So that is an effect we can achieve, even though it might not be ideal.
所以，这是我们可以实现的效果，即使它可能不理想。

2513
01:59:13,840 --> 01:59:16,720
But let's at least demonstrate how websites are doing that.
但至少让我们演示一下网站是如何做到这一点的。

2514
01:59:16,720 --> 01:59:21,700
I can specify that this link should have text decoration of none.
我可以指定这个链接应该没有文本装饰。

2515
01:59:21,700 --> 01:59:24,400
Now I would only know that by having taken a class, read a book,
现在我只有通过上过课、读过书，

2516
01:59:24,400 --> 01:59:25,650
looked at an online reference.
或者查看过在线参考才能知道。

2517
01:59:25,650 --> 01:59:28,690
The default is underline.
默认情况下是加下划线。

2518
01:59:28,690 --> 01:59:31,330
But I can override that by saying none.
但我可以说 none 来覆盖它。

2519
01:59:31,330 --> 01:59:35,350
So if I now go back to my page, reload, it's still going to be red.
所以，如果我现在回到我的页面，重新加载，它仍然会是红色的。

2520
01:59:35,350 --> 01:59:38,530
But it's now not going to be underlined.
但现在它不会再加下划线了。

2521
01:59:38,530 --> 01:59:42,400
But notice if I hover over it, it changes to a little pointer finger
但是请注意，如果我把鼠标悬停在它上面，它会变成一个小的指针手指

2522
01:59:42,400 --> 01:59:43,480
if I zoom in here.
如果我在这里放大。

2523
01:59:43,480 --> 01:59:46,600
But it's clearly not underlining, so that's OK.
但它显然没有加下划线，所以没关系。

2524
01:59:46,600 --> 01:59:49,210
Because there's another way of selecting tags here.
因为这里还有另一种选择标签的方法。

2525
01:59:49,210 --> 01:59:51,790
I can say a:hover.
我可以说 a:hover。

2526
01:59:51,790 --> 01:59:55,810
And then inside of this CSS, I can say text-decoration:
然后在这个 CSS 里，我可以说 text-decoration:

2527
01:59:55,810 --> 02:00:00,340
underline when the anchor tag is being hovered over with the cursor.
当鼠标悬停在锚点标签上时，加下划线。

2528
02:00:00,340 --> 02:00:04,250
If I go back to my tab here and reload, still looks the same.
如果我回到我的标签页，重新加载，它看起来还是一样的。

2529
02:00:04,250 --> 02:00:06,460
But watch as my mouse gets close.
但请注意我的鼠标靠近它。

2530
02:00:06,460 --> 02:00:09,370
It now underlines, as a lot of websites do.
现在它加了下划线，就像许多网站一样。

2531
02:00:09,370 --> 02:00:11,210
So it's a relatively simple idea.
所以这是一个相对简单的想法。

2532
02:00:11,210 --> 02:00:13,085
It's not as compelling on mobile, especially,
它在手机上并不那么引人注目，尤其是

2533
02:00:13,085 --> 02:00:15,377
because it doesn't do anything if you hover your finger
因为如果你用手指悬停在手机屏幕上

2534
02:00:15,377 --> 02:00:16,630
over the glass of your phone.
它什么也不会做。

2535
02:00:16,630 --> 02:00:19,070
But it does work on laptops and desktops in this way,
但它在笔记本电脑和台式机上确实可以通过这种方式工作，

2536
02:00:19,070 --> 02:00:22,450
even though it's perhaps a little passé now to do this kind of technique.
即使现在使用这种技术也许有点过时了。

2537
02:00:22,450 --> 02:00:25,810
But there's other ways to select tags on a page.
但还有其他方法可以选中页面上的标签。

2538
02:00:25,810 --> 02:00:27,730
And in fact, let me go back to this one here.
事实上，让我回到这里。

2539
02:00:27,730 --> 02:00:31,780
And in this page, let me propose that you can go in one of two places.
在这个页面上，我建议你可以去两个地方之一。

2540
02:00:31,780 --> 02:00:41,080
Visit Harvard or a href = https://www.yale.edu/ and then
访问哈佛或 a href = https://www.yale.edu/，然后

2541
02:00:41,080 --> 02:00:42,380
Yale's website.
耶鲁的网站。

2542
02:00:42,380 --> 02:00:43,630
So it's getting a little long.
所以它变得有点长了。

2543
02:00:43,630 --> 02:00:44,650
So I'm going to hit Enter.
所以我将按回车键。

2544
02:00:44,650 --> 02:00:47,200
Because the browser won't care that there's some whitespace.
因为浏览器不在乎那里是否有空格。

2545
02:00:47,200 --> 02:00:49,760
But at least, now I have two links on the page.
但至少，现在我在页面上有了两个链接。

2546
02:00:49,760 --> 02:00:52,420
If I reload this, you'll see that both of them
如果我重新加载这个，你会看到这两个

2547
02:00:52,420 --> 02:00:55,750
are red or crimson, which isn't quite right.
都是红色或深红色，这不太对。

2548
02:00:55,750 --> 02:00:56,710
But that's OK.
但没关系。

2549
02:00:56,710 --> 02:00:59,480
I can actually distinguish these two somehow.
我实际上可以以某种方式区分这两个。

2550
02:00:59,480 --> 02:01:03,070
One way to do this would actually be to add one more HTML
一种方法是添加另一个 HTML

2551
02:01:03,070 --> 02:01:06,130
attribute that we haven't needed or used before, that of ID.
属性，我们以前没有需要或使用过，那就是 ID。

2552
02:01:06,130 --> 02:01:10,180
I can use almost any name for this ID that I want.
我可以使用任何我想使用的名称作为这个 ID。

2553
02:01:10,180 --> 02:01:12,640
And I'm going to say, quote, unquote, "Harvard"
我要说，引号，引号，“哈佛”

2554
02:01:12,640 --> 02:01:14,500
is the unique ID of this link.
是这个链接的唯一 ID。

2555
02:01:14,500 --> 02:01:18,580
And the unique ID of this link is quote, unquote, "Yale," for instance.
例如，这个链接的唯一 ID 是引号，引号，“耶鲁”。

2556
02:01:18,580 --> 02:01:22,510
And what I can now do up here is I'm going to get rid of this color red.
我现在可以在上面做的是，我要去掉这个红色。

2557
02:01:22,510 --> 02:01:25,750
Because I don't want all anchor tags to be red, but I do
因为我不希望所有锚点标签都是红色的，但我确实

2558
02:01:25,750 --> 02:01:27,950
want Harvard tags to be red.
希望哈佛标签是红色的。

2559
02:01:27,950 --> 02:01:33,610
So I can say #harvard and then color: red;, and then I can do #Yale
所以我可以说 #harvard 然后 color: red;，然后我可以做 #Yale

2560
02:01:33,610 --> 02:01:36,260
and I can say color: blue;, for instance.
我可以说 color: blue;，例如。

2561
02:01:36,260 --> 02:01:39,130
The hash symbol here represents an ID.
这里的井号代表一个 ID。

2562
02:01:39,130 --> 02:01:41,988
The dot we saw earlier represents a class.
我们之前看到的点代表一个类。

2563
02:01:41,988 --> 02:01:43,780
And when you don't have a symbol before it,
当它前面没有符号时，

2564
02:01:43,780 --> 02:01:46,430
it represents literally the name of the tag.
它代表标签的名称。

2565
02:01:46,430 --> 02:01:49,390
So when I mentioned these various selectors earlier,
所以，当我之前提到这些各种选择器时，

2566
02:01:49,390 --> 02:01:51,460
type selector is just the name of the tag.
类型选择器就是标签的名称。

2567
02:01:51,460 --> 02:01:53,290
Class selector is the dot.
类选择器是点。

2568
02:01:53,290 --> 02:01:54,580
ID selector is the hash.
ID 选择器是哈希。

2569
02:01:54,580 --> 02:01:57,830
And there's also ways to select attributes specifically.
还有方法可以专门选择属性。

2570
02:01:57,830 --> 02:02:02,080
So if I go back here in VS Code now, I've added a bunch of CSS here,
所以，现在如果我在 VS Code 中回到这里，我已经添加了一些 CSS 代码，

2571
02:02:02,080 --> 02:02:02,900
properties.
属性。

2572
02:02:02,900 --> 02:02:07,850
But if I reload now, one of these should be red and the other is in fact blue.
但是，如果我现在重新加载，其中一个应该是红色，另一个实际上是蓝色。

2573
02:02:07,850 --> 02:02:12,730
So in short, just by way of these style attributes and these style tags,
简而言之，仅仅通过这些样式属性和样式标签，

2574
02:02:12,730 --> 02:02:18,558
we have a lot more control over how we can actually stylize our pages.
我们对如何实际美化页面有了更多控制权。

2575
02:02:18,558 --> 02:02:20,350
And here's now where this gets interesting.
现在，这就是有趣的地方。

2576
02:02:20,350 --> 02:02:24,040
And you asked about Bootstrap, a popular framework or library.
你问了 Bootstrap，一个流行的框架或库。

2577
02:02:24,040 --> 02:02:27,850
There do, indeed, in the real world exist a lot of third party frameworks
实际上，在现实世界中，确实存在很多第三方框架

2578
02:02:27,850 --> 02:02:30,515
that a lot of smart people have just figured out what
很多聪明人已经弄清楚了

2579
02:02:30,515 --> 02:02:32,140
would make our web pages look prettier.
会让我们的网页看起来更漂亮。

2580
02:02:32,140 --> 02:02:34,307
And they've come up with design patterns for us that
他们为我们想出了设计模式，这些模式

2581
02:02:34,307 --> 02:02:37,120
make it way easier and way faster to make pretty looking forms,
使制作漂亮的表单变得容易得多，速度也快得多，

2582
02:02:37,120 --> 02:02:38,710
pretty looking tables, and the like.
漂亮的表格等等。

2583
02:02:38,710 --> 02:02:40,918
And one of these products is indeed called Bootstrap.
其中一个产品实际上叫做 Bootstrap。

2584
02:02:40,918 --> 02:02:41,930
It's freely available.
它是免费提供的。

2585
02:02:41,930 --> 02:02:45,100
And you can see its own documentation at getbootstrap.com.
你可以在 getbootstrap.com 上查看它自己的文档。

2586
02:02:45,100 --> 02:02:49,090
And what I've done in advance is I've actually prepared some of our past data
我已经提前准备了一些过去的数据

2587
02:02:49,090 --> 02:02:52,180
to actually be formatted a little more prettily.
以便更漂亮地格式化。

2588
02:02:52,180 --> 02:02:54,280
So let me actually go back to VS Code here.
所以，让我回到这里的 VS Code。

2589
02:02:54,280 --> 02:02:56,190
And I'm going to open up a terminal.
我将打开一个终端。

2590
02:02:56,190 --> 02:03:01,060
And I'm going to cheat and copy a file I brought with me called phonebook0.html.
我将作弊，复制一个我随身携带的文件，名为 phonebook0.html。

2591
02:03:01,060 --> 02:03:04,300
And if I open this file, you'll see that it looks like this.
如果我打开此文件，你会看到它看起来像这样。

2592
02:03:04,300 --> 02:03:09,627
It's a big table that has two columns now called name and number.
这是一个大表格，现在有两个列，名为 name 和 number。

2593
02:03:09,627 --> 02:03:12,210
And I've added some other tags which are not that interesting,
我还添加了一些其他标签，这些标签并不那么有趣，

2594
02:03:12,210 --> 02:03:13,620
but I didn't need them before.
但我之前不需要它们。

2595
02:03:13,620 --> 02:03:16,880
But in this table, there's a table head and there's a table body.
但是在这个表格中，有一个表头和一个表体。

2596
02:03:16,880 --> 02:03:18,630
So there's, like, a special row at the top
所以，就像，顶部有一个特殊的行

2597
02:03:18,630 --> 02:03:21,630
and then all of the rest of the data in a CSV or a spreadsheet.
然后是 CSV 或电子表格中的所有其他数据。

2598
02:03:21,630 --> 02:03:26,340
And you can probably infer from this table row, from this table row,
你可能可以从这个表格行，从这个表格行中推断出，

2599
02:03:26,340 --> 02:03:29,380
from this table row, it kind of looks like, indeed, a phone book.
从这个表格行来看，它确实像一本电话簿。

2600
02:03:29,380 --> 02:03:33,450
So if I go back to my browser here, go into my directory listing
所以，如果我回到这里的浏览器，进入我的目录列表

2601
02:03:33,450 --> 02:03:36,930
and open up phonebook0.html, it's not the prettiest thing.
并打开 phonebook0.html，它不是最漂亮的东西。

2602
02:03:36,930 --> 02:03:38,310
But it is tabular.
但它是表格形式的。

2603
02:03:38,310 --> 02:03:42,210
And notice that the browser has automatically put in bold the name,
请注意，浏览器已自动将名称加粗，

2604
02:03:42,210 --> 02:03:44,230
and the number, and everything's in columns.
以及数字，所有内容都按列排列。

2605
02:03:44,230 --> 02:03:45,510
But it's not very pretty.
但它并不漂亮。

2606
02:03:45,510 --> 02:03:47,530
But what if I do this?
但如果我这样做呢？

2607
02:03:47,530 --> 02:03:50,340
Let me actually go into VS Code here.
让我进入这里的 VS Code。

2608
02:03:50,340 --> 02:03:55,980
And let me borrow another file I came with called phonebook1.html.
让我借用另一个我随身携带的文件，名为 phonebook1.html。

2609
02:03:55,980 --> 02:04:01,500
And that file is going to look a little bit
该文件看起来会有点

2610
02:04:01,500 --> 02:04:06,820
different than the [INAUDIBLE] in that I've included a link tag in the header.
与 [不可识别] 不同，因为我在标题中包含了一个链接标签。

2611
02:04:06,820 --> 02:04:09,510
Now I'm not linking to my own CSS.
现在我不链接到我自己的 CSS。

2612
02:04:09,510 --> 02:04:11,382
I actually went to getbootstrap.com.
我实际上去了 getbootstrap.com。

2613
02:04:11,382 --> 02:04:12,840
I read some of their documentation.
我读了他们的一些文档。

2614
02:04:12,840 --> 02:04:18,400
And I'm linking now to Bootstrap's CSS file, which is actually really,
我现在链接到 Bootstrap 的 CSS 文件，它实际上非常

2615
02:04:18,400 --> 02:04:18,990
really big.
非常大。

2616
02:04:18,990 --> 02:04:23,640
And in fact, if I open this file here, let me actually open this up in a tab,
事实上，如果我打开此文件，让我在一个标签页中打开它，

2617
02:04:23,640 --> 02:04:27,540
and visit this URL here, the folks at Bootstrap
并访问这里的 URL，Bootstrap 的人

2618
02:04:27,540 --> 02:04:30,930
have written a crazy amount of properties
写了大量的属性

2619
02:04:30,930 --> 02:04:34,350
by defining their own classes and other such keywords.
通过定义他们自己的类和其他这样的关键字。

2620
02:04:34,350 --> 02:04:36,720
And you and I and really anyone on the internet
你和我和互联网上的任何人

2621
02:04:36,720 --> 02:04:38,670
is welcome to use all of this CSS.
都可以使用所有这些 CSS。

2622
02:04:38,670 --> 02:04:41,100
And the documentation makes clear what all of this does.
文档清楚地说明了所有这些的作用。

2623
02:04:41,100 --> 02:04:44,370
A normal person would not need to read through any of this in that way.
正常人不需要以这种方式阅读所有这些。

2624
02:04:44,370 --> 02:04:48,180
But I've included this file called bootstrap.min.css.
但是，我包含了这个名为 bootstrap.min.css 的文件。

2625
02:04:48,180 --> 02:04:50,670
And min just means they got rid of most of the whitespace.
min 只是意味着他们去掉了大部分空白。

2626
02:04:50,670 --> 02:04:55,770
And if I now go back to my other tab and go back to phonebook1.html,
如果我现在回到我的另一个标签页，并回到 phonebook1.html，

2627
02:04:55,770 --> 02:04:57,420
it's the exact same data.
数据完全一样。

2628
02:04:57,420 --> 02:05:01,155
But thanks to that link tag, it now looks much prettier.
但由于那个链接标签，它现在看起来漂亮多了。

2629
02:05:01,155 --> 02:05:04,030
And I didn't have to figure out how to move things over to the right.
我不必弄清楚如何将东西移到右边。

2630
02:05:04,030 --> 02:05:06,405
I didn't have to figure out how to draw these gray lines.
我不必弄清楚如何绘制这些灰色线条。

2631
02:05:06,405 --> 02:05:09,880
I didn't have to figure out how to format things in precisely this way.
我不必弄清楚如何以这种精确的方式格式化事物。

2632
02:05:09,880 --> 02:05:13,070
Bootstrap, wonderfully, did most of that for me.
Bootstrap 很好地为我做了大部分工作。

2633
02:05:13,070 --> 02:05:14,945
Now this is still a very static table.
现在这仍然是一个非常静态的表格。

2634
02:05:14,945 --> 02:05:15,820
It's not interactive.
它不是交互式的。

2635
02:05:15,820 --> 02:05:18,200
I can't sort by names or columns or the like.
我不能按名称或列进行排序等等。

2636
02:05:18,200 --> 02:05:22,280
So let's revisit one other program that we made in advance together.
所以，让我们回顾一下我们之前一起编写的另一个程序。

2637
02:05:22,280 --> 02:05:26,330
And this one is actually a new version of the search program.
而这实际上是一个新版本的搜索程序。

2638
02:05:26,330 --> 02:05:34,120
So if I open up this program, search2.html, and close my terminal
所以，如果我打开这个程序，search2.html，并关闭我的终端

2639
02:05:34,120 --> 02:05:38,470
window, you'll see that I've borrowed some of the same content before.
窗口，你会看到我之前借用了一些相同的内容。

2640
02:05:38,470 --> 02:05:40,120
Let me go to the essence of it.
让我看看它的本质。

2641
02:05:40,120 --> 02:05:44,020
Here is the form and the action that I used earlier.
这是我之前使用的表单和操作。

2642
02:05:44,020 --> 02:05:46,157
But I've added a whole bunch of classes to it.
但我给它添加了一堆类。

2643
02:05:46,157 --> 02:05:48,490
And this is the essence of these third party frameworks.
这就是这些第三方框架的本质。

2644
02:05:48,490 --> 02:05:52,330
They generally create a whole bunch of classes that you can use and reuse.
它们通常会创建一堆你可以使用和重用的类。

2645
02:05:52,330 --> 02:05:54,560
But they figured out all of the relevant properties.
但是他们弄清楚了所有相关的属性。

2646
02:05:54,560 --> 02:05:56,890
So for instance, for my Google search button,
例如，对于我的 Google 搜索按钮，

2647
02:05:56,890 --> 02:06:00,490
I've given it two classes, a class of button, BTN for short,
我给了它两个类，一个是 button 类，简称为 BTN，

2648
02:06:00,490 --> 02:06:01,810
and button-light.
另一个是 button-light。

2649
02:06:01,810 --> 02:06:04,660
These are not standard HTML or CSS things.
这些不是标准的 HTML 或 CSS 东西。

2650
02:06:04,660 --> 02:06:08,650
These are Bootstrap names that they invented, just like I invented center
这些是 Bootstrap 创造的名字，就像我创造 center 一样

2651
02:06:08,650 --> 02:06:10,690
and large and medium and small.
还有 large、medium 和 small。

2652
02:06:10,690 --> 02:06:17,110
I've also specified that there are a whole bunch of other classes associated
我还指定了，还有很多其他类与之相关联

2653
02:06:17,110 --> 02:06:19,490
with pretty much every tag in this file.
与这个文件中的几乎每个标签相关联。

2654
02:06:19,490 --> 02:06:23,920
So if I zoom out here and go back to my directory index
所以，如果我在这里缩小，并回到我的目录索引

2655
02:06:23,920 --> 02:06:26,350
and open this, the first version of search.
并打开它，第一个版本的 search。

2656
02:06:26,350 --> 02:06:30,400
It was super, super simple because it only contained the HTML form.
它超级简单，因为它只包含 HTML 表单。

2657
02:06:30,400 --> 02:06:33,310
Let me go ahead and open up search2.html.
让我打开 search2.html。

2658
02:06:33,310 --> 02:06:36,040
And the essence of the form is exactly the same.
表单的本质完全一样。

2659
02:06:36,040 --> 02:06:38,300
Therein is the query at the bottom of the page.
页面底部就是查询。

2660
02:06:38,300 --> 02:06:41,800
But thanks to CSS, I now have a button that looks a little more interesting.
但由于 CSS，我现在有一个看起来更有趣的按钮。

2661
02:06:41,800 --> 02:06:42,925
It's gray and it's rounded.
它是灰色的，而且是圆形的。

2662
02:06:42,925 --> 02:06:46,092
I also have an I'm feeling lucky button, which will send a different request
我还有一个“我感觉很幸运”按钮，它会发送不同的请求

2663
02:06:46,092 --> 02:06:48,380
and show me by default the very first search result.
并默认显示给我第一个搜索结果。

2664
02:06:48,380 --> 02:06:51,400
So in short, the file that I just opened, even though I made it
简而言之，我刚刚打开的文件，即使是我事先创建的

2665
02:06:51,400 --> 02:06:54,100
in advance, it's only 55 lines.
它也只有 55 行。

2666
02:06:54,100 --> 02:06:55,502
And most of that is whitespace.
而且大部分是空白。

2667
02:06:55,502 --> 02:06:58,210
And it did take me a little bit of time to figure out the classes
而且我确实花了一点时间来弄清楚这些类

2668
02:06:58,210 --> 02:06:59,530
and read the documentation.
并阅读了文档。

2669
02:06:59,530 --> 02:07:03,010
But most of the work is done by this third party framework
但是大部分工作都是由这个第三方框架完成的

2670
02:07:03,010 --> 02:07:09,170
or library of CSS classes and properties that someone else made for me.
或者说，是其他人为我创建的 CSS 类和属性库。

2671
02:07:09,170 --> 02:07:13,010
And so as CSS goes, that's kind of it for the basics.
所以关于 CSS 的基础知识就是这样了。

2672
02:07:13,010 --> 02:07:17,110
It's just a bunch of more key value pairs in the form of these properties,
它只是一堆以这些属性形式出现的键值对，

2673
02:07:17,110 --> 02:07:20,980
whereby you can select elements of a web page by way of their ID,
通过这些键值对，你可以根据网页元素的 ID，

2674
02:07:20,980 --> 02:07:24,493
or classes, or even the names thereof.
或者类，甚至它们的名称来选择它们。

2675
02:07:24,493 --> 02:07:26,410
And here's something that's kind of neat, too.
这里还有一件很酷的事情。

2676
02:07:26,410 --> 02:07:29,270
Let me go to harvard.edu again.
让我再次访问 harvard.edu。

2677
02:07:29,270 --> 02:07:32,650
Let me go ahead and open up the inspector, as before,
像之前一样，让我打开检查器，

2678
02:07:32,650 --> 02:07:35,890
and draw your attention to one final feature of these developer tools
并提醒你注意这些开发者工具的最后一个功能

2679
02:07:35,890 --> 02:07:37,210
under the Elements tab.
在 Elements 选项卡中。

2680
02:07:37,210 --> 02:07:39,640
So under the Elements tab here is all of the HTML
所以在这里的 Elements 选项卡下是所有组成

2681
02:07:39,640 --> 02:07:41,930
that composes harvard.edu as of today.
harvard.edu 的 HTML，截至今天。

2682
02:07:41,930 --> 02:07:44,590
But let me go ahead and expand this right-hand portion.
但是让我展开一下右侧部分。

2683
02:07:44,590 --> 02:07:47,290
It turns out you can also see all of the CSS
事实证明你也可以看到所有正在应用于

2684
02:07:47,290 --> 02:07:50,000
that is being applied to the website as of now.
网站的 CSS，截至目前。

2685
02:07:50,000 --> 02:07:56,227
So for instance, if I go to a page here-- let's go to Give Now.
例如，如果我访问这里的页面，让我们访问 Give Now。

2686
02:07:56,227 --> 02:07:56,810
Might as well.
不妨。

2687
02:07:56,810 --> 02:07:58,180
Let's give them a plug here.
让我们在这里给他们一个宣传。

2688
02:07:58,180 --> 02:08:02,320
Under Give Now, let's see if this is going to go well.
在 Give Now 下，让我们看看它是否会顺利进行。

2689
02:08:02,320 --> 02:08:04,900
Let's go ahead and highlight this part.
让我们来突出显示这部分。

2690
02:08:04,900 --> 02:08:07,870
Suppose they really want to draw attention to give online.
假设他们真的想让人注意到在线捐赠。

2691
02:08:07,870 --> 02:08:09,430
And I right click on that.
我右键单击它。

2692
02:08:09,430 --> 02:08:11,110
I choose inspect, as before.
我像之前一样选择检查。

2693
02:08:11,110 --> 02:08:13,840
And here now, notice that the developer tools
现在请注意，开发者工具

2694
02:08:13,840 --> 02:08:17,110
jumped right to the HTML tag that represents
直接跳到了代表

2695
02:08:17,110 --> 02:08:18,610
that particular line of text.
那段特定文字的 HTML 标签。

2696
02:08:18,610 --> 02:08:20,620
If I zoom in, it turns out it's an H1 tag.
如果我放大，它是一个 H1 标签。

2697
02:08:20,620 --> 02:08:21,730
It's big and bold.
它很大而且是粗体。

2698
02:08:21,730 --> 02:08:23,950
Suppose, though, I want to change its color.
假设我想改变它的颜色。

2699
02:08:23,950 --> 02:08:27,520
Well, if I go over on the right here, you can see all of the CSS properties
好吧，如果我移到右侧这里，你可以看到所有当前应用于

2700
02:08:27,520 --> 02:08:30,700
that currently apply to that specific tag.
该特定标签的 CSS 属性。

2701
02:08:30,700 --> 02:08:34,390
And most of these we haven't even talked about line, height, margin bottom,
而其中大多数我们还没有讨论过，比如 line、height、margin-bottom、

2702
02:08:34,390 --> 02:08:38,600
font, weight, margin top, and a bunch of other fairly self-explanatory things.
font、weight、margin-top，以及一堆其他相当不言自明的属性。

2703
02:08:38,600 --> 02:08:43,318
But if I want to experiment, I can go up here in top and say color: red.
但是如果我想尝试一下，我可以在这里的顶部输入 color: red。

2704
02:08:43,318 --> 02:08:46,360
And I can literally change that on the web page live to see how it looks.
我实际上可以实时更改网页上的内容，看看它是什么样子。

2705
02:08:46,360 --> 02:08:47,568
It's not changing the server.
它并没有改变服务器。

2706
02:08:47,568 --> 02:08:48,700
It's just changing my copy.
它只是改变了我的副本。

2707
02:08:48,700 --> 02:08:50,920
But I can at least make that change.
但我至少可以进行这个更改。

2708
02:08:50,920 --> 02:08:53,530
You can do even fancier things where, if you click computed,
你可以做更多有趣的事情，例如，如果你点击 computed，

2709
02:08:53,530 --> 02:08:55,900
you can scroll down and figure out, OK, wait a minute.
你可以向下滚动，然后弄明白，等等。

2710
02:08:55,900 --> 02:08:57,250
It's white right now.
现在它是白色的。

2711
02:08:57,250 --> 02:09:01,060
That's the same thing as this, rgb(255, 255, 255).
这和 rgb(255, 255, 255) 一样。

2712
02:09:01,060 --> 02:09:04,790
That's the same thing as ffffff from weeks prior.
这和几周前使用的 ffffff 一样。

2713
02:09:04,790 --> 02:09:10,030
But I can click this little arrow and it will even show me where in Harvard CSS
但我可以点击这个小箭头，它甚至会显示给我在 Harvard CSS 中

2714
02:09:10,030 --> 02:09:12,210
that white color comes from.
白色来自哪里。

2715
02:09:12,210 --> 02:09:14,710
So if it's actually my site I can actually figure things out
所以如果它实际上是我的网站，我可以实际弄清楚

2716
02:09:14,710 --> 02:09:16,070
and make changes as well.
并进行更改。

2717
02:09:16,070 --> 02:09:20,170
So in short, if you find that you like the world of web development,
简而言之，如果你发现你喜欢 web 开发的世界，

2718
02:09:20,170 --> 02:09:22,540
in your own browser that you've had all this time,
在你一直使用的浏览器中，

2719
02:09:22,540 --> 02:09:24,852
there's so much darn functionality built in.
内置了如此多的功能。

2720
02:09:24,852 --> 02:09:27,310
And it's just up to you now to start experimenting with it,
现在就取决于你去尝试它，

2721
02:09:27,310 --> 02:09:30,670
exploring what you can actually do with it.
探索你实际上可以用它做什么。

2722
02:09:30,670 --> 02:09:36,640
But let us use our final moments today to introduce you to a final language
但让我们利用今天最后的时刻向你介绍一门最后的语言

2723
02:09:36,640 --> 02:09:40,540
called JavaScript, which is itself a proper programming language.
叫做 JavaScript，它本身是一门真正的编程语言。

2724
02:09:40,540 --> 02:09:42,730
And you're about to see a bunch of syntax that's
你将看到一堆语法，这些语法

2725
02:09:42,730 --> 02:09:45,190
kind of new, but kind of familiar.
有点新，但又有点熟悉。

2726
02:09:45,190 --> 02:09:47,830
And the goal here is not to teach you JavaScript per se,
这里我们的目标不是教你 JavaScript 本身，

2727
02:09:47,830 --> 02:09:50,650
but to begin to lay the foundation for you yourselves
而是为你自己开始打下学习一门新语言的基础。

2728
02:09:50,650 --> 02:09:52,930
learning a new language on your own.
自己学习一门新语言。

2729
02:09:52,930 --> 02:09:54,945
By the end of CS50, you will not have learned
在 CS50 课程结束时，你不会学到

2730
02:09:54,945 --> 02:09:56,320
all that is out there, certainly.
所有内容，当然。

2731
02:09:56,320 --> 02:09:58,640
And the goal here ultimately is to help you
这里的最终目标是帮助你

2732
02:09:58,640 --> 02:10:01,400
have a sense with a support structure in place, be it the humans
拥有一个有支撑结构的意识，无论是人类

2733
02:10:01,400 --> 02:10:05,490
or the [INAUDIBLE] involved that you can ask questions of along the way.
还是你一路上可以询问的 [INAUDIBLE]。

2734
02:10:05,490 --> 02:10:09,200
Let's go ahead and do this.
让我们继续做这件事。

2735
02:10:09,200 --> 02:10:12,230
In my directory index, I'm going to go into the source 8 directory
在我的目录索引中，我将进入 source 8 目录

2736
02:10:12,230 --> 02:10:15,270
where I've got all of today's examples ready to go.
这里我准备了今天的所有示例。

2737
02:10:15,270 --> 02:10:19,640
I'm going to go into VS Code's Explorer, where I can see all of those files.
我将进入 VS Code 的资源管理器，在这里我可以看到所有这些文件。

2738
02:10:19,640 --> 02:10:22,670
And in my source 8 directory, let me go ahead and open up
在我的 source 8 目录中，让我打开

2739
02:10:22,670 --> 02:10:25,220
hello version 1 dot HTML.
hello version 1.html。

2740
02:10:25,220 --> 02:10:29,390
Recall that the last time we played with hello.html, it was literally just HTML.
回想一下，我们上次使用 hello.html 时，它实际上只是 HTML。

2741
02:10:29,390 --> 02:10:32,300
But here's an example of a language called JavaScript.
但这里是一个叫做 JavaScript 的语言的例子。

2742
02:10:32,300 --> 02:10:35,340
And at this page, it's going to work as follows.
在这个页面上，它的工作原理如下。

2743
02:10:35,340 --> 02:10:39,080
If I open hello 1 dot html in my page, I have a very simple form.
如果我在页面中打开 hello 1.html，我有一个非常简单的表单。

2744
02:10:39,080 --> 02:10:40,040
Let me zoom in.
让我放大。

2745
02:10:40,040 --> 02:10:42,890
Let me type in my name, for instance, D-A-V-I-D, and hit Enter.
例如，让我输入我的名字，D-A-V-I-D，然后按回车键。

2746
02:10:42,890 --> 02:10:43,520
And voila!
然后，瞧！

2747
02:10:43,520 --> 02:10:45,290
This is not a very good user interface.
这不是一个很好的用户界面。

2748
02:10:45,290 --> 02:10:49,220
But you can see that this web page says, quote, unquote, hello, David.
但你可以看到这个网页上写着，“你好，David”。

2749
02:10:49,220 --> 02:10:51,920
So how did I get this form to trigger a pop up?
那么我怎样才能让这个表单触发弹出窗口呢？

2750
02:10:51,920 --> 02:10:55,730
Well, if I go into VS Code here, you'll see a web form.
好吧，如果我进入 VS Code，你会看到一个网页表单。

2751
02:10:55,730 --> 02:11:00,630
But I've added another attribute, namely an onsubmit attribute.
但我添加了另一个属性，即 onsubmit 属性。

2752
02:11:00,630 --> 02:11:05,390
And in the world of HTML, onsubmit allows
在 HTML 世界中，onsubmit 允许

2753
02:11:05,390 --> 02:11:08,570
you to write a tiny bit of JavaScript code inside of the quotes
你在引号内编写一小段 JavaScript 代码

2754
02:11:08,570 --> 02:11:11,880
that will be executed whenever the user submits this form.
这段代码将在用户提交表单时执行。

2755
02:11:11,880 --> 02:11:14,990
So what this is saying is call a function called greet
所以这句话的意思是调用一个名为 greet 的函数

2756
02:11:14,990 --> 02:11:16,470
and then return false.
然后返回 false。

2757
02:11:16,470 --> 02:11:19,130
And what return false means is that don't actually
而返回 false 的意思是不要实际

2758
02:11:19,130 --> 02:11:22,490
submit this form to the server, like keep the user on this page
将此表单提交到服务器，就像让用户留在当前页面

2759
02:11:22,490 --> 02:11:23,990
so we can just see a pop up.
这样我们就可以看到一个弹出窗口。

2760
02:11:23,990 --> 02:11:25,790
So what is this greet function?
那么这个 greet 函数是什么呢？

2761
02:11:25,790 --> 02:11:28,070
Well, it turns out, in the world of HTML,
事实证明，在 HTML 世界中，

2762
02:11:28,070 --> 02:11:31,730
there's not only a style tag you can put in your head of your page,
你不仅可以在页面头部添加一个 style 标签，

2763
02:11:31,730 --> 02:11:35,720
but also a script tag, inside of which is JavaScript code.
还可以添加一个 script 标签，其中包含 JavaScript 代码。

2764
02:11:35,720 --> 02:11:38,570
The syntax is a little different from Python and from C.
语法与 Python 和 C 略有不同。

2765
02:11:38,570 --> 02:11:40,310
But it's maybe a little closer to Python.
但可能与 Python 更接近一些。

2766
02:11:40,310 --> 02:11:42,830
Instead of def last week or two weeks ago,
与之前几周使用的 def 不同，

2767
02:11:42,830 --> 02:11:46,920
we'll now use function, literally, to begin the definition of a function.
我们现在使用 function，字面意思，来开始定义函数。

2768
02:11:46,920 --> 02:11:49,280
And if I want to call this function greet, so be it.
如果我想调用这个名为 greet 的函数，那就这样。

2769
02:11:49,280 --> 02:11:52,080
JavaScript comes with a function called alert.
JavaScript 带有一个名为 alert 的函数。

2770
02:11:52,080 --> 02:11:56,870
And so if I literally do alert, hello, quote, unquote, and then
所以如果我直接写 alert，hello，引号，引号，然后

2771
02:11:56,870 --> 02:12:00,470
plus something else, just like in Python, that's going to concatenate,
再加上其他东西，就像 Python 一样，它会连接

2772
02:12:00,470 --> 02:12:02,690
or join the two things left and right.
或将左右两边的两个东西拼接在一起。

2773
02:12:02,690 --> 02:12:05,750
But here's some functionality that comes with your browser, too.
但你的浏览器也提供了一些功能。

2774
02:12:05,750 --> 02:12:09,710
It turns out, per the notion of this whole page being a document,
事实证明，根据整个页面是文档的理念，

2775
02:12:09,710 --> 02:12:13,100
you can call document.queryselector, which
你可以调用 document.queryselector，它

2776
02:12:13,100 --> 02:12:16,520
allows you to select any of the tags or elements in the page,
允许你在页面中选择任何标签或元素，

2777
02:12:16,520 --> 02:12:20,960
specifically you can select the tag that has an ID of name.
具体来说，你可以选择 ID 为 name 的标签。

2778
02:12:20,960 --> 02:12:23,150
So CSS and JavaScript use the same syntax.
所以 CSS 和 JavaScript 使用相同的语法。

2779
02:12:23,150 --> 02:12:27,470
If you see hash something, that is referring to the ID of a tag
如果你看到井号加一些东西，那就是指你创建的标签的 ID

2780
02:12:27,470 --> 02:12:28,770
that you created.
。

2781
02:12:28,770 --> 02:12:33,980
If you then, after selecting the element of HTML with that unique ID,
如果你接着，在选择具有这个唯一 ID 的 HTML 元素后，

2782
02:12:33,980 --> 02:12:36,330
want its value, you just do dot value.
想要获取它的值，你只需使用点 value。

2783
02:12:36,330 --> 02:12:40,040
So we saw dots a lot in Python and in C to go inside of structures.
我们在 Python 和 C 中经常看到点，用来访问结构内部。

2784
02:12:40,040 --> 02:12:43,140
You can go inside of that text box and get its value.
你可以进入文本框并获取它的值。

2785
02:12:43,140 --> 02:12:46,130
So notice here if I scroll down, not only
所以注意，如果我向下滚动，不仅

2786
02:12:46,130 --> 02:12:49,770
am I using autocomplete and autofocus and so forth,
我使用了自动完成和自动聚焦等功能，

2787
02:12:49,770 --> 02:12:54,590
I also, for convenience, gave my input box a unique ID of name.
我还为了方便，给我的输入框添加了一个唯一的 ID，名为 name。

2788
02:12:54,590 --> 02:12:57,380
So what's effectively happening is, when I click Submit,
所以实际上发生的是，当我点击 Submit 时，

2789
02:12:57,380 --> 02:13:02,900
my JavaScript's greet function is called, it queries for that text box,
我的 JavaScript 的 greet 函数被调用，它会查询那个文本框，

2790
02:13:02,900 --> 02:13:04,850
goes inside of it and gets its value.
进入文本框并获取它的值。

2791
02:13:04,850 --> 02:13:07,610
And then, using this plus operator, just like in Python,
然后，使用这个加号运算符，就像 Python 一样，

2792
02:13:07,610 --> 02:13:10,220
concatenates the two together and passes them
将两者连接起来并传递

2793
02:13:10,220 --> 02:13:15,530
to this alert function for an underwhelming, but functional alert
给这个 alert 函数，它会弹出乏善可陈，但功能完整的警告

2794
02:13:15,530 --> 02:13:17,070
in the window.
窗口。

2795
02:13:17,070 --> 02:13:17,570
All right.
好的。

2796
02:13:17,570 --> 02:13:20,960
How else can we do this?
我们还能怎么做呢？

2797
02:13:20,960 --> 02:13:25,768
This is generally frowned upon to use onsubmit in this way.
这种使用 onsubmit 的方式通常不被推荐。

2798
02:13:25,768 --> 02:13:27,560
Generally speaking, the world does not like
一般来说，人们不喜欢

2799
02:13:27,560 --> 02:13:32,280
mixing attributes, rather JavaScript code with HTML so closely as this.
将属性，更确切地说 JavaScript 代码与 HTML 代码像这样紧密地混合在一起。

2800
02:13:32,280 --> 02:13:34,460
So let me show you another variant of this,
所以让我向你展示另一种变体，

2801
02:13:34,460 --> 02:13:36,627
even though it's going to look a little bit cryptic.
尽管它看起来有点神秘。

2802
02:13:36,627 --> 02:13:41,840
But at least it will be representative of how else you can solve this problem.
但至少它将代表你如何解决这个问题的其他方法。

2803
02:13:41,840 --> 02:13:45,380
In hello2.html, we have this code.
在 hello2.html 中，我们有这段代码。

2804
02:13:45,380 --> 02:13:48,870
Notice that at the top of my body now is the form.
请注意，现在我的 body 的顶部是表单。

2805
02:13:48,870 --> 02:13:51,950
But at the bottom of the body is this script tag.
但是，body 的底部是这个 script 标签。

2806
02:13:51,950 --> 02:13:54,560
So I've just moved it from head to the body of the page.
所以我只是把它从 head 移动到了 body 的底部。

2807
02:13:54,560 --> 02:13:56,870
Because I'm going to then instead do this.
因为我接下来要这样做。

2808
02:13:56,870 --> 02:14:01,490
If I want to tell the browser to listen for submissions of that form,
如果我想告诉浏览器监听那个表单的提交事件，

2809
02:14:01,490 --> 02:14:04,790
I can use this fairly cryptic syntax, but you'll see it again and again
我可以使用这种相当神秘的语法，但你将会反复看到它

2810
02:14:04,790 --> 02:14:06,710
over time as follows.
随着时间的推移，如下所示。

2811
02:14:06,710 --> 02:14:09,230
Go into the document.
进入文档。

2812
02:14:09,230 --> 02:14:12,470
Select with this query the form tag.
使用这个查询选择 form 标签。

2813
02:14:12,470 --> 02:14:15,650
And then call this special function that comes with the browser called
然后调用浏览器自带的这个特殊函数，称为

2814
02:14:15,650 --> 02:14:16,830
addEventListener.
addEventListener。

2815
02:14:16,830 --> 02:14:21,350
So tell the browser to listen for a certain type of event for this form.
所以告诉浏览器监听这个表单的特定事件类型。

2816
02:14:21,350 --> 02:14:23,030
What event do you want to listen for?
你想监听什么事件？

2817
02:14:23,030 --> 02:14:26,150
The submission of the form, so quote, unquote submit.
表单的提交，所以引号，引号 submit。

2818
02:14:26,150 --> 02:14:29,870
What do you want to have happen whenever that event is heard?
当听到那个事件时，你想让什么发生？

2819
02:14:29,870 --> 02:14:32,730
You want to call this function here.
你想调用这里定义的这个函数。

2820
02:14:32,730 --> 02:14:35,240
So this is what's known as an anonymous function.
所以这就是所谓的匿名函数。

2821
02:14:35,240 --> 02:14:38,300
The syntax is a little weird, but I've not given the function a name.
语法有点奇怪，但我没有给函数起名字。

2822
02:14:38,300 --> 02:14:40,820
It apparently takes an argument as input called event,
它显然接收一个名为 event 的参数作为输入，

2823
02:14:40,820 --> 02:14:43,160
but that's per the documentation.
但这属于文档规范。

2824
02:14:43,160 --> 02:14:45,680
And what these two lines of code do essentially
这两行代码本质上做的就是

2825
02:14:45,680 --> 02:14:47,420
is they still call the alert function.
仍然调用 alert 函数。

2826
02:14:47,420 --> 02:14:49,760
They still output hello comma space.
仍然输出 hello 逗号 空格。

2827
02:14:49,760 --> 02:14:55,670
And they still query the HTML for the ID name
并且仍然查询 HTML 的 ID name

2828
02:14:55,670 --> 02:14:57,470
to get the value that the humans typed in.
来获取用户输入的值。

2829
02:14:57,470 --> 02:15:00,265
And then just for good measure, we prevent the default behavior
然后为了保险起见，我们阻止了默认行为

2830
02:15:00,265 --> 02:15:03,140
for any form with this line of code, just so that it doesn't actually
对于使用这段代码的任何表单，以确保它不会实际

2831
02:15:03,140 --> 02:15:04,550
submit anything to the server.
提交任何内容到服务器。

2832
02:15:04,550 --> 02:15:07,070
It keeps the user actually here.
它实际上让用户停留在当前页面。

2833
02:15:07,070 --> 02:15:10,310
This will be a little scarier, too, but just so you've seen it.
这也会有点吓人，但这只是为了让你看到它。

2834
02:15:10,310 --> 02:15:14,750
In hello3.html, this is actually a more common technique.
在 hello3.html 中，这实际上是一种更常见的技术。

2835
02:15:14,750 --> 02:15:19,378
Whereby you can listen for one other special event.
它可以监听另一个特殊事件。

2836
02:15:19,378 --> 02:15:22,170
It turns out when you load a web page, lots of stuff has to happen.
事实证明，当你加载网页时，很多事情必须发生。

2837
02:15:22,170 --> 02:15:23,690
It's got to be read top to bottom, left to right.
它必须从上到下，从左到右读取。

2838
02:15:23,690 --> 02:15:27,110
It's got to download other files, the images, the sounds, the videos, and so
它必须下载其他文件，图片、声音、视频等等

2839
02:15:27,110 --> 02:15:27,660
forth.
。

2840
02:15:27,660 --> 02:15:32,510
If you want to wait until the whole page has been read into memory essentially,
如果你想等到整个页面被读入内存，

2841
02:15:32,510 --> 02:15:36,080
you can use this event as well, DOMContentLoaded.
你也可以使用这个事件，DOMContentLoaded。

2842
02:15:36,080 --> 02:15:39,660
That tree we drew earlier is what's called a DOM, document object model,
我们之前绘制的树被称为 DOM，文档对象模型，

2843
02:15:39,660 --> 02:15:42,830
which is just a fancy way of saying a tree in the computer's memory
这只是计算机内存中树的一种花哨的说法。

2844
02:15:42,830 --> 02:15:44,520
that represents the web page.
它代表着网页。

2845
02:15:44,520 --> 02:15:46,790
So this is the syntax that you'll find that people
所以，这是你将会发现人们

2846
02:15:46,790 --> 02:15:52,010
use to tell the browser once the whole DOM, the whole tree has been loaded,
用来告诉浏览器，一旦整个 DOM，整棵树加载完毕，

2847
02:15:52,010 --> 02:15:54,950
then go ahead and execute this code.
就继续执行这段代码。

2848
02:15:54,950 --> 02:16:00,650
And it means that no matter what, the whole web page will be ready in order
这意味着，无论如何，整个网页都会准备好，以

2849
02:16:00,650 --> 02:16:02,750
before this code is actually executed.
在这段代码实际执行之前。

2850
02:16:02,750 --> 02:16:04,730
And this ensures, for instance, that even
这确保了，例如，即使

2851
02:16:04,730 --> 02:16:07,760
though this script is at the top of my file
尽管这个脚本在我的文件顶部

2852
02:16:07,760 --> 02:16:11,420
and my form is at the bottom of my file, none of this code
而我的表单在我的文件底部，所有这些代码

2853
02:16:11,420 --> 02:16:15,830
will get executed until the whole DOM is ready, all of the HTML
都不会执行，直到整个 DOM 准备好，所有的 HTML

2854
02:16:15,830 --> 02:16:19,940
has been read top to bottom, left to right.
都已从上到下，从左到右读取完毕。

2855
02:16:19,940 --> 02:16:20,510
All right.
好的。

2856
02:16:20,510 --> 02:16:23,052
Well, let's go ahead and make this a little more interesting,
好吧，让我们继续让这个更有意思一点，

2857
02:16:23,052 --> 02:16:25,400
just to show you some of the capabilities of JavaScript
只是为了向你展示一些 JavaScript 的功能

2858
02:16:25,400 --> 02:16:26,760
within a browser nowadays.
在如今的浏览器中。

2859
02:16:26,760 --> 02:16:31,040
So if I open up maybe this one here, background.html.
所以，如果我打开这里，background.html。

2860
02:16:31,040 --> 02:16:33,052
And let me open it up in the browser.
让我在浏览器中打开它。

2861
02:16:33,052 --> 02:16:35,719
And this is going to be super simple in terms of user interface.
从用户界面来说，这将非常简单。

2862
02:16:35,719 --> 02:16:39,469
But here's a big white viewport, big body that's just white in color
但这里有一个大的白色视窗，一个大的主体，默认情况下是白色。

2863
02:16:39,469 --> 02:16:40,129
by default.
默认情况下。

2864
02:16:40,129 --> 02:16:41,969
But there's three buttons at top left.
但左上角有三个按钮。

2865
02:16:41,969 --> 02:16:44,719
And if I click R, it makes the background red.
如果我点击 R，它会将背景变成红色。

2866
02:16:44,719 --> 02:16:46,190
G makes the background green.
G 会将背景变成绿色。

2867
02:16:46,190 --> 02:16:48,170
And B makes the background blue.
而 B 会将背景变成蓝色。

2868
02:16:48,170 --> 02:16:51,530
What's interesting about this demo, sort of underwhelming
这个演示的有趣之处在于，从用户界面来看，它有点平淡无奇，因为它证明了你可以

2869
02:16:51,530 --> 02:16:54,170
as the user interface is, is it demonstrates that you
使用 JavaScript 修改 CSS。

2870
02:16:54,170 --> 02:16:57,320
can modify CSS using JavaScript.
HTML、CSS 和 JavaScript 在浏览器环境中因此

2871
02:16:57,320 --> 02:17:00,049
And HTML, CSS, and JavaScript are therefore
非常交织在一起。

2872
02:17:00,049 --> 02:17:02,420
very intertwined in the context of a browser.
怎么做？

2873
02:17:02,420 --> 02:17:02,959
How?
这里是原始的 HTML 代码。

2874
02:17:02,959 --> 02:17:04,700
Here's the raw HTML.
这是三个按钮。

2875
02:17:04,700 --> 02:17:06,200
Here are the three buttons.
我给他们分别设置了三个 ID，red、green 和 blue，

2876
02:17:06,200 --> 02:17:08,750
And I've given them three separate IDs red, green, and blue,
以便我可以引用特定的按钮。

2877
02:17:08,750 --> 02:17:10,670
just so I can refer to the specific button.
注意我在这里做了什么。

2878
02:17:10,670 --> 02:17:12,469
And notice what I've done here.
我在 JavaScript 中声明了一个变量，它

2879
02:17:12,469 --> 02:17:14,750
I've declared a variable in JavaScript, which
使用了稍微不同的语法，let 作为关键字。

2880
02:17:14,750 --> 02:17:17,690
uses slightly different syntax of let as the keyword.
而不是 int 或 char 或 string，你可以

2881
02:17:17,690 --> 02:17:20,209
Instead of int or char or string, you can
使用 let 关键字，它本质上意味着让我

2882
02:17:20,209 --> 02:17:22,820
use the keyword let, which essentially means let
创建一个名为 body 的变量。

2883
02:17:22,820 --> 02:17:25,230
me create this variable called body.
这只是如何使用查询选择器

2884
02:17:25,230 --> 02:17:27,170
And this is just how, using query selector,
从网页中选择 body 元素。

2885
02:17:27,170 --> 02:17:29,478
I can select the body element from the web page.
因为我将它分别使用三次。

2886
02:17:29,478 --> 02:17:31,520
Because I'm going to use it three separate times.
我想分别做三次什么？

2887
02:17:31,520 --> 02:17:33,709
What do I want to do three separate times?
例如，这个。

2888
02:17:33,709 --> 02:17:35,059
For instance, this.
我想进入文档，并选择具有唯一 ID "red" 的元素。

2889
02:17:35,059 --> 02:17:38,930
I want to go into the document and select whatever
我想告诉浏览器监听这个事件，点击。

2890
02:17:38,930 --> 02:17:41,240
element has the unique ID of red.
我们之前看到了提交。

2891
02:17:41,240 --> 02:17:44,959
I want to tell the browser to listen for this event, click.
你也可以监听点击事件。

2892
02:17:44,959 --> 02:17:46,129
So we saw submit before.
当在这个按钮上发生点击事件时，我希望这个函数被调用。

2893
02:17:46,129 --> 02:17:47,959
You can listen for clicks as well.
这个函数做了什么？

2894
02:17:47,959 --> 02:17:51,799
When the click happens on this button, I want this function to be called.
它做了非常非常简单的事情 -

2895
02:17:51,799 --> 02:17:52,969
What does this function do?
它只是将 body 的样式，背景颜色

2896
02:17:52,969 --> 02:17:54,930
Something super, super simple--
更改为 "红色"。

2897
02:17:54,930 --> 02:17:59,840
all it does is it changes the body's styles, background color
所以这里发生了什么？

2898
02:17:59,840 --> 02:18:02,910
to be, quote, unquote red instead.
我们之前没有看到这个。

2899
02:18:02,910 --> 02:18:04,430
So what's going on here?
但事实证明，在 CSS 中，确实

2900
02:18:04,430 --> 02:18:05,670
We didn't see this earlier.
有一个叫做 background-color 的 CSS 属性。

2901
02:18:05,670 --> 02:18:08,180
But it turns out in CSS there is actually
我可以看到如下。

2902
02:18:08,180 --> 02:18:10,593
a CSS property called background-color.
让我重新加载这个页面。

2903
02:18:10,593 --> 02:18:11,760
And I can see it as follows.
打开浏览器的检查器。

2904
02:18:11,760 --> 02:18:12,860
Let me reload this page.
打开元素。

2905
02:18:12,860 --> 02:18:14,480
Open the browser's inspector.
如果我把鼠标悬停在 body 上，注意

2906
02:18:14,480 --> 02:18:15,870
Open up elements.
默认情况下没有背景颜色。

2907
02:18:15,870 --> 02:18:19,820
And if I hover over the body here, notice
但如果我在里面做，比如，小写，background color: yellow，

2908
02:18:19,820 --> 02:18:22,020
that there's no background color by default.
它会立即将背景更改为黄色。

2909
02:18:22,020 --> 02:18:28,940
But if I do in, say, lowercase, background color colon yellow,
不幸的是，在 JavaScript 中，你不能使用 background-color。

2910
02:18:28,940 --> 02:18:31,610
it immediately changes the background to yellow.
这可能是为什么？

2911
02:18:31,610 --> 02:18:37,400
Unfortunately, in JavaScript, you can't do background dash color.
是的？

2912
02:18:37,400 --> 02:18:40,740
Why might this be?
观众：[听不清]。

2913
02:18:40,740 --> 02:18:41,263
Yeah?
大卫·马兰：它认为是减号或减法。

2914
02:18:41,263 --> 02:18:42,180
AUDIENCE: [INAUDIBLE].
对吧？

2915
02:18:42,180 --> 02:18:44,129
DAVID MALAN: It thinks it's minus or subtraction.
所以，我敢打赌，在某个时候，设计 JavaScript 的人意识到，该死。

2916
02:18:44,129 --> 02:18:44,370
Right?
我们不应该在 CSS 中使用连字符。

2917
02:18:44,370 --> 02:18:47,459
So I would wager there was a human at some point in the room designing
因为它现在将被错误地解释为 JavaScript 中的减法运算符。

2918
02:18:47,459 --> 02:18:50,309
JavaScript where they realized like, damn it.
所以，JavaScript 世界解决这个问题的方法是，任何在 CSS 中使用连字符的属性

2919
02:18:50,309 --> 02:18:52,920
We shouldn't have used a hyphen in CSS.
比如 background-color，你把它在 JavaScript 版本中

2920
02:18:52,920 --> 02:18:55,590
Because it's now going to be misinterpreted as a subtraction
更改为驼峰式命名法，可以这么说，在中间有一个驼峰

2921
02:18:55,590 --> 02:18:57,120
operator in JavaScript.
它是一个大写 C，没有连字符，而不是小写 C。

2922
02:18:57,120 --> 02:19:01,740
So the way the JavaScript world solved this was whatever has a hyphen in it
我在此处做到了，我也在此处做到了，以便

2923
02:19:01,740 --> 02:19:05,430
as background dash color, you change it in the JavaScript version
本质上监听三个按钮中的任何一个的点击事件，

2924
02:19:05,430 --> 02:19:09,030
thereof to be camelcase, so to speak, whereby there's this hump in the middle
这样，最终的结果就是它会根据我的点击，将颜色从红色更改为绿色，再更改为蓝色。

2925
02:19:09,030 --> 02:19:13,860
with it's a capital C, no hyphen, instead of a lowercase C instead.
这就是开发者工具变得很酷的地方。

2926
02:19:13,860 --> 02:19:16,440
And I do this here, and I do this here so
注意，在右下角，当我点击它时，

2927
02:19:16,440 --> 02:19:19,480
as to essentially listen for a click on any of those three buttons
页面右下角的 CSS 会发生变化，

2928
02:19:19,480 --> 02:19:23,730
so that the end result is that it changes it from red to green to blue
以匹配正在发生的事情。

2929
02:19:23,730 --> 02:19:24,930
based on what I'm clicking.
所以你真的可以看到并理解它内部发生了什么。

2930
02:19:24,930 --> 02:19:27,180
And here's where the developer tools get kind of cool.
好的。

2931
02:19:27,180 --> 02:19:30,719
Notice at bottom right here, notice that as I click on this,
我们还有时间进行一些其他演示。

2932
02:19:30,719 --> 02:19:33,690
the CSS of the page at bottom right is changing
在我学 HTML 的时候，有很多很丑陋的标签

2933
02:19:33,690 --> 02:19:35,340
to match whatever is happening.
仍然在流通。

2934
02:19:35,340 --> 02:19:39,090
So you can really see and understand what's going on underneath that hood
其中之一是 blink 标签，它实际上

2935
02:19:39,090 --> 02:19:39,980
there.
如果你使用 blink 并将文字放在它的开始标签和结束标签之间，

2936
02:19:39,980 --> 02:19:40,480
All right.
你就会在屏幕上看到文字在这样闪烁。

2937
02:19:40,480 --> 02:19:42,520
We have time for a few other demonstrations.
更丑陋的是所谓的 marquee 标签，它实际上

2938
02:19:42,520 --> 02:19:46,840
Back in my day when I learned HTML, there was a bunch of hideous tags
会

2939
02:19:46,840 --> 02:19:48,430
still in circulation.


2940
02:19:48,430 --> 02:19:51,430
Among them was a blink tag, which literally,


2941
02:19:51,430 --> 02:19:55,330
if you used blink and put words in between its open tag and close tag,


2942
02:19:55,330 --> 02:19:58,090
you would get text on your screen just kind of doing this.


2943
02:19:58,090 --> 02:20:01,600
Even uglier was what was called the marquee tab, which would actually


2944
02:20:01,600 --> 02:20:03,850
scroll text across the screen like this.
像这样在屏幕上滚动文字。

2945
02:20:03,850 --> 02:20:07,192
And no self-respecting website tends to have blinking text or scrolling
任何有自尊的网站都不会有闪烁的文字或滚动的

2946
02:20:07,192 --> 02:20:07,900
text in this way.
文字。

2947
02:20:07,900 --> 02:20:09,910
Because it's just tends to be ugly.
因为这通常很丑。

2948
02:20:09,910 --> 02:20:13,510
However, even though the blink tag is among the few tags that's
然而，即使 blink 标签是为数不多的几个从语言中删除的标签之一，你仍然可以

2949
02:20:13,510 --> 02:20:17,530
ever been removed from the language, you can bring it back
把它带回来

2950
02:20:17,530 --> 02:20:18,610
with a bit of JavaScript.
用一些 JavaScript。

2951
02:20:18,610 --> 02:20:21,860
So here, for instance, is an example in blink.html.
所以这里，例如，是 blink.html 中的一个例子。

2952
02:20:21,860 --> 02:20:23,450
Here's a super simple page.
这是一个超级简单的页面。

2953
02:20:23,450 --> 02:20:26,090
The only thing in the body is hello, world.
主体中唯一的文字是 hello, world。

2954
02:20:26,090 --> 02:20:29,770
But there is a script tag up in my head of my page here.
但是这里我的页面头部有一个 script 标签。

2955
02:20:29,770 --> 02:20:32,320
And let's see what's inside of this script tag.
我们来看看这个 script 标签里面是什么。

2956
02:20:32,320 --> 02:20:36,880
Well, I've defined on line 8 downward, a function called blink.
好吧，我在第 8 行以下定义了一个名为 blink 的函数。

2957
02:20:36,880 --> 02:20:38,090
What does it do?
它做什么？

2958
02:20:38,090 --> 02:20:38,710
Well.
好吧。

2959
02:20:38,710 --> 02:20:40,990
I first declare a variable called body.
我首先声明一个名为 body 的变量。

2960
02:20:40,990 --> 02:20:44,110
And I get the body element using queryselector.
然后我使用 queryselector 获取 body 元素。

2961
02:20:44,110 --> 02:20:45,880
I then ask this question.
然后我问这个问题。

2962
02:20:45,880 --> 02:20:49,848
If the body's styles visibility property,
如果 body 的样式可见性属性，

2963
02:20:49,848 --> 02:20:51,640
which we haven't talked about yet is quote,
我们还没有讨论过，是引号，

2964
02:20:51,640 --> 02:20:56,320
unquote, hidden, then change the body's styles visibility property
引号，隐藏，那么更改 body 的样式可见性属性

2965
02:20:56,320 --> 02:20:57,940
to be, quote, unquote, visible.
为，引号，引号，可见。

2966
02:20:57,940 --> 02:21:03,042
Else, if it's not hidden, that is it's visible, change it to hidden instead.
否则，如果它没有隐藏，也就是说它是可见的，改为隐藏。

2967
02:21:03,042 --> 02:21:06,250
And here, too, this is another one of these left-hand, right-hand situations.
这里也是，这也是另一种左手、右手的情况。

2968
02:21:06,250 --> 02:21:10,180
I do not know why the opposite of visible is not invisible.
我不知道为什么可见的反义词不是不可见。

2969
02:21:10,180 --> 02:21:11,290
It is, instead, hidden.
而是隐藏。

2970
02:21:11,290 --> 02:21:15,080
So, again, arguably poor design, but this is what we have.
所以，再次，可以说设计很糟糕，但这就是我们拥有的。

2971
02:21:15,080 --> 02:21:16,910
How is this useful?
这有什么用？

2972
02:21:16,910 --> 02:21:17,830
Well, there turns out.
好吧，事实证明。

2973
02:21:17,830 --> 02:21:20,080
In your browser, there's a JavaScript function
在你的浏览器中，有一个 JavaScript 函数

2974
02:21:20,080 --> 02:21:23,260
called setinterval that's associated not with the document per se,
叫做 setinterval，它与文档本身无关，

2975
02:21:23,260 --> 02:21:26,500
but the window, which is another global variable that you just
而是窗口，它是另一个全局变量，你只需

2976
02:21:26,500 --> 02:21:29,230
get automatic access to in the browser that
在浏览器中自动访问它，它

2977
02:21:29,230 --> 02:21:33,640
allows you to call a function, any number of milliseconds, again
允许你调用一个函数，任何毫秒数，再次

2978
02:21:33,640 --> 02:21:35,330
and again and again.
一次又一次。

2979
02:21:35,330 --> 02:21:39,250
So if I want my text to blink every half a second or 500 milliseconds,
所以如果我想让我的文字每半秒或 500 毫秒闪烁一次，

2980
02:21:39,250 --> 02:21:43,240
I just use window.setinterval to call blink every 500 milliseconds.
我只需要使用 window.setinterval 每 500 毫秒调用 blink 一次。

2981
02:21:43,240 --> 02:21:48,010
And notice, it's very important not to call blink here, as with parentheses,
请注意，这里不要使用括号调用 blink，

2982
02:21:48,010 --> 02:21:49,240
like in C or Python.
就像在 C 或 Python 中一样。

2983
02:21:49,240 --> 02:21:51,730
Because I don't want to call blink at this moment in time.
因为我不想在此时调用 blink。

2984
02:21:51,730 --> 02:21:54,190
I just want to inform the setinterval function
我只想通知 setinterval 函数

2985
02:21:54,190 --> 02:21:56,510
of the name of the blink function.
blink 函数的名称。

2986
02:21:56,510 --> 02:21:58,420
So I just pass in the name blink.
所以我只传递 blink 的名称。

2987
02:21:58,420 --> 02:22:04,090
And if I go back to my directory listing, I open up blink.html,
如果我回到我的目录列表，打开 blink.html，

2988
02:22:04,090 --> 02:22:08,260
you'll see what I used to see in the late '90s, when HTML 1 was
你会看到我在 90 年代后期看到的东西，当时 HTML 1 是

2989
02:22:08,260 --> 02:22:11,780
all the rage, like at the beginnings of a ugly websites,
最流行的，就像丑陋网站的开始一样，

2990
02:22:11,780 --> 02:22:14,140
including my own personal home page at the time.
包括我自己当时的主页。

2991
02:22:14,140 --> 02:22:16,640
My own personal home page, too, at the time,
我自己当时的主页也是，

2992
02:22:16,640 --> 02:22:19,412
which is probably findable somewhere online in the archives,
可能可以在网上某个地方的档案中找到，

2993
02:22:19,412 --> 02:22:21,370
it was back in the days where you wouldn't just
那是在你不会只是

2994
02:22:21,370 --> 02:22:22,912
show people the content of your page.
向人们展示你页面的内容的时代。

2995
02:22:22,912 --> 02:22:25,570
You had to click a Enter button to enter the web
你必须点击一个 Enter 按钮才能进入网页

2996
02:22:25,570 --> 02:22:27,280
page and just really ridiculous.
页面，真是太荒谬了。

2997
02:22:27,280 --> 02:22:30,470
There's a lot of things in tech that you can do, but should not do.
技术中有许多事情你可以做，但你不应该做。

2998
02:22:30,470 --> 02:22:33,110
And the world has learned this as have I, the hard way.
世界已经认识到这一点，我也是，而且付出了惨痛的代价。

2999
02:22:33,110 --> 02:22:33,610
All right.
好的。

3000
02:22:33,610 --> 02:22:35,650
Let's do a couple of final examples that are now
让我们做几个最后的例子，它们现在

3001
02:22:35,650 --> 02:22:37,660
representative of what modern websites do
代表了现代网站所做的事情

3002
02:22:37,660 --> 02:22:41,770
and what you and I take for granted on web apps and mobile apps alike.
以及你和我在网络应用和移动应用上都习以为常的事情。

3003
02:22:41,770 --> 02:22:43,960
For instance, this feature of autocomplete.
例如，自动完成这个功能。

3004
02:22:43,960 --> 02:22:46,010
Case in point, when I went to google.com before
举个例子，当我以前去 google.com 的时候

3005
02:22:46,010 --> 02:22:48,160
and I started searching for cats or dogs or birds,
我开始搜索猫、狗或鸟，

3006
02:22:48,160 --> 02:22:50,860
it was trying to finish my thought and populating a dropdown
它试图完成我的想法，并填充一个下拉菜单

3007
02:22:50,860 --> 02:22:52,690
with a bunch of different suggestions.
提供了一堆不同的建议。

3008
02:22:52,690 --> 02:22:55,880
I can actually do that myself in JavaScript as follows.
我实际上可以使用 JavaScript 如下操作。

3009
02:22:55,880 --> 02:23:01,480
Let me open up a file called large.js, which
让我打开一个名为 large.js 的文件，它

3010
02:23:01,480 --> 02:23:05,770
is a file that I made based on speller's own dictionary.
是一个基于拼写器自己的字典创建的文件。

3011
02:23:05,770 --> 02:23:09,580
Recall that we gave you a big list of words, like 100,000 plus words.
请回忆，我们给你一个很大的单词列表，大约有 10 万个单词。

3012
02:23:09,580 --> 02:23:11,890
I copied those into this JavaScript file.
我把它们复制到这个 JavaScript 文件中。

3013
02:23:11,890 --> 02:23:15,440
But I formatted them in what's called the JavaScript array.
但我用 JavaScript 数组的格式对它们进行了格式化。

3014
02:23:15,440 --> 02:23:16,840
So JavaScript has arrays.
所以 JavaScript 有数组。

3015
02:23:16,840 --> 02:23:20,050
They're more like Python lists than they are like C arrays.
它们更像 Python 列表，而不是 C 数组。

3016
02:23:20,050 --> 02:23:21,970
The syntax is square brackets.
语法是方括号。

3017
02:23:21,970 --> 02:23:24,757
Let is my keyword to say give me a variable called
let 是我的关键字，意思是给我一个名为

3018
02:23:24,757 --> 02:23:27,340
WORDS, which is all caps because I'm going to use it globally.
WORDS 的变量，它全部大写，因为我将在全局范围内使用它。

3019
02:23:27,340 --> 02:23:32,140
And here is a 100,000 words from that dictionary in this file.
这里就是这个文件中来自该字典的 10 万个单词。

3020
02:23:32,140 --> 02:23:32,770
All right?
好的？

3021
02:23:32,770 --> 02:23:35,890
Now let me close this file and open up the actual HTML
现在让我关闭这个文件，打开真正的 HTML

3022
02:23:35,890 --> 02:23:38,440
file, autocomplete.html.
文件，autocomplete.html。

3023
02:23:38,440 --> 02:23:40,040
Let me scroll down to the bottom.
让我滚动到最底部。

3024
02:23:40,040 --> 02:23:44,720
And you'll see that in this page in the body are two things.
你会看到，在这个页面的主体中，有两样东西。

3025
02:23:44,720 --> 02:23:48,730
One, an input, so a text box so I can start typing words.
一个是输入框，所以我可以开始输入文字。

3026
02:23:48,730 --> 02:23:51,400
And then, two, an unordered list that's empty.
然后，第二个，一个空的无序列表。

3027
02:23:51,400 --> 02:23:56,960
So there's no actual list items in that unordered list initially,
所以最初在这个无序列表中没有实际的列表项，

3028
02:23:56,960 --> 02:23:58,510
but there is a lot of JavaScript.
但是有很多 JavaScript。

3029
02:23:58,510 --> 02:24:00,760
Here's how I'm including the large dictionary.
这是我包含大型字典的方式。

3030
02:24:00,760 --> 02:24:03,520
And here's how I'm implementing autocomplete.
这是我实现自动完成的方式。

3031
02:24:03,520 --> 02:24:05,410
So let me first show you what this does.
所以让我先给你看看它做了什么。

3032
02:24:05,410 --> 02:24:10,210
Let me go back to my directory index, click on autocomplete.html.
让我回到我的目录索引，点击 autocomplete.html。

3033
02:24:10,210 --> 02:24:11,050
I'll zoom in.
我会放大。

3034
02:24:11,050 --> 02:24:15,940
And if I type in C, I immediately get an unordered list of all words
如果我输入 C，我会立即得到一个以 C 开头的所有单词的无序列表。

3035
02:24:15,940 --> 02:24:16,780
starting with C.
以 C 开头。

3036
02:24:16,780 --> 02:24:18,478
If I type CA, it gets filtered further.
如果我输入 CA，它会进一步过滤。

3037
02:24:18,478 --> 02:24:21,770
But we can't see the difference because there's so many words starting with CA.
但我们看不到区别，因为以 CA 开头的单词太多了。

3038
02:24:21,770 --> 02:24:23,770
CAT, the list is changing.
CAT，列表正在改变。

3039
02:24:23,770 --> 02:24:25,960
CATS, the list is changing.
CATS，列表正在改变。

3040
02:24:25,960 --> 02:24:29,290
And notice that if I were to open my developer tools, what
请注意，如果我打开我的开发者工具，

3041
02:24:29,290 --> 02:24:33,190
gets really interesting is you can see this list being made in real time.
真正有趣的地方在于，你可以看到这个列表是实时生成的。

3042
02:24:33,190 --> 02:24:34,150
Let me delete it.
让我删除它。

3043
02:24:34,150 --> 02:24:37,370
Notice that the UL at bottom left is now empty.
请注意，左下角的 UL 现在是空的。

3044
02:24:37,370 --> 02:24:42,400
But if I type in suddenly CATS, notice that the triangle appears and there
但是，如果我突然输入 CATS，你会注意到三角形出现了，而且

3045
02:24:42,400 --> 02:24:46,390
are all of the list items that my JavaScript code is apparently
都是我的 JavaScript 代码显然

3046
02:24:46,390 --> 02:24:48,310
dynamically creating.
动态创建的。

3047
02:24:48,310 --> 02:24:49,970
And indeed, how do I do this?
确实，我是如何做到的？

3048
02:24:49,970 --> 02:24:52,840
Well, this one's more of a mouthful, but here's the idea.
好吧，这个有点难说，但这是想法。

3049
02:24:52,840 --> 02:24:57,160
I used a queryselector function to get that input text box.
我使用了一个 queryselector 函数来获取那个输入文本框。

3050
02:24:57,160 --> 02:25:02,182
I then add a listener to that input, listening for what's called key up.
然后，我在那个输入框上添加一个监听器，监听一个称为 key up 的事件。

3051
02:25:02,182 --> 02:25:04,390
It turns out you can listen for the finger going down
事实证明，你可以监听手指按下

3052
02:25:04,390 --> 02:25:05,540
or the finger going up.
或者手指抬起。

3053
02:25:05,540 --> 02:25:08,530
So I'm waiting until the user lifts their finger off the keyboard, AKA,
所以，我等待用户将手指从键盘上抬起，也就是

3054
02:25:08,530 --> 02:25:09,400
key up.
key up。

3055
02:25:09,400 --> 02:25:11,930
When it hears that event, it should do the following.
当它听到该事件时，它应该执行以下操作。

3056
02:25:11,930 --> 02:25:15,670
It's going to create a variable, a temp variable called HTML equal to quote,
它将创建一个变量，一个名为 HTML 的临时变量，它等于引号，

3057
02:25:15,670 --> 02:25:17,050
unquote nothing.
引号内什么也没有。

3058
02:25:17,050 --> 02:25:19,420
In JavaScript, as an aside, you can use single quotes
顺便说一下，在 JavaScript 中，你可以使用单引号

3059
02:25:19,420 --> 02:25:22,870
or double quotes for whatever reasons stylistically, JavaScript programmers
或双引号，无论出于何种样式原因，JavaScript 程序员

3060
02:25:22,870 --> 02:25:24,400
tend to use single quotes.
倾向于使用单引号。

3061
02:25:24,400 --> 02:25:28,360
I can then say if that input has a value, because the humans typed
然后，我可以说，如果该输入框有值，因为人类输入了

3062
02:25:28,360 --> 02:25:31,402
in one or more letters, then iterate over
一个或多个字母，那么迭代

3063
02:25:31,402 --> 02:25:32,860
all of the words in the dictionary.
字典中的所有单词。

3064
02:25:32,860 --> 02:25:35,980
And we've not seen of before, but it's Javascript's equivalent
我们以前没见过，但它是 JavaScript 等同于

3065
02:25:35,980 --> 02:25:37,630
of Python's for loop.
Python 中的 for 循环。

3066
02:25:37,630 --> 02:25:42,670
If that word starts with whatever the input value is, go ahead and add--
如果那个单词以输入框的值开头，就继续添加 -

3067
02:25:42,670 --> 02:25:47,380
that is concatenate to the HTML variable and open tag LI.
也就是说，将它连接到 HTML 变量，并打开 LI 标签。

3068
02:25:47,380 --> 02:25:51,610
Then, whatever the word is, using this JavaScript specific syntax, and then
然后，无论单词是什么，使用这种 JavaScript 特定的语法，然后

3069
02:25:51,610 --> 02:25:52,690
close the tag.
关闭标签。

3070
02:25:52,690 --> 02:25:57,190
And then lastly, using queryselector, grab the UL tag,
最后，使用 queryselector，获取 UL 标签，

3071
02:25:57,190 --> 02:26:00,820
go into its inner HTML, so to speak, inside of it,
进入它的内部 HTML，可以这么说，在它内部，

3072
02:26:00,820 --> 02:26:03,890
and change it to be this HTML I just created.
并将其更改为我刚刚创建的这个 HTML。

3073
02:26:03,890 --> 02:26:07,060
And so in this way, using JavaScript, I can dynamically add to
因此，通过这种方式，使用 JavaScript，我可以动态地添加到

3074
02:26:07,060 --> 02:26:10,180
and subtract from the HTML in the page.
并从页面中的 HTML 中减去。

3075
02:26:10,180 --> 02:26:14,470
There are so many other events here, too, clicking, submitting, key up,
这里还有很多其他事件，比如点击、提交、key up、

3076
02:26:14,470 --> 02:26:16,430
dragging, and dropping, and so forth.
拖放等等。

3077
02:26:16,430 --> 02:26:19,870
This is just some of the events that web pages and mobile apps can listen for.
这仅仅是网页和移动应用程序可以监听的部分事件。

3078
02:26:19,870 --> 02:26:23,350
But we'll do one final one, which speaks to the power of browsers nowadays
但我们将演示最后一个，它说明了如今浏览器的强大功能

3079
02:26:23,350 --> 02:26:25,840
and even the implications for privacy.
甚至对隐私的影响。

3080
02:26:25,840 --> 02:26:31,720
If I go into geolocation.html, it turns out
如果我进入 geolocation.html，事实证明

3081
02:26:31,720 --> 02:26:36,520
you can figure out where in the world a user is with, like, three lines of code
你可以用大约三行代码找出用户在世界上的位置

3082
02:26:36,520 --> 02:26:38,770
nowadays, assuming they've turned on location services
现在，假设他们已开启位置服务

3083
02:26:38,770 --> 02:26:40,450
and opted in on their device.
并同意在他们的设备上使用。

3084
02:26:40,450 --> 02:26:43,920
Here, albeit cryptically, is a final global variable
这里，虽然比较隐晦，但有一个最终的全局变量

3085
02:26:43,920 --> 02:26:46,410
that comes with browsers today called navigator.
它随今天的浏览器一起提供，叫做 navigator。

3086
02:26:46,410 --> 02:26:50,320
It has a geolocation object associated with it,
它关联了一个 geolocation 对象，

3087
02:26:50,320 --> 02:26:52,860
which comes with a function called getCurrentPosition.
它带有一个名为 getCurrentPosition 的函数。

3088
02:26:52,860 --> 02:26:57,390
You can then specify or figure out the user's latitude and the user's
然后，你可以指定或找出用户的纬度和用户的

3089
02:26:57,390 --> 02:26:57,893
longitude.
经度。

3090
02:26:57,893 --> 02:27:00,060
And all I'm going to do is write these to the screen
我要做的就是将这些写入屏幕

3091
02:27:00,060 --> 02:27:02,040
so I can see this demonstration live.
这样我就可以看到这个实时演示。

3092
02:27:02,040 --> 02:27:05,370
So our very final demonstration here of JavaScript
所以，我们对 JavaScript 的最后一个演示将是这里

3093
02:27:05,370 --> 02:27:08,160
is going to be this one here for geolocation to show you how easy
关于地理位置的演示，向你展示它有多容易

3094
02:27:08,160 --> 02:27:15,690
and how invasive even code can be if I click on geolocation and wait.
即使代码也可以很侵入性，如果我点击地理位置并等待。

3095
02:27:15,690 --> 02:27:19,020
There are my GPS coordinates, latitude and longitude.
那就是我的 GPS 坐标，纬度和经度。

3096
02:27:19,020 --> 02:27:22,740
And to confirm as much roughly, let's go ahead and open up a browser,
为了大致确认这一点，让我们打开一个浏览器，

3097
02:27:22,740 --> 02:27:27,570
paste in those coordinates, click on the Google Maps result that comes up first.
粘贴那些坐标，点击第一个出现的 Google 地图结果。

3098
02:27:27,570 --> 02:27:32,250
Zoom in, in, turn on satellite mode.
放大，放大，打开卫星模式。

3099
02:27:32,250 --> 02:27:35,760
And in-- and I'm not quite in that corner of the building.
然后，我并不完全在那栋楼的角落里。

3100
02:27:35,760 --> 02:27:38,820
But I'm presumably close to an access point that Google has known about
但我可能靠近 Google 知道的某个接入点

3101
02:27:38,820 --> 02:27:40,620
and associates with my GPS coordinates.
并与我的 GPS 坐标相关联。

3102
02:27:40,620 --> 02:27:45,550
It's that easy when you actually use something like Uber or Lyft or the like
当你实际使用 Uber、Lyft 或类似的应用程序时，就那么容易

3103
02:27:45,550 --> 02:27:49,180
to figure out where the user is by just asking their browser via code
通过代码询问他们的浏览器来确定用户的位置

3104
02:27:49,180 --> 02:27:50,030
like this.
就像这样。

3105
02:27:50,030 --> 02:27:52,820
So that's it for HTML, CSS, and JavaScript.
所以，关于 HTML、CSS 和 JavaScript 就介绍到这里。

3106
02:27:52,820 --> 02:27:54,820
In the problem set, you'll explore all of these.
在作业中，你将探索所有这些。

3107
02:27:54,820 --> 02:27:57,280
One more lecture to go in which we'll combine all of these.
还有一节课，我们将把所有这些结合起来。

3108
02:27:57,280 --> 02:27:59,470
But until then we'll see you next time.
但在此之前，我们下期再见。

3109
02:27:59,470 --> 02:28:04,780
[MUSIC PLAYING] Buffering, OK.
[音乐播放] 正在缓冲，好了。

3110
02:28:04,780 --> 02:28:07,830
Josh, nice.
乔希，不错。

3111
02:28:07,830 --> 02:28:08,986
[INAUDIBLE], oh!
[听不清]，哦！

3112
02:28:08,986 --> 02:28:13,210
[LAUGHING]
[笑声]

3113
02:28:13,210 --> 02:28:14,440
[INAUDIBLE]
[听不清]

3114
02:28:14,440 --> 02:28:15,310
No, oh, wait.
不，哦，等等。

3115
02:28:21,242 --> 02:28:22,200
That was amazing, Josh.
太棒了，乔希。

3116
02:28:26,705 --> 02:28:27,205
Sophie!
索菲！

3117
02:28:30,388 --> 02:28:34,600
[LAUGHTER]
[笑声]

3118
02:28:34,600 --> 02:28:36,920
Amazing.
太棒了。

3119
02:28:36,920 --> 02:28:39,330
That was perfect.
太完美了。

3120
02:28:39,330 --> 02:28:40,450
[INAUDIBLE]
[听不清]

3121
02:28:40,450 --> 02:28:42,350
[LAUGHTER]
[笑声]

3122
02:28:42,350 --> 02:28:45,920
I think I--
我想我 -

3123
02:28:45,920 --> 02:28:47,720
[INAUDIBLE]
[听不清]

3124
02:28:47,720 --> 02:28:48,650
AUDIENCE: [INAUDIBLE].
观众： [听不清]。

3125
02:28:48,650 --> 02:28:49,358
DAVID MALAN: Guy.
大卫·马兰： 伙计。

3126
02:28:53,280 --> 02:28:54,480
That was amazing.
太棒了。

3127
02:28:54,480 --> 02:28:55,505
Thank you all.
谢谢大家。

3128
02:28:55,505 --> 02:28:56,130
AUDIENCE: Good.
观众： 好。

3129
02:28:56,130 --> 02:28:59,180
[APPLAUSE]
[掌声]

