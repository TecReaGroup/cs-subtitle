1
00:00:00,000 --> 00:00:03,479
[MUSIC PLAYING]
[音乐播放]

2
00:01:01,710 --> 00:01:04,780
DAVID MALAN: All right, one last time.
大卫·马兰：好吧，最后一次。

3
00:01:04,780 --> 00:01:09,780
This is CS50, and we realize this has been a bit of a fire hose
这是 CS50，我们意识到这有点像消防水带

4
00:01:09,780 --> 00:01:10,980
over the past-- thank you.
在过去的——谢谢。

5
00:01:10,980 --> 00:01:13,210
[APPLAUSE]
[掌声]

6
00:01:14,550 --> 00:01:15,510
Thank you.
谢谢。

7
00:01:15,510 --> 00:01:17,520
We realize this has been a bit of a fire hose.
我们意识到这有点像消防水带。

8
00:01:17,520 --> 00:01:20,340
Indeed, recall that we began the class in week 0,
确实，回想一下，我们在第 0 周就开始上课，

9
00:01:20,340 --> 00:01:23,190
months ago with this here MIT hack, wherein
几个月前，我们用这个 MIT 黑客，其中

10
00:01:23,190 --> 00:01:26,040
a fire hose was connected to a fire hydrant,
消防水带连接到消防栓，

11
00:01:26,040 --> 00:01:27,750
in turn connected to a water fountain.
然后又连接到一个饮水机。

12
00:01:27,750 --> 00:01:29,843
And it really spoke to just how much information
这确实说明了在过去几个月里，我们预测会向你涌入多少信息。

13
00:01:29,843 --> 00:01:32,760
we predicted would be sort of flowing at you over the past few months.
我们预测会向你涌入多少信息。

14
00:01:32,760 --> 00:01:35,850
If you are feeling all these weeks later that it never actually
如果你在几周后的今天仍然感觉它并没有真正变得容易，

15
00:01:35,850 --> 00:01:40,530
got easy, and with pset 1 to pset 2, pset 3 on to pset 9,
从 pset 1 到 pset 2，从 pset 3 到 pset 9，

16
00:01:40,530 --> 00:01:42,540
you never quite felt like you got your footing,
你从未真正感觉到自己站稳了脚跟，

17
00:01:42,540 --> 00:01:46,620
realize that it's kind of by design because every time you did get your--
意识到这其实是经过设计的，因为每当你站稳脚跟时——

18
00:01:46,620 --> 00:01:48,660
every time you did get your footing, our goal
每当你站稳脚跟时，我们的目标

19
00:01:48,660 --> 00:01:50,410
was to ratchet things up a little bit more
就是把事情提升一点

20
00:01:50,410 --> 00:01:52,160
so that you feel like you're still getting
让你感觉你还在收获

21
00:01:52,160 --> 00:01:53,805
something out of that final week.
最后一周的东西。

22
00:01:53,805 --> 00:01:55,680
And indeed, that final week is now behind us.
确实，最后一周现在已经过去了。

23
00:01:55,680 --> 00:01:57,990
All that remains ahead of us is the final project.
我们面前剩下的只有最后的项目了。

24
00:01:57,990 --> 00:02:01,590
And what we thought we'd do today is recap a little bit of where we began
今天我们要做的是回顾一下我们的起点

25
00:02:01,590 --> 00:02:03,310
and where you hopefully now are.
以及你希望现在所处的位置。

26
00:02:03,310 --> 00:02:05,143
Take a look at the world of cybersecurity,
看看网络安全的世界，

27
00:02:05,143 --> 00:02:07,560
because it's a scary place out there, but hopefully you're
因为那里很危险，但希望你已经

28
00:02:07,560 --> 00:02:09,930
all the more equipped now with a mental model
更多地配备了思维模型

29
00:02:09,930 --> 00:02:14,710
and vocabulary to evaluate threats in the real world, and as educated people,
以及词汇量来评估现实世界中的威胁，作为受过教育的人，

30
00:02:14,710 --> 00:02:17,828
make decisions, be it in industry, be it in government,
做出决定，无论是在工业界，还是在政府中，

31
00:02:17,828 --> 00:02:19,870
be it in your own personal or professional lives.
无论是在你个人生活中还是职业生活中。

32
00:02:19,870 --> 00:02:22,037
And we hope ultimately, too, that you've walked away
我们最终也希望你能够带着

33
00:02:22,037 --> 00:02:24,280
with a very practical skill, including how
一项非常实用的技能，包括如何

34
00:02:24,280 --> 00:02:26,650
to program in C, how to program in Python,
用 C 语言编程，用 Python 编程，

35
00:02:26,650 --> 00:02:29,290
how to program in SQL, how to program in JavaScript
用 SQL 编程，用 JavaScript 编程

36
00:02:29,290 --> 00:02:32,740
in the context, for instance, of even more HTML, CSS, and the like.
例如，在更多 HTML、CSS 等的背景下。

37
00:02:32,740 --> 00:02:35,320
But most importantly, we hope that you've really walked away
但最重要的是，我们希望你真正带着

38
00:02:35,320 --> 00:02:37,690
with an understanding of how to program.
对编程的理解离开。

39
00:02:37,690 --> 00:02:41,680
Like, you're not going to have CS50 by your side or even the duck by your side
就像，你不会永远带着 CS50 或者鸭子。

40
00:02:41,680 --> 00:02:42,250
forever.
永远。

41
00:02:42,250 --> 00:02:45,000
You're going to have really, that foundation that hopefully you'll
你将拥有真正意义上的基础，希望你能够

42
00:02:45,000 --> 00:02:47,900
walk out of here today having accumulated over the past few months.
今天带着它离开这里，你在过去的几个月里积累了它。

43
00:02:47,900 --> 00:02:50,317
And even though the world's languages are going to change,
即使世界上的语言会发生改变，

44
00:02:50,317 --> 00:02:52,962
new technologies are going to exist tomorrow, hopefully,
新的技术会出现在明天，希望，

45
00:02:52,962 --> 00:02:54,670
you'll find that a lot of the foundations
你会发现很多基础

46
00:02:54,670 --> 00:02:56,997
over the past several months really do stay with you
在过去的几个月里真正地留在了你的脑海中

47
00:02:56,997 --> 00:02:59,080
and allow you to bootstrap to a new understanding,
并让你能够快速理解新的知识，

48
00:02:59,080 --> 00:03:02,260
even if you never take another CS course again.
即使你再也不学习任何 CS 课程。

49
00:03:02,260 --> 00:03:05,110
Ultimately, we claim that this was all about solving problems.
最终，我们声称这一切都是关于解决问题的。

50
00:03:05,110 --> 00:03:08,020
And hopefully, we've kind of cleaned up your thinking a little bit,
希望我们多少能整理你的思路，

51
00:03:08,020 --> 00:03:11,470
given you more tools in your toolkit to think and evaluate and solve
给你更多的工具，让你能够更有条理地思考、评估和解决

52
00:03:11,470 --> 00:03:16,390
problems more methodically, not only in code, but just algorithmically as well.
问题，不仅在代码方面，还有算法方面。

53
00:03:16,390 --> 00:03:17,680
And keep this mind too.
也要记住这一点。

54
00:03:17,680 --> 00:03:21,400
If you're still feeling like, oh, I never really quite got your footing--
如果你仍然觉得，哦，我从来没有真正站稳脚跟——

55
00:03:21,400 --> 00:03:26,462
my footing, think back to how hard Mario might have felt some three months ago.
想想三个月前，马里奥可能有多难。

56
00:03:26,462 --> 00:03:29,170
But what ultimately matters in this course is indeed, not so much
但在本课程中，真正重要的是，与其说

57
00:03:29,170 --> 00:03:31,045
where you end up relative to your classmates,
你与同学们的最终位置，

58
00:03:31,045 --> 00:03:34,390
but where you end up relative to yourself when you began.
不如说你相对于自己开始时的位置。

59
00:03:34,390 --> 00:03:36,940
So here we are, and consider that there delta.
所以我们现在在这里，考虑一下那个差距。

60
00:03:36,940 --> 00:03:39,760
And if you don't believe me, like, literally go back this weekend
如果你不相信我，就真的在本周末

61
00:03:39,760 --> 00:03:43,420
or sometime soon, try implementing Mario in C. And I do
或者尽快尝试用C语言实现马里奥。我敢说

62
00:03:43,420 --> 00:03:45,978
dare say it's going to come a little more readily to you.
你会更容易做到。

63
00:03:45,978 --> 00:03:48,520
Even if you need to Google something, ask the duck something,
即使你需要用谷歌搜索什么，问鸭子什么，

64
00:03:48,520 --> 00:03:52,030
ask ChatGPT something just to remember some stupid syntactic detail,
问ChatGPT一些东西，只是为了记住一些愚蠢的语法细节，

65
00:03:52,030 --> 00:03:55,840
the ideas hopefully are with you now for some time.
希望这些想法现在已经伴随你一段时间了。

66
00:03:55,840 --> 00:03:59,400
So that there hack is actually fully documented here in MIT.
所以，那个黑客事件实际上在麻省理工学院这里有完整的记录。

67
00:03:59,400 --> 00:04:01,150
Our friends down the road have a tradition
我们路边的朋友有一个传统

68
00:04:01,150 --> 00:04:03,100
of doing such things every year.
每年都做这样的事情。

69
00:04:03,100 --> 00:04:05,770
One year, one of my favorites was they turned the dome of MIT
有一年，我最喜欢的一件事是他们把麻省理工学院的圆顶

70
00:04:05,770 --> 00:04:08,290
into a recreation of R2-D2.
变成了R2-D2的复制品。

71
00:04:08,290 --> 00:04:13,000
So there's a rich history of going to great lengths to prank each other,
所以，他们之间有丰富的恶作剧历史，不惜一切代价互相捉弄对方，

72
00:04:13,000 --> 00:04:17,240
or even us here Harvard folks akin to the Harvard Yale video
或者我们这些哈佛人，就像上次我们看到的哈佛耶鲁视频一样。

73
00:04:17,240 --> 00:04:18,940
we took a look at last time.
我们上次看过了。

74
00:04:18,940 --> 00:04:22,150
And this duck has really become a defining characteristic
而这只鸭子已经真正成为了

75
00:04:22,150 --> 00:04:26,350
of late of CS50, so much so that last year, the CS50 Hackathon, we invited
最近CS50的标志性特征，以至于去年，在CS50黑客马拉松上，我们邀请了

76
00:04:26,350 --> 00:04:27,565
the duck along.
这只鸭子。

77
00:04:27,565 --> 00:04:32,050
It posed, as it is here, for photographs with your classmates past.
它摆好姿势，就像现在这样，和你们以前的同学一起拍照。

78
00:04:32,050 --> 00:04:38,230
And then around like, 4:00 AM, it disappeared, and the duck went missing.
然后大约在凌晨四点左右，它消失了，鸭子不见了。

79
00:04:38,230 --> 00:04:42,068
And we were about to head off to IHOP, our friends from Yale.
我们正要前往IHOP，我们来自耶鲁的朋友们。

80
00:04:42,068 --> 00:04:44,110
Your former classmates had just kind of packed up
你们以前的同学刚收拾好东西

81
00:04:44,110 --> 00:04:45,693
and started driving back to New haven.
开始开车回到纽黑文。

82
00:04:45,693 --> 00:04:49,960
And I'm ashamed to say our first thought was that Yale took it.
我不好意思地说，我们第一反应是耶鲁大学的人拿走了它。

83
00:04:49,960 --> 00:04:55,032
And we texted our TA friends on the shuttle buses, 4:30 AM asking, hey,
我们给班上助教朋友发了短信，凌晨四点半问，嘿，

84
00:04:55,032 --> 00:04:58,240
did you take our duck because we kind of need it next week for the CS50 fair?
你们拿了我们的鸭子吗？因为我们下周的CS50展会需要它。

85
00:04:58,240 --> 00:05:02,260
And I'm ashamed to say that we thought so, but it was not in fact, them.
我不好意思地说，我们确实这样认为，但实际上不是他们。

86
00:05:02,260 --> 00:05:05,710
It was this guy instead, down the road.
而是这个人，就在路边。

87
00:05:05,710 --> 00:05:09,490
Because a few hours later after I think, no sleep on much of our part,
因为几个小时后，我想，我们大多数人几乎没睡，

88
00:05:09,490 --> 00:05:12,490
we got the equivalent of a ransom email.
我们收到了相当于勒索邮件的东西。

89
00:05:12,490 --> 00:05:15,390
"Hi, David, it's your friend, bbd.
“嗨，大卫，我是你的朋友，bbd。

90
00:05:15,390 --> 00:05:18,120
I hope you're well and not too worried after I left so abruptly
我希望你一切都好，不要太担心，我昨晚在黑客马拉松和本学期如此成功之后就突然离开了。

91
00:05:18,120 --> 00:05:21,810
yesterday night after such a successful Hackathon and semester so far.
我只是需要放松一下，去一些新地方，呼吸新鲜空气。

92
00:05:21,810 --> 00:05:25,170
I just needed to unwind a bit and take a trip to new places and fresh air.
别担心，我会安全、健康、完整地回家。

93
00:05:25,170 --> 00:05:28,540
Don't worry though, I will return safe, sound, healthy, home


94
00:05:28,540 --> 00:05:29,700
once I am more relaxed.
一旦我放松下来。

95
00:05:29,700 --> 00:05:32,880
As of right now, I'm just spending some few days with our tech friends
现在，我只跟我们的科技朋友们在一起待几天

96
00:05:32,880 --> 00:05:34,140
up Massachusetts Avenue.
在马萨诸塞大道上。

97
00:05:34,140 --> 00:05:36,030
They gave me a hand on moving tonight.
他们今晚帮我搬家。

98
00:05:36,030 --> 00:05:40,080
For some reason, I could never find my feet, and they've been amazing hosts.
由于某些原因，我一直无法适应，他们都是很棒的主人。

99
00:05:40,080 --> 00:05:43,980
I will see you soon and I will miss you and Harvard specially our students.
我会很快见到你，我会想念你，想念哈佛，尤其是我们的学生。

100
00:05:43,980 --> 00:05:46,380
Sincerely yours, CS50 bbd."
你真诚的，CS50 bbd。"

101
00:05:46,380 --> 00:05:47,790
So almost a perfect hack.
所以几乎是一个完美的黑客行为。

102
00:05:47,790 --> 00:05:51,690
They didn't quite get the DDB detail quite right.
他们没有完全弄清楚DDB的细节。

103
00:05:51,690 --> 00:05:58,140
But after this, they proceeded to make a scavenger hunt of sorts of clues here.
但在这之后，他们继续在这里进行了一场寻宝游戏。

104
00:05:58,140 --> 00:06:00,000
This here is Hundredville.
这里就是Hundredville。

105
00:06:00,000 --> 00:06:03,390
And so in Hundredville, they handed out flyers to students at MIT,
所以，在Hundredville，他们向麻省理工学院的学生发放了传单，

106
00:06:03,390 --> 00:06:06,150
inviting folks to write a Python program to solve a mystery.
邀请大家写一个Python程序来解开一个谜团。

107
00:06:06,150 --> 00:06:07,960
"The CS50 duck has been stolen.
“CS50鸭子被偷了。

108
00:06:07,960 --> 00:06:09,930
The town of Hundredville has been called on you
Hundredville镇呼吁你

109
00:06:09,930 --> 00:06:11,880
to solve the mystery of the-- authorities
来解开这个谜团--当局

110
00:06:11,880 --> 00:06:15,140
believe that the thief stole the duck and then shortly thereafter took
相信小偷偷了鸭子，然后不久之后就带走了

111
00:06:15,140 --> 00:06:16,130
a walk out of town.
走出小镇。

112
00:06:16,130 --> 00:06:19,760
Your goal is to identify who the thief is, what school the thief escaped to,
你的目标是确定小偷是谁，小偷逃到了哪所学校，

113
00:06:19,760 --> 00:06:22,850
and who the thief's accomplice is who helped them escape.
以及谁是小偷的同伙，帮助他们逃脱。

114
00:06:22,850 --> 00:06:29,000
This took place on December 2, 2022, and took place at the CS50 Hackathon."
这件事发生在2022年12月2日，发生在CS50黑客马拉松上。”

115
00:06:29,000 --> 00:06:32,570
In the days to come, we proceeded to receive a series of ransom postcards
在接下来的几天里，我们陆续收到了一系列勒索明信片

116
00:06:32,570 --> 00:06:40,020
as the duck traveled, not only to MIT to Professor John Guttag 6.100B class,
当鸭子旅行时，不仅去了麻省理工学院约翰·古塔教授的6.100B课程，

117
00:06:40,020 --> 00:06:43,160
which is a rough equivalent of CS50 down the road.
这相当于CS50的下一站。

118
00:06:43,160 --> 00:06:47,480
Pictured there our CS50 duck with some tape on its torso.
照片里是我们CS50的鸭子，它的胸部上贴着一些胶带。

119
00:06:47,480 --> 00:06:50,180
But then the duck took, apparently, a ride,
但后来鸭子明显地坐了车，

120
00:06:50,180 --> 00:06:53,900
either in actuality or with Photoshop, not only there,
无论是真实地还是用Photoshop，不仅在那里，

121
00:06:53,900 --> 00:06:56,870
took a tour of the Charles River in front of Harvard,
在哈佛大学前的查尔斯河上游览了一圈，

122
00:06:56,870 --> 00:06:59,400
the Charles in front of Boston.
波士顿前的查尔斯河。

123
00:06:59,400 --> 00:07:01,280
It went all the way over to Yale.
它一直走到了耶鲁。

124
00:07:01,280 --> 00:07:03,740
We then received this postcard from Princeton
然后我们收到了来自普林斯顿的明信片

125
00:07:03,740 --> 00:07:06,530
all the way over from Stanford.
从斯坦福一路走来。

126
00:07:06,530 --> 00:07:09,110
Duck took a flight according to this photo here,
根据这张照片，鸭子飞了一趟，

127
00:07:09,110 --> 00:07:12,090
and then saw a bit of the world as well.
然后也看到了世界的一部分。

128
00:07:12,090 --> 00:07:15,330
So eventually, we received a follow-up email saying, "Hi, David.
所以最终我们收到了一封回复邮件，上面写着：“嗨，大卫。

129
00:07:15,330 --> 00:07:19,350
I intend to arrive for the fair between 8:37 AM and 9:47 AM.
我打算在早上8:37到9:47之间到达集市。

130
00:07:19,350 --> 00:07:22,380
It would be easier for my MIT hacker friends to bring me to the right
这样我的麻省理工学院黑客朋友们就可以更容易地把我带到正确的地方

131
00:07:22,380 --> 00:07:26,220
location if there's someone waiting there with a sign that says 'Duck'."
如果那里有人拿着一个写着“鸭子”的牌子在等着。”

132
00:07:26,220 --> 00:07:29,743
I'm not sure if we actually stood there with a sign holding duck,
我不确定我们是否真的站在那里，拿着一个写着鸭子的牌子，

133
00:07:29,743 --> 00:07:32,160
but it turns out they came actually earlier in the morning
但事实证明，他们在早上早些时候就来了

134
00:07:32,160 --> 00:07:33,720
to escape detection altogether.
以完全避免被发现。

135
00:07:33,720 --> 00:07:37,420
The duck found its home and everyone lived happily ever after.
鸭子找到了家，从此大家都过上了幸福的生活。

136
00:07:37,420 --> 00:07:39,240
And here the duck is again today.
今天鸭子又回来了。

137
00:07:39,240 --> 00:07:41,640
But our props to our friends down the road at MIT
但我们感谢麻省理工学院的朋友们

138
00:07:41,640 --> 00:07:45,210
for returning the duck safely and for going to such crazy lengths
安全地归还了鸭子，并且为了将我们列入麻省理工学院的黑客画廊而付出了如此疯狂的努力

139
00:07:45,210 --> 00:07:49,680
to put us in the annals of MIT's Hacks Gallery.
将我们列入麻省理工学院黑客画廊的历史。

140
00:07:49,680 --> 00:07:53,400
In fact, in exchange for this, we sent them a little package.
事实上，作为交换，我们给他们送了一个小包裹。

141
00:07:53,400 --> 00:07:55,650
And without telling you what it is, you can read more
不告诉你是什么，你可以阅读更多

142
00:07:55,650 --> 00:07:57,960
about this here hack that's now been immortalized
关于这个现在已被载入史册的黑客

143
00:07:57,960 --> 00:08:01,320
on hacks.mit.edu at this URL here.
在 hacks.mit.edu 上的这个 URL 链接。

144
00:08:01,320 --> 00:08:03,180
So maybe round of applause for our friends
所以也许让我们为我们的朋友鼓掌

145
00:08:03,180 --> 00:08:06,030
down the road for having pulled that off a year ago.
为他们一年前做到了这一点。

146
00:08:06,030 --> 00:08:07,000
[APPLAUSE]
[掌声]

147
00:08:07,000 --> 00:08:12,550
So before we dive into some of today's material,
所以在我们深入了解今天的一些内容之前，

148
00:08:12,550 --> 00:08:15,190
I wanted to give you a sense of what lies ahead as well.
我想让你了解一下未来将要发生的事情。

149
00:08:15,190 --> 00:08:17,850
So this year's CS50 Hackathon is an annual tradition,
所以今年的 CS50 黑客马拉松是一个年度传统，

150
00:08:17,850 --> 00:08:20,458
whereby students here at Harvard and our friends from Yale who
哈佛大学的学生和来自耶鲁大学的朋友们

151
00:08:20,458 --> 00:08:22,500
will take buses in the other direction to join us
将乘坐巴士朝另一个方向来加入我们

152
00:08:22,500 --> 00:08:26,130
in about a week's time for an epic all-nighter, starting roughly at 7:00
在大约一周的时间里，我们将进行一场史诗般的通宵活动，大约从晚上 7:00 开始

153
00:08:26,130 --> 00:08:28,890
PM ending roughly at 7:00 AM will be punctuated
下午结束，大约在早上 7:00 结束，期间将穿插着

154
00:08:28,890 --> 00:08:32,640
by multiple meals, first meal-- first dinner around 9:00 PM, second dinner
多顿饭，第一顿饭——第一顿晚餐大约在晚上 9:00，第二顿晚餐

155
00:08:32,640 --> 00:08:33,480
around 1:00 AM.
大约在凌晨 1:00。

156
00:08:33,480 --> 00:08:35,607
And those of you who still have the energy
对于那些仍然有精力的人来说，

157
00:08:35,607 --> 00:08:38,190
and are still awake around 5:00 AM, we'll hop in a shuttle bus
并且在凌晨 5:00 左右仍然清醒，我们将乘坐班车

158
00:08:38,190 --> 00:08:41,100
and head down to IHOP, the larger one down the road,
前往 IHOP，路边较大的那个，

159
00:08:41,100 --> 00:08:44,430
not the one in the square, and have a little bit of breakfast together.
不是广场上的那个，我们将一起吃一点早餐。

160
00:08:44,430 --> 00:08:46,140
The evening typically begins a little bit
晚上通常会以一种略带

161
00:08:46,140 --> 00:08:48,223
like this with a lot of energy, the focus of which
这样的方式开始，充满了活力，重点是

162
00:08:48,223 --> 00:08:50,310
is entirely on final projects.
完全在最终项目上。

163
00:08:50,310 --> 00:08:52,110
The staff will be present, but the intent
工作人员会到场，但目的

164
00:08:52,110 --> 00:08:54,622
is not to be 12 hours of office hours.
不是为了进行 12 小时的办公室时间。

165
00:08:54,622 --> 00:08:57,330
Indeed, the staff will be working on their own projects or psets,
事实上，工作人员将忙于自己的项目或作业，

166
00:08:57,330 --> 00:09:01,230
final projects, and the like, but to guide you toward and point you
最终项目等等，但目的是引导你并指引你

167
00:09:01,230 --> 00:09:03,720
in the direction of solutions to new problems you have.
找到你遇到的新问题的解决方案。

168
00:09:03,720 --> 00:09:09,450
And we do think that the duck, and in turn, AI, CS50.ai and other tools
我们确实认为，Duck，进而，AI，CS50.ai 和其他工具

169
00:09:09,450 --> 00:09:13,440
you'll now be able to use, including the actual ChatGPT, the actual GitHub
你现在可以使用的，包括真正的 ChatGPT，真正的 GitHub

170
00:09:13,440 --> 00:09:17,040
Copilot, or other AI tools which are now reasonable to use
Copilot，或其他现在可以使用的人工智能工具

171
00:09:17,040 --> 00:09:19,890
at this point in the semester as you off board from CS50
在学期中的这个时候，当你从 CS50 毕业时

172
00:09:19,890 --> 00:09:21,300
and enter the real world.
并进入现实世界。

173
00:09:21,300 --> 00:09:24,540
Should be an opportunity for you to take your newfound knowledge of software
应该是一个机会，让你将你新获得的软件知识

174
00:09:24,540 --> 00:09:27,600
out for a spin and build something of your very own, something
运用起来并构建一些你自己的东西，一些

175
00:09:27,600 --> 00:09:30,510
that even maybe the TFs and myself have never dabbled in before,
甚至可能是助教和我以前从未涉足过的东西，

176
00:09:30,510 --> 00:09:33,600
but with all of this now software support by your side.
但现在有了这些软件支持在你身边。

177
00:09:33,600 --> 00:09:37,590
This here is our very own CS50 shuttles that will take us then to IHOP.
这里是我们自己的 CS50 班车，将带我们前往 IHOP。

178
00:09:37,590 --> 00:09:40,770
And then a week after that is the epic CS50
然后一周后就是史诗般的 CS50

179
00:09:40,770 --> 00:09:43,650
fair, which will be an opportunity to showcase what it is you'll
博览会，这将是一个机会展示你将在

180
00:09:43,650 --> 00:09:46,630
pull off over the next few weeks to students, faculty,
未来几周内完成的事情，向学生、教职工

181
00:09:46,630 --> 00:09:47,940
and staff across campus.
和校园里的工作人员展示。

182
00:09:47,940 --> 00:09:50,820
More details to come, but you'll bring over your laptop or phone
更多细节将陆续公布，但你要带上你的笔记本电脑或手机

183
00:09:50,820 --> 00:09:52,170
to a large space on campus.
到校园的一个大空间。

184
00:09:52,170 --> 00:09:55,110
We'll invite all of your friends, even family if they're around.
我们将邀请你所有的朋友，如果他们就在附近，甚至家人也可以来。

185
00:09:55,110 --> 00:09:57,330
And the goal will be simply to have chats like this
而目标仅仅是像这样进行聊天。

186
00:09:57,330 --> 00:09:59,640
and present your final project to passersby.
并向路人展示你的最终项目。

187
00:09:59,640 --> 00:10:01,950
There'll be a bit of an incentive model, whereby
我们会有一些激励机制，这样

188
00:10:01,950 --> 00:10:04,050
anyone who chats you up about their project,
任何与你讨论他们项目的人，

189
00:10:04,050 --> 00:10:05,490
you can give a little sticker to.
你可以给他们一个小贴纸。

190
00:10:05,490 --> 00:10:08,220
And that will enter them into a raffle for fabulous prizes
这会让他们有机会参与抽奖，获得丰厚的奖品

191
00:10:08,220 --> 00:10:10,630
to grease the wheels of conversations as well.
也为对话提供一些动力。

192
00:10:10,630 --> 00:10:14,740
And you'll see faculty from across campus join us as well.
你还会看到来自校园各处的教职工加入我们。

193
00:10:14,740 --> 00:10:18,510
But ultimately, you walk out of that event with this here CS50 shirt,
但最终，你将带着这件CS50 T恤离开活动，

194
00:10:18,510 --> 00:10:23,250
one like it, so you too, can proudly proclaim that you indeed took CS50.
像这样一件，这样你也可以自豪地宣称你确实参加了CS50。

195
00:10:23,250 --> 00:10:27,160
So all that and more to come, resting on finally, those final projects.
所以所有这些以及更多，都将最终落脚在这些最终项目上。

196
00:10:27,160 --> 00:10:28,035
But how to get there.
但如何才能做到呢？

197
00:10:28,035 --> 00:10:30,535
So here are some general advice that's not necessarily going
所以这里有一些普遍的建议，它们不一定适用于

198
00:10:30,535 --> 00:10:32,190
to be applicable to all final projects.
所有最终项目。

199
00:10:32,190 --> 00:10:35,140
But as we exit CS50 and enter the real world,
但当我们离开CS50进入现实世界时，

200
00:10:35,140 --> 00:10:38,460
here are some tips on what you might read, what you might download,
这里有一些关于你可能阅读什么、下载什么的建议，

201
00:10:38,460 --> 00:10:42,730
sort of starting points so that in answer to the FAQ, what now?
是某种起点，以便回答常见问题解答：现在该做什么？

202
00:10:42,730 --> 00:10:45,030
So for instance, if you would like to begin
例如，如果你想开始

203
00:10:45,030 --> 00:10:49,020
to experience on your own Mac or PC more of the programming environment
在你的Mac或PC上体验更多编程环境

204
00:10:49,020 --> 00:10:53,670
that we provided to you, sort of turnkey style in the cloud using cs50.dev,
我们为你提供的，用cs50.dev在云端提供的一种交钥匙式的服务，

205
00:10:53,670 --> 00:10:57,790
you can actually install command line tools on your own laptop, desktop,
你实际上可以在自己的笔记本电脑、台式机上安装命令行工具，

206
00:10:57,790 --> 00:10:58,320
or the like.
或者类似的设备。

207
00:10:58,320 --> 00:10:59,910
For instance, Apple has their own.
例如，苹果有他们自己的。

208
00:10:59,910 --> 00:11:00,900
Windows has their own.
Windows也有他们自己的。

209
00:11:00,900 --> 00:11:03,150
So you can open a terminal window on your own computer
所以你可以在自己的电脑上打开一个终端窗口

210
00:11:03,150 --> 00:11:06,210
and execute much of the same commands that you've been doing in Linux
并执行你在Linux中一直在执行的许多相同命令

211
00:11:06,210 --> 00:11:07,200
this whole term.
整个学期。

212
00:11:07,200 --> 00:11:10,320
Learning Git, so Git is version control software.
学习Git，Git是版本控制软件。

213
00:11:10,320 --> 00:11:12,560
And it's very, very popular in industry.
它在业界非常流行。

214
00:11:12,560 --> 00:11:16,882
And it's a mechanism for saving multiple versions of your files.
它是一种保存你文件多个版本的机制。

215
00:11:16,882 --> 00:11:19,340
Now, this is something you might be familiar with if still,
现在，这可能是你熟悉的事情，即使

216
00:11:19,340 --> 00:11:23,060
even using file names in the real world, like on your Mac or PC--
在现实世界中使用文件名，比如在你的Mac或PC上——

217
00:11:23,060 --> 00:11:26,120
maybe this is resume version 1, resume version 2,
也许这是简历版本1，简历版本2，

218
00:11:26,120 --> 00:11:30,380
resume Monday night version, resume Tuesday, or whatever the case may be.
周一晚上版本的简历，周二版本的简历，或者其他任何情况。

219
00:11:30,380 --> 00:11:33,500
If you're using Google documents, this happens automatically nowadays.
如果你使用谷歌文档，现在这会自动发生。

220
00:11:33,500 --> 00:11:36,830
But with code, it can happen automatically, but also
但对于代码来说，它可以自动发生，但也可以

221
00:11:36,830 --> 00:11:39,380
more methodically using this here tool.
使用这个工具更有条理地进行。

222
00:11:39,380 --> 00:11:43,130
And Git is a very popular tool for collaborating with others as well.
Git也是一个非常流行的工具，用于与他人协作。

223
00:11:43,130 --> 00:11:45,050
And you've actually been secretly using it
而你实际上一直在秘密使用它

224
00:11:45,050 --> 00:11:47,540
underneath the hood for a lot of CS50's tools.
在CS50的许多工具背后。

225
00:11:47,540 --> 00:11:49,490
But we've abstracted away some of the details.
但我们抽象了一些细节。

226
00:11:49,490 --> 00:11:52,160
But Brian, via this video and any number of other references,
但布莱恩，通过这个视频和许多其他参考资料，

227
00:11:52,160 --> 00:11:55,500
can peel back that abstraction and show you how to use it more manually.
可以剥开抽象层，向你展示如何更手动地使用它。

228
00:11:55,500 --> 00:11:58,680
You don't need to use cs50.dev anymore but you are welcome to.
你不再需要使用cs50.dev，但你也可以使用。

229
00:11:58,680 --> 00:12:01,820
You can instead install VS Code onto your own Mac or PC.
你可以改为将VS Code安装到自己的Mac或PC上。

230
00:12:01,820 --> 00:12:04,307
If you go to this first URL here, it's a free download.
如果你访问这里第一个URL，它是免费下载的。

231
00:12:04,307 --> 00:12:05,390
It's actually open source.
它实际上是开源的。

232
00:12:05,390 --> 00:12:08,330
So you can even poke around and see how it, itself is built.
所以你甚至可以四处看看，看看它本身是如何构建的。

233
00:12:08,330 --> 00:12:11,090
And at CS50's own documentation, we have some tips
在 CS50 自身的文档中，我们有一些提示

234
00:12:11,090 --> 00:12:15,160
for making it look like CS50's environment even if longer term,
让它看起来像 CS50 的环境，即使从长远来看，

235
00:12:15,160 --> 00:12:17,490
you want to cut the cord entirely.
你想要彻底断开连接。

236
00:12:17,490 --> 00:12:18,730
What can you now do?
你现在能做什么？

237
00:12:18,730 --> 00:12:20,550
Well, many of you for your final projects
好吧，你们很多人在你们的最终项目中

238
00:12:20,550 --> 00:12:24,570
will typically tackle websites, sort of building on the ideas of problem
通常会处理网站，从问题的想法出发

239
00:12:24,570 --> 00:12:28,510
set 9, CS50 finance and the like, or just generally something dynamic.
集 9，CS50 金融等等，或者只是一般性的动态东西。

240
00:12:28,510 --> 00:12:32,940
But if you instead want to host a portfolio, like just your resume, just
但如果你想托管一个投资组合，比如你的简历，只是

241
00:12:32,940 --> 00:12:35,730
projects you've worked on and the like, a static websites
你已经完成的项目等等，一个静态网站

242
00:12:35,730 --> 00:12:38,280
can be hosted for free via various services.
可以通过各种服务免费托管。

243
00:12:38,280 --> 00:12:41,190
A popular one is this URL here, called GitHub pages.
一个流行的是这里的 URL，叫做 GitHub Pages。

244
00:12:41,190 --> 00:12:43,440
There's another service that offers a free tier called
还有另一个提供免费层级的服务，叫做

245
00:12:43,440 --> 00:12:47,610
Netlify that can allow you to host your own projects statically for free.
Netlify，它可以让你免费静态地托管自己的项目。

246
00:12:47,610 --> 00:12:51,210
But when it comes to more dynamic hosting, you have many more options.
但当涉及到更动态的托管时，你还有更多选择。

247
00:12:51,210 --> 00:12:53,140
And these are just some of the most popular.
这些只是一些最流行的。

248
00:12:53,140 --> 00:12:55,560
The first three are some of the biggest cloud providers
前三个是最大的云提供商

249
00:12:55,560 --> 00:13:00,120
nowadays, whether it's Amazon or Microsoft Azure or Google services.
如今，无论是亚马逊，还是微软 Azure，还是谷歌服务。

250
00:13:00,120 --> 00:13:03,967
If you go to this fourth URL here, this is GitHub's education pack,
如果你访问这里第四个 URL，这是 GitHub 的教育包，

251
00:13:03,967 --> 00:13:06,300
they essentially broker with lots of different companies
他们本质上是与许多不同的公司合作

252
00:13:06,300 --> 00:13:08,760
to give students, specifically, discounts on
为学生提供特定工具的折扣

253
00:13:08,760 --> 00:13:10,550
or free access to a lot of tools.
或者免费访问许多工具。

254
00:13:10,550 --> 00:13:13,050
So you might want to sign up for that while you're eligible.
所以在你符合条件的时候，你可能想注册。

255
00:13:13,050 --> 00:13:16,350
And then lastly, here are two other popular third-party, but not
最后，这里还有两个流行的第三方，但不是

256
00:13:16,350 --> 00:13:18,480
free services, but that are very commonly
免费服务，但它们非常普遍

257
00:13:18,480 --> 00:13:20,798
used when you want to host actual web applications.
在你想要托管实际的 web 应用程序时使用。

258
00:13:20,798 --> 00:13:23,340
So maybe it's Flask, maybe it's something else, but something
所以可能是 Flask，也可能是其他东西，但一些

259
00:13:23,340 --> 00:13:26,310
that involves some input and output.
涉及到一些输入和输出。

260
00:13:26,310 --> 00:13:29,170
Questions meanwhile-- so there's just lots of communities.
与此同时，问题-- 所以有很多社区。

261
00:13:29,170 --> 00:13:32,190
If you want to keep an eye on what's happening in tech,
如果你想关注科技领域正在发生的事情，

262
00:13:32,190 --> 00:13:34,470
these are just some of the popular options.
这些只是一些流行的选择。

263
00:13:34,470 --> 00:13:36,735
And undoubtedly, if you have some techie friends,
毫无疑问，如果你有一些技术朋友，

264
00:13:36,735 --> 00:13:38,110
they'll have suggestions as well.
他们也会有一些建议。

265
00:13:38,110 --> 00:13:40,590
But you might find some of these destinations of interest.
但你可能会发现这些目的地很有趣。

266
00:13:40,590 --> 00:13:44,970
Of course increasingly, will you just ask questions of software itself,
当然，你会越来越多地直接向软件本身提问，

267
00:13:44,970 --> 00:13:50,020
AI, whether it's ChatGPT, GitHub Copilot, or the like.
人工智能，无论是 ChatGPT，还是 GitHub Copilot，或者类似的东西。

268
00:13:50,020 --> 00:13:53,320
And then classes, we're clearly a little biased here with what's on the screen.
然后是课程，我们对屏幕上的内容明显有一些偏见。

269
00:13:53,320 --> 00:13:57,570
So these aren't college classes per se, but freely available OpenCourseWare
所以这些不是大学课程本身，而是免费提供的公开课

270
00:13:57,570 --> 00:14:00,180
courses that CS50's team has put together over time.
课程，CS50 的团队随着时间的推移汇集在一起。

271
00:14:00,180 --> 00:14:03,780
And in a nutshell as you can infer from the suffix of each of these URLs,
简而言之，正如你从每个 URL 的后缀中推断出的那样，

272
00:14:03,780 --> 00:14:05,940
if you want to learn more about Python, CS50
如果你想了解更多关于 Python 的知识，CS50

273
00:14:05,940 --> 00:14:09,150
has got a free, open online class for that, or SQL, thanks
有一个免费的开放式在线课程，或者 SQL，感谢

274
00:14:09,150 --> 00:14:13,770
to Carter, web and AI stuff, thanks to Brian, a games class, thanks to Colton,
卡特，网络和人工智能的东西，感谢布莱恩，一个游戏课程，感谢科尔顿，

275
00:14:13,770 --> 00:14:17,570
cybersecurity, which will extend where we leave off today.
网络安全，这将扩展我们今天停下来的地方。

276
00:14:17,570 --> 00:14:19,320
And then if you're more interested, not so
如果你更感兴趣，而不是

277
00:14:19,320 --> 00:14:22,590
much in coding and going more deeply into software,
那么多的编码和更深入地研究软件，

278
00:14:22,590 --> 00:14:28,140
but want to take a step higher level and focus more on intersections of computer
但想更上一层楼，更多地关注计算机的交叉点

279
00:14:28,140 --> 00:14:30,122
science with business or law or technology,
科学与商业、法律或技术，

280
00:14:30,122 --> 00:14:31,830
those two are freely available, if you're
这两者都可以免费获得，如果你

281
00:14:31,830 --> 00:14:35,850
looking for something to do over January the summer or just to dabble over time.
正在寻找一些在1月、夏季或只是在一段时间内做的事情。

282
00:14:35,850 --> 00:14:37,830
And there's innumerable other free resources
还有无数其他的免费资源

283
00:14:37,830 --> 00:14:42,090
from other folks on the internet as well certainly too.
当然还有来自互联网上其他人的资源。

284
00:14:42,090 --> 00:14:45,510
All right, so a few invitations and thank yous.
好的，所以一些邀请和感谢。

285
00:14:45,510 --> 00:14:49,470
So one, after today, after we dive into and out of cybersecurity,
所以首先，在今天之后，在我们深入和退出网络安全之后，

286
00:14:49,470 --> 00:14:52,590
please do stay in touch via any of CS50's online communities.
请通过 CS50 的任何在线社区保持联系。

287
00:14:52,590 --> 00:14:55,710
As we start to recruit next year's team for teaching fellows, teaching
随着我们开始招募明年的教学研究员、教学

288
00:14:55,710 --> 00:14:58,560
assistants, course assistants, we'll be in touch via email
助理、课程助理，我们会通过电子邮件联系

289
00:14:58,560 --> 00:15:01,030
for those opportunities as well.
这些机会。

290
00:15:01,030 --> 00:15:04,780
And now some thanks for the group before we then dive into here today's topic.
现在，在我们深入今天的主题之前，先感谢一下大家。

291
00:15:04,780 --> 00:15:08,430
So one, allow me to thank our hosts here for giving us
所以首先，让我感谢我们在这里的主人，给了我们

292
00:15:08,430 --> 00:15:12,150
access to such a wonderful, privileged space to just hold classes in,
如此美妙、特权的空间来举办课程，

293
00:15:12,150 --> 00:15:13,740
the whole team for Memorial Hall.
纪念馆的全体团队。

294
00:15:13,740 --> 00:15:17,610
Our thanks too, to ESS, which is the team that makes everything sound so
我们也要感谢 ESS，他们是让一切听起来如此棒的团队

295
00:15:17,610 --> 00:15:20,880
good in spaces like this with music, mics, and the like, our friends,
好的空间，比如这里，有音乐、麦克风等等，我们的朋友，

296
00:15:20,880 --> 00:15:23,580
of course, Wesley down the road at Changsho, where we went most
当然，路边的 Wesley 在 Changsho，我们大多数

297
00:15:23,580 --> 00:15:25,380
every other Friday this semester.
这个学期每隔一个星期五都会去那里。

298
00:15:25,380 --> 00:15:28,050
If you've never actually been, or if you're hearing this online,
如果你从未去过，或者你在网上听到这个，

299
00:15:28,050 --> 00:15:31,320
please join our friends at Changsho show on Mass Ave down the road
请加入我们朋友在路边 Mass Ave 上的 Changsho 展览

300
00:15:31,320 --> 00:15:32,760
any time you might like.
任何你喜欢的时刻。

301
00:15:32,760 --> 00:15:35,970
And then especially, CS50's team-- there's quite a few humans
然后特别是 CS50 的团队，房间里有很多人类

302
00:15:35,970 --> 00:15:40,320
operating cameras in the room, both here and way in back, as well as online.
在房间里操作摄像机，这里和后面以及在线上。

303
00:15:40,320 --> 00:15:41,340
My thanks.
谢谢大家。

304
00:15:41,340 --> 00:15:42,580
[APPLAUSE]
[掌声]

305
00:15:42,580 --> 00:15:48,020
Thank you to them for making this look and sound so good.
感谢他们让这一切看起来和听起来如此棒。

306
00:15:48,020 --> 00:15:50,630
And what you don't see is when I do actually screw up,
而你没有看到的是，当我确实搞砸的时候，

307
00:15:50,630 --> 00:15:53,030
even if we don't fix it in real time, they very kindly
即使我们没有实时修复，他们也很友善地

308
00:15:53,030 --> 00:15:56,870
help us go back in time, fix things, so that your successors have hopefully,
帮助我们回到过去，修复问题，这样你的继任者将有望

309
00:15:56,870 --> 00:15:59,310
an even improved version as well.
得到一个更好的版本。

310
00:15:59,310 --> 00:16:03,770
And then as well, CS50's own Sophie Anderson,
还有，CS50 自己的 Sophie Anderson，

311
00:16:03,770 --> 00:16:06,050
who is the daughter of one of CS50's teaching fellows
她是 CS50 的一名教学研究员的女儿

312
00:16:06,050 --> 00:16:08,960
who lives all the way over in New Zealand, who has wonderfully
住在遥远的纽西兰，她非常棒地

313
00:16:08,960 --> 00:16:12,110
brought the CS50 duck to life in this animated form.
让 CS50 鸭子以动画的形式栩栩如生。

314
00:16:12,110 --> 00:16:16,040
thanks to Sophie, this duck is now everywhere, including most recently,
感谢 Sophie，这只鸭子现在无处不在，包括最近，

315
00:16:16,040 --> 00:16:17,660
on some T-shirts too.
在一些 T 恤上。

316
00:16:17,660 --> 00:16:20,060
But of course, we have this massive support structure
但当然，我们有这个庞大的支持结构

317
00:16:20,060 --> 00:16:21,530
in the form of the team.
以团队的形式。

318
00:16:21,530 --> 00:16:23,810
This is some of our past team members, but who
这些是我们过去的一些团队成员，但他们

319
00:16:23,810 --> 00:16:26,690
wonderfully via Zoom you'll recall in week seven,
记得在第七周通过 Zoom 非常棒地

320
00:16:26,690 --> 00:16:31,350
showed us how TCP/IP works by passing those envelopes up,
向我们展示了 TCP/IP 的工作原理，通过向上传递这些信封，

321
00:16:31,350 --> 00:16:32,510
down, left, and right.
向下、向左和向右。

322
00:16:32,510 --> 00:16:35,060
I commented at the time, disclaim, that it actually took us
当时我评论说，声明一下，这实际上需要我们

323
00:16:35,060 --> 00:16:36,600
quite a bit of effort to do that.
花费了不少努力。

324
00:16:36,600 --> 00:16:39,770
And so I thought I would share as a representative thanks
所以我想代表大家表达感谢，

325
00:16:39,770 --> 00:16:45,240
of our whole teaching team, whether it's Carter and Julia and Ozan and Cody
无论是谁，卡特，茱莉亚，奥赞，科迪，

326
00:16:45,240 --> 00:16:48,930
and all of C50's team members in Cambridge in New Hey,
以及所有C50团队成员，在剑桥，在纽黑，

327
00:16:48,930 --> 00:16:52,740
thought I'd give you a look behind the scenes at how things go indeed,
我想让你们看看幕后究竟是怎么运作的，

328
00:16:52,740 --> 00:16:54,900
behind the scenes that you don't necessarily see.
一些你通常看不到的幕后内容。

329
00:16:54,900 --> 00:16:58,243
So let me switch over here and hit play.
所以让我切换过来，然后点击播放。

330
00:16:58,243 --> 00:16:58,910
[VIDEO PLAYBACK]
[视频播放]

331
00:16:58,910 --> 00:16:59,410
[INAUDIBLE]
[听不清]

332
00:16:59,410 --> 00:17:01,410
[INAUDIBLE] Buffering.
[听不清] 正在缓冲。

333
00:17:01,410 --> 00:17:03,600
OK.
好的。

334
00:17:03,600 --> 00:17:04,440
Josh?
乔希？

335
00:17:04,440 --> 00:17:06,430
Nice.
不错。

336
00:17:06,430 --> 00:17:07,079
Helen?
海伦？

337
00:17:07,079 --> 00:17:07,819
Oh.
哦。

338
00:17:07,819 --> 00:17:10,926
[CHUCKLING]
[咯咯的笑]

339
00:17:12,294 --> 00:17:14,144
[INAUDIBLE] Moni-- no, oh, wait.
[听不清] 莫妮——不，哦，等等。

340
00:17:20,060 --> 00:17:21,019
That was amazing, Josh.
太棒了，乔希。

341
00:17:25,644 --> 00:17:26,144
Sophie.
索菲。

342
00:17:33,420 --> 00:17:35,700
Amazing.
太棒了。

343
00:17:35,700 --> 00:17:37,840
That was perfect.
太完美了。

344
00:17:37,840 --> 00:17:38,340
Moni.
莫妮。

345
00:17:38,340 --> 00:17:42,940
[LAUGHTER] I think I--
[笑声] 我想我——

346
00:17:42,940 --> 00:17:44,760
[INTERPOSING VOICES]
[声音交叠]

347
00:17:44,760 --> 00:17:47,620
- Over to you, [INAUDIBLE].
- 轮到你了，[听不清]。

348
00:17:47,620 --> 00:17:48,120
Guy.
盖伊。

349
00:17:52,110 --> 00:17:53,310
That was amazing.
太棒了。

350
00:17:53,310 --> 00:17:54,225
Thank you all.
谢谢大家。

351
00:17:54,225 --> 00:17:54,800
- So good.
- 太好了。

352
00:17:54,800 --> 00:17:55,240
[END PLAYBACK]
[视频结束]

353
00:17:55,240 --> 00:17:57,115
DAVID MALAN: All right, these outtakes aside,
大卫·马兰：好了，这些花絮放在一边，

354
00:17:57,115 --> 00:18:00,510
my thanks to the whole teaching team for making this whole class possible.
感谢整个教学团队让这堂课成为可能。

355
00:18:00,510 --> 00:18:03,497
[APPLAUSE]
[掌声]

356
00:18:03,497 --> 00:18:05,980
So cybersecurity, this refers to the process
所以网络安全，指的是保护我们的系统，数据，账户等等，

357
00:18:05,980 --> 00:18:09,310
of keeping secure our systems, our data, our accounts, and.
的过程。

358
00:18:09,310 --> 00:18:12,550
More and it's something that's going to be increasingly important, as it
而且它会越来越重要，因为

359
00:18:12,550 --> 00:18:15,910
already is, just because of the sheer omnipresence of technology
已经这样了，仅仅因为科技无处不在，

360
00:18:15,910 --> 00:18:18,650
on our desks, on our laps, in our pockets, and beyond.
在我们的桌子上，在我们的腿上，在我们的口袋里，以及其他地方。

361
00:18:18,650 --> 00:18:19,900
So exactly what is it?
那么究竟是什么呢？

362
00:18:19,900 --> 00:18:23,650
And how can we, as students of computer science over the past many weeks,
我们作为计算机科学专业的学生，在过去几周里，

363
00:18:23,650 --> 00:18:27,700
think about things a little more methodically, a little more carefully,
如何以更系统，更仔细的方式思考问题，

364
00:18:27,700 --> 00:18:31,060
and maybe even put some numbers to the intuition that I think a lot of you
甚至用一些数据来量化我的直觉，我认为你们很多人

365
00:18:31,060 --> 00:18:34,930
probably have when it comes to deciding, is something secure or is it not?
在决定某件事是否安全的时候，可能也会有这样的直觉。

366
00:18:34,930 --> 00:18:38,170
So first of all, what does it mean for something to be secure?
首先，什么是安全？

367
00:18:38,170 --> 00:18:42,140
How might you as citizens of the world now answer that question?
你们作为世界公民，现在会怎么回答这个问题？

368
00:18:42,140 --> 00:18:43,510
What does it mean to be secure?
什么是安全？

369
00:18:43,510 --> 00:18:45,010
AUDIENCE: Resistant to attack.
观众：抵御攻击。

370
00:18:45,010 --> 00:18:47,950
DAVID MALAN: OK, so resistant to attack, I like that formulation.
大卫·马兰：好的，抵御攻击，我喜欢这个说法。

371
00:18:47,950 --> 00:18:52,110
Other thoughts on what it means to be secure?
还有什么关于安全的看法？

372
00:18:52,110 --> 00:18:52,860
What does it mean?
这是什么意思？

373
00:18:52,860 --> 00:18:53,388
Yeah.
是的。

374
00:18:53,388 --> 00:18:55,180
AUDIENCE: You control who has access to it.
观众：你可以控制谁可以访问它。

375
00:18:55,180 --> 00:18:58,270
DAVID MALAN: Yeah, so you control who has access to something.
大卫·马兰：是的，所以你可以控制谁可以访问某些东西。

376
00:18:58,270 --> 00:19:01,660
And there's these techniques known as authentication, like logging in,
这些技术被称为身份验证，就像登录一样，

377
00:19:01,660 --> 00:19:03,910
authorization, deciding whether or not that person,
授权，决定这个人是否

378
00:19:03,910 --> 00:19:06,220
once authenticated, should have access to things.
在经过身份验证后，应该有权访问某些东西。

379
00:19:06,220 --> 00:19:08,110
And, of course, you and I are very commonly
当然，我们都非常习惯于

380
00:19:08,110 --> 00:19:10,900
in the habit of using fairly primitive mechanisms still.
使用相当原始的机制。

381
00:19:10,900 --> 00:19:13,688
Although, we'll touch today on some technologies
虽然，我们今天会触及一些技术

382
00:19:13,688 --> 00:19:16,730
that we'll see all the more of in the weeks and months and years to come.
我们将在未来几周、几个月和几年中看到更多。

383
00:19:16,730 --> 00:19:18,480
But you and I are pretty much in the habit
但我们都习惯于

384
00:19:18,480 --> 00:19:21,393
of relying on passwords for most everything still today.
仍然依赖密码来完成大部分事情。

385
00:19:21,393 --> 00:19:23,560
And so we thought we'd begin with exactly this topic
所以我们想从这个主题开始

386
00:19:23,560 --> 00:19:27,730
to consider just how secure or insecure is this mechanism and why
来考虑这种机制到底有多安全或不安全，以及原因。

387
00:19:27,730 --> 00:19:29,755
and see if we can't evaluate it a little more
并看看我们是否可以更系统地对其进行评估

388
00:19:29,755 --> 00:19:32,380
methodically so that we can make more than intuitive arguments,
以便我们可以提出更具说服力的论据，而不仅仅是直觉上的论据。

389
00:19:32,380 --> 00:19:34,940
but quantitative compelling arguments as well.
还有定量的有力的论据。

390
00:19:34,940 --> 00:19:38,890
So unfortunately we humans are not so good at choosing passwords.
不幸的是，我们人类不太擅长选择密码。

391
00:19:38,890 --> 00:19:41,723
And every year, accounts are hacked into.
而且每年都会有账户被黑客入侵。

392
00:19:41,723 --> 00:19:44,140
Maybe yours, maybe your friends, maybe your family members
也许是你的，也许是你的朋友，也许是你的家人

393
00:19:44,140 --> 00:19:45,640
have experienced this already.
已经经历过这种情况。

394
00:19:45,640 --> 00:19:48,100
And this unfortunately happens to so many people online.
不幸的是，这种情况发生在很多网民身上。

395
00:19:48,100 --> 00:19:50,140
But, fortunately, there are security researchers
但幸运的是，世界上有安全研究人员

396
00:19:50,140 --> 00:19:54,350
in the world that take a look at attacks once they have happened,
他们在攻击发生后会研究攻击，

397
00:19:54,350 --> 00:19:58,550
particularly when data from attacks, databases, are posted online
特别是当攻击数据、数据库被发布到网上时

398
00:19:58,550 --> 00:20:01,250
or on the so-called dark web or the like and downloaded
或者在所谓的暗网上或类似地方被下载

399
00:20:01,250 --> 00:20:04,460
by others for malicious purposes, they can also conversely provide us
被其他人用于恶意目的，他们也可以反过来为我们提供

400
00:20:04,460 --> 00:20:07,250
with some insights as to the behavior of us humans
对我们人类行为的一些见解

401
00:20:07,250 --> 00:20:09,770
that might give us some insights as to when and why things
这可能让我们了解到事件发生的时间和原因

402
00:20:09,770 --> 00:20:12,030
are getting attacked successfully.
被成功攻击的原因。

403
00:20:12,030 --> 00:20:15,440
So as of last year, here, for instance, according to one measure
根据一项指标，截至去年，这里列出了

404
00:20:15,440 --> 00:20:18,680
are the top 10 most popular, a.k.a.
最流行的前十个，也称为

405
00:20:18,680 --> 00:20:21,770
worst passwords-- at least according to the data
最糟糕的密码——至少根据数据

406
00:20:21,770 --> 00:20:24,080
that security researchers have been able to glean--
安全研究人员能够收集到的数据——

407
00:20:24,080 --> 00:20:25,860
by attacks that have already happened.
通过已经发生的攻击。

408
00:20:25,860 --> 00:20:29,960
So the number one password as of last year, according to systems compromised,
根据被入侵的系统，去年最常用的密码是

409
00:20:29,960 --> 00:20:33,080
was 123456.
123456。

410
00:20:33,080 --> 00:20:35,360
The second most, admin.
第二常用的密码是 admin。

411
00:20:35,360 --> 00:20:37,970
The third most, 12345678.
第三常用的密码是 12345678。

412
00:20:37,970 --> 00:20:51,080
And thereafter, 123456789, 1234, 12345, password, 123, Aa123456, and then
接下来是 123456789、1234、12345、password、123、Aa123456，然后是

413
00:20:51,080 --> 00:20:53,150
1234567890.
1234567890。

414
00:20:53,150 --> 00:20:54,710
So you can actually infer--
所以你实际上可以推断出——

415
00:20:54,710 --> 00:20:58,970
sort of goofy as some of these are-- you can actually infer certain policies
尽管有些密码很愚蠢——你实际上可以推断出一些规则

416
00:20:58,970 --> 00:20:59,720
from these, right?
从这些密码中，对吧？

417
00:20:59,720 --> 00:21:03,402
The fact that we're taking such little effort to choose our password
我们为选择密码付出的努力如此之少，

418
00:21:03,402 --> 00:21:05,360
seems to correlate really with probably, what's
似乎与可能的是，什么

419
00:21:05,360 --> 00:21:08,400
the minimum length of a password required for systems?
系统要求的密码最小长度有关？

420
00:21:08,400 --> 00:21:10,580
And you can see that at worst, some systems
最糟糕的是，一些系统

421
00:21:10,580 --> 00:21:13,670
require only three digit passwords.
只需要三位数密码。

422
00:21:13,670 --> 00:21:17,840
And maybe they might require six or eight or nine or even 10.
也许它们可能需要六位或八位或九位，甚至十位。

423
00:21:17,840 --> 00:21:22,670
But you can kind of infer corporate or policies from these passwords alone.
但你光凭这些密码就可以推断出公司或政策。

424
00:21:22,670 --> 00:21:26,318
If you keep going through the list, there's some funnier ones even down
如果你继续浏览列表，你会发现更有趣的一些，甚至在列表的

425
00:21:26,318 --> 00:21:28,110
the list that are nonetheless enlightening.
底部也有，这些仍然具有启发性。

426
00:21:28,110 --> 00:21:31,820
So, for instance, lower on the list is Iloveyou, no spaces.
例如，列表的较低位置是 Iloveyou，没有空格。

427
00:21:31,820 --> 00:21:34,620
Sort of adorable, maybe it's meaningful to you.
有点可爱，也许对你来说很有意义。

428
00:21:34,620 --> 00:21:37,860
But if you can think of it, so can an adversary,
但如果你能想到它，攻击者也能想到它，

429
00:21:37,860 --> 00:21:41,750
so can some hacker, so much so that it's this popular on these lists.
一些黑客也能想到它，以至于它在这些列表中如此流行。

430
00:21:41,750 --> 00:21:48,660
Qwertyuiop, it's not quite English, but its derivative of English keyboards.
Qwertyuiop，它不太像英语，但它源自英语键盘。

431
00:21:48,660 --> 00:21:49,160
Anyone?
有人知道吗？

432
00:21:49,160 --> 00:21:51,560
Yeah, so this is, if you look at a US English keyboard,
是的，所以，如果你看一个美式英语键盘，

433
00:21:51,560 --> 00:21:53,450
it's just the top row of keys if you just
它只是顶部的按键行，如果你只是

434
00:21:53,450 --> 00:21:57,290
hit them all together left or right to choose your, therefore, password.
把它们全部一起按下，从左到右，选择你的，因此，密码。

435
00:21:57,290 --> 00:22:00,515
And then this one, "password," which has an at
然后这个，“password”，它有一个@

436
00:22:00,515 --> 00:22:05,090
sign for the A and a zero for the O, which I guess I'm guessing some of you
符号代表A，0代表O，我想我猜你们中有些人

437
00:22:05,090 --> 00:22:06,402
do similar tricks.
会使用类似的技巧。

438
00:22:06,402 --> 00:22:09,110
But this is the thing too, if you think like you're being clever,
但这也是问题所在，如果你认为自己很聪明，

439
00:22:09,110 --> 00:22:11,000
well, there's a lot of other adversaries,
那么，有很多其他的攻击者，

440
00:22:11,000 --> 00:22:14,930
there's a lot of adversaries out there who are just as good at being clever.
有很多攻击者，他们同样擅长耍聪明。

441
00:22:14,930 --> 00:22:17,750
So even heuristics like this that in the past, to be fair,
所以，即使像这样的启发式方法，在过去，公平地说，

442
00:22:17,750 --> 00:22:20,330
you might have been taught to do because it confuses
你可能被教导过这样做，因为它会迷惑

443
00:22:20,330 --> 00:22:23,900
adversaries' or hackers' attempts, unfortunately, if you know to do it,
攻击者或黑客的尝试，不幸的是，如果你知道怎么做，

444
00:22:23,900 --> 00:22:25,260
so does the adversary.
攻击者也知道。

445
00:22:25,260 --> 00:22:29,550
And so your accounts aren't necessarily any more secure as a result.
所以，你的帐户并不一定因此更安全。

446
00:22:29,550 --> 00:22:31,490
So what are some of our takeaways from this?
所以，我们从中学到了一些什么？

447
00:22:31,490 --> 00:22:36,590
Well, one, if you have these lists of passwords, all too possible
好吧，第一，如果你有这些密码列表，很可能

448
00:22:36,590 --> 00:22:39,920
are, for instance, dictionary attacks.
是字典攻击。

449
00:22:39,920 --> 00:22:42,147
Like we literally have published on the internet--
就像我们在互联网上发布的那样——

450
00:22:42,147 --> 00:22:44,480
and there's a citation in the slides if you're curious--
如果你好奇的话，幻灯片中有一个引用——

451
00:22:44,480 --> 00:22:46,340
of these most popular passwords in the world.
这些世界上最流行的密码。

452
00:22:46,340 --> 00:22:49,230
So what's a smart adversary going to do when trying to get into your account?
那么，一个聪明的攻击者在试图进入你的帐户时会怎么做？

453
00:22:49,230 --> 00:22:51,800
They're not necessarily going to try all possible passwords
他们不一定会尝试所有可能的密码

454
00:22:51,800 --> 00:22:53,790
or try your birthday or things like that.
或者尝试你的生日或类似的东西。

455
00:22:53,790 --> 00:22:56,690
They're just going to start with this top 10 list, this top 100 list.
他们只会从前十名的列表开始，前一百名的列表。

456
00:22:56,690 --> 00:22:58,880
And odds are, statistically, in a room this big,
统计上，在这么大的房间里，

457
00:22:58,880 --> 00:23:02,240
they're probably going to get into at least one person's account.
他们很可能会进入至少一个人的帐户。

458
00:23:02,240 --> 00:23:07,710
But let's consider maybe a little more academically what we can do about this.
但让我们更学术地考虑一下，我们可以对这件事做些什么。

459
00:23:07,710 --> 00:23:10,502
And let's start with something simple like the simplest, the most
让我们从一些简单的东西开始，比如最简单的，最

460
00:23:10,502 --> 00:23:12,710
omnipresent device we might all have now is some kind
普遍存在的设备，我们现在可能都有一些，比如某种

461
00:23:12,710 --> 00:23:14,270
of mobile device like a phone.
移动设备，比如手机。

462
00:23:14,270 --> 00:23:16,610
Generally speaking, Apple and Google and others
一般来说，苹果、谷歌和其他公司

463
00:23:16,610 --> 00:23:18,560
are requiring of us that we at least have
要求我们至少要有一个

464
00:23:18,560 --> 00:23:20,990
a passcode or at least you're prompted to set it up
密码，或者至少会提示你设置一个。

465
00:23:20,990 --> 00:23:22,560
even if you therefore opt out of it.
即使您因此选择退出。

466
00:23:22,560 --> 00:23:27,470
But most of us probably have a passcode, be it numeric or alphabetic
但我们大多数人可能都拥有密码，无论是数字还是字母

467
00:23:27,470 --> 00:23:28,590
or something else.
或者其他东西。

468
00:23:28,590 --> 00:23:31,318
So what might we take away from that?
所以我们能从中学到什么？

469
00:23:31,318 --> 00:23:33,110
Well, suppose that you do the bare minimum.
好吧，假设你只做最基本的事情。

470
00:23:33,110 --> 00:23:35,235
And the default for years has generally been having
多年来的默认设置一般是拥有

471
00:23:35,235 --> 00:23:37,790
at least four digits in your passcode.
至少四位数的密码。

472
00:23:37,790 --> 00:23:39,240
Well, what does that mean?
好吧，这意味着什么？

473
00:23:39,240 --> 00:23:40,758
Well, how secure is that?
好吧，那有多安全？

474
00:23:40,758 --> 00:23:42,050
How quickly might it be hacked?
它可能被破解的速度有多快？

475
00:23:42,050 --> 00:23:44,480
And, in fact, Carter, would you mind joining me up here?
事实上，卡特，你介意上来加入我吗？

476
00:23:44,480 --> 00:23:50,330
Perhaps we can actually decide together how best to proceed here.
也许我们可以一起决定在这里如何才能最好地进行。

477
00:23:50,330 --> 00:23:52,670
If you want to flip over to your other screen there,
如果你想翻到你的另一个屏幕，

478
00:23:52,670 --> 00:23:55,390
we're going to ask everyone to go to--
我们要请每个人去——

479
00:23:55,390 --> 00:23:59,140
I'll pull it up here-- this URL here if you haven't already.
我会把它拉上来——如果你还没有，这里是这个网址。

480
00:23:59,140 --> 00:24:02,980
And this is going to pull up a polling website that's
这将弹出一个投票网站，它

481
00:24:02,980 --> 00:24:07,100
going to allow you in a moment to answer some multiple choice questions.
将允许你一会儿回答一些多项选择题。

482
00:24:07,100 --> 00:24:10,160
This is the same URL as earlier if you already logged in.
如果你已经登录，这个网址和之前的是一样的。

483
00:24:10,160 --> 00:24:13,220
And in just a moment, we're going to ask you a question.
再过一会儿，我们会问你一个问题。

484
00:24:13,220 --> 00:24:17,030
And I think, can we show the question before we do this?
我认为，我们可以在我们这样做之前展示问题吗？

485
00:24:17,030 --> 00:24:19,700
Here's the first question from Carter here.
这是来自卡特的第一个问题。

486
00:24:19,700 --> 00:24:22,190
How long might it take to crack--
破解一个四位数密码可能需要多长时间——

487
00:24:22,190 --> 00:24:26,750
that is, figure out-- a four-digit passcode on someone's phone,
也就是说，弄清楚——某人手机上的四位数密码，

488
00:24:26,750 --> 00:24:28,110
for instance?
比如？

489
00:24:28,110 --> 00:24:33,230
How long might it take to crack a four-digit passcode?
破解一个四位数密码可能需要多长时间？

490
00:24:33,230 --> 00:24:37,280
Why don't we go ahead and flip over to see who is typing in what.
为什么我们不翻过去看看谁在输入什么。

491
00:24:37,280 --> 00:24:41,540
And we'll see what the scores are already.
我们也会看看分数是多少。

492
00:24:41,540 --> 00:24:44,750
All right, and it looks like most of you think a few seconds.
好吧，看起来你们大多数人认为是几秒钟。

493
00:24:44,750 --> 00:24:47,160
Some of you think a few minutes, a few hours, a few days.
你们中有些人认为是几分钟，几个小时，几天。

494
00:24:47,160 --> 00:24:50,908
So I'd say most of you are about to be very unpleasantly surprised.
所以我想说你们大多数人将会非常不愉快地感到惊讶。

495
00:24:50,908 --> 00:24:53,450
In fact, the winner here is indeed going to be a few seconds,
事实上，这里的赢家确实将是几秒钟，

496
00:24:53,450 --> 00:24:55,822
but perhaps even faster than that.
但可能比这还要快。

497
00:24:55,822 --> 00:24:57,530
So, in fact, let me go ahead and do this.
所以，事实上，让我继续这样做。

498
00:24:57,530 --> 00:24:58,100
Thank you to Carter.
谢谢卡特。

499
00:24:58,100 --> 00:24:59,900
Let me flip over and let me introduce you
让我翻过来，并向你介绍

500
00:24:59,900 --> 00:25:02,990
to, unfortunately, what's a very real world problem known as a brute force
不幸的是，这是一个非常现实的世界问题，被称为蛮力

501
00:25:02,990 --> 00:25:03,560
attack.
攻击。

502
00:25:03,560 --> 00:25:05,360
As the word kind of conjures, if you think
正如这个词所暗示的那样，如果你想到

503
00:25:05,360 --> 00:25:08,360
to-- back to yesteryear when there was some kind of battering ram trying
回到过去，当时有一种撞击器试图

504
00:25:08,360 --> 00:25:10,710
to brute force their way into a castle door,
用蛮力闯入城堡大门，

505
00:25:10,710 --> 00:25:13,440
it just meant trying to hammer the heck out of a system.
这仅仅意味着试图猛烈地攻击一个系统。

506
00:25:13,440 --> 00:25:17,670
A castle, in that case, to get into the destination.
在这种情况下，一座城堡，是为了进入目的地。

507
00:25:17,670 --> 00:25:20,760
Digitally though, this might mean being a little more clever.
然而，在数字世界中，这可能意味着要更聪明一些。

508
00:25:20,760 --> 00:25:23,610
We all know how to write code in a bunch of different languages now.
我们现在都知道如何用多种不同的语言编写代码。

509
00:25:23,610 --> 00:25:28,080
You could maybe open up a text editor, write a Python program to try all
你可以打开一个文本编辑器，编写一个Python程序，尝试所有

510
00:25:28,080 --> 00:25:35,760
possible four-digit codes from 0000 to 9999 in order to figure out exactly,
从0000到9999的所有可能的四位数代码，以便准确地弄清楚，

511
00:25:35,760 --> 00:25:37,770
how long does it actually take?
它到底需要多长时间？

512
00:25:37,770 --> 00:25:39,990
So let's first consider this.
所以让我们首先考虑这一点。

513
00:25:39,990 --> 00:25:41,550
Let me ask the next question.
让我问下一个问题。

514
00:25:41,550 --> 00:25:43,252
How many four-digit passcodes are there?
有多少个四位数的密码？

515
00:25:43,252 --> 00:25:45,960
Carter, if you wouldn't mind joining me and maybe just staying up
Carter，如果你不介意和我一起，也许就待在

516
00:25:45,960 --> 00:25:49,620
with me here to run our second question at this same URL.
这里和我一起，在这个同一个 URL 上运行我们的第二个问题。

517
00:25:49,620 --> 00:25:53,460
How many four-digit passcodes are there in the world?
世界上有多少个四位数的密码？

518
00:25:53,460 --> 00:25:57,380
On your phone or laptop, you should now see the second question.
在你的手机或笔记本电脑上，你应该现在看到第二个问题。

519
00:25:57,380 --> 00:26:05,677
And the answers include 4, 40, 9,999, 10,000, or it's OK to be unsure.
答案包括 4、40、9999、10000，或者不确定也没关系。

520
00:26:05,677 --> 00:26:07,510
Let's go ahead and flip over to the results.
让我们继续翻到结果。

521
00:26:07,510 --> 00:26:09,620
And it looks like most of you think 10,000.
看起来你们大多数人认为是 10000。

522
00:26:09,620 --> 00:26:10,870
And, indeed, that is the case.
确实，情况就是这样。

523
00:26:10,870 --> 00:26:16,010
Because if I kind of led you with 0000 to 9999, that's 10,000 possibilities.
因为如果我引导你从 0000 到 9999，那就是 10000 种可能性。

524
00:26:16,010 --> 00:26:17,140
So that is, in fact, a lot.
所以事实上，这很多。

525
00:26:17,140 --> 00:26:21,520
But most of you thought it'd take maybe a few seconds to actually brute force
但你们大多数人认为可能只需要几秒钟就能真正暴力破解

526
00:26:21,520 --> 00:26:22,700
your way into that.
你的方式。

527
00:26:22,700 --> 00:26:26,380
Let's consider how we might measure how long that actually takes.
让我们考虑一下我们如何衡量这实际上需要多长时间。

528
00:26:26,380 --> 00:26:26,950
So thank you.
所以谢谢。

529
00:26:26,950 --> 00:26:29,890
So in the world of a four-digit passcode-- and they
所以在四位数密码的世界里——它们

530
00:26:29,890 --> 00:26:32,220
are, indeed, digits, decimal digits from 0 to 9--
确实是数字，从 0 到 9 的十进制数字——

531
00:26:32,220 --> 00:26:35,470
another way to think about it is there's 10 possibilities for the first digit,
另一种思考方式是，第一个数字有 10 种可能性，

532
00:26:35,470 --> 00:26:37,750
10 for the next, 10 to the 10.
下一个有 10 种，10 的 10 次方。

533
00:26:37,750 --> 00:26:42,340
So that really gives us 10 times itself four times or 10,000 in total.
所以这实际上给了我们 10 自身乘以四次，也就是总共 10000 次。

534
00:26:42,340 --> 00:26:44,083
But how long does that actually take?
但这实际上需要多长时间？

535
00:26:44,083 --> 00:26:45,500
Well, let me go ahead and do this.
好吧，让我继续做这个。

536
00:26:45,500 --> 00:26:49,300
I'm going to go ahead and open up on my Mac here, not even--
我将继续打开我的 Mac，甚至不——

537
00:26:49,300 --> 00:26:52,160
not even Codespaces or cs50.dev today.
今天甚至不使用 Codespaces 或者 cs50.dev。

538
00:26:52,160 --> 00:26:54,290
I'm going to open up VS Code itself.
我将打开 VS Code 本身。

539
00:26:54,290 --> 00:26:58,340
So before class, I went ahead and installed VS Code on my own Mac here.
所以上课之前，我在自己的 Mac 上安装了 VS Code。

540
00:26:58,340 --> 00:27:01,453
It looks almost the same as Codespaces, though the windows
它看起来几乎和 Codespaces 一样，尽管窗口

541
00:27:01,453 --> 00:27:03,620
might look a little different and the menus as well.
可能看起来有点不同，菜单也一样。

542
00:27:03,620 --> 00:27:06,590
And I've gone ahead here and begun a file called crack.py.
我在这里继续开始了一个名为 crack.py 的文件。

543
00:27:06,590 --> 00:27:09,230
To crack something means to break into it,
破解某样东西意味着破解它，

544
00:27:09,230 --> 00:27:12,300
to figure out in this case what the passcode actually is.
在这种情况下，就是要弄清楚密码是什么。

545
00:27:12,300 --> 00:27:16,970
Well, how might I write some code to try all 10,000 possible passcodes?
那么，我该怎么写代码来尝试所有 10000 个可能的密码呢？

546
00:27:16,970 --> 00:27:19,310
And, heck, even though this isn't quite going
而且，天哪，尽管这并不完全是

547
00:27:19,310 --> 00:27:21,110
to be like hacking into my actual phone, I
像黑进我的手机一样，我

548
00:27:21,110 --> 00:27:24,920
bet I could find a USB or a lightning cable, connect the two devices,
打赌我能找到 USB 或者 Lightning 数据线，连接这两个设备，

549
00:27:24,920 --> 00:27:28,740
and maybe send all of these passcodes to my device trying to brute force
也许可以将所有这些密码发送到我的设备，尝试暴力破解

550
00:27:28,740 --> 00:27:29,240
my way in.
我的方式。

551
00:27:29,240 --> 00:27:31,940
And that's indeed how a hacker might go about doing this
这确实是黑客可能会采取的方式

552
00:27:31,940 --> 00:27:34,290
if the manufacturer doesn't protect against that.
如果制造商没有对此进行保护。

553
00:27:34,290 --> 00:27:35,300
So here's some code.
这是一些代码。

554
00:27:35,300 --> 00:27:36,530
Let me go ahead and do this.
让我继续做这个。

555
00:27:36,530 --> 00:27:38,750
From string, import digits.
从字符串中导入数字。

556
00:27:38,750 --> 00:27:40,250
This isn't strictly necessary.
这并不严格必要。

557
00:27:40,250 --> 00:27:42,830
But in Python, there is a string library from which
但在 Python 中，有一个字符串库，你可以从中

558
00:27:42,830 --> 00:27:45,050
you can get all of the decimal digits just so I don't
获取所有十进制数字，这样我就不用

559
00:27:45,050 --> 00:27:46,730
have to manually type out 0 through 9.
手动输入 0 到 9。

560
00:27:46,730 --> 00:27:48,530
But that's just a minor optimization.
但这只是一个小的优化。

561
00:27:48,530 --> 00:27:51,200
But there's another library called itertools,
但还有一个名为 itertools 的库，

562
00:27:51,200 --> 00:27:55,670
tools related to iteration, doing things in like a looping fashion, where
与迭代相关的工具，以循环的方式做事情，比如

563
00:27:55,670 --> 00:27:58,520
I can import a cross product function, a function that's
我可以导入一个叉积函数，一个允许我

564
00:27:58,520 --> 00:28:01,460
going to allow me to combine like all numbers with all numbers
将所有数字与所有数字组合在一起的函数

565
00:28:01,460 --> 00:28:03,890
again and again and again for the length of the passcode.
一遍又一遍地重复，直到密码长度结束。

566
00:28:03,890 --> 00:28:07,220
Now I can do a simple Python for loop like this.
现在我可以像这样使用简单的 Python for 循环。

567
00:28:07,220 --> 00:28:14,430
For each passcode in the cross product of those 10 digits repeated four times.
对于那些重复四次的 10 个数字的叉积中的每一个密码。

568
00:28:14,430 --> 00:28:18,020
In other words, this is just a programmatic Pythonic way
换句话说，这只是一个程序化的 Python 方式

569
00:28:18,020 --> 00:28:21,980
to implement the idea of combining all 10 digits with itself
来实现将所有 10 个数字与其自身结合的想法

570
00:28:21,980 --> 00:28:24,170
four times in a loop in this fashion.
以这种方式在循环中重复四次。

571
00:28:24,170 --> 00:28:26,540
And just so we can visualize this, let's just go ahead
为了让大家能够可视化地理解，让我们继续

572
00:28:26,540 --> 00:28:28,040
and print out the passcode.
打印密码。

573
00:28:28,040 --> 00:28:31,100
But if I did have a lightning cable or a USB cable, I wouldn't print it.
但如果我确实有一根闪电线或一根 USB 线，我就不会打印它。

574
00:28:31,100 --> 00:28:33,530
I would maybe send it through the cable to the device
我可能会通过线缆将它发送到设备上

575
00:28:33,530 --> 00:28:35,990
to try to get through the passcode screen.
尝试通过密码屏幕。

576
00:28:35,990 --> 00:28:38,390
So we can revisit now the question of how long
现在我们可以重新审视这个问题，需要多长时间

577
00:28:38,390 --> 00:28:40,070
might it take to get into this device.
才能进入这个设备。

578
00:28:40,070 --> 00:28:41,240
Well, let's just try this.
好吧，我们来试试看。

579
00:28:41,240 --> 00:28:43,100
Python of crack.py.
Python 的 crack.py。

580
00:28:43,100 --> 00:28:45,050
And assume, again, it's connected via cable.
再次假设，它通过线缆连接。

581
00:28:45,050 --> 00:28:49,280
So we'll see how long this program takes to run and break into this here phone.
所以我们会看看这个程序运行多长时间，以及破解这台手机需要多长时间。

582
00:28:49,280 --> 00:28:50,480
Done.
完成。

583
00:28:50,480 --> 00:28:53,820
So that's all it took for 10,000 iterations.
所以，破解 10,000 次迭代就够了。

584
00:28:53,820 --> 00:28:56,720
And this is on a Mac that's not even the fastest one out there.
这还是在一台并非最快的 Mac 上。

585
00:28:56,720 --> 00:28:58,530
You could imagine doing this even faster.
你可以想象，这个速度甚至可以更快。

586
00:28:58,530 --> 00:29:02,180
So that's actually not necessarily all the best for our security.
所以，这并不一定对我们的安全来说是最理想的。

587
00:29:02,180 --> 00:29:04,250
So what could we do instead of 10 digits?
所以，除了使用 10 位数字之外，我们还可以做些什么呢？

588
00:29:04,250 --> 00:29:07,190
Well, most of you have probably upgraded a lot of your passwords
好吧，你们中的大多数人可能已经升级了你们的许多密码

589
00:29:07,190 --> 00:29:10,560
to maybe being alphabetical instead.
可能会改为字母形式。

590
00:29:10,560 --> 00:29:13,970
So what if I instead were to ask the question-- and Carter, if you
所以，如果我问一下——卡特，如果你

591
00:29:13,970 --> 00:29:17,300
want to rejoin me here in a second-- what if I instead were to consider
想在一会儿加入我——如果我考虑一下

592
00:29:17,300 --> 00:29:19,160
maybe four-letter passcodes?
可能是四个字母的密码？

593
00:29:19,160 --> 00:29:23,060
So now we have A through Z four times.
所以，现在我们有 A 到 Z，重复四次。

594
00:29:23,060 --> 00:29:25,557
And maybe we'll throw into the mix uppercase and--
也许我们会将大写和小写混合在一起——

595
00:29:25,557 --> 00:29:27,140
well, let's just keep it four letters.
好吧，我们保持四个字母。

596
00:29:27,140 --> 00:29:31,220
Let's just go ahead and do maybe uppercase and lowercase,
让我们继续使用大写和小写，

597
00:29:31,220 --> 00:29:34,430
so 52 possibilities.
所以有 52 种可能性。

598
00:29:34,430 --> 00:29:39,080
This is going to give us 52 times 52 times 52 times 52.
这将给我们 52 乘以 52 乘以 52 乘以 52。

599
00:29:39,080 --> 00:29:41,870
And anyone want to ballpark the math here,
有人想在这里估计一下数学结果吗，

600
00:29:41,870 --> 00:29:48,800
how many possible four-letter passcodes are there, roughly?
大约有多少个可能的四字母密码？

601
00:29:48,800 --> 00:29:53,400
7 million, yeah, so roughly 7 million, which is way bigger than 10,000.
700 万，是的，大约 700 万，这远大于 10,000。

602
00:29:53,400 --> 00:29:57,560
So, oh, I spoiled this, didn't I?
所以，哦，我剧透了，不是吗？

603
00:29:57,560 --> 00:29:58,550
Can you flip over?
你可以翻页吗？

604
00:29:58,550 --> 00:30:02,720
So how many four-letter passcodes are there?
那么，有多少个四字母密码呢？

605
00:30:02,720 --> 00:30:07,550
It seems that most of you, 93% of you, in fact, got the answer right.
看起来，你们中大多数人，事实上 93% 的人，都答对了。

606
00:30:07,550 --> 00:30:09,860
Those of you who are changing your answer-- there
那些正在改变答案的人——这里

607
00:30:09,860 --> 00:30:12,090
we go, no, definitely not that.
我们去，不，绝对不是那样。

608
00:30:12,090 --> 00:30:13,310
So, anyhow, I screwed up.
所以，无论如何，我搞砸了。

609
00:30:13,310 --> 00:30:16,820
Order of operations matters in computing and, indeed, including lectures.
运算顺序在计算中很重要，实际上，包括讲座也是如此。

610
00:30:16,820 --> 00:30:19,250
So 7 million, so the segue I wanted to make
所以是 700 万，所以我想说的是

611
00:30:19,250 --> 00:30:22,200
is, OK, how long does that actually take to implement in code?
就是，好的，这实际上需要多长时间才能在代码中实现？

612
00:30:22,200 --> 00:30:24,860
Well, let me just tweak our code here a little bit.
好吧，让我稍微调整一下我们的代码。

613
00:30:24,860 --> 00:30:30,320
Let me go ahead and go back into the VS Code on my Mac in which I
让我回到我的 Mac 上的 VS Code 中，我在其中

614
00:30:30,320 --> 00:30:32,790
had the same code as before.
有和之前一样的代码。

615
00:30:32,790 --> 00:30:36,050
So let me shrink my terminal window, go back to the code from which I began.
所以让我缩小我的终端窗口，回到我开始使用的代码。

616
00:30:36,050 --> 00:30:38,270
And let's just actually make a simple change.
让我们只做个简单的改动。

617
00:30:38,270 --> 00:30:42,320
Let me go ahead and simply change digits to something called ASCII letters.
让我继续并将 digits 更改为称为 ASCII 字母的东西。

618
00:30:42,320 --> 00:30:45,000
And this too is just a time saving technique.
这也只是一个节省时间的技巧。

619
00:30:45,000 --> 00:30:48,450
So I don't have to type out A through Z and uppercase and lowercase like 52
所以我不必像 52 次那样把 A 到 Z 以及大小写都打出来

620
00:30:48,450 --> 00:30:49,410
total times.
总共。

621
00:30:49,410 --> 00:30:52,650
And so I'm going to change digits to ASCII letters.
所以我要将 digits 更改为 ASCII 字母。

622
00:30:52,650 --> 00:30:55,360
And we'll get a quantitative sense of how long this takes.
我们将会定量地了解这需要多长时间。

623
00:30:55,360 --> 00:30:58,170
So Python of crack.py, here's how long it takes
所以 Python 的 crack.py，这是它需要的时间

624
00:30:58,170 --> 00:31:01,380
to go through 7 million possibilities.
遍历 700 万种可能性。

625
00:31:01,380 --> 00:31:05,243
All right, clearly slower because we haven't seen the end of the list yet.
好吧，显然慢多了，因为我们还没有看到列表的结尾。

626
00:31:05,243 --> 00:31:08,160
And you can see we're going through all of the lowercase letters here.
你可以看到我们正在遍历这里的所有小写字母。

627
00:31:08,160 --> 00:31:11,160
We're about to hit Z. But now we're going through the uppercase letters.
我们马上就要到 Z 了。但现在我们正在遍历大写字母。

628
00:31:11,160 --> 00:31:14,850
So it looks like the answer this time is going to be a few seconds, indeed.
所以看起来这次答案应该是几秒钟，的确。

629
00:31:14,850 --> 00:31:17,340
But definitely less than a minute would seem, at least
但至少看起来应该不到一分钟

630
00:31:17,340 --> 00:31:18,570
on this particular computer.
在这台特定的电脑上。

631
00:31:18,570 --> 00:31:20,190
So odds are if I'm the adversary and I've
所以如果我是攻击者，而且我

632
00:31:20,190 --> 00:31:22,020
plugged this phone into someone's device-- maybe
把这部手机插到了某人的设备上 - 也许

633
00:31:22,020 --> 00:31:24,510
I'm not here in a lecture, but in Starbucks or an airport
我不是在课堂上，而是在星巴克或机场

634
00:31:24,510 --> 00:31:27,360
or anywhere where I have physical opportunity to grab that device
或者任何我可以接触到那个设备的地方

635
00:31:27,360 --> 00:31:31,320
and plug a cable in-- it's not going to take long to hack into that device
然后插入一根线 - 侵入那台设备不会花很长时间

636
00:31:31,320 --> 00:31:31,890
either.
也是。

637
00:31:31,890 --> 00:31:35,980
So what might be better than just digits and letters from the real world?
那么，还有什么比现实世界中的数字和字母更好呢？

638
00:31:35,980 --> 00:31:39,090
So add in some punctuation, which like almost every website
所以添加一些标点符号，几乎每个网站都

639
00:31:39,090 --> 00:31:40,810
requires that we do.
要求我们这样做。

640
00:31:40,810 --> 00:31:44,640
Well, if we want to add punctuation into the mix, if I can get this segue
好吧，如果我们想把标点符号加进去，如果我能把这个过渡

641
00:31:44,640 --> 00:31:48,060
correct so that we can now ask Carter one last time,
说对了，我们现在就可以最后一次问卡特了，

642
00:31:48,060 --> 00:31:52,860
how many four-character passcodes are possible where a character is
有多少种可能的四位数密码，其中一个字符是

643
00:31:52,860 --> 00:31:57,870
an uppercase or lowercase letter or a decimal digit or a punctuation symbol?
大写或小写字母，或者十进制数字，或者标点符号？

644
00:31:57,870 --> 00:32:00,420
If you go to your device now, you'll see--
如果你现在看看你的设备，你会看到 -

645
00:32:00,420 --> 00:32:02,130
if we want to flip over to the screen--
如果我们想切换到屏幕 -

646
00:32:02,130 --> 00:32:03,750
these possibilities.
这些可能性。

647
00:32:03,750 --> 00:32:08,050
There's a million, maybe, a billion, a trillion, a quadrillion,
可能有一百万，也许十亿，万亿，千万亿，

648
00:32:08,050 --> 00:32:12,510
or a quintillion when it comes to a-- oh, wrong question.
或者一千万亿，当涉及到 - 哦，问错了。

649
00:32:12,510 --> 00:32:14,220
Wow, we're new here, OK.
哇，我们还是新手，好的。

650
00:32:14,220 --> 00:32:16,410
OK, we're going to escalate things here.
好的，我们要在这里升级一下。

651
00:32:16,410 --> 00:32:18,780
How many eight-character passcodes are possible?
有多少种可能的八位数密码？

652
00:32:18,780 --> 00:32:23,670
We're going to make things more secure, even though I said four.
我们要让它更安全，尽管我说过是四位数。

653
00:32:23,670 --> 00:32:26,430
We're now making it more secure to eight.
我们现在把它改为八位数，更安全。

654
00:32:26,430 --> 00:32:29,650
All right, you want to flip over to the chart?
好的，你想翻到图表吗？

655
00:32:29,650 --> 00:32:31,800
All right, so it looks like most of you are now
好的，看起来你们大多数人现在

656
00:32:31,800 --> 00:32:34,900
erring on the side of quintillion or quadrillion.
都倾向于五百万亿或万亿。

657
00:32:34,900 --> 00:32:37,862
1% of you still said million, even though there's definitely more
你们中 1% 仍然说百万，尽管肯定比之前

658
00:32:37,862 --> 00:32:39,070
than there were a moment ago.
多得多。

659
00:32:39,070 --> 00:32:39,790
But that's OK.
但没关系。

660
00:32:39,790 --> 00:32:42,470
So quadrillion-- quintillion is still winning.
所以万亿，五百万亿仍然是赢家。

661
00:32:42,470 --> 00:32:45,290
And I think if we go and reveal this, with the math,
我认为如果我们去揭示这个，用数学，

662
00:32:45,290 --> 00:32:48,070
you should be doing is 94 to the 4th power.
你应该做的是 94 的 4 次方。

663
00:32:48,070 --> 00:32:53,290
Because there's 26 plus 26 plus 10 plus some more digits,
因为有 26 加 26 加 10 以及一些其他的数字，

664
00:32:53,290 --> 00:32:55,190
some punctuation digits in there as well.
还有一些标点符号。

665
00:32:55,190 --> 00:33:00,670
So it's actually, oh, this is the other example, isn't it?
所以实际上，哦，这是另一个例子，不是吗？

666
00:33:00,670 --> 00:33:01,990
This is embarrassing.
真令人尴尬。

667
00:33:01,990 --> 00:33:04,930
All right, we had a good run in the past nine weeks instead.
好吧，我们过去九周还不错。

668
00:33:04,930 --> 00:33:08,950
All right, so if you were curious as to how many four-character passwords are
好的，如果你好奇有多少个四位字符的密码

669
00:33:08,950 --> 00:33:10,330
possible, it's 78 million.
是可能的，答案是 7800 万。

670
00:33:10,330 --> 00:33:11,890
But that's not the question at hand.
但这不是现在的问题。

671
00:33:11,890 --> 00:33:15,470
The question at hand was, how many eight character passcodes are there?
现在的问题是，有多少个八位字符的密码？

672
00:33:15,470 --> 00:33:17,680
And in this case, the math you would be doing
在这种情况下，你应该做的数学运算

673
00:33:17,680 --> 00:33:21,710
is 94 to the 8th power, which is a really big number.
是 94 的 8 次方，这是一个非常大的数字。

674
00:33:21,710 --> 00:33:23,770
And, in fact, it's this number here, which
事实上，就是这里这个数字，

675
00:33:23,770 --> 00:33:27,100
is roughly 6 quadrillion possibilities.
大约有 6 万亿种可能性。

676
00:33:27,100 --> 00:33:30,830
Now, I could go about actually doing this in code here.
现在，我可以在这里用代码来做这件事。

677
00:33:30,830 --> 00:33:33,010
So let me actually, for a final flourish,
所以让我实际操作一下，作为最后的点缀，

678
00:33:33,010 --> 00:33:35,590
let me open up VS Code one last time here.
让我最后一次打开 VS Code。

679
00:33:35,590 --> 00:33:39,730
And in VS Code, I'm going to go ahead and shrink my terminal window,
在 VS Code 中，我将缩小我的终端窗口，

680
00:33:39,730 --> 00:33:43,300
go back into the code, and I'm going to import not just ASCII letters, not just
回到代码，我将导入的不只是 ASCII 字母，也不只是

681
00:33:43,300 --> 00:33:45,580
digits, but punctuation as well, which is
数字，还有标点符号，它们是

682
00:33:45,580 --> 00:33:48,070
going to give me like 32 punctuation symbols
将会给我大约 32 个标点符号

683
00:33:48,070 --> 00:33:49,762
from a typical US English keyboard.
来自典型的美国英语键盘。

684
00:33:49,762 --> 00:33:52,720
And I'm going to go ahead and just concatenate them all together in one
我将把它们全部连接在一起，形成一个

685
00:33:52,720 --> 00:33:55,750
big list by using the plus operator in Python
大列表，使用 Python 中的加号运算符

686
00:33:55,750 --> 00:33:58,870
to plus in both digits and punctuation.
将数字和标点符号加起来。

687
00:33:58,870 --> 00:34:01,030
And I'm going to change the 4 to an 8.
我将把 4 改为 8。

688
00:34:01,030 --> 00:34:04,090
So this now, it's what four actual lines of code
所以现在，就是这四行代码，

689
00:34:04,090 --> 00:34:06,910
is, all it takes for an adversary to whip up some code,
这就是攻击者编制一些代码所需的一切，

690
00:34:06,910 --> 00:34:09,460
find a cable as step two, and hack into a phone that
第二步是找到一根数据线，然后黑进一部手机，

691
00:34:09,460 --> 00:34:11,949
even has eight-character passcodes.
即使它有八位字符的密码。

692
00:34:11,949 --> 00:34:15,100
Let me enlarge in my terminal window here, run
让我放大我的终端窗口，运行

693
00:34:15,100 --> 00:34:17,830
for a final time Python of crack.py.
最后一次运行 crack.py 的 Python 代码。

694
00:34:17,830 --> 00:34:20,860
And this I'll actually leave running for some time.
我将让它运行一段时间。

695
00:34:20,860 --> 00:34:25,000
Because you can get already sort of a palpable feel of how much slower it
因为你已经可以感觉到它慢了多少，

696
00:34:25,000 --> 00:34:27,730
is-- because these characters clearly haven't moved--
因为这些字符明显没有移动，

697
00:34:27,730 --> 00:34:28,947
how long it's going to take.
要花多长时间。

698
00:34:28,947 --> 00:34:31,030
We might actually do-- need to do a bit more math.
我们可能需要做更多的数学运算。

699
00:34:31,030 --> 00:34:33,820
Because doing just four-digit passcodes was super fast.
因为仅仅破解四位数字密码非常快。

700
00:34:33,820 --> 00:34:37,630
Doing four-letter passcodes was slower, but still under a minute.
破解四位字母密码比较慢，但仍然不到一分钟。

701
00:34:37,630 --> 00:34:41,170
We'll see maybe in time how long this actually runs for.
我们会看到它到底要运行多长时间。

702
00:34:41,170 --> 00:34:46,870
But this clearly seems to be better, at least for some definition of better.
但这显然更好，至少从某种意义上说。

703
00:34:46,870 --> 00:34:51,610
But it should hopefully not be that easy to hack into a system.
但是，希望黑进系统不会那么容易。

704
00:34:51,610 --> 00:34:57,180
What does your own device probably do to defend against that brute force attack?
你的设备可能做了什么来防御这种暴力攻击？

705
00:34:57,180 --> 00:34:58,042
Yeah.
是的。

706
00:34:58,042 --> 00:34:59,280
AUDIENCE: Gives you a limited number of tries.
观众：给你有限的尝试次数。

707
00:34:59,280 --> 00:35:01,822
DAVID MALAN: Yeah, so it gives you a limited number of tries.
大卫·马兰：是的，所以它会给你有限的尝试次数。

708
00:35:01,822 --> 00:35:05,730
So odds are, at least once in your life, you've somehow locked yourself out
所以很有可能，你至少曾经有一次把自己锁在门外

709
00:35:05,730 --> 00:35:09,748
of a device, typically after typing your passcode more than 10 times
设备之外，通常是在输入密码超过10次之后

710
00:35:09,748 --> 00:35:12,540
or 10 attempts or maybe it's your siblings or your roommate's phone
或者10次尝试，或者可能是你兄弟姐妹或者室友的手机

711
00:35:12,540 --> 00:35:16,540
that you realize this is a feature of iPhones and Android devices as well.
你会意识到，这确实是 iPhone 和安卓设备的一个功能。

712
00:35:16,540 --> 00:35:18,780
But here's a screenshot of what an iPhone might
但这里是一张 iPhone 可能的截图

713
00:35:18,780 --> 00:35:23,740
do if you do try to input the wrong passcode maybe 10 or so times.
如果你尝试输入错误密码大约 10 次左右，就会发生的事情。

714
00:35:23,740 --> 00:35:26,770
Notice that it's really telling you to try again in one minute.
注意，它真的在告诉你一分钟后重新尝试。

715
00:35:26,770 --> 00:35:30,030
So this isn't fundamentally changing what the adversary can do.
所以这并没有从根本上改变对手可以做的事情。

716
00:35:30,030 --> 00:35:33,630
The adversary can absolutely use those same four lines of code with a cable
对手完全可以使用这相同的四行代码，使用一根数据线

717
00:35:33,630 --> 00:35:35,140
and try to hack into your device.
尝试黑进你的设备。

718
00:35:35,140 --> 00:35:36,510
But what has this just done?
但这做到了什么呢？

719
00:35:36,510 --> 00:35:40,770
It's significantly increased the cost to the adversary,
它显著提高了对手的成本，

720
00:35:40,770 --> 00:35:43,620
where the cost might be measured in sheer number amount of time--
成本可以用纯粹的时间来衡量——

721
00:35:43,620 --> 00:35:46,080
like minutes, seconds, hours, days, or beyond.
比如分钟、秒、小时、天，甚至更久。

722
00:35:46,080 --> 00:35:48,520
Maybe it's increased the cost in the sense of risk.
也许它从风险的角度提高了成本。

723
00:35:48,520 --> 00:35:49,020
Why?
为什么？

724
00:35:49,020 --> 00:35:51,480
Because if this were like a movie incarnation of this
因为如果这就像这部电影中的情节一样

725
00:35:51,480 --> 00:35:53,640
and the adversary has just plugged into the phone
而对手刚刚连接到手机上

726
00:35:53,640 --> 00:35:56,098
and is kind of creepily looking around until you come back,
而且一直在诡异地环顾四周，直到你回来，

727
00:35:56,098 --> 00:36:00,490
it's going to take way too long for them to safely get away with that,
他们想要安全地逃脱，这需要太长的时间了，

728
00:36:00,490 --> 00:36:03,370
assuming your passcode is not 123456, it's
假设你的密码不是123456，它

729
00:36:03,370 --> 00:36:05,930
somewhere in the middle of that massive search space.
在这个巨大的搜索空间中。

730
00:36:05,930 --> 00:36:09,687
So this just kind of fundamentally raises the bar to the adversary.
所以这从根本上提高了对手的门槛。

731
00:36:09,687 --> 00:36:12,520
And that's one of the biggest takeaways of cybersecurity in general.
这通常是网络安全最主要的启示之一。

732
00:36:12,520 --> 00:36:16,270
It's completely naive to think in terms of absolute security
认为绝对安全是十分幼稚的

733
00:36:16,270 --> 00:36:19,480
or to even say a sentence like "my website is secure" or even
或者说诸如“我的网站很安全”这样的话，甚至

734
00:36:19,480 --> 00:36:21,260
"my home is physically secure."
“我的家是物理安全的。”

735
00:36:21,260 --> 00:36:21,760
Why?
为什么？

736
00:36:21,760 --> 00:36:24,220
Well, for a couple of reasons, like, one, an adversary
嗯，有几个原因，比如，第一个原因是，对手

737
00:36:24,220 --> 00:36:27,370
with enough time, energy, motivation, or resources
有足够的时间、精力、动力或资源

738
00:36:27,370 --> 00:36:31,840
can surely get into most any system and can surely get into most any home.
就一定能够进入大多数系统，也一定能够进入大多数房屋。

739
00:36:31,840 --> 00:36:34,105
But the other thing to consider, unfortunately,
但不幸的是，还有另一个需要考虑的事情，

740
00:36:34,105 --> 00:36:36,730
that if we're the good people in this story and the adversaries
那就是，如果我们在这个故事中是好人，而对手

741
00:36:36,730 --> 00:36:40,480
are the bad people, you and I rather have to be perfect.
是坏人，那么你我必须完美无缺。

742
00:36:40,480 --> 00:36:44,200
In the physical world, we have to lock every door, every window.
在现实世界中，我们必须锁上每一扇门、每一扇窗户。

743
00:36:44,200 --> 00:36:48,367
Because if we mess up just one spot, the adversary can get in.
因为如果我们在某个地方犯了错误，对手就能进来。

744
00:36:48,367 --> 00:36:50,200
And so where there's sort of this imbalance.
所以，这里就存在着某种不平衡。

745
00:36:50,200 --> 00:36:52,750
The adversary just has to find the window that's
对手只需要找到开着的窗户

746
00:36:52,750 --> 00:36:54,370
ajar to get into your physical home.
就可以进入你的房子。

747
00:36:54,370 --> 00:36:56,680
The adversary just needs to find one user who's
对手只需要找到一个用户，他们

748
00:36:56,680 --> 00:36:59,990
got a really bad password to somehow get into that system.
不知道怎么搞的，竟然用了一个非常烂的密码来尝试进入那个系统。

749
00:36:59,990 --> 00:37:01,700
And so cybersecurity is hard.
所以网络安全很难。

750
00:37:01,700 --> 00:37:04,180
And so what we'll see today really are techniques
所以我们今天会看到一些技巧，

751
00:37:04,180 --> 00:37:07,750
that can let you create a gauntlet of defenses-- so not just one,
可以让你建立一道道防线，而不是只有一道防线，

752
00:37:07,750 --> 00:37:09,310
but maybe two, maybe three.
而是两道，三道，甚至更多。

753
00:37:09,310 --> 00:37:12,730
And even if the adversary gets in, another tenant of cybersecurity
即使对手突破了防线，网络安全的另一个原则

754
00:37:12,730 --> 00:37:15,910
is at least, let's have mechanisms in place that detect
至少是，我们要建立机制来检测

755
00:37:15,910 --> 00:37:19,247
the adversary, some kind of monitoring, automatic emails.
对手，一些监控机制，自动发送电子邮件。

756
00:37:19,247 --> 00:37:21,580
You can increasingly see this already in the real world.
在现实生活中，你越来越能看到这些。

757
00:37:21,580 --> 00:37:25,360
If you log into your Instagram account from a different city or state
如果你从不同的城市或州登录你的Instagram账户，

758
00:37:25,360 --> 00:37:27,370
suddenly because maybe you're traveling, you
突然之间，可能是因为你在旅行，你

759
00:37:27,370 --> 00:37:29,890
will-- if you've opted into settings like these-- often
会 - 如果你选择了这样的设置 - 经常

760
00:37:29,890 --> 00:37:32,110
get a notification or an email saying, hey,
收到通知或电子邮件，说，嘿，

761
00:37:32,110 --> 00:37:35,890
you seems to have logged in from Palo Alto rather than Cambridge.
你似乎是从帕洛阿尔托而不是剑桥登录的。

762
00:37:35,890 --> 00:37:37,430
Is this, in fact, you?
这真的是你吗？

763
00:37:37,430 --> 00:37:40,030
So even though we might not be able to keep the adversary out,
所以即使我们可能无法阻止对手进入，

764
00:37:40,030 --> 00:37:43,000
let's at least minimize the window of opportunity or damage
至少我们要缩短对手可乘之机或减小其造成的损害

765
00:37:43,000 --> 00:37:46,990
by letting humans like us know that something's been compromised.
通过让人类，像我们这样的人知道某些东西被入侵了。

766
00:37:46,990 --> 00:37:48,490
Of course, there is a downside here.
当然，这里也有一些缺点。

767
00:37:48,490 --> 00:37:50,620
And this is another theme of cybersecurity.
这也是网络安全的另一个主题。

768
00:37:50,620 --> 00:37:54,680
Every time you improve something, you've got to pay a price.
每次你提升某样东西，你都要付出代价。

769
00:37:54,680 --> 00:37:56,020
There's going to be a tradeoff.
会有权衡取舍。

770
00:37:56,020 --> 00:38:00,250
And we've seen this with time and space and money and other such resources
我们已经看到，在设计系统时，时间、空间、金钱和其他资源方面都会有这种权衡取舍。

771
00:38:00,250 --> 00:38:03,010
when it comes to designing systems already.
在设计系统方面，我们已经看到了。

772
00:38:03,010 --> 00:38:06,940
What's the downside of this mechanism?
这种机制的缺点是什么？

773
00:38:06,940 --> 00:38:09,800
Why is this perhaps a bad thing or what's the downside to you,
为什么这可能是一件坏事，或者对你来说，

774
00:38:09,800 --> 00:38:11,620
the good person in the story?
这个故事中的好人来说，缺点是什么？

775
00:38:11,620 --> 00:38:12,340
Yeah.
是的。

776
00:38:12,340 --> 00:38:14,763
AUDIENCE: [INAUDIBLE]
听众： [听不清]

777
00:38:14,763 --> 00:38:17,180
DAVID MALAN: Yeah, if you've just forgotten your passcode,
大卫·马兰：是的，如果你只是忘记了密码，

778
00:38:17,180 --> 00:38:19,760
it's going to be more difficult for you to log in.
你登录会更加困难。

779
00:38:19,760 --> 00:38:23,338
Or maybe you just really need to get into your phone now
或者可能你真的需要马上进入你的手机，

780
00:38:23,338 --> 00:38:25,130
and you don't really want to wait a minute.
你并不想等一分钟。

781
00:38:25,130 --> 00:38:27,770
And if you, worse, if you keep trying, sometimes it'll
而如果你，更糟糕的是，如果你一直尝试，有时它会

782
00:38:27,770 --> 00:38:30,320
change to two minutes, five minutes, one hour.
变成两分钟，五分钟，一个小时。

783
00:38:30,320 --> 00:38:32,130
It'll increase exponentially.
它会呈指数级增长。

784
00:38:32,130 --> 00:38:32,630
Why?
为什么？

785
00:38:32,630 --> 00:38:35,660
Because Apple and Google figure that, they don't necessarily
因为苹果和谷歌认为，他们不一定

786
00:38:35,660 --> 00:38:38,120
know what the right cutoff is.
知道正确的截止时间。

787
00:38:38,120 --> 00:38:40,370
Maybe it's 10, maybe it's fewer, maybe it's more.
可能是10次，也可能是更少或更多。

788
00:38:40,370 --> 00:38:43,130
But at some point, it is much more likely
但在某一点上，

789
00:38:43,130 --> 00:38:46,698
that this is a hacker trying to get in than it is for getting your passcode.
这是一个黑客试图侵入的可能性远大于你忘记密码。

790
00:38:46,698 --> 00:38:48,740
But in the corporate world, it can be even worse.
但在企业界，情况可能更糟糕。

791
00:38:48,740 --> 00:38:51,668
There's a feature that lets phones essentially self-destruct whereby
有一个功能可以让手机自我毁灭，即

792
00:38:51,668 --> 00:38:53,460
rather than just waiting you wait a minute,
而不是仅仅等待一分钟，

793
00:38:53,460 --> 00:38:55,882
it will wipe the device, more dramatically.
它会更彻底地清除设备。

794
00:38:55,882 --> 00:38:59,090
The presumption being that, no, no, no, no, no, if this is a corporate phone,
假设是，不，不，不，不，不，如果这是一部公司手机，

795
00:38:59,090 --> 00:39:01,580
let's lock it down further so that it is an adversary,
让我们进一步锁定它，这样它就是一个对手，

796
00:39:01,580 --> 00:39:04,460
the data is gone after 10 failed attempts.
如果连续 10 次尝试失败，数据就会消失。

797
00:39:04,460 --> 00:39:07,220
But there's other mechanisms as well.
但也存在其他机制。

798
00:39:07,220 --> 00:39:10,910
In addition to logging into phones via passcodes,
除了通过密码登录手机，

799
00:39:10,910 --> 00:39:12,920
there's also websites like Gmail, for instance.
还有像 Gmail 这样的网站。

800
00:39:12,920 --> 00:39:16,200
And it's very common, therefore, to log in to websites like these.
因此，登录这些网站非常常见。

801
00:39:16,200 --> 00:39:18,930
And odds are, statistically, a lot of you
从统计学上讲，你们中很多人

802
00:39:18,930 --> 00:39:21,630
are in the habit of reusing passwords.
有重复使用密码的习惯。

803
00:39:21,630 --> 00:39:23,310
Like, no, don't nod if you are.
别点头，别点头。

804
00:39:23,310 --> 00:39:24,540
We have cameras everywhere.
到处都是摄像头。

805
00:39:24,540 --> 00:39:26,680
But maybe you're in the habit of reusing it.
但也许你习惯重复使用它。

806
00:39:26,680 --> 00:39:27,180
Why?
为什么？

807
00:39:27,180 --> 00:39:31,302
Because it's hard to remember really big long cryptic passwords.
因为很难记住那些又长又复杂又难懂的密码。

808
00:39:31,302 --> 00:39:33,510
So mathematically, there's surely an advantage there.
所以从数学上讲，这样做肯定有优势。

809
00:39:33,510 --> 00:39:33,870
Why?
为什么？

810
00:39:33,870 --> 00:39:36,150
Because it just makes it so much harder, more time-consuming,
因为这使得入侵变得更加困难，更加耗时，

811
00:39:36,150 --> 00:39:37,930
more risky for an adversary to get in.
对攻击者来说风险更大。

812
00:39:37,930 --> 00:39:40,440
But the other tradeoff is like, my God, I just can't even
但是另一方面，天哪，我根本就记不住

813
00:39:40,440 --> 00:39:42,930
remember most of my passwords as a result
大部分密码了，

814
00:39:42,930 --> 00:39:47,245
unless I reuse the one good password I thought of and memorized already
除非我重复使用我之前想出的并记住的唯一一个好密码，

815
00:39:47,245 --> 00:39:49,620
or maybe I write it down on a post-it note on my monitor,
或者我可能把它写在一张贴在显示器上的便利贴上，

816
00:39:49,620 --> 00:39:51,840
as all too often happens in corporate workplaces.
这在企业工作场所太常见了。

817
00:39:51,840 --> 00:39:54,390
Or maybe you're being clever and in your top right drawer,
或者你很聪明，在你的右上角抽屉里，

818
00:39:54,390 --> 00:39:56,400
you've got a printout of all of your accounts.
你保存着所有账户的打印版。

819
00:39:56,400 --> 00:39:58,815
Well, if you do, like ha-ha, so do a lot of other people.
好吧，如果你这样做了，哈哈，很多人也这样做。

820
00:39:58,815 --> 00:40:00,690
Or maybe it's a little more secure than that,
或者可能比这安全一点，

821
00:40:00,690 --> 00:40:05,490
but there are sociological side effects of these technological policies that
但是这些科技政策在社会层面上会产生一些副作用，

822
00:40:05,490 --> 00:40:07,980
really until recent years were maybe underappreciated.
直到最近几年，这些副作用才被重视。

823
00:40:07,980 --> 00:40:11,040
The academics, the IT administrators were mandating policies
学者、IT 管理员都在强制执行一些政策，

824
00:40:11,040 --> 00:40:15,540
that you and I as human users were not necessarily behaving properly
而我们这些普通用户在面对这些政策时，并不一定能做出正确的行为。

825
00:40:15,540 --> 00:40:16,650
in the face of.
面对。

826
00:40:16,650 --> 00:40:19,530
So nowadays, there are things called password managers.
所以现在，有一些叫做密码管理器的工具。

827
00:40:19,530 --> 00:40:22,380
And a password manager is just a piece of software on Macs,
密码管理器就是一个软件，它存在于 Mac 上，

828
00:40:22,380 --> 00:40:25,440
on PCs, on phones that manage your passwords for you.
PC 上，手机上，它可以为你管理你的密码。

829
00:40:25,440 --> 00:40:27,540
What this means specifically is when you go
具体来说，当你第一次

830
00:40:27,540 --> 00:40:30,390
to a website for the very first time, you, the human,
访问一个网站时，你，作为人类，

831
00:40:30,390 --> 00:40:32,490
don't need to choose your password anymore.
不再需要选择你的密码了。

832
00:40:32,490 --> 00:40:35,340
You instead click a button or use some keyboard shortcut.
你只需要点击一个按钮或使用一些键盘快捷键。

833
00:40:35,340 --> 00:40:39,810
And the software generates a really long cryptic password for you
软件会为你生成一个非常长、复杂、难以理解的密码，

834
00:40:39,810 --> 00:40:41,250
that's not even eight characters.
甚至超过 8 个字符。

835
00:40:41,250 --> 00:40:45,750
It might be 16 or 32 characters, can be even bigger than that, but with lots
它可能是 16 个字符，或者 32 个字符，甚至更多，并且包含大量的

836
00:40:45,750 --> 00:40:46,410
of randomness.
随机性。

837
00:40:46,410 --> 00:40:49,350
Definitely not going to be on that top 10 or that top 100 list.
这个密码肯定不会出现在前 10 名或前 100 名的列表中。

838
00:40:49,350 --> 00:40:52,170
The software thereafter remembers that password
软件会记住那个密码

839
00:40:52,170 --> 00:40:55,640
for you and even your username, whether it's your email address or something
以及你的用户名，无论它是你的电子邮件地址还是其他

840
00:40:55,640 --> 00:40:56,140
else.
东西。

841
00:40:56,140 --> 00:41:00,600
And it saves it onto your Mac or your phone or your PC's disk or hard drive.
它会将它保存到你的 Mac、手机、PC 的硬盘或磁盘上。

842
00:41:00,600 --> 00:41:03,840
The next time you visit that same website, what you can do
下次你访问同一个网站时，你可以

843
00:41:03,840 --> 00:41:07,560
is via menu or, better yet, a keyboard shortcut, log into the website
通过菜单，或者更好的是使用键盘快捷键，登录网站。

844
00:41:07,560 --> 00:41:10,560
without even remembering or even knowing your password.
即使不记得或不知道你的密码。

845
00:41:10,560 --> 00:41:12,570
I mean, to this day, I'll tell you, I don't even
我的意思是，直到今天，我会告诉你，我甚至

846
00:41:12,570 --> 00:41:15,870
know anymore 99% of my own passwords.
不知道我自己 99% 的密码。

847
00:41:15,870 --> 00:41:20,250
Rather, I rely on software like this to do the heavy lifting for me.
相反，我依赖这样的软件来为我完成繁重的工作。

848
00:41:20,250 --> 00:41:23,820
But there's an obvious downside here, which
但这里有一个明显的缺点，就是

849
00:41:23,820 --> 00:41:26,010
might be what if you're doing this?
如果你是这样做的，会怎样？

850
00:41:26,010 --> 00:41:26,862
Yeah.
是的。

851
00:41:26,862 --> 00:41:28,100
AUDIENCE: [INAUDIBLE]
观众： [听不清]

852
00:41:28,100 --> 00:41:31,730
DAVID MALAN: Right, so what if they find out the one password
大卫·马兰： 没错，所以如果他们找到了保护这个软件的密码，

853
00:41:31,730 --> 00:41:33,560
that's protecting this software?
会怎样？

854
00:41:33,560 --> 00:41:37,460
Because unstated by me up until now is that this password manager itself
因为我之前没有说明的是，这个密码管理器本身

855
00:41:37,460 --> 00:41:42,270
has a primary password that protects all of those other eggs in the one basket,
有一个主密码，它保护着篮子里所有其他的鸡蛋，

856
00:41:42,270 --> 00:41:42,860
so to speak.
可以这么说。

857
00:41:42,860 --> 00:41:46,130
And my one primary password for my own password manager,
而我自己的密码管理器的唯一主密码，

858
00:41:46,130 --> 00:41:48,022
it is really long and hard to guess.
它非常长而且很难猜。

859
00:41:48,022 --> 00:41:49,730
And the odds that anyone's going to guess
任何人都能猜到的可能性

860
00:41:49,730 --> 00:41:52,010
are just so low that I'm comfortable with that
实在是太低了，我对此感到很满意

861
00:41:52,010 --> 00:41:55,640
being the one really difficult thing that I've committed to my memory.
这是我唯一需要记住的真正困难的东西。

862
00:41:55,640 --> 00:41:59,150
But the problem is if someone does figure it out nonetheless somehow
但问题是，如果有人不管怎样还是能猜出来

863
00:41:59,150 --> 00:42:01,310
or, worse, I forget what it is.
或者更糟糕的是，我忘记了它是什么。

864
00:42:01,310 --> 00:42:04,700
Now, I've not lost access to one account, but all of my accounts.
现在，我不仅失去了一个帐户的访问权限，而且失去了所有帐户的访问权限。

865
00:42:04,700 --> 00:42:06,620
Now, that might be too high of a price to pay.
现在，这可能是一个太高的代价。

866
00:42:06,620 --> 00:42:09,620
But, again, if you're in the habit of choosing easy passwords like being
但是，同样，如果你习惯选择简单的密码，比如

867
00:42:09,620 --> 00:42:13,310
on that top 10 list, reusing passwords, it's probably a net
出现在前 10 名列表中，重复使用密码，这可能是一个净

868
00:42:13,310 --> 00:42:18,170
positive to incur this single risk versus the many risks you're
好处，因为承担了这种单一的风险，而不是你所承担的许多风险

869
00:42:18,170 --> 00:42:21,110
incurring across the board with all of these other sites.
在所有这些其他网站上普遍存在的许多风险。

870
00:42:21,110 --> 00:42:24,440
As for what you can use, increasingly our operating systems
至于你可以用什么，我们的操作系统越来越多地

871
00:42:24,440 --> 00:42:28,080
come with support for this, be it in the Apple world, Google, Microsoft world,
支持这一点，无论是苹果世界、谷歌、微软世界，

872
00:42:28,080 --> 00:42:28,650
or the like.
等等。

873
00:42:28,650 --> 00:42:31,140
There's third party software you can pay for and download.
还有你可以付费下载的第三方软件。

874
00:42:31,140 --> 00:42:32,412
But even then, I would beware.
但即使那样，我也要小心。

875
00:42:32,412 --> 00:42:34,620
And I would ask friends whose opinion you trust or do
我会询问你信任的朋友，或者

876
00:42:34,620 --> 00:42:36,570
some googling for reviews and the like.
在谷歌上搜索一些评论等等。

877
00:42:36,570 --> 00:42:41,760
All too often in the software world have password managers
在软件世界里，密码管理器经常

878
00:42:41,760 --> 00:42:44,850
been determined to be buggy themselves.
被发现本身就存在漏洞。

879
00:42:44,850 --> 00:42:48,120
I mean, you've seen in weeks of CS50 how easy it is to introduce bugs.
我的意思是，在 CS50 的几周时间里，你已经看到了引入漏洞是多么容易。

880
00:42:48,120 --> 00:42:51,570
And even the best of programmers still introduce bugs to software.
即使是最优秀的程序员也会在软件中引入漏洞。

881
00:42:51,570 --> 00:42:55,020
So you're also trusting that the companies making this password
所以你也在信任制作这种密码的那些公司

882
00:42:55,020 --> 00:42:57,430
management software is really good at it.
管理软件做得很好。

883
00:42:57,430 --> 00:42:59,047
And that's not always the case.
而情况并非总是如此。

884
00:42:59,047 --> 00:42:59,880
So beware there too.
所以也要小心。

885
00:42:59,880 --> 00:43:02,820
But we'll also focus today on some of the fundamentals
但我们今天也将重点关注一些基础知识

886
00:43:02,820 --> 00:43:05,875
that these companies can be using to better protect your data as well.
这些公司可以用来更好地保护你的数据。

887
00:43:05,875 --> 00:43:09,000
But there's another mechanism, which odds are you're in the habit of using.
但还有一种机制，你可能习惯使用它。

888
00:43:09,000 --> 00:43:11,812
Two-factor authentication, like most of us
双因素身份验证，就像我们大多数人

889
00:43:11,812 --> 00:43:14,020
probably have to use this for some of your accounts--
可能不得不为你的某些帐户使用它，比如

890
00:43:14,020 --> 00:43:17,312
your Harvard account, your Yale account, maybe your bank accounts, or the like.
你的哈佛账户、你的耶鲁账户，也许还有你的银行账户等等。

891
00:43:17,312 --> 00:43:21,500
So what is two-factor authentication in a nutshell?
简而言之，什么是双重身份验证？

892
00:43:21,500 --> 00:43:22,630
Yeah.
是的。

893
00:43:22,630 --> 00:43:25,130
AUDIENCE: [INAUDIBLE]
观众：[听不清]

894
00:43:25,130 --> 00:43:26,900
DAVID MALAN: Yeah, you get a second factor
戴维·马兰：是的，你会得到第二个因素

895
00:43:26,900 --> 00:43:29,360
that you have to provide to the website or application
你需要向网站或应用程序提供它

896
00:43:29,360 --> 00:43:31,520
to prove that it's you like a text to your phone
以证明你是你，比如发一条短信到你的手机上

897
00:43:31,520 --> 00:43:34,918
or maybe it's an actual application that gets push notifications or the like.
或者可能是一个实际的应用程序，它会收到推送通知或类似的东西。

898
00:43:34,918 --> 00:43:36,710
Maybe in the corporate world, it's actually
也许在企业界，它实际上是

899
00:43:36,710 --> 00:43:40,100
a tiny little device with a screen on it that's on your keychain or the like.
一个带屏幕的小巧设备，挂在你的钥匙链上或者类似的地方。

900
00:43:40,100 --> 00:43:43,430
Maybe it's actually a USB dongle that you have to plug into your work laptop.
也许它实际上是一个 USB 钥匙，你需要把它插到你的工作笔记本电脑上。

901
00:43:43,430 --> 00:43:45,380
In short, it's some second factor.
简而言之，这是一个额外的因素。

902
00:43:45,380 --> 00:43:47,520
And by factor, I mean something technical.
而“因素”的意思是指某种技术上的东西。

903
00:43:47,520 --> 00:43:50,840
It's not just a second password, which would be one factor.
它不仅仅是第二个密码，因为密码只算一个因素。

904
00:43:50,840 --> 00:43:52,980
It's a second fundamentally different factor.
它是第二个本质上不同的因素。

905
00:43:52,980 --> 00:43:57,950
So generally speaking in the world of two-factor authentication or 2FA or MFA
所以在双重身份验证、2FA 或 MFA 的世界中，一般来说

906
00:43:57,950 --> 00:44:00,710
is the generalization as multi-factor authentication,
多重身份验证是一个更通用的概念，

907
00:44:00,710 --> 00:44:03,770
you have not just a password, which is something you know,
你不仅有一个密码，它是你知道的东西，

908
00:44:03,770 --> 00:44:06,750
the second factor is usually something you have--
第二个因素通常是你拥有的东西——

909
00:44:06,750 --> 00:44:09,830
whether it's your phone or that application or the keychain.
无论是你的手机、那个应用程序还是钥匙链。

910
00:44:09,830 --> 00:44:12,830
It might also be biometrics like your fingerprints, your retinas,
它也可能是生物识别信息，比如你的指纹、你的视网膜，

911
00:44:12,830 --> 00:44:14,990
or something else physically about you.
或者其他与你身体有关的东西。

912
00:44:14,990 --> 00:44:18,180
But it's something that significantly decreases the probability
但它能显著降低一些攻击者

913
00:44:18,180 --> 00:44:20,430
that some adversary is going to get into that account.
进入那个账号的可能性。

914
00:44:20,430 --> 00:44:20,810
Why?
为什么？

915
00:44:20,810 --> 00:44:23,460
Because right now, if you've only got a username and password,
因为现在，如果你只有用户名和密码，

916
00:44:23,460 --> 00:44:26,640
your adversaries are literally every human in the world
你的攻击者实际上是世界上每一个人

917
00:44:26,640 --> 00:44:28,350
with an internet connection, arguably.
都可以说是拥有网络连接的人。

918
00:44:28,350 --> 00:44:30,750
But as soon as you introduce 2FA, now it's
但一旦你引入 2FA，现在就变成了

919
00:44:30,750 --> 00:44:34,500
only people on campus or, more narrowly, only the people in Starbucks
只有校园里的人，或者更准确地说，只有星巴克里的人

920
00:44:34,500 --> 00:44:36,780
at that moment who might physically have access
在那一刻可能会实际接触到

921
00:44:36,780 --> 00:44:40,020
to your person and your second factor, in this case.
你的人和你第二个因素，在这种情况下。

922
00:44:40,020 --> 00:44:43,320
More technically, what those technologies do is they send you
更准确地说，这些技术所做的就是向你发送

923
00:44:43,320 --> 00:44:47,530
a one-time passcode, which is further secure because once it's used,
一个一次性密码，它更加安全，因为一旦使用，

924
00:44:47,530 --> 00:44:50,520
there's hopefully some database that remembers that it has been used
希望有一些数据库会记住它已被使用

925
00:44:50,520 --> 00:44:51,850
and cannot be used again.
并且不能再次使用。

926
00:44:51,850 --> 00:44:54,570
So an adversary can't like sniff the airwaves and replay
因此，攻击者无法像嗅探无线电波一样重放

927
00:44:54,570 --> 00:44:57,250
that passcode the next time they, indeed, expire,
这个密码，在下一次它过期时，他们确实会这样做，

928
00:44:57,250 --> 00:44:58,980
which adds some additional defense.
这增加了一些额外的防御。

929
00:44:58,980 --> 00:45:02,130
And you might type it into a phone or maybe a web app that
你可能把它输入到一个手机上，或者是一个看起来像这样的网页应用程序。

930
00:45:02,130 --> 00:45:04,840
looks a little something like this.
看起来有点像这样。

931
00:45:04,840 --> 00:45:10,800
So passwords thus far, some defenses, therefore, any questions on this
所以到目前为止，密码有一些防御，因此，对这种机制有任何问题吗？

932
00:45:10,800 --> 00:45:13,250
here mechanism?
这里机制？

933
00:45:13,250 --> 00:45:13,750
No?
没有？

934
00:45:13,750 --> 00:45:15,640
All right, well, let's consider this.
好吧，让我们考虑一下。

935
00:45:15,640 --> 00:45:19,090
Odds are, with some frequency, you forget these passwords, especially
很可能你会经常忘记这些密码，尤其是在

936
00:45:19,090 --> 00:45:20,800
if you're not using a password manager.
你不使用密码管理器的情况下。

937
00:45:20,800 --> 00:45:22,633
And so you go to Gmail and you actually have
所以你会去 Gmail，并且实际上有

938
00:45:22,633 --> 00:45:24,910
to click a link like this, Forgot Password.
要点击像这样的链接，忘记密码。

939
00:45:24,910 --> 00:45:28,630
And then it typically emails you to initiate
然后它通常会向你发送电子邮件，以启动

940
00:45:28,630 --> 00:45:30,770
a process of resetting that password.
重置密码的过程。

941
00:45:30,770 --> 00:45:35,110
But if you can recall, has anyone ever clicked a link like that
但是如果你还记得，有没有人点击过这样的链接

942
00:45:35,110 --> 00:45:39,700
and then got an email with your password in the email?
然后收到了包含你密码的电子邮件？

943
00:45:39,700 --> 00:45:42,550
Maybe if you ever see this in the wild, that
也许如果你在现实生活中看到过这种情况，那么

944
00:45:42,550 --> 00:45:45,310
is to say in the real world, that is horrible, horrible design.
也就是说，在现实世界中，这是非常糟糕的设计。

945
00:45:45,310 --> 00:45:45,820
Why?
为什么？

946
00:45:45,820 --> 00:45:49,870
Because well-designed websites, not unlike CS50 Finance,
因为设计良好的网站，就像 CS50 Finance 一样，

947
00:45:49,870 --> 00:45:53,440
which had a users table, should not be storing username-- rather,
它有一个用户表，不应该存储用户名，而是

948
00:45:53,440 --> 00:45:59,650
should not be storing passwords in the clear, as it actually is.
不应该明文存储密码，而实际上它就是这么做的。

949
00:45:59,650 --> 00:46:02,170
It should somehow be obfuscated so that even
它应该以某种方式被混淆，即使

950
00:46:02,170 --> 00:46:04,930
if your database from CS50 Finance or Google's database
如果你来自 CS50 Finance 或 Google 的数据库

951
00:46:04,930 --> 00:46:08,020
is hacked and compromised and sold on the web,
被黑客入侵并被盗，然后在网上出售，

952
00:46:08,020 --> 00:46:10,570
it should not be as simple as doing like select star
它不应该像执行 select star 一样简单

953
00:46:10,570 --> 00:46:14,500
from Account semicolon to see what your actual passwords are.
from Account 分号来查看你的实际密码。

954
00:46:14,500 --> 00:46:17,140
And the mechanism that well-designed websites use
而设计良好的网站使用的机制

955
00:46:17,140 --> 00:46:20,020
is actually a primitive back from like week 5 when we
实际上是我们在第 5 周的时候学过的原始方法

956
00:46:20,020 --> 00:46:22,120
talked about hashing and hash tables.
谈到了哈希和哈希表。

957
00:46:22,120 --> 00:46:24,920
This time, we're using it for slightly different purposes.
这一次，我们将它用于略微不同的目的。

958
00:46:24,920 --> 00:46:30,190
So in the world of passwords, on the server side, there's often a database
所以在密码的世界里，在服务器端，通常会有一个数据库

959
00:46:30,190 --> 00:46:32,950
or maybe, more simply, a text file somewhere on the server
或者更简单地说，服务器上的某个地方有一个文本文件

960
00:46:32,950 --> 00:46:35,050
that just associates usernames with passwords.
它只是将用户名与密码关联起来。

961
00:46:35,050 --> 00:46:38,590
So to keep things simple, if there's at least two users like Alice and Bob,
为了简单起见，如果至少有两个用户，比如 Alice 和 Bob，

962
00:46:38,590 --> 00:46:40,420
Alice's password is maybe apple.
Alice 的密码可能是 apple。

963
00:46:40,420 --> 00:46:43,960
Bob's password is maybe banana, just to keep the mnemonics kind of simple.
Bob 的密码可能是 banana，只是为了让记忆助记符更简单一些。

964
00:46:43,960 --> 00:46:46,930
If though that were the case on the server
如果在服务器上是这种情况

965
00:46:46,930 --> 00:46:49,630
and that server is compromised, whoever the hacker now
并且服务器被入侵了，现在黑客

966
00:46:49,630 --> 00:46:53,290
has access to every username and every password, which in and of itself
可以访问每个用户名和每个密码，这本身

967
00:46:53,290 --> 00:46:57,700
might not be a huge deal because maybe the server administrators can just
可能不是什么大不了的事，因为服务器管理员可以

968
00:46:57,700 --> 00:47:00,730
disable all of the accounts, make everyone change their password,
禁用所有帐户，让每个人都更改他们的密码，

969
00:47:00,730 --> 00:47:01,880
and move on.
然后继续。

970
00:47:01,880 --> 00:47:05,080
But there's also this attack known as password stuffing, which
但还有另一种攻击被称为密码填充，它

971
00:47:05,080 --> 00:47:08,427
is a weirdly technical term, which means when you compromise one database,
是一个奇怪的技术术语，意思是当你入侵一个数据库时，

972
00:47:08,427 --> 00:47:09,010
you know what?
你知道吗？

973
00:47:09,010 --> 00:47:12,260
Take advantage of the naivety of a lot of us users.
利用我们很多用户的单纯。

974
00:47:12,260 --> 00:47:15,440
Try the compromised Apple password, the banana
尝试被入侵的 Apple 密码，香蕉

975
00:47:15,440 --> 00:47:18,380
password not on the compromised website, but other websites
密码不在被入侵的网站上，而是在其他网站上

976
00:47:18,380 --> 00:47:21,290
that you and I might have access to, the presumption
你我可能可以访问的，假设

977
00:47:21,290 --> 00:47:23,870
being that some of us in this room are using
是，我们中有些人正在使用

978
00:47:23,870 --> 00:47:25,950
the same passwords in multiple places.
相同的密码在多个地方。

979
00:47:25,950 --> 00:47:28,970
So it's bad if your password is compromised on one server
所以如果你的密码在一台服务器上被入侵

980
00:47:28,970 --> 00:47:32,580
because, by transitivity, so can all of your other accounts be compromised.
因为，通过传递性，你的其他所有帐户也可能会被入侵。

981
00:47:32,580 --> 00:47:34,640
So in the world of hashing, this was the picture
所以在哈希的世界里，这就是我们

982
00:47:34,640 --> 00:47:39,180
we drew some time ago, we can apply this same logic whereby, mathematically,
很久以前画的图，我们可以应用相同的逻辑，即在数学上，

983
00:47:39,180 --> 00:47:42,170
a hash function is like some function F and the input is X
哈希函数就像一个函数 F，输入是 X

984
00:47:42,170 --> 00:47:44,150
and the output or the range is F of X. That
输出或范围是 F(X)。这

985
00:47:44,150 --> 00:47:46,400
was sort of the fancy way of describing mathematically
用数学术语来描述的一种方式

986
00:47:46,400 --> 00:47:48,860
hashing as a process weeks ago.
几周前我们谈到的哈希算法

987
00:47:48,860 --> 00:47:51,800
But here, at a simpler level, the input to this process
但在这里，更简单的来说，这个过程的输入

988
00:47:51,800 --> 00:47:53,420
is going to be your actual password.
将会是你的真实密码

989
00:47:53,420 --> 00:47:56,630
The output is going to be a hash value, which in week 5
输出将会是一个哈希值，在第五周的时候

990
00:47:56,630 --> 00:47:58,730
was something simple generally like a number--
一般是一个简单的数字

991
00:47:58,730 --> 00:48:01,730
1 or 2 or 3 based on the first letter.
根据第一个字母是 1、2 或者 3

992
00:48:01,730 --> 00:48:04,745
That's not going to be quite as naive an approach as we
这不会像我们在

993
00:48:04,745 --> 00:48:05,870
take in the password world.
密码世界中那样简单

994
00:48:05,870 --> 00:48:07,578
It's going to look a little more cryptic.
它会看起来更加隐晦

995
00:48:07,578 --> 00:48:11,570
So Apple weeks ago might have just been 1, banana might have been 3.
所以几周前，苹果可能是 1，香蕉可能是 3

996
00:48:11,570 --> 00:48:15,980
But now let me propose that in the world of real world system design, what
但是现在我想说，在真实世界系统设计的领域中，数据库人员应该存储的

997
00:48:15,980 --> 00:48:18,140
the database people should actually store
实际上不是苹果

998
00:48:18,140 --> 00:48:21,252
is not apple, but rather this cryptic value.
而是这个隐晦的值

999
00:48:21,252 --> 00:48:23,960
And you can think of this as sort of random, but it's not random.
你可以把它看作是一种随机值，但它不是随机的

1000
00:48:23,960 --> 00:48:26,793
Because it is the result of an algorithm, some mathematical function
因为它是一个算法的结果，一个数学函数的结果

1001
00:48:26,793 --> 00:48:29,360
that someone implemented and smart people evaluated and said,
有人实现了这个算法，聪明的人们对其进行了评估，然后说

1002
00:48:29,360 --> 00:48:32,330
yes, this seems to be secure, secure in the sense
是的，这个算法看起来很安全，安全的意义在于

1003
00:48:32,330 --> 00:48:34,740
that this hash function is meant to be one way.
这个哈希函数是一个单向函数

1004
00:48:34,740 --> 00:48:37,640
So this is not encryption, a la Caesar Cipher from weeks
所以这不是加密，不像几周前我们学习的凯撒密码

1005
00:48:37,640 --> 00:48:42,170
ago whereby you could just add 1 to encrypt and subtract 1 to decrypt.
你可以通过加 1 来加密，减 1 来解密

1006
00:48:42,170 --> 00:48:44,930
This is one way in the sense that given this value,
它是单向的，也就是说，给定一个值

1007
00:48:44,930 --> 00:48:49,190
it should be pretty much impossible mathematically to reverse the process
从数学上来说，逆向操作基本是不可能的

1008
00:48:49,190 --> 00:48:53,150
and figure out that the user's password was originally apple.
并推断出用户的密码最初是苹果

1009
00:48:53,150 --> 00:48:57,372
Meanwhile banana, back in week 5 for simplicity, for hashing into a table,
同时，香蕉，为了简便，在第五周的时候，我们将其哈希到一个表中

1010
00:48:57,372 --> 00:48:59,330
we might have had a simple output of 2, since B
我们可能会得到一个简单的输出值 2，因为 B

1011
00:48:59,330 --> 00:49:01,205
is the second letter of the English alphabet.
是英文字母表中的第二个字母

1012
00:49:01,205 --> 00:49:05,420
But now the hash value of banana, thanks to a fancier mathematical function,
但是现在，由于一个更复杂的数学函数，香蕉的哈希值

1013
00:49:05,420 --> 00:49:08,070
is actually going to be something more cryptic like this.
实际上会是一个更加隐晦的值，就像这样

1014
00:49:08,070 --> 00:49:12,470
And so what the server really does is store not apple and banana, but rather
因此，服务器实际存储的不是苹果和香蕉，而是

1015
00:49:12,470 --> 00:49:15,770
those two seemingly cryptic values.
这两个看起来很隐晦的值

1016
00:49:15,770 --> 00:49:19,460
And then when the human, be it Alice or Bob,
然后，当人类用户，无论是爱丽丝还是鲍勃

1017
00:49:19,460 --> 00:49:24,320
logs in to a web form with their actual username and password, like Alice,
登录到网页表单中并输入他们的真实用户名和密码，比如爱丽丝，苹果，鲍勃，香蕉，网站

1018
00:49:24,320 --> 00:49:28,130
apple, Bob, banana, the website no longer even
甚至不再知道爱丽丝的密码是苹果，鲍勃的密码是香蕉

1019
00:49:28,130 --> 00:49:32,210
knows that Alice's password is apple and that Bob's is banana.
但是没关系

1020
00:49:32,210 --> 00:49:33,170
But that's OK.
因为只要服务器使用相同的代码

1021
00:49:33,170 --> 00:49:36,800
Because so long as the server uses the same code
与注册帐户时使用的代码一致

1022
00:49:36,800 --> 00:49:40,760
as it was using when these folks registered for accounts,
爱丽丝可以输入苹果，点击回车，通过 HTTP 发送到服务器

1023
00:49:40,760 --> 00:49:44,460
Alice can type in apple, hit Enter, send it via HTTP to the server.
服务器可以使用相同的哈希函数对 A-P-P-L-E 进行操作

1024
00:49:44,460 --> 00:49:47,720
The server can run that same hash function on A-P-P-L-E.
如果值匹配，服务器就可以得出结论，很有可能，是的

1025
00:49:47,720 --> 00:49:51,590
And if the value matches, it can conclude with high probability, yes,
这就是最初的爱丽丝，或者说，这就是最初的鲍勃

1026
00:49:51,590 --> 00:49:55,760
this is in fact, the original Alice or this, in fact, is the original Bob.
所以服务器从不保存密码，但它会使用相同的哈希函数

1027
00:49:55,760 --> 00:50:00,470
So the server never saves the password, but it does use the same hash function
反复比较那些相同的哈希值，无论何时这些用户登录

1028
00:50:00,470 --> 00:50:05,660
to compare those same hash values again and again whenever these folks log in


1029
00:50:05,660 --> 00:50:06,650
again and again.
一遍又一遍。

1030
00:50:06,650 --> 00:50:11,390
So, in reality, here's a simple one-way hash for both Alice's
所以，实际上，这是爱丽丝和鲍勃密码的简单单向散列。

1031
00:50:11,390 --> 00:50:13,310
and Bob's passwords in the real world.
以及鲍勃在现实世界中的密码。

1032
00:50:13,310 --> 00:50:15,560
It's even longer, this is to say, than what I
它甚至更长，也就是说，比我之前用过的更短的例子还要长。

1033
00:50:15,560 --> 00:50:17,600
used as shorter examples a moment ago.
用过的更短的例子还要长。

1034
00:50:17,600 --> 00:50:19,460
But there is a corner case here.
但是这里有一个极端情况。

1035
00:50:19,460 --> 00:50:23,400
Suppose that an adversary is smart and has some free time
假设一个攻击者很聪明，并且有一些空闲时间

1036
00:50:23,400 --> 00:50:26,150
and isn't necessarily interested in getting into someone's account
并且不一定有兴趣进入别人的账户

1037
00:50:26,150 --> 00:50:28,730
right now, but wants to do a bit of prework
现在，但想做一些预先的工作

1038
00:50:28,730 --> 00:50:31,910
to decrease the future cost of getting into someone's account.
以降低将来进入别人的账户的成本。

1039
00:50:31,910 --> 00:50:34,410
There is a technical term known as a rainbow table,
有一个专业术语叫彩虹表，

1040
00:50:34,410 --> 00:50:38,030
which is essentially like a dictionary in the Python sense or the SQL sense,
它本质上就像 Python 意义上的字典或 SQL 意义上的字典，

1041
00:50:38,030 --> 00:50:43,790
whereby in advance an adversary could just try hashing all of the fruits
这样，攻击者就可以提前尝试对世界上所有的水果进行散列运算

1042
00:50:43,790 --> 00:50:47,090
of the world or, really, all of the English words of the world or, rather,
或者说，世界上所有的英语单词，或者说，

1043
00:50:47,090 --> 00:50:51,470
all possible four-digit, four-character, eight-character passcodes in advance
所有可能的四位数、四字符、八字符密码，

1044
00:50:51,470 --> 00:50:53,870
and just store them in two columns--
并把它们存储在两列中——

1045
00:50:53,870 --> 00:50:57,260
the password, like 0000 or apple or banana,
密码，比如 0000 或 apple 或 banana，

1046
00:50:57,260 --> 00:50:59,760
and then just store in advance the hash values.
然后预先存储散列值。

1047
00:50:59,760 --> 00:51:04,280
So the adversary could effectively reverse engineer the hash
因此，攻击者可以有效地逆向工程散列

1048
00:51:04,280 --> 00:51:09,440
by just looking at a hash, comparing it against its massive database of hashes,
只需查看散列值，将其与庞大的散列值数据库进行比较，

1049
00:51:09,440 --> 00:51:14,060
and figuring out what password originally correspond to that.
并找出最初与之对应的密码。

1050
00:51:14,060 --> 00:51:17,540
Why then is this still relatively safe?
为什么这仍然相对安全？

1051
00:51:17,540 --> 00:51:19,760
Rainbow tables are concerning.
彩虹表令人担忧。

1052
00:51:19,760 --> 00:51:23,480
But they don't defeat passwords altogether.
但它们并不能完全击败密码。

1053
00:51:23,480 --> 00:51:26,740
Why might that be?
为什么呢？

1054
00:51:26,740 --> 00:51:27,400
Yeah.
是的。

1055
00:51:27,400 --> 00:51:30,340
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1056
00:51:31,948 --> 00:51:33,740
DAVID MALAN: OK, so the adversary might not
大卫·马兰：好的，所以攻击者可能不会

1057
00:51:33,740 --> 00:51:35,948
know exactly what hash function the company is using.
知道公司使用的散列函数的具体类型。

1058
00:51:35,948 --> 00:51:39,560
Generally speaking, you would not want to necessarily keep that private.
一般来说，你不会想把这个保密。

1059
00:51:39,560 --> 00:51:41,960
That would be considered security through obscurity.
这将被视为通过模糊来保证安全。

1060
00:51:41,960 --> 00:51:45,440
And all it takes is like one bad actor to tell the adversary what
只需要一个坏人告诉攻击者使用的是什么

1061
00:51:45,440 --> 00:51:47,340
hash function is being used.
散列函数。

1062
00:51:47,340 --> 00:51:49,500
And then that would put your security more at risk.
那样会使你的安全面临更大的风险。

1063
00:51:49,500 --> 00:51:51,710
So generally in the security world, openness
因此，在安全领域，公开性

1064
00:51:51,710 --> 00:51:53,750
when it comes to the algorithms in process
在算法方面

1065
00:51:53,750 --> 00:51:55,400
is generally considered best practice.
通常被认为是最佳实践。

1066
00:51:55,400 --> 00:51:58,760
And the reality is, there's a few popular hash functions out there
现实是，有一些流行的散列函数

1067
00:51:58,760 --> 00:52:00,990
that any company should be using.
任何公司都应该使用。

1068
00:52:00,990 --> 00:52:03,950
And so it's not really keeping a secret anyway.
所以，它实际上并没有保密。

1069
00:52:03,950 --> 00:52:05,010
But other thoughts?
还有其他想法吗？

1070
00:52:05,010 --> 00:52:07,190
Why is this rainbow table not such a concern?
为什么这个彩虹表不是那么令人担忧？

1071
00:52:07,190 --> 00:52:09,883
AUDIENCE: It takes a lot longer for the [INAUDIBLE]..
观众：[听不清]

1072
00:52:09,883 --> 00:52:12,050
DAVID MALAN: It takes a lot longer for the adversary
大卫·马兰：攻击者需要更长时间

1073
00:52:12,050 --> 00:52:15,020
to access that information because this table could get long.
来访问这些信息，因为这个表可能会很长。

1074
00:52:15,020 --> 00:52:18,440
And even more along those lines-- anyone want to push a little harder?
还有更多类似的观点——有人想更深入地探讨一下吗？

1075
00:52:18,440 --> 00:52:22,460
This doesn't necessarily put all of our passwords at risk.
这并不一定会使我们所有的密码面临风险。

1076
00:52:22,460 --> 00:52:25,110
It easily puts our four-digit passcodes at risk.
这很容易使我们的四位数密码面临风险。

1077
00:52:25,110 --> 00:52:25,610
Why?
为什么？

1078
00:52:25,610 --> 00:52:28,575
Because this table, this dictionary would have, what, 10,000 rows?
因为这个表，这个字典会有，什么，一万行？

1079
00:52:28,575 --> 00:52:30,950
And we've seen that you can search that kind of like that
我们已经看到你可以这样搜索

1080
00:52:30,950 --> 00:52:33,020
or even regenerate all of the possible values.
甚至可以重新生成所有可能的值。

1081
00:52:33,020 --> 00:52:36,200
But once you get to eight-character passcodes,
但是一旦你使用八个字符的密码，

1082
00:52:36,200 --> 00:52:38,510
I said it was 4 quadrillion possibilities.
我说过有 4 千万亿种可能性。

1083
00:52:38,510 --> 00:52:42,652
That's a crazy big dictionary in Python or crazy big list
在 Python 中，这是一个非常大的字典，或者是一个非常大的列表

1084
00:52:42,652 --> 00:52:43,610
of some sort in Python.
某种形式的 Python。

1085
00:52:43,610 --> 00:52:48,350
That's just way more RAM or memory than a typical adversary is going to have.
这远远超出了典型对手所能拥有的 RAM 或内存。

1086
00:52:48,350 --> 00:52:51,350
Now, maybe if it's a particularly resourced adversary like a government,
现在，也许如果是一个资源特别丰富的对手，比如政府，

1087
00:52:51,350 --> 00:52:54,140
a state more generally, maybe they do have supercomputers
更一般地说，一个国家，也许他们确实拥有超级计算机

1088
00:52:54,140 --> 00:52:55,730
that can fit that much information.
可以容纳如此多的信息。

1089
00:52:55,730 --> 00:52:58,160
But, fine, then use a 16-character passcode
但是，好吧，那就使用 16 个字符的密码

1090
00:52:58,160 --> 00:53:01,070
and make it an unpronounceable long search space
并使其成为一个不可发音的巨大搜索空间

1091
00:53:01,070 --> 00:53:02,780
that's way bigger than 4 quadrillion.
比 4 千万亿还要大。

1092
00:53:02,780 --> 00:53:07,820
So it's a threat, but only if you're on that horrible top 10 list or top 100
所以这是一种威胁，但只有当你在我们之前讨论过的可怕的排名前 10 名或排名前 100 名的列表中时才会出现。

1093
00:53:07,820 --> 00:53:11,470
or short passcode list that we've discussed thus far.
或者短密码列表。

1094
00:53:11,470 --> 00:53:14,490
So here's though a related threat that's just worth knowing about.
所以这里有一个相关的威胁，值得了解一下。

1095
00:53:14,490 --> 00:53:15,930
What's problematic here?
这里的问题是什么？

1096
00:53:15,930 --> 00:53:18,570
If we introduce two more users, Carol and Charlie,
如果我们再添加两个用户，卡罗尔和查理，

1097
00:53:18,570 --> 00:53:23,370
and just for the semantics of it, whose password happened to be cherry.
为了语义的完整性，他们的密码恰好是 cherry。

1098
00:53:23,370 --> 00:53:28,140
What if they both happened to have the same password and this database
如果他们恰好使用相同的密码，而这个数据库

1099
00:53:28,140 --> 00:53:28,860
is compromised?
被泄露了？

1100
00:53:28,860 --> 00:53:29,910
Some hacker gets in.
一些黑客入侵了。

1101
00:53:29,910 --> 00:53:33,810
And just to be clear, we wouldn't be storing apple, banana, cherry, cherry.
需要明确的是，我们不会存储 apple、banana、cherry、cherry。

1102
00:53:33,810 --> 00:53:37,380
We'd still be storing, according to this story, these hashes.
根据这个故事，我们仍然会存储这些哈希值。

1103
00:53:37,380 --> 00:53:40,080
But why is this still concerning?
但为什么这仍然令人担忧？

1104
00:53:40,080 --> 00:53:43,335
AUDIENCE: [INAUDIBLE]
观众： [听不清]

1105
00:53:44,435 --> 00:53:45,310
DAVID MALAN: Exactly.
大卫·马兰：没错。

1106
00:53:45,310 --> 00:53:47,852
If you figure out just one of them, now you've got the other.
如果你只找到了其中一个，那么你就得到了另一个。

1107
00:53:47,852 --> 00:53:50,410
And this is, in some sense, just leaking information, right?
从某种意义上说，这只是泄露信息，对吧？

1108
00:53:50,410 --> 00:53:53,330
I don't maybe at a glance what I could do with this information.
我可能无法一眼看出我能用这些信息做什么。

1109
00:53:53,330 --> 00:53:56,562
But if Carol and Charlie have the same password, you know what?
但如果卡罗尔和查理使用相同的密码，你知道吗？

1110
00:53:56,562 --> 00:53:59,020
I bet they have the same password on other systems as well.
我敢打赌他们在其他系统上也使用相同的密码。

1111
00:53:59,020 --> 00:54:02,300
You're leaking information that just does no good for anyone.
你泄露的信息对任何人都没有好处。

1112
00:54:02,300 --> 00:54:04,460
So how can we avoid that?
那么如何避免这种情况呢？

1113
00:54:04,460 --> 00:54:07,127
Well, we probably don't want to force Carol or Charlie to change
好吧，我们可能不想强迫卡罗尔或查理更改

1114
00:54:07,127 --> 00:54:09,293
their password, especially when they're registering.
他们的密码，尤其是在注册的时候。

1115
00:54:09,293 --> 00:54:12,760
You definitely don't want to say, sorry, someone's already using that password,
你绝对不想说，抱歉，有人已经在使用那个密码了，

1116
00:54:12,760 --> 00:54:13,900
you can't use it as well.
你也不能使用它。

1117
00:54:13,900 --> 00:54:15,820
Because that too would leak information.
因为这也会泄露信息。

1118
00:54:15,820 --> 00:54:19,600
But there's this technique in computing known as salting
但是，在计算中有一种叫做加盐的技术

1119
00:54:19,600 --> 00:54:21,460
whereby we can do this instead.
我们可以这样做。

1120
00:54:21,460 --> 00:54:26,530
If cherry we in this scheme hashes to a value like this, you know what?
如果 cherry 在这个方案中哈希到这样的值，你知道吗？

1121
00:54:26,530 --> 00:54:29,620
Let's go ahead and sprinkle a little bit of salt into the process.
让我们在过程中加点盐。

1122
00:54:29,620 --> 00:54:33,220
And it's sort of a metaphorical salt whereby this hash function now takes
这是一种比喻性的盐，在这个哈希函数现在需要的地方

1123
00:54:33,220 --> 00:54:36,760
two inputs, not just the password, but some other value known as a salt.
两个输入，不仅仅是密码，还有另一个被称为“盐”的值。

1124
00:54:36,760 --> 00:54:40,450
And the salt can be generally something super short like two characters even,
而且这个“盐”通常非常短，甚至只有两个字符，

1125
00:54:40,450 --> 00:54:41,620
or something longer.
或者更长。

1126
00:54:41,620 --> 00:54:43,960
And the idea is that this salt, much like a recipe,
而这个“盐”的作用，就像食谱一样，

1127
00:54:43,960 --> 00:54:46,250
should of perturb the output a little bit,
应该会稍微扰乱输出，

1128
00:54:46,250 --> 00:54:48,630
make it taste a little bit differently, if you will.
换句话说，让它尝起来稍微有点不同。

1129
00:54:48,630 --> 00:54:54,050
And so concretely, if we take the word cherry and then when Carol registers,
具体来说，如果我们以“cherry”这个词为例，然后当 Carol 注册时，

1130
00:54:54,050 --> 00:54:58,490
for instance, we randomly choose a salt of 50, 5-0, so two characters,
例如，我们随机选择一个“盐”为 50，5-0，也就是两个字符，

1131
00:54:58,490 --> 00:55:01,310
the hash value now-- because there's two inputs--
现在的哈希值（因为有两个输入）

1132
00:55:01,310 --> 00:55:02,820
might now be this value.
可能是这个值。

1133
00:55:02,820 --> 00:55:07,040
But if for Charlie, we still have cherry, but we change the 50,
但如果对于 Charlie 来说，我们仍然使用“cherry”，但将 50 更改为

1134
00:55:07,040 --> 00:55:08,420
we might see this instead.
我们可能会看到这个值。

1135
00:55:08,420 --> 00:55:11,570
Notice that for this first example, Carol, 50,
注意第一个例子，Carol，50，

1136
00:55:11,570 --> 00:55:14,815
the salt is preserved in the hash value, just so you know what it was
“盐”被保存在哈希值中，这样你就知道它是什么了

1137
00:55:14,815 --> 00:55:17,690
and you can sprinkle the same amount of salt, so to speak, next time.
下次你可以撒同样的盐量，打个比方。

1138
00:55:17,690 --> 00:55:21,260
But that's the whole hash value for Carol in this case.
但这是这种情况下的 Carol 的整个哈希值。

1139
00:55:21,260 --> 00:55:26,360
But if Charlie also has a password of cherry, but we change the salt to,
但如果 Charlie 的密码也是“cherry”，但我们将“盐”更改为，

1140
00:55:26,360 --> 00:55:31,500
say, 49 arbitrarily, that whole hash value changed.
比如随意地改为 49，整个哈希值就变了。

1141
00:55:31,500 --> 00:55:35,720
And so now in my hash database, I'm going to see different salts there,
因此，现在在我的哈希数据库中，我将看到不同的“盐”，

1142
00:55:35,720 --> 00:55:39,410
different values, which is going to effectively cover up the fact
不同的值，这将有效地掩盖了

1143
00:55:39,410 --> 00:55:41,580
that Carol and Charlie have the same password.
Carol 和 Charlie 使用相同的密码的事实。

1144
00:55:41,580 --> 00:55:45,075
Now, if we have so many users that we run out of salts,
现在，如果我们的用户数量太多，以至于“盐”不够了，

1145
00:55:45,075 --> 00:55:46,700
that still might leak some information.
这仍然可能泄露一些信息。

1146
00:55:46,700 --> 00:55:50,000
But that's kind of a we can kick down the road and probabilistically not
但这可以先放到一边，从概率上来说，

1147
00:55:50,000 --> 00:55:53,900
going to happen if you require passwords of sufficiently long length, most
如果你的密码长度足够长，这种情况很可能不会发生，大多数

1148
00:55:53,900 --> 00:55:54,800
likely.
可能性。

1149
00:55:54,800 --> 00:55:58,880
So any questions on salting, which to be clear,
所以关于加盐，说清楚一点，

1150
00:55:58,880 --> 00:56:01,190
is just a mechanism for decreasing the probability
这只是一个减少概率的机制，

1151
00:56:01,190 --> 00:56:03,650
that an adversary is going to glean information
让攻击者获取信息的概率

1152
00:56:03,650 --> 00:56:08,090
that you might not want them to have?
是你可能不希望他们拥有的信息？

1153
00:56:08,090 --> 00:56:09,880
So what does this mean concretely?
那么，这具体意味着什么？

1154
00:56:09,880 --> 00:56:13,060
When you get an email from a website saying "click this link
当你收到一个网站的电子邮件，上面说“点击此链接

1155
00:56:13,060 --> 00:56:16,730
to reset your password," it's not the website, if well designed,
重置你的密码”，如果网站设计良好，

1156
00:56:16,730 --> 00:56:20,230
is being difficult or shy and not telling you your password,
并不是网站故意为难你，或者不好意思告诉你你的密码，

1157
00:56:20,230 --> 00:56:23,872
the web administrators just do not know, ideally, your password.
理想情况下，网站管理员根本不知道你的密码。

1158
00:56:23,872 --> 00:56:24,830
So what are they doing?
那么他们到底在做什么？

1159
00:56:24,830 --> 00:56:27,160
They're probably sending you a link, similar in spirit
他们可能正在发送一个链接，与之类似

1160
00:56:27,160 --> 00:56:31,000
to a one-time password, there's some random unique string in there
是那种一次性密码，链接中包含一个随机的唯一字符串

1161
00:56:31,000 --> 00:56:32,097
that's unique to you.
这个字符串只属于你。

1162
00:56:32,097 --> 00:56:33,680
They've stored that in their database.
他们已经将这个字符串存储在他们的数据库中。

1163
00:56:33,680 --> 00:56:36,305
So as soon as you click on that link, they check their database
所以，当你点击这个链接时，他们会检查他们的数据库

1164
00:56:36,305 --> 00:56:39,760
and be like, oh, wait a minute, I know I set this link a minute ago to David.
然后说，“哦，等等，我记得一分钟前给 David 设置了这个链接。”

1165
00:56:39,760 --> 00:56:43,000
Let me just trust now-- because probabilistically there's no way
现在就相信他吧，因为从概率上来说，不可能

1166
00:56:43,000 --> 00:56:45,580
someone guessed this URL within 60 seconds--
有人能在 60 秒内猜到这个 URL

1167
00:56:45,580 --> 00:56:48,520
let's trust that whatever he wants to type in as his new password
相信他想要输入的任何新密码都是他想要的。

1168
00:56:48,520 --> 00:56:51,940
should be associated with that Malan account in the database.
应该与数据库中的 Malan 帐户相关联。

1169
00:56:51,940 --> 00:56:56,380
But if, conversely, you ever get an email saying your password is 123456
但是，相反地，如果你收到一封电子邮件，说你的密码是 123456

1170
00:56:56,380 --> 00:57:00,970
or whatever it is, it is clearly not being hashed, let alone salted,
或者无论是什么，它显然没有被哈希，更不用说加盐了，

1171
00:57:00,970 --> 00:57:01,910
on the server.
在服务器上。

1172
00:57:01,910 --> 00:57:06,100
And that is not a website to do anything particularly sensitive with.
而且这不是一个用来处理任何特别敏感信息的网站。

1173
00:57:06,100 --> 00:57:08,730
All right, so what more can we do?
好的，那我们还能做什么呢？

1174
00:57:08,730 --> 00:57:12,960
Well, let's pick up where we left off in week two on the art of cryptography,
好吧，让我们从第二周的密码学艺术中继续学习，

1175
00:57:12,960 --> 00:57:17,090
this art, the science of scrambling information, but in a reversible way.
这种艺术，信息混乱的科学，但它是一种可逆的方式。

1176
00:57:17,090 --> 00:57:22,273
So whereas hashing, as we've described it here, is really tends to be one-way,
所以，正如我们在这里描述的那样，哈希实际上往往是单向的，

1177
00:57:22,273 --> 00:57:25,190
whereby you should not be able to reverse the process unless you cheat
除非你作弊，否则你不应该能够逆转这个过程

1178
00:57:25,190 --> 00:57:27,067
and make a massive table of all of the inputs
并创建一个包含所有输入的大型表格

1179
00:57:27,067 --> 00:57:29,150
and all of the outputs, which isn't really so much
以及所有输出，这实际上并不算

1180
00:57:29,150 --> 00:57:31,880
reversing as it is just looking it up.
逆转，而只是查找它。

1181
00:57:31,880 --> 00:57:35,060
Cryptography, like in week 2, can actually
密码学，就像第二周一样，实际上

1182
00:57:35,060 --> 00:57:38,120
be a solution to a lot of problems, not just sending messages
可以解决很多问题，而不仅仅是发送消息

1183
00:57:38,120 --> 00:57:39,740
across a crowded room.
穿过拥挤的房间。

1184
00:57:39,740 --> 00:57:43,760
We, weeks ago, really focused on this type of cryptography
几周前，我们确实专注于这种类型的密码学

1185
00:57:43,760 --> 00:57:45,800
whereby you've got some plain text message.
你得到了一些纯文本消息。

1186
00:57:45,800 --> 00:57:50,060
You've got a key, like a secret number 1 or 13 or something else.
你有一个密钥，比如一个秘密数字 1 或 13 或者其他什么。

1187
00:57:50,060 --> 00:57:54,500
The cipher, which might be a rotational cipher or a substitution cipher,
密码，它可能是一个循环密码或一个替换密码，

1188
00:57:54,500 --> 00:57:56,897
some algorithm, and then ciphertext was the term
一些算法，然后密文是术语

1189
00:57:56,897 --> 00:57:58,730
of art for describing the scrambled version.
用于描述混淆版本的艺术。

1190
00:57:58,730 --> 00:58:01,190
That should look like random zeros and ones or letters
它应该看起来像随机的零和一或字母

1191
00:58:01,190 --> 00:58:02,570
of the alphabet or the like.
的字母或类似的东西。

1192
00:58:02,570 --> 00:58:06,880
This though was reversible, whereby you could just
然而，它是可逆的，你可以只

1193
00:58:06,880 --> 00:58:10,513
input the ciphertext with the key and get back out the plain text.
输入密文和密钥，然后获取纯文本。

1194
00:58:10,513 --> 00:58:13,180
Maybe you have to change a positive number to a negative number.
也许你必须将一个正数改为负数。

1195
00:58:13,180 --> 00:58:14,680
But the key is really the same.
但密钥实际上是一样的。

1196
00:58:14,680 --> 00:58:19,165
Be it plus 1 minus 1 or plus 13 minus 13, the process was symmetric.
无论是加 1 减 1 还是加 13 减 13，该过程都是对称的。

1197
00:58:19,165 --> 00:58:21,040
And, indeed, what we talked about in week two
而且，事实上，我们在第二周讨论的是

1198
00:58:21,040 --> 00:58:24,310
was an example of something called secret key cryptography, where
一个被称为密钥密码学的示例，其中

1199
00:58:24,310 --> 00:58:27,610
there's, indeed, one secret between two parties, a.k.a.
确实，在双方之间只有一个秘密，也就是

1200
00:58:27,610 --> 00:58:29,350
symmetric cryptography.
对称密码学。

1201
00:58:29,350 --> 00:58:32,770
Because encryption is pretty much the same as decryption, but maybe
因为加密和解密几乎相同，但也许

1202
00:58:32,770 --> 00:58:36,160
you change the sign on the key itself.
你改变了密钥本身的符号。

1203
00:58:36,160 --> 00:58:39,470
But this is not necessarily all we want.
但这不是我们想要的一切。

1204
00:58:39,470 --> 00:58:40,970
Because here's that general process.
因为这是那个一般过程。

1205
00:58:40,970 --> 00:58:42,678
Here's the letter A. Here's the key of 1.
这是字母 A。这是密钥 1。

1206
00:58:42,678 --> 00:58:46,360
We outputed in week 2 a value of B. That's not necessarily
我们在第二周输出了一个 B 值。那不一定是

1207
00:58:46,360 --> 00:58:47,960
the solution to all of our problems.
所有问题的解决方案。

1208
00:58:47,960 --> 00:58:48,460
Why?
为什么？

1209
00:58:48,460 --> 00:58:52,652
Well, if two people want to communicate securely, they need some shared secret.
嗯，如果两个人想安全地沟通，他们需要一些共享的秘密。

1210
00:58:52,652 --> 00:58:55,360
So, for instance, if I wanted to send a secret message to Rongxin
所以，例如，如果我想给荣鑫发送一个秘密信息

1211
00:58:55,360 --> 00:58:57,970
in the back of the room here, he and I have better
在房间的后面，我和他最好

1212
00:58:57,970 --> 00:59:00,050
agreed upon a secret in advance.
提前商定一个秘密。

1213
00:59:00,050 --> 00:59:03,460
Otherwise, how can I possibly send a message, encrypt it in a way
否则，我怎么才能发送消息，以一种方式加密它呢

1214
00:59:03,460 --> 00:59:04,462
that he can reverse?
他可以逆转吗？

1215
00:59:04,462 --> 00:59:06,920
I mean, I could be like, (WHISPERING) let's use a key of 1.
我的意思是，我可以像这样（小声说）让我们使用一个键1。

1216
00:59:06,920 --> 00:59:08,510
(SPEAKING NORMALLY) But obviously, anyone in the middle
（正常说话）但很明显，任何在中间的人

1217
00:59:08,510 --> 00:59:09,530
has just now heard that.
刚刚听到了这一点。

1218
00:59:09,530 --> 00:59:11,790
So we might as well not communicate securely at all.
所以我们也可能根本就不安全地交流。

1219
00:59:11,790 --> 00:59:13,760
So there's this kind of chicken-and-the-egg problem,
所以这是一种鸡和蛋的问题，

1220
00:59:13,760 --> 00:59:15,140
not just contrived here in lecture.
不只是在讲座中编造的。

1221
00:59:15,140 --> 00:59:17,473
But the first time I want to buy something on amazon.com
但当我第一次想在亚马逊网站上买东西的时候

1222
00:59:17,473 --> 00:59:20,270
with my credit card, I would like my credit card to be encrypted,
用我的信用卡，我希望我的信用卡被加密，

1223
00:59:20,270 --> 00:59:21,360
scrambled somehow.
以某种方式被加密。

1224
00:59:21,360 --> 00:59:24,380
But I don't know anyone personally at amazon.com, let alone someone
但我并不认识亚马逊网站上的任何人，更不用说一个人

1225
00:59:24,380 --> 00:59:28,730
that I've prearranged some secret for my Mac and their servers.
我已经为我的 Mac 和他们的服务器预先安排了一些秘密。

1226
00:59:28,730 --> 00:59:33,200
So it seems that we fundamentally can't use symmetric cryptography
所以看来我们基本上不能一直使用对称加密

1227
00:59:33,200 --> 00:59:37,370
all of the time, unless we have some other mechanism for securely generating
所有的时间，除非我们有一些其他机制来安全地生成

1228
00:59:37,370 --> 00:59:41,270
that key, which we don't have as the common case in the world today.
这个密钥，但我们今天在世界上没有作为通用的情况。

1229
00:59:41,270 --> 00:59:43,550
Thankfully, mathematicians years ago came up
值得庆幸的是，多年的数学家想出了

1230
00:59:43,550 --> 00:59:46,820
with something known as asymmetric cryptography, which
一种被称为非对称加密的东西，它

1231
00:59:46,820 --> 00:59:50,250
does not require that you use the same secret in both directions.
不需要你在两个方向使用相同的秘密。

1232
00:59:50,250 --> 00:59:53,330
This is otherwise known as public key cryptography.
这也被称为公钥密码学。

1233
00:59:53,330 --> 00:59:56,010
And it works essentially as follows.
它的工作原理如下。

1234
00:59:56,010 --> 00:59:59,330
When you want to take some plaintext message and encrypt it,
当你想要获取一些明文信息并对其进行加密时，

1235
00:59:59,330 --> 01:00:02,430
you use the recipient's public key.
你使用收件人的公钥。

1236
01:00:02,430 --> 01:00:06,080
So if Rongxin is my colleague in back and he has a public key,
所以如果 Rongxin 是我后面的同事，他有公钥，

1237
01:00:06,080 --> 01:00:07,280
it is public by definition.
它根据定义是公开的。

1238
01:00:07,280 --> 01:00:09,680
He can literally shout for the whole room
他实际上可以大声喊叫，让整个房间

1239
01:00:09,680 --> 01:00:12,290
to hear what his public key is, which effectively is just
听到他的公钥是什么，它实际上只是一个

1240
01:00:12,290 --> 01:00:14,578
some big, seemingly random number.
一些大的，看似随机的数字。

1241
01:00:14,578 --> 01:00:16,620
But there's some mathematical significance of it.
但它有一些数学意义。

1242
01:00:16,620 --> 01:00:17,703
And I can write that down.
我可以把它写下来。

1243
01:00:17,703 --> 01:00:21,290
Heck, you can all write it down if you too want to send him secure messages.
哎呀，如果你也想要给他发送安全消息，你们都可以把它写下来。

1244
01:00:21,290 --> 01:00:24,057
And out of those two inputs, we get one output, the ciphertext,
从这两个输入中，我们得到一个输出，密文，

1245
01:00:24,057 --> 01:00:27,140
that I can then hand off to people in the room in those virtual envelopes.
然后我可以把它交给房间里的人，放在那些虚拟信封里。

1246
01:00:27,140 --> 01:00:29,720
And it doesn't matter if all of you have heard his public key.
而且你们是否都听到了他的公钥并不重要。

1247
01:00:29,720 --> 01:00:31,803
Because you can perhaps guess where this is going.
因为你可能已经猜到这将要去哪里了。

1248
01:00:31,803 --> 01:00:34,230
How would Rongxin reverse this process?
Rongxin 如何逆转这个过程？

1249
01:00:34,230 --> 01:00:36,560
He's not going to use one public key.
他不会使用一个公钥。

1250
01:00:36,560 --> 01:00:40,980
He's going to use, not surprisingly, a corresponding private key.
不出所料，他会使用一个相应的私钥。

1251
01:00:40,980 --> 01:00:44,900
And so in asymmetric cryptography or public key cryptography,
因此，在非对称加密或公钥加密中，

1252
01:00:44,900 --> 01:00:48,377
you really have a key pair, a public key and a private key.
你实际上有一对密钥，一个公钥和一个私钥。

1253
01:00:48,377 --> 01:00:50,210
And for our mathematical purposes today, let
为了我们今天的数学目的，让我们

1254
01:00:50,210 --> 01:00:53,060
me just stipulate that there's some fancy math involved, such
我规定这里涉及一些高级数学，例如

1255
01:00:53,060 --> 01:00:56,390
that when you choose that key or, really, those keys,
当你选择那个密钥，或者说，那些密钥时，

1256
01:00:56,390 --> 01:00:59,000
there's a mathematical relationship between them.
它们之间存在数学关系。

1257
01:00:59,000 --> 01:01:02,760
And knowing one does not really give you any information about the other.
知道其中一个并不会真正给你关于另一个的信息。

1258
01:01:02,760 --> 01:01:03,260
Why?
为什么？

1259
01:01:03,260 --> 01:01:06,920
Because these numbers are so darn big it would take adversaries more
因为这些数字非常大，它需要对手更多的时间来

1260
01:01:06,920 --> 01:01:10,640
time than we all have on Earth to figure out via brute force
我们所有人在地球上都没有时间通过蛮力来找出

1261
01:01:10,640 --> 01:01:12,710
what the corresponding private key is.
对应的私钥是什么。

1262
01:01:12,710 --> 01:01:13,850
The math is that good.
数学就是这么好。

1263
01:01:13,850 --> 01:01:15,770
And even as computers get faster, we just
即使计算机的速度越来越快，我们也

1264
01:01:15,770 --> 01:01:18,500
keep using bigger and bigger keys, more and more bits
继续使用越来越大的密钥，越来越多的位

1265
01:01:18,500 --> 01:01:20,900
to make the math even harder for adversaries.
让对手的数学运算变得更加困难。

1266
01:01:20,900 --> 01:01:24,830
So when Rongxin receives that message, he uses his private key,
因此，当荣鑫收到该消息时，他使用他的私钥，

1267
01:01:24,830 --> 01:01:27,230
takes the ciphertext I sent him through the room,
将我通过房间发送给他的密文

1268
01:01:27,230 --> 01:01:29,310
and gets back out the plaintext.
并获得明文。

1269
01:01:29,310 --> 01:01:33,530
So this is exactly how HTTPS works effectively
因此，这正是 HTTPS 有效工作的方式

1270
01:01:33,530 --> 01:01:38,030
to securely establish a channel between me and Amazon.com, gmail.com.
以安全地建立我与 Amazon.com、gmail.com 之间的通道。

1271
01:01:38,030 --> 01:01:44,120
Any website starting with https:// uses public key cryptography to come up
任何以 https:// 开头的网站都使用公钥密码学来

1272
01:01:44,120 --> 01:01:45,650
with, initially, a secret.
最初，有一个秘密。

1273
01:01:45,650 --> 01:01:47,780
And in practice, it turns out, mathematically,
在实践中，结果表明，从数学上来说，

1274
01:01:47,780 --> 01:01:49,970
it's faster to use secret key crypto.
使用秘密密钥加密更快。

1275
01:01:49,970 --> 01:01:53,000
So very often, people will use asymmetric crypto
因此，人们经常使用非对称加密

1276
01:01:53,000 --> 01:01:57,350
to generate a big shared key and then use the faster algorithms thereafter.
生成一个大的共享密钥，然后使用更快的算法。

1277
01:01:57,350 --> 01:01:59,900
But it does solve asymmetric cryptography,
但这确实解决了非对称密码学，

1278
01:01:59,900 --> 01:02:03,780
that chicken-and-the-egg problem, by giving us all public keys and private
那个先有鸡还是先有蛋的问题，通过为我们提供所有公钥和私钥

1279
01:02:03,780 --> 01:02:04,280
keys.
密钥。

1280
01:02:04,280 --> 01:02:07,312
If you've heard of RSA, Diffie-Hellman, elliptic curve cryptography,
如果你听说过 RSA、Diffie-Hellman、椭圆曲线密码学，

1281
01:02:07,312 --> 01:02:09,770
there's different algorithms for this that you can actually
有不同的算法，你可以实际

1282
01:02:09,770 --> 01:02:12,030
study in higher level, more theoretical classes.
在更高级别、更理论的课程中学习。

1283
01:02:12,030 --> 01:02:15,155
But there's a bunch of different ways mathematically to solve this problem.
但是有很多不同的数学方法可以解决这个问题。

1284
01:02:15,155 --> 01:02:17,750
But those are the primitives involved.
但这些是所涉及的原语。

1285
01:02:17,750 --> 01:02:20,780
And how many of you have heard of now passkeys, which
你们中有多少人听说过现在的密码钥匙，它

1286
01:02:20,780 --> 01:02:23,960
is kind of only just catching on in recent months, literally.
实际上，只是在最近几个月才流行起来。

1287
01:02:23,960 --> 01:02:26,450
If I had to make any prediction this semester,
如果我必须对这学期做出任何预测，

1288
01:02:26,450 --> 01:02:29,460
odds are, you're going to see these in more and more places.
很可能，你会在越来越多的场所看到它们。

1289
01:02:29,460 --> 01:02:32,720
And in fact, the next time you register for a website or log into a website,
事实上，下次你注册或登录网站时，

1290
01:02:32,720 --> 01:02:37,730
look for a link, a button that maybe doesn't say passkeys, per se.
寻找一个链接，一个按钮，它可能并不一定叫“密码钥匙”。

1291
01:02:37,730 --> 01:02:40,190
It's often called passwordless login.
它通常被称为无密码登录。

1292
01:02:40,190 --> 01:02:42,200
But it's really referring to the same thing.
但它实际上指的是同一件事。

1293
01:02:42,200 --> 01:02:46,410
Passkeys are essentially a newish feature of operating systems,
密码钥匙本质上是操作系统的一个比较新的功能，

1294
01:02:46,410 --> 01:02:50,630
be it Mac OS or Windows or Linux or the OS running on your phone,
无论是 Mac OS、Windows、Linux 还是手机上运行的操作系统，

1295
01:02:50,630 --> 01:02:54,380
that doesn't require that you choose a username and password anymore.
都不再要求你选择用户名和密码。

1296
01:02:54,380 --> 01:02:56,990
Rather, when you visit a website for the very first time,
相反，当你第一次访问一个网站时，

1297
01:02:56,990 --> 01:03:01,610
your device will generate a public and private key pair.
你的设备会生成一对公钥和私钥。

1298
01:03:01,610 --> 01:03:04,270
Your device will then send to the website for what
然后，你的设备会向网站发送你的

1299
01:03:04,270 --> 01:03:09,100
you're registering your public key so that it has one of the values,
你注册的公钥，以便它具有其中一个值，

1300
01:03:09,100 --> 01:03:12,010
but you keep your private key, indeed, private.
但你保持你的私钥，确实，是私密的。

1301
01:03:12,010 --> 01:03:15,760
And using the same mathematical process that I alluded to earlier,
使用我之前提到的相同数学过程，

1302
01:03:15,760 --> 01:03:18,790
you can therefore log into that website in the future
因此，你可以在将来登录到那个网站

1303
01:03:18,790 --> 01:03:21,880
by proving mathematically that you are, in fact, the owner
通过数学证明你实际上是

1304
01:03:21,880 --> 01:03:24,230
of the corresponding private key.
对应的私钥的所有者。

1305
01:03:24,230 --> 01:03:26,530
So, in essence, if we use a picture like this,
因此，本质上，如果我们使用这样的图片，

1306
01:03:26,530 --> 01:03:30,130
when you proceed to log in to that website again-- and, again,
当你再次登录到该网站时，再次，

1307
01:03:30,130 --> 01:03:32,022
that website has stored your public key--
该网站已存储您的公钥。

1308
01:03:32,022 --> 01:03:34,480
it essentially uses something known as digital signatures--
它本质上使用的是一种叫做数字签名的东西。

1309
01:03:34,480 --> 01:03:37,060
you're familiar with this term, you've heard it in the wild--
你熟悉这个词，你曾在生活中听到过它。

1310
01:03:37,060 --> 01:03:40,810
whereby the website will send you a challenge message,
通过这种方式，网站会向你发送一条挑战信息，

1311
01:03:40,810 --> 01:03:43,540
like some random number or string of text.
就像一些随机数字或文本字符串。

1312
01:03:43,540 --> 01:03:45,340
It's just some random value.
这只是一个随机值。

1313
01:03:45,340 --> 01:03:49,690
If you then effectively encrypt it with your private key or run both of those
如果你用你的私钥对其进行加密，或者将这两个值都

1314
01:03:49,690 --> 01:03:52,750
through a particular algorithm, you'll get back a signature.
通过特定的算法运行，你将得到一个签名。

1315
01:03:52,750 --> 01:03:57,200
And that signature can be verified by the website by using your public key.
然后，该网站可以使用您的公钥来验证该签名。

1316
01:03:57,200 --> 01:04:01,330
So digital signatures are kind of an application of cryptography
因此，数字签名是对密码学的应用

1317
01:04:01,330 --> 01:04:03,040
but in the reverse direction.
但方向相反。

1318
01:04:03,040 --> 01:04:06,010
In the world of encryption, you use someone's public key
在加密领域，你使用某人的公钥

1319
01:04:06,010 --> 01:04:07,630
to send a message encrypted.
来发送一条加密的消息。

1320
01:04:07,630 --> 01:04:09,910
And they use their private key to decrypt it.
他们用自己的私钥解密它。

1321
01:04:09,910 --> 01:04:12,220
In the world of signatures, or really passkeys,
在签名领域，或者更确切地说是通行密钥，

1322
01:04:12,220 --> 01:04:16,420
you reverse the process, whereby you use your private key to effectively encrypt
你反转这个过程，用你的私钥对

1323
01:04:16,420 --> 01:04:18,160
some random challenge you've been sent.
发送给你的随机挑战进行加密。

1324
01:04:18,160 --> 01:04:20,980
And the website, the third party, can use your public key
然后，网站这个第三方可以使用你的公钥

1325
01:04:20,980 --> 01:04:24,760
to verify, OK, mathematically, that response came from David.
来验证，好的，从数学上讲，这个响应来自于大卫。

1326
01:04:24,760 --> 01:04:26,740
Because I have his public key on file.
因为我保存了他的公钥。

1327
01:04:26,740 --> 01:04:28,000
So what's the upside of this?
那么，这样做有什么好处呢？

1328
01:04:28,000 --> 01:04:31,060
We just get out of the business of passwords and password managers
我们只需要摆脱密码和密码管理器的困扰

1329
01:04:31,060 --> 01:04:31,930
more generally.
更广泛地说。

1330
01:04:31,930 --> 01:04:34,450
You do have to trust and protect your devices, be it
你确实需要信任并保护你的设备，无论是

1331
01:04:34,450 --> 01:04:36,790
your phone or your laptop or desktop all the more.
你的手机、笔记本电脑还是台式电脑，都要更加注意。

1332
01:04:36,790 --> 01:04:39,190
And that's going to open another possible threat.
这将带来另一种可能的威胁。

1333
01:04:39,190 --> 01:04:42,310
But this is a way to chip away at what is becoming the reality
但这是消除正逐渐成为现实的东西的一种方式

1334
01:04:42,310 --> 01:04:46,090
that you and I probably have dozens, hundreds of usernames and passwords
你和我都可能有几十个，甚至几百个用户名和密码

1335
01:04:46,090 --> 01:04:48,350
that's probably not sustainable long-term.
这在长期内可能无法持续。

1336
01:04:48,350 --> 01:04:53,580
And, indeed, we read to often about hacks in the wild as a result.
而且，我们经常看到，由于这种原因，黑客攻击在现实中很常见。

1337
01:04:53,580 --> 01:05:00,190
Questions then on cryptography or passkeys?
那么，关于密码学或通行密钥的问题吗？

1338
01:05:00,190 --> 01:05:03,370
All right, just a few more building blocks to equip you for the real world
好的，再讲几个构建模块，让你在现实世界中运用。

1339
01:05:03,370 --> 01:05:07,360
before we sort of maybe do a final check for understanding of sorts.
在我们进行最后的理解检查之前。

1340
01:05:07,360 --> 01:05:11,990
So when it comes to encryption, we can solve other problems as well.
因此，说到加密，我们还可以解决其他问题。

1341
01:05:11,990 --> 01:05:15,340
And in this too is a feature you should increasingly be seeking out.
这也是你应该越来越多的去寻找的一个功能。

1342
01:05:15,340 --> 01:05:19,720
So end-to-end encryption refers to a stronger use of encryption
端到端加密指的是更强大的加密方式

1343
01:05:19,720 --> 01:05:21,970
than most websites are actually in the habit of using.
比大多数网站使用的加密方式更强。

1344
01:05:21,970 --> 01:05:25,960
Case in point, if you're using HTTPS to send an email to Gmail,
举个例子，如果你用 HTTPS 向 Gmail 发送电子邮件，

1345
01:05:25,960 --> 01:05:28,630
that's good because no one between you and Gmail servers
这是好事，因为在你和 Gmail 服务器之间

1346
01:05:28,630 --> 01:05:30,970
presumably can see the message because it's encrypted.
没有人可以查看这条消息，因为它被加密了。

1347
01:05:30,970 --> 01:05:32,710
It just looks like random zeros and ones.
它看起来就像随机的 0 和 1。

1348
01:05:32,710 --> 01:05:36,670
So it's effectively secure from people on the internet.
所以它实际上是安全的，免受互联网上的人们的攻击。

1349
01:05:36,670 --> 01:05:41,140
The emails are not secure from like nosy employees at Google
这些邮件并不能保护 Google 的那些爱管闲事的工作人员。

1350
01:05:41,140 --> 01:05:43,220
who do have access to those servers.
谁有权访问这些服务器。

1351
01:05:43,220 --> 01:05:46,855
Now, maybe through corporate policy, they shouldn't or physically don't.
现在，也许是出于公司政策，他们不应该或者实际上也不能。

1352
01:05:46,855 --> 01:05:48,730
But, theoretically, there's someone at Google
但理论上，谷歌里有人

1353
01:05:48,730 --> 01:05:51,823
who could look at all of your email if they were so inclined.
如果他们想的话，可以查看你的所有电子邮件。

1354
01:05:51,823 --> 01:05:53,740
Hopefully it's just not a long list of people.
希望这只是一个不长的名单。

1355
01:05:53,740 --> 01:05:56,800
But end-to-end encryption ensures that if you're
但端到端加密确保的是，如果你

1356
01:05:56,800 --> 01:06:00,830
sending a message from A to B, even if it's going through C in the middle--
从A发到B的信息，即使它经过了中间的C——

1357
01:06:00,830 --> 01:06:03,950
be it Google or Microsoft or someone else-- end-to-end encryption
无论是谷歌、微软还是其他人——端到端加密

1358
01:06:03,950 --> 01:06:08,300
means that you're encrypting it between A and B. And so even C in the middle
意味着你是在A和B之间加密的。因此，即使是中间的C

1359
01:06:08,300 --> 01:06:10,410
has no idea what's going on.
也不知道发生了什么事。

1360
01:06:10,410 --> 01:06:12,830
This is not true of services like Gmail or Outlook.
像Gmail或Outlook这样的服务就不是这样。

1361
01:06:12,830 --> 01:06:16,040
This is true of services like iMessage or WhatsApp
像iMessage或WhatsApp这样的服务才是这样。

1362
01:06:16,040 --> 01:06:20,060
or Signal or Telegram or other services where if you poke around, also
或者Signal或Telegram或其他服务，如果你仔细研究，你也会看到

1363
01:06:20,060 --> 01:06:22,735
you'll see literally mention of end-to-end encryption.
真正提到端到端加密。

1364
01:06:22,735 --> 01:06:25,110
It's a feature that's becoming a little more commonplace,
这正成为越来越普遍的功能，

1365
01:06:25,110 --> 01:06:28,220
but something you should seek out when you don't necessarily trust or want
但当你并不信任或不想信任

1366
01:06:28,220 --> 01:06:31,610
to trust the machine in the middle, the point
信任中间的机器时，这一点

1367
01:06:31,610 --> 01:06:36,200
C between A and B. So, indeed, when sending messages on phones
A和B之间的C。所以，确实，在手机上发送消息时

1368
01:06:36,200 --> 01:06:38,188
and even video conferencing nowadays too.
甚至如今的视频会议也是这样。

1369
01:06:38,188 --> 01:06:40,730
And here's something where sometimes you kind of have to dig.
而这里有一些你可能需要仔细研究的东西。

1370
01:06:40,730 --> 01:06:43,020
Most of us are familiar with Zoom certainly by now.
我们大多数人现在肯定都熟悉Zoom了。

1371
01:06:43,020 --> 01:06:44,990
And if we go into Zoom settings, which I did
如果我们进入Zoom设置，我今天早上就

1372
01:06:44,990 --> 01:06:48,470
this morning to take this screenshot, this is what it looks like as of now.
早上做了这件事来截取这张截图，这就是现在的样子。

1373
01:06:48,470 --> 01:06:51,290
Here's the menu of options for creating a new meeting.
这是创建新会议的选项菜单。

1374
01:06:51,290 --> 01:06:53,450
And toward the bottom here-- it's a little small--
这里面靠近底部——有点小——

1375
01:06:53,450 --> 01:06:56,180
you'll notice that you have two options for encryption.
你会注意到有两个加密选项。

1376
01:06:56,180 --> 01:06:58,520
And funny, enough the one that's typically selected
有趣的是，通常选择

1377
01:06:58,520 --> 01:07:02,825
by default, unless you opt in to the other one, is enhanced encryption.
默认的是增强加密，除非你选择另一个。

1378
01:07:02,825 --> 01:07:03,950
Brilliant marketing, right?
很棒的营销，对吧？

1379
01:07:03,950 --> 01:07:05,990
Who doesn't want enhanced encryption.
谁不想要增强加密呢。

1380
01:07:05,990 --> 01:07:10,067
It is weaker than this encryption though, which is end-to-end encryption.
不过它比这种加密更弱，这种加密是端到端加密。

1381
01:07:10,067 --> 01:07:11,900
End-to-end encryption means that when you're
端到端加密意味着当你

1382
01:07:11,900 --> 01:07:14,180
having a video conference with one or more people,
与一个人或多个人进行视频会议时，

1383
01:07:14,180 --> 01:07:18,200
not even Zoom can see or hear what you're talking about.
甚至Zoom也无法看到或听到你在说什么。

1384
01:07:18,200 --> 01:07:21,470
Enhanced encryption means no one between you
增强加密意味着你与Zoom之间

1385
01:07:21,470 --> 01:07:24,660
and Zoom can hear or see what you're talking about.
的任何人无法听到或看到你在说什么。

1386
01:07:24,660 --> 01:07:28,880
So end-to-end ensures that it's A to B, and if Zoom is C In the story,
所以端到端确保它是从A到B，如果Zoom是故事中的C，

1387
01:07:28,880 --> 01:07:31,350
even Zoom can't see what you're doing.
即使Zoom也无法看到你在做什么。

1388
01:07:31,350 --> 01:07:32,600
Now, there are some downsides.
现在，有一些缺点。

1389
01:07:32,600 --> 01:07:34,460
And there's some little fine print here.
这里有一些小字。

1390
01:07:34,460 --> 01:07:39,140
When you enable end-to-end encryption on a cloud-based service like Zoom,
当你启用像Zoom这样的云服务上的端到端加密时，

1391
01:07:39,140 --> 01:07:41,220
you can't use cloud recordings anymore.
你将无法再使用云录制。

1392
01:07:41,220 --> 01:07:41,720
Why?
为什么？

1393
01:07:41,720 --> 01:07:43,670
Well, if Zoom by definition mathematically
好吧，如果根据定义，Zoom在数学上

1394
01:07:43,670 --> 01:07:46,670
can't see or hear your meeting, how are they going to record it for you?
无法看到或听到你的会议，他们将如何为你录制？

1395
01:07:46,670 --> 01:07:48,200
It's just random zeros and ones.
它只是一些随机的 0 和 1。

1396
01:07:48,200 --> 01:07:50,690
You can still record it locally on your Mac or PC,
你仍然可以在你的 Mac 或 PC 上本地录制，

1397
01:07:50,690 --> 01:07:53,060
but end-to-end encryption ensures that you
但是端到端加密确保你

1398
01:07:53,060 --> 01:07:56,600
don't have to worry about prying eyes-- be it a company, be it a government,
不必担心窥探的目光——无论是公司、政府，

1399
01:07:56,600 --> 01:07:57,738
a state more generally.
还是更广泛地说，一个国家。

1400
01:07:57,738 --> 01:08:00,530
And so societally, you'll start to see this discussed probably even
因此，在社会上，你可能会看到人们讨论这个问题，甚至

1401
01:08:00,530 --> 01:08:04,220
more than it already is when it comes to personal liberties and freedom
比现在讨论的还要多，因为这涉及到个人自由

1402
01:08:04,220 --> 01:08:07,700
among citizens of countries and states because
在国家和地区的公民中，因为

1403
01:08:07,700 --> 01:08:10,583
of the implications for actual privacy that these primitives
这些基本原理对实际隐私的影响

1404
01:08:10,583 --> 01:08:13,250
that we've been discussing and that you even explored in week 2,
我们一直在讨论的，甚至你在第二周也探索了，

1405
01:08:13,250 --> 01:08:17,882
albeit weakly, with these ciphers we used in the real world.
尽管很弱，但我们使用了这些在现实世界中使用的密码。

1406
01:08:17,882 --> 01:08:20,840
But encryption has one other use that's worth knowing about too and yet
但是加密还有另一个值得了解的用途，并且

1407
01:08:20,840 --> 01:08:22,319
another feature to turn on.
还有另一个功能可以开启。

1408
01:08:22,319 --> 01:08:26,569
So when it comes to deleting files, odds are, most everyone in the room
所以，说到删除文件，很可能，房间里的每个人

1409
01:08:26,569 --> 01:08:31,100
knows on a Mac or PC that when you drag a file to the trashcan or the recycle
都知道在 Mac 或 PC 上，当你将文件拖到垃圾桶或回收站时

1410
01:08:31,100 --> 01:08:35,090
bin, it doesn't actually go away unless you right click
里，它实际上并不会消失，除非你右键单击

1411
01:08:35,090 --> 01:08:38,540
or Control click or go to the appropriate menu and empty the trash.
或者按 Ctrl 键单击或转到相应的菜单并清空垃圾桶。

1412
01:08:38,540 --> 01:08:42,020
But did anyone know that even when you empty the trash or recycle bin,
但是有没有人知道，即使你清空了垃圾桶或回收站，

1413
01:08:42,020 --> 01:08:44,870
the file also doesn't really go away.
文件实际上并没有消失。

1414
01:08:44,870 --> 01:08:47,479
Your operating system typically just forgets where it is.
你的操作系统通常只是忘记了它的位置。

1415
01:08:47,479 --> 01:08:51,140
But the zeros and ones that compose the file or files you tried to delete
但是构成你试图删除的文件的那些 0 和 1

1416
01:08:51,140 --> 01:08:53,600
are still there for the pickings, especially
仍然在那里，可以随时取用，尤其是

1417
01:08:53,600 --> 01:08:56,729
if someone gets physical or virtual access to your system.
如果有人获得了你的系统的物理或虚拟访问权限。

1418
01:08:56,729 --> 01:08:59,845
So, for instance, here is a whole bunch of ones and zeros.
例如，这里有一堆 1 和 0。

1419
01:08:59,845 --> 01:09:01,970
Maybe it's representing something on my hard drive.
也许它代表着我硬盘上的某些东西。

1420
01:09:01,970 --> 01:09:04,279
And suppose that I want to go ahead and delete
假设我想继续删除

1421
01:09:04,279 --> 01:09:08,060
a file that comprises these zeros and ones, these bits here.
一个包含这些 0 和 1 的文件，这些位在这里。

1422
01:09:08,060 --> 01:09:10,340
Well, when your operating system deletes the file,
那么，当你的操作系统删除文件时，

1423
01:09:10,340 --> 01:09:13,040
even if you click on Empty Trash or Empty Recycle Bin,
即使你点击清空垃圾桶或清空回收站，

1424
01:09:13,040 --> 01:09:18,319
it essentially just forgets about those bits, but doesn't actually change them.
它实际上只是忘记了那些位，但并没有真正改变它们。

1425
01:09:18,319 --> 01:09:21,560
Only once you create a new file or download something else
只有当你创建新文件或下载其他东西时

1426
01:09:21,560 --> 01:09:25,189
do some of those zeros and ones end up getting overwritten.
其中一些 0 和 1 最终会被覆盖。

1427
01:09:25,189 --> 01:09:29,000
And per the yellow remnants here, the implication of this contrived example
根据这里黄色的残留部分，这个人为例子意味着

1428
01:09:29,000 --> 01:09:32,149
is that even at this point in time you can still recover
即使在此时此刻，你仍然可以恢复

1429
01:09:32,149 --> 01:09:34,098
like half of the file, it would seem.
似乎有大约一半的文件。

1430
01:09:34,098 --> 01:09:36,140
So maybe the juicy part with a credit card number
所以也许包含信用卡号码的那部分

1431
01:09:36,140 --> 01:09:38,890
or a message that you really wanted to delete or the like, there's
或者你真的很想删除的邮件之类的，这里仍然

1432
01:09:38,890 --> 01:09:41,330
still remnants on the computer's hard drive here.
存在着电脑硬盘上的残留信息。

1433
01:09:41,330 --> 01:09:42,720
So what's the alternative?
那么，有什么替代方法吗？

1434
01:09:42,720 --> 01:09:44,553
Well, if you really want to be thorough, you
好吧，如果你真的想要彻底，你可以

1435
01:09:44,553 --> 01:09:47,600
could delete files and then download the biggest possible movies you
删除文件，然后下载你能找到的最大电影，

1436
01:09:47,600 --> 01:09:49,580
can to really fill up your hard drive.
来真正填满你的硬盘。

1437
01:09:49,580 --> 01:09:51,925
Because, probabilistically, you would end up
因为，从概率上来说，你最终会

1438
01:09:51,925 --> 01:09:54,050
overwriting all of those zeros and ones eventually.
最终覆盖掉所有这些 0 和 1。

1439
01:09:54,050 --> 01:09:56,422
But that's not really a tenable solution.
但这并不是一个可行的解决方案。

1440
01:09:56,422 --> 01:09:58,130
It would just take too much time and it's
这将花费太多时间，而且

1441
01:09:58,130 --> 01:10:00,220
fraught with possible simple mistakes.
充满了可能出现的简单错误。

1442
01:10:00,220 --> 01:10:02,500
So what should we do instead, well, maybe we
那么我们应该怎么做呢？也许我们应该

1443
01:10:02,500 --> 01:10:04,720
should securely delete information.
安全地删除信息。

1444
01:10:04,720 --> 01:10:06,910
And securely delete would mean when you actually
安全删除意味着当你真正

1445
01:10:06,910 --> 01:10:11,290
empty the recycle bin or the trash can, what happens to the original zeros
清空回收站或垃圾桶时，原始的 0 和 1 会发生什么

1446
01:10:11,290 --> 01:10:14,050
and ones is that you take them and you change all of them
和 1 呢？你会将它们全部更改

1447
01:10:14,050 --> 01:10:17,900
to zeros or all of them to ones or all of them to random zeros and ones.
为 0，或者全部更改为 1，或者全部更改为随机的 0 和 1。

1448
01:10:17,900 --> 01:10:18,400
Why?
为什么？

1449
01:10:18,400 --> 01:10:20,500
So that you can still reuse those bits now,
这样你就可以继续使用那些比特了，

1450
01:10:20,500 --> 01:10:23,650
but there's no remnants even on the computer's hard drive
但是，即使是在电脑的硬盘驱动器上，也不会有残留

1451
01:10:23,650 --> 01:10:25,480
that they were once there.
表明它们曾经存在。

1452
01:10:25,480 --> 01:10:28,720
But even now, this is not fully robust.
但是即使现在，这也不是完全可靠的。

1453
01:10:28,720 --> 01:10:29,320
Why?
为什么？

1454
01:10:29,320 --> 01:10:33,610
It turns out that because of today's electronics and solid state devices,
事实证明，由于当今的电子产品和固态器件，

1455
01:10:33,610 --> 01:10:38,132
there might still be remnants of files on them because these hard drives,
这些硬盘驱动器上可能仍然存在文件的残留，因为这些硬盘驱动器，

1456
01:10:38,132 --> 01:10:40,090
these storage devices nowadays are smart enough
如今的存储设备足够智能，

1457
01:10:40,090 --> 01:10:42,460
that if they realize that parts of them are failing,
如果它们意识到自己的一部分正在失效，

1458
01:10:42,460 --> 01:10:45,550
they might prevent you from changing data in certain corners.
它们可能会阻止你更改某些角落的数据。

1459
01:10:45,550 --> 01:10:48,550
So if you think of your memory as like a big rectangle, some of the bits
因此，如果你将你的内存想象成一个大矩形，其中一些比特

1460
01:10:48,550 --> 01:10:51,855
might get blocked off to you just over time.
可能会随着时间的推移而被屏蔽。

1461
01:10:51,855 --> 01:10:53,480
So there might still be remnants there.
所以那里可能仍然存在残留。

1462
01:10:53,480 --> 01:10:57,670
So if you really are worried about a sibling, an employer, or a government
所以，如果你真的担心你的兄弟姐妹、你的雇主或政府

1463
01:10:57,670 --> 01:11:01,130
like finding data on that system, there might actually still be remnants.
会找到那个系统上的数据，实际上可能仍然存在残留。

1464
01:11:01,130 --> 01:11:03,050
Now, you can go extreme and just physically
现在，你可以走极端，直接物理

1465
01:11:03,050 --> 01:11:05,258
destroy the device, which should be pretty effective.
销毁设备，这应该是非常有效的。

1466
01:11:05,258 --> 01:11:08,600
But that's going to get pretty expensive over time when you want to delete data.
但随着时间的推移，当你想要删除数据时，这将会非常昂贵。

1467
01:11:08,600 --> 01:11:13,140
Or, again, we can use encryption as the solution to this problem.
或者，我们还可以使用加密来解决这个问题。

1468
01:11:13,140 --> 01:11:15,500
So, again, encryption is increasingly in the real world
所以，加密在现实世界中越来越重要

1469
01:11:15,500 --> 01:11:19,650
an amazing tool for your toolkit because it can be deployed in different ways.
成为你的工具箱中一个很棒的工具，因为它可以以不同的方式部署。

1470
01:11:19,650 --> 01:11:22,280
So, in this case, full disk encryption is something
所以，在这种情况下，全盘加密是你可以

1471
01:11:22,280 --> 01:11:24,500
you can enable in Windows or Mac OS.
在 Windows 或 Mac OS 上启用的功能。

1472
01:11:24,500 --> 01:11:27,050
Nowadays, it's typically enabled by default on iOS
如今，它通常默认在 iOS 上启用

1473
01:11:27,050 --> 01:11:29,540
and you can opt in as well on other platforms.
你也可以在其他平台上选择加入。

1474
01:11:29,540 --> 01:11:33,500
In the world of full disk encryption, instead of storing any of your files
在全盘加密的世界中，你不会将任何文件

1475
01:11:33,500 --> 01:11:37,640
as a plain text, like in their original raw format,
以纯文本形式存储，比如以原始格式存储，

1476
01:11:37,640 --> 01:11:41,390
you essentially randomize everything on the disk instead.
而是将磁盘上的所有内容随机化。

1477
01:11:41,390 --> 01:11:45,110
You rely on the user's password or some unique string
你会依赖用户的密码或他们知道的某个唯一字符串

1478
01:11:45,110 --> 01:11:47,150
that they know when you log into your Mac or PC
当你登录你的 Mac 或 PC 时

1479
01:11:47,150 --> 01:11:49,958
to essentially scramble the entire contents of the hard drive.
来对硬盘驱动器上的所有内容进行加扰。

1480
01:11:49,958 --> 01:11:51,500
And it's not quite as simple as that.
而且它并不像看起来那样简单。

1481
01:11:51,500 --> 01:11:53,300
Typically, there's a much larger key that's
通常，有一个更大的密钥被

1482
01:11:53,300 --> 01:11:56,570
used that in turn is protected by your actual password.
使用，而这个密钥又由你的实际密码保护。

1483
01:11:56,570 --> 01:12:01,310
But, in this case, this means that if someone steals your laptop while you're
但，在这种情况下，这意味着如果你在

1484
01:12:01,310 --> 01:12:04,520
not paying attention in Starbucks or the airport or even your dorm room,
即使你在星巴克、机场或甚至宿舍里没有注意，

1485
01:12:04,520 --> 01:12:07,010
even if they open the lid and don't have your password,
即使他们打开了盖子，而且没有你的密码，

1486
01:12:07,010 --> 01:12:09,260
they're not going to be able to access any of the data
他们也无法访问任何数据，

1487
01:12:09,260 --> 01:12:11,120
because it's just going to look like zeros and ones.
因为它们看起来只是一堆零和一。

1488
01:12:11,120 --> 01:12:13,287
Even if they remove the hard drive from your device,
即使他们将硬盘从你的设备上拆除，

1489
01:12:13,287 --> 01:12:16,790
plug it into another device, they're only going to see zeros and ones.
插入另一台设备，他们也只会看到零和一。

1490
01:12:16,790 --> 01:12:21,170
Now, if you walk away from your laptop at Starbucks with the lid open
现在，如果你在星巴克离开你的笔记本电脑，而且盖子是开着的

1491
01:12:21,170 --> 01:12:24,290
and you're logged in, there is a window of opportunity.
而你又登录了，那么就会出现一个可乘之机。

1492
01:12:24,290 --> 01:12:27,500
Because the data has got to be decrypted when you care about it and when
因为当你关心数据并且正在使用它时，数据必须被解密。

1493
01:12:27,500 --> 01:12:28,500
you're using it.
你正在使用它。

1494
01:12:28,500 --> 01:12:31,178
So here too is another example of best practice.
所以这里也是另一个最佳实践的例子。

1495
01:12:31,178 --> 01:12:33,470
You should minimally be closing the lid of your laptop,
你至少应该关上笔记本的盖子，

1496
01:12:33,470 --> 01:12:36,530
making sure it's logging you out or at least locking the screen,
确保你已退出登录，或者至少锁定屏幕，

1497
01:12:36,530 --> 01:12:39,050
so that someone can't just walk off with your device
这样，别人就不能直接拿走你的设备

1498
01:12:39,050 --> 01:12:42,350
and have access to your logged in account.
并访问你已登录的账户。

1499
01:12:42,350 --> 01:12:45,500
But full disk encryption essentially decreases the probability
但是，全盘加密实际上降低了

1500
01:12:45,500 --> 01:12:47,417
that an adversary is going to be successful.
对手成功的概率。

1501
01:12:47,417 --> 01:12:49,250
In the world of Macs, it's called FileVault.
在Mac的世界里，它被称为FileVault。

1502
01:12:49,250 --> 01:12:50,330
It's in your System Preferences.
它在你的系统偏好设置中。

1503
01:12:50,330 --> 01:12:51,470
Windows, it's called BitLocker.
在Windows中，它被称为BitLocker。

1504
01:12:51,470 --> 01:12:52,910
There's third party solutions too.
也有一些第三方解决方案。

1505
01:12:52,910 --> 01:12:55,340
Here too, we have to trust that Microsoft and Apple don't
同样，我们必须相信微软和苹果不会

1506
01:12:55,340 --> 01:12:57,290
screw up and write buggy code.
搞砸并写出有错误的代码。

1507
01:12:57,290 --> 01:13:00,590
But generally speaking, turning on features like these things
但总的来说，打开这些功能

1508
01:13:00,590 --> 01:13:02,150
are good for you.
对你来说是好的。

1509
01:13:02,150 --> 01:13:08,000
Except what's maybe an obvious downside of doing this?
除了可能有一个明显的缺点？

1510
01:13:08,000 --> 01:13:08,705
What's that?
是什么呢？

1511
01:13:08,705 --> 01:13:09,580
AUDIENCE: [INAUDIBLE]
观众： [听不清]

1512
01:13:09,580 --> 01:13:11,140
DAVID MALAN: Yeah, if you forget your password.
大卫·马兰：没错，如果你忘记了密码。

1513
01:13:11,140 --> 01:13:12,970
There's no mathematician in the world who
世界上没有哪个数学家

1514
01:13:12,970 --> 01:13:15,590
is probably going to be able to recover your data for you.
可能能够帮你恢复你的数据。

1515
01:13:15,590 --> 01:13:17,800
So there too, it's maybe a hefty tradeoff.
所以，这也是一个不小的取舍。

1516
01:13:17,800 --> 01:13:19,930
But hopefully you have enough defenses in place,
但希望你已经有了足够的防御措施，

1517
01:13:19,930 --> 01:13:22,360
be it your-- a good password, a password manager,
无论是你的——一个好的密码，一个密码管理器，

1518
01:13:22,360 --> 01:13:25,610
maybe even printing out your primary password on a sheet of paper,
甚至可能将你的主密码打印在一张纸上，

1519
01:13:25,610 --> 01:13:28,810
but locking it in a box or bringing it home so that no one near you
但是把它锁在盒子里或者带回家，这样你周围的人

1520
01:13:28,810 --> 01:13:32,618
actually has physical access, you can at least mitigate some of these risks.
实际上都没有物理访问权限，你至少可以减轻一些这些风险。

1521
01:13:32,618 --> 01:13:34,910
You'll read about, though, in the real world even this,
不过，你会读到，在现实世界中，即使是这种，

1522
01:13:34,910 --> 01:13:37,510
which is like an adversarial use of full disk encryption.
这就像是一种对抗性的全盘加密使用方式。

1523
01:13:37,510 --> 01:13:39,455
Sometimes when hackers get into systems, this
有时，当黑客侵入系统时，这种情况

1524
01:13:39,455 --> 01:13:42,580
has happened literally with hospital systems, municipal government systems,
实际上发生在医院系统、市政政府系统，

1525
01:13:42,580 --> 01:13:43,210
and the like.
等等。

1526
01:13:43,210 --> 01:13:47,900
If they hack into them, they don't just delete the data or just create havoc,
如果他们入侵了它们，他们不会仅仅删除数据，也不会仅仅制造混乱，

1527
01:13:47,900 --> 01:13:51,190
they will proactively encrypt the server's hard drive
他们会主动地用某种只有黑客知道的随机密钥加密服务器的硬盘

1528
01:13:51,190 --> 01:13:53,685
with some random key that only the hacker knows.
用某种只有黑客知道的随机密钥加密服务器的硬盘。

1529
01:13:53,685 --> 01:13:55,810
They will then demand that the hospital or the town
然后，他们会要求医院或城镇

1530
01:13:55,810 --> 01:13:58,150
pay them, often in Bitcoin or some cryptocurrency
向他们支付赎金，通常是比特币或某种加密货币

1531
01:13:58,150 --> 01:14:00,700
to decrease the probability of being caught,
为了降低被抓住的可能性，

1532
01:14:00,700 --> 01:14:05,860
and they'll only turn over that key to decrypt the data if someone actually
他们只会将该密钥交出来解密数据，如果有人真的

1533
01:14:05,860 --> 01:14:06,530
pays up.
付了钱。

1534
01:14:06,530 --> 01:14:09,990
So here too, there's sort of a dark side of these mathematical principles.
所以这里也有这些数学原理的阴暗面。

1535
01:14:09,990 --> 01:14:15,020
So there too, it's always a trade off between good people and perhaps bad.
所以，这里也永远是好人与坏人之间的权衡。

1536
01:14:15,020 --> 01:14:17,390
Well, maybe before we wrap and before we serve
好吧，也许在我们结束之前，在我们准备

1537
01:14:17,390 --> 01:14:20,180
some cake in the transept, Carter, can you join me one last time?
在过道里上蛋糕之前，卡特，你能最后一次加入我吗？

1538
01:14:20,180 --> 01:14:23,750
But, first, before I turn things over to me and Carter, here's your problem
但首先，在我把事情交给我和卡特之前，这是你的问题

1539
01:14:23,750 --> 01:14:26,270
set 10, a sort of unofficial homework.
集 10，一种非官方的家庭作业。

1540
01:14:26,270 --> 01:14:28,610
One, among your takeaways for today, you should
第一，在今天你应该学习到的东西中，你应该

1541
01:14:28,610 --> 01:14:32,815
start using a password manager or even these fancier passkeys, at least
开始使用密码管理器，甚至这些更高级的密码，至少

1542
01:14:32,815 --> 01:14:34,190
for your most sensitive accounts.
用于您最敏感的账户。

1543
01:14:34,190 --> 01:14:37,220
So anything medical, financial, particularly personal,
所以任何医疗，金融，尤其是个人，

1544
01:14:37,220 --> 01:14:40,193
like this is a very concrete takeaway and action item.
就像这是一个非常具体的要点和行动项目。

1545
01:14:40,193 --> 01:14:42,860
I wouldn't sit down and try to change all of your accounts over.
我不会坐下来尝试更改所有账户。

1546
01:14:42,860 --> 01:14:45,440
Because knowing humans, You're not going to get through the whole to-do list.
因为了解人类，你不可能完成所有待办事项。

1547
01:14:45,440 --> 01:14:48,170
So maybe do it the next time you log into that account,
所以也许下次登录该账户时，

1548
01:14:48,170 --> 01:14:50,890
turn on some of these features or add it to a password manager
启用一些这些功能或将其添加到密码管理器中

1549
01:14:50,890 --> 01:14:52,640
or at least start with the most important.
或者至少从最重要的开始。

1550
01:14:52,640 --> 01:14:54,860
Two, turning on two-factor authentication
第二，启用双重身份验证

1551
01:14:54,860 --> 01:14:57,390
beyond where you have to at places like Harvard and Yale,
除了像哈佛和耶鲁这样的地方必须这样做之外，

1552
01:14:57,390 --> 01:15:00,740
but certainly bank accounts, privates, anything medical, personal,
但当然包括银行账户、私人信息、任何医疗、个人信息，

1553
01:15:00,740 --> 01:15:01,290
or the like.
等等。

1554
01:15:01,290 --> 01:15:04,670
And then lastly, where you can, turning on end-to-end encryption.
最后，在您能够的情况下，启用端到端加密。

1555
01:15:04,670 --> 01:15:07,020
Being careful with it, you don't want to go
小心使用，你不想

1556
01:15:07,020 --> 01:15:10,545
and during lecture, hopefully no one clicked the turn on FileVault button
在课堂上，希望没有人点击了启用 FileVault 按钮

1557
01:15:10,545 --> 01:15:11,420
while we're in class.
在我们上课的时候。

1558
01:15:11,420 --> 01:15:14,300
Because closing your laptop lid while things are being encrypted
因为在加密过程中关闭笔记本电脑盖子

1559
01:15:14,300 --> 01:15:16,250
is generally bad practice.
通常是不好的做法。

1560
01:15:16,250 --> 01:15:18,870
See us after though if you did do that a moment ago.
如果你刚才做了，之后来找我们。

1561
01:15:18,870 --> 01:15:21,140
So here's just then three actionable takeaways.
所以，这里只有三个可行的要点。

1562
01:15:21,140 --> 01:15:24,860
But we thought we'd conclude by taking a few final minutes for a CS50 quiz
但我们想用几分钟时间来做一个 CS50 小测验来总结

1563
01:15:24,860 --> 01:15:28,700
show of sorts, a final check for understanding using some questions
算是展示，用一些问题来最后检查理解

1564
01:15:28,700 --> 01:15:31,580
we come up with ourselves, but also some of the review questions
我们自己想出来的，但也包括一些复习问题

1565
01:15:31,580 --> 01:15:34,830
that you all kindly contributed as part of the most recent problem set.
你们都在最近的习题集中贡献了这些问题。

1566
01:15:34,830 --> 01:15:37,580
So some of these questions come from you yourselves.
所以，其中一些问题来自你们自己。

1567
01:15:37,580 --> 01:15:41,690
And let me go ahead and turn things over to Carter here to help run the show.
让我把事情交给卡特来帮助主持。

1568
01:15:41,690 --> 01:15:46,190
We will invite you at this point to take out that same device
现在，我们邀请您拿出同一台设备

1569
01:15:46,190 --> 01:15:47,190
as you had earlier.
就像您之前一样。

1570
01:15:47,190 --> 01:15:48,960
This is the same URL as before.
这是和之前一样的网址。

1571
01:15:48,960 --> 01:15:52,253
But if you closed the tab, you can reopen it here.
但如果您关闭了标签页，您可以在此处重新打开它。

1572
01:15:52,253 --> 01:15:54,920
To make things a little fun-- because we still have some cookies
为了让事情更有趣一点，因为我们还有

1573
01:15:54,920 --> 01:15:58,250
left-- could we get three final CS50 volunteers?
一些饼干，我们可以再请三位 CS50 志愿者吗？

1574
01:15:58,250 --> 01:15:59,960
OK, one hand is already up.
好的，已经有一只手举起来了。

1575
01:15:59,960 --> 01:16:01,580
How about two hands there?
那两双手怎么样？

1576
01:16:01,580 --> 01:16:03,080
And how about three hands?
三个人来玩怎么样？

1577
01:16:03,080 --> 01:16:03,588
Over here.
这边！

1578
01:16:03,588 --> 01:16:06,380
All right, yes, sure, a round of applause for our final volunteers.
好的，没错，当然，让我们为最后的志愿者鼓掌！

1579
01:16:06,380 --> 01:16:07,070
Come on up.
上来吧！

1580
01:16:07,070 --> 01:16:10,980
[APPLAUSE]
[掌声]

1581
01:16:10,980 --> 01:16:13,080
On the line are some delicious Oreo cookies.
奖品是一些美味的奥利奥饼干。

1582
01:16:13,080 --> 01:16:15,247
If the three of you would like to come over and take
如果你们三个想过来，

1583
01:16:15,247 --> 01:16:18,125
any of these seats in the middle, you will be our human players,
坐在中间的任何一个座位上，你们就是我们的真人玩家，

1584
01:16:18,125 --> 01:16:20,250
but we'll invite everyone in the group to play too.
但我们也会邀请小组里的每个人一起玩。

1585
01:16:20,250 --> 01:16:22,833
Do you want to take a mic and introduce yourself to the world?
你们想拿个麦克风，向全世界介绍一下自己吗？

1586
01:16:22,833 --> 01:16:23,610
AUDIENCE: Sure.
观众：当然。

1587
01:16:23,610 --> 01:16:25,140
Hi, I'm Dani.
嗨，我叫丹尼。

1588
01:16:25,140 --> 01:16:29,910
I'm a first year in WIG C. And I'm planning on studying economics.
我是 WIG C 的一年级生，我计划学习经济学。

1589
01:16:29,910 --> 01:16:31,065
DAVID MALAN: Nice, welcome.
大卫·马兰：很好，欢迎。

1590
01:16:31,065 --> 01:16:32,190
AUDIENCE: Hi, I'm Rochelle.
观众：嗨，我叫罗谢尔。

1591
01:16:32,190 --> 01:16:34,250
I'm from the best state, Ohio.
我来自最好的州，俄亥俄州。

1592
01:16:34,250 --> 01:16:35,250
DAVID MALAN: [INAUDIBLE]
大卫·马兰：[听不清]

1593
01:16:35,250 --> 01:16:37,650
AUDIENCE: And I'm a freshman in Greeno.
观众：我是一名格林诺的新生。

1594
01:16:37,650 --> 01:16:39,705
I'm planning on concentrating in CS.
我计划主修计算机科学。

1595
01:16:39,705 --> 01:16:40,830
DAVID MALAN: Nice, welcome.
大卫·马兰：很好，欢迎。

1596
01:16:40,830 --> 01:16:41,730
And?
还有呢？

1597
01:16:41,730 --> 01:16:43,020
AUDIENCE: My name is Jackson.
观众：我叫杰克逊。

1598
01:16:43,020 --> 01:16:43,942
I'm from Indiana.
我来自印第安纳州。

1599
01:16:43,942 --> 01:16:44,650
I live in Thayer.
我住在塞耶。

1600
01:16:44,650 --> 01:16:45,510
I'm a first year.
我是一年级生。

1601
01:16:45,510 --> 01:16:49,650
And I'm studying linguistics and Germanic languages and literatures.
我正在学习语言学和日耳曼语言及文学。

1602
01:16:49,650 --> 01:16:50,860
DAVID MALAN: Welcome as well.
大卫·马兰：也欢迎你。

1603
01:16:50,860 --> 01:16:52,680
So, if our volunteers could have a seat, you're
所以，如果我们的志愿者可以坐下来，你们

1604
01:16:52,680 --> 01:16:54,700
going to want to be able to see this screen or that one.
会想要能够看到这个屏幕或那个屏幕。

1605
01:16:54,700 --> 01:16:56,520
So you can move your chairs if you would like.
所以，你们可以随意移动椅子。

1606
01:16:56,520 --> 01:16:59,190
Carter is going to kindly cue up the software, which hopefully everyone
卡特将好心地启动软件，希望每个人

1607
01:16:59,190 --> 01:17:00,310
has on their phones as well.
的手机上也都安装了。

1608
01:17:00,310 --> 01:17:02,250
And I should have mentioned, do you have your phone with you?
我应该提到，你手机带了吗？

1609
01:17:02,250 --> 01:17:03,300
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1610
01:17:03,300 --> 01:17:04,455
DAVID MALAN: Do you have your phone with you?
大卫·马兰：你手机带了吗？

1611
01:17:04,455 --> 01:17:04,770
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1612
01:17:04,770 --> 01:17:06,330
DAVID MALAN: OK, do you have your phone over there?
大卫·马兰：好的，你在那边有手机吗？

1613
01:17:06,330 --> 01:17:07,650
OK, what's your name again?
好的，你叫什么名字来着？

1614
01:17:07,650 --> 01:17:08,010
AUDIENCE: Rochelle.
观众：罗谢尔。

1615
01:17:08,010 --> 01:17:09,330
DAVID MALAN: OK, Rochelle will be right back,
大卫·马兰：好的，罗谢尔马上就回来，

1616
01:17:09,330 --> 01:17:10,930
if you want to go grab your phones.
如果你想拿手机的话。

1617
01:17:10,930 --> 01:17:13,690
And in the meantime, we're going to go ahead and-- thank
在此期间，我们将会继续——感谢

1618
01:17:13,690 --> 01:17:16,570
you so much-- we're going to go ahead and cue up the screens here
你们，我们会继续启动这些屏幕

1619
01:17:16,570 --> 01:17:17,657
for the CS50 quiz show.
用于 CS50 知识问答节目。

1620
01:17:17,657 --> 01:17:19,990
It's about 20 questions in total, the first few of which
总共大约 20 道题，前几道题

1621
01:17:19,990 --> 01:17:23,290
are going to focus on cybersecurity to see how well we
将集中在网络安全方面，看看我们

1622
01:17:23,290 --> 01:17:24,790
can check our current understanding.
对当前的理解掌握得如何。

1623
01:17:24,790 --> 01:17:29,470
The rest will be questions written by you in the days leading up to today.
其余的都是你们在今天之前几天写的题。

1624
01:17:29,470 --> 01:17:32,590
All right, Carter, let's go ahead and reveal the first question.
好的，卡特，让我们继续揭晓第一个问题。

1625
01:17:32,590 --> 01:17:35,500
And note that you can win up to 1,000 points this time per question.
注意，这次每道题最多可以获得 1000 分。

1626
01:17:35,500 --> 01:17:37,208
It's not just about being right or wrong.
这不仅仅是关于对错。

1627
01:17:37,208 --> 01:17:40,430
And you get more points the faster you buzz in as well.
而且你按铃越快，获得的积分就越多。

1628
01:17:40,430 --> 01:17:43,330
So we'll see who's on the top based on all of the guest user names.
所以我们会根据所有客人的用户名来查看谁排在第一位。

1629
01:17:43,330 --> 01:17:45,460
All right, here we go, Carter, question one,
好了，我们开始了，卡特，第一个问题，

1630
01:17:45,460 --> 01:17:48,010
what is the best way to create a password?
创建密码的最佳方法是什么？

1631
01:17:48,010 --> 01:17:50,830
Substitute letters with numbers or punctuation signs,
用数字或标点符号替换字母，

1632
01:17:50,830 --> 01:17:53,320
ensure it's at least eight characters long,
确保密码至少有八个字符，

1633
01:17:53,320 --> 01:17:55,930
have a password manager generated for you,
使用密码管理器为你生成一个密码，

1634
01:17:55,930 --> 01:18:00,410
or include both lowercase and uppercase letters?
还是包含大小写字母？

1635
01:18:00,410 --> 01:18:03,710
All right, let's see what the results are.
好的，让我们看看结果。

1636
01:18:03,710 --> 01:18:07,490
Almost everyone said have a password manager generate it for you.
几乎每个人都说使用密码管理器为你生成一个密码。

1637
01:18:07,490 --> 01:18:10,260
90% of you said that's the case.
你们中有 90% 的人说这是真的。

1638
01:18:10,260 --> 01:18:11,700
And, indeed, that one is correct.
实际上，那个答案是正确的。

1639
01:18:11,700 --> 01:18:12,320
Nicely done.
做得好。

1640
01:18:12,320 --> 01:18:15,690
Let's go ahead and see the random usernames you've chosen.
让我们看看你们选择的随机用户名。

1641
01:18:15,690 --> 01:18:19,490
So this looks like it's web_hexidecimalidentifier to keep
所以这看起来像是 web_hexidecimalidentifier 来保持

1642
01:18:19,490 --> 01:18:20,340
things anonymous.
匿名。

1643
01:18:20,340 --> 01:18:23,420
So if you are OAF9E, nicely done, but there's
所以如果你叫 OAF9E，做得好，但是

1644
01:18:23,420 --> 01:18:25,040
a whole lot of ties up at the top.
在排行榜上有很多并列第一名。

1645
01:18:25,040 --> 01:18:27,582
All right, and I see-- well, just to keep things interesting,
好的，我看到...为了保持有趣，

1646
01:18:27,582 --> 01:18:28,665
you had 792 points.
你获得了 792 分。

1647
01:18:28,665 --> 01:18:29,165
You had--
你获得了...

1648
01:18:29,165 --> 01:18:30,320
AUDIENCE: 917.
观众：917 分。

1649
01:18:30,320 --> 01:18:33,320
DAVID MALAN: 917 points, 917 points.
戴维·马兰：917 分，917 分。

1650
01:18:33,320 --> 01:18:34,700
So it's a close race here.
所以这现在是一场激烈的比赛。

1651
01:18:34,700 --> 01:18:38,180
Number two, what is a downside of two-factor authentication?
第二题，双因素身份验证有什么缺点？

1652
01:18:38,180 --> 01:18:40,280
You might lose access to the second factor.
你可能会失去对第二个验证因素的访问权限。

1653
01:18:40,280 --> 01:18:42,410
Your account becomes too secure.
你的账户变得太安全了。

1654
01:18:42,410 --> 01:18:45,440
You can be notified someone else is trying to access your account.
你会收到通知，告知其他人试图访问你的账户。

1655
01:18:45,440 --> 01:18:48,197
You can pick any authentication you like.
你可以选择你喜欢的任何身份验证方式。

1656
01:18:48,197 --> 01:18:49,280
Hopefully, you can reload.
希望你能重新加载。

1657
01:18:49,280 --> 01:18:50,060
You might have missed that one.
你可能错过了那个。

1658
01:18:50,060 --> 01:18:53,360
And the number one answer was might lose access to the second factor.
第一个答案是可能失去对第二个验证因素的访问权限。

1659
01:18:53,360 --> 01:18:55,850
Indeed, 93% of you got that.
实际上，你们中有 93% 的人答对了。

1660
01:18:55,850 --> 01:18:59,820
And we're up to 1,375 points, 792 points, and--
现在分数是 1375 分，792 分，还有...

1661
01:18:59,820 --> 01:19:00,695
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1662
01:19:00,695 --> 01:19:01,920
DAVID MALAN: OK, and forced reload.
戴维·马兰：好的，强制重新加载。

1663
01:19:01,920 --> 01:19:04,190
So, yes, you tried reloading the page and hopefully it'll click back in.
所以，是的，你尝试重新加载页面，希望它能重新点击。

1664
01:19:04,190 --> 01:19:05,780
All right, Carter, number 3.
好的，卡特，第三题。

1665
01:19:05,780 --> 01:19:09,890
We have, what would you see if you tried to read an encrypted disk?
我们有，如果你试图读取一个加密的磁盘，你会看到什么？

1666
01:19:09,890 --> 01:19:12,320
You would see a random sequence of zeros and ones,
你会看到一系列随机的 0 和 1，

1667
01:19:12,320 --> 01:19:14,240
scrambled words from the user's documents,
用户文档中的乱码，

1668
01:19:14,240 --> 01:19:18,770
all of the user's information, or all one's?
用户的所有信息，还是所有 1？

1669
01:19:18,770 --> 01:19:20,150
About 10 seconds remain.
还剩大约 10 秒钟。

1670
01:19:20,150 --> 01:19:21,540
Is it working for you now?
你现在能使用了吗？

1671
01:19:21,540 --> 01:19:22,920
OK.
好的。

1672
01:19:22,920 --> 01:19:24,930
All right, three seconds.
好的，还剩三秒钟。

1673
01:19:24,930 --> 01:19:29,460
And the ranked answers are a random sequence of zeros and ones.
排名第一的答案是随机序列的 0 和 1。

1674
01:19:29,460 --> 01:19:31,960
91% of you indeed got that right.
你们中有 91% 的人确实答对了。

1675
01:19:31,960 --> 01:19:34,200
Let's see who's winning on the guest screen.
让我们看看在访客屏幕上谁赢了。

1676
01:19:34,200 --> 01:19:37,230
Web user a28c3, nicely done.
网页用户 a28c3，做得好。

1677
01:19:37,230 --> 01:19:41,850
But it's still a close tie among three of you anonymous participants.
但你们三个匿名参与者仍然处于胶着状态。

1678
01:19:41,850 --> 01:19:45,300
Number four, which type of encryption is most secure--
第四题，哪种加密方式最安全？

1679
01:19:45,300 --> 01:19:49,770
enhanced encryption, end-to-end encryption, full scale encryption,
增强型加密、端到端加密、全方位加密、

1680
01:19:49,770 --> 01:19:51,170
advanced encryption?
高级加密？

1681
01:19:54,220 --> 01:19:55,360
About five seconds.
大约五秒钟。

1682
01:19:59,460 --> 01:20:04,650
And most popular response is the correct one, end-to-end encryption
最受欢迎的答案也是正确的，端到端加密

1683
01:20:04,650 --> 01:20:06,370
with 92% of you.
你们的正确率为 92%。

1684
01:20:06,370 --> 01:20:06,870
Nice.
不错。

1685
01:20:06,870 --> 01:20:13,950
We're up to 2,375, 3,792, and 2,917.
你们的得分分别是 2375，3792 和 2917。

1686
01:20:13,950 --> 01:20:18,330
And good job to these three folks in the front of our list.
恭喜榜单前三名。

1687
01:20:18,330 --> 01:20:21,120
All right, Carter, number 5, the last on cybersecurity.
好的，卡特，第五题，最后一个关于网络安全的题目。

1688
01:20:21,120 --> 01:20:23,910
When would it make sense to store your password on a sticky note
什么时候把你的密码写在便签上

1689
01:20:23,910 --> 01:20:25,140
by your computer?
放在电脑旁边？

1690
01:20:25,140 --> 01:20:27,360
When it's too complicated to remember, when
当它太复杂记不住的时候，当

1691
01:20:27,360 --> 01:20:31,170
you need to access your account quickly, when you share your account with family
你需要快速访问你的账户的时候，当你与家人共享账户的时候

1692
01:20:31,170 --> 01:20:32,450
members, never.
成员，永远不要。

1693
01:20:37,720 --> 01:20:39,190
Oh.
哦。

1694
01:20:39,190 --> 01:20:43,270
And the most popular response was never, which is indeed correct.
最受欢迎的答案是永远不要，这确实是正确的。

1695
01:20:43,270 --> 01:20:46,360
And only 79% of you think that right now.
只有 79% 的人现在这样认为。

1696
01:20:46,360 --> 01:20:50,540
It is never OK to store it on a post-it note on your computer.
永远不要将它储存在电脑上的便签上。

1697
01:20:50,540 --> 01:20:54,850
You should minimally be using today's password manager for that same process.
至少应该使用今天的密码管理器来执行相同的操作。

1698
01:20:54,850 --> 01:21:00,490
All right, two of you, a28c3 and c9a23 are still atop the list.
好的，你们两个人，a28c3 和 c9a23 仍然位列榜首。

1699
01:21:00,490 --> 01:21:03,820
We have 3,000-plus points, 3,000-plus points,
你们的得分都超过 3000 分，

1700
01:21:03,820 --> 01:21:06,460
and probably about the same as well.
可能也差不多。

1701
01:21:06,460 --> 01:21:09,100
All right, now we move on to the user-generated content
好的，现在我们进入用户生成的內容

1702
01:21:09,100 --> 01:21:11,710
that you all from Harvard and Yale generated for us.
你们所有来自哈佛和耶鲁大学的同学为我们生成的内容。

1703
01:21:11,710 --> 01:21:16,120
Number 6, what is the variable type that stores true/false values?
第六题，存储真值/假值的值类型是什么？

1704
01:21:16,120 --> 01:21:19,885
Boolean, string, integer, or double?
布尔值、字符串、整数或双精度？

1705
01:21:22,520 --> 01:21:25,670
About 10 seconds to come up with this.
大约 10 秒钟想出来。

1706
01:21:25,670 --> 01:21:27,950
We saw these in different languages, these types.
我们在不同的语言中看到了这些类型。

1707
01:21:27,950 --> 01:21:29,750
But the idea was the same.
但概念是一样的。

1708
01:21:29,750 --> 01:21:32,300
And in two seconds, we'll see that the answer
两秒钟后，我们会看到答案

1709
01:21:32,300 --> 01:21:36,950
is Boolean with 96% response rate.
是布尔值，正确率为 96%。

1710
01:21:36,950 --> 01:21:39,095
All right, what else do we have here?
好的，我们还有其他问题吗？

1711
01:21:39,095 --> 01:21:41,810
It's still a two-way tie at the top.
榜首仍然是并列第一。

1712
01:21:41,810 --> 01:21:44,630
All right, next question, Carter, is number 7.
好的，卡特，下一题是第七题。

1713
01:21:44,630 --> 01:21:46,640
What placeholder would you use when trying
在尝试打印 C 语言中的浮点数时，你会使用什么占位符？

1714
01:21:46,640 --> 01:21:55,360
to print a float in C, a float in C?
在 C 语言中打印浮点数，在 C 语言中打印浮点数？

1715
01:21:55,360 --> 01:21:58,420
Seven seconds.
七秒钟。

1716
01:21:58,420 --> 01:22:01,930
I'll defer to the visual syntax on the screen for this one.
这个问题我将参考屏幕上的视觉语法。

1717
01:22:01,930 --> 01:22:06,670
And the most popular and correct answer is, indeed, %f.
最受欢迎的答案也是正确的，确实是 %f。

1718
01:22:06,670 --> 01:22:10,800
We never saw %fl and we definitely didn't see %float.
我们没有见过 %fl，我们当然也没有见过 %float。

1719
01:22:10,800 --> 01:22:12,550
Two of you, though, are still in the lead.
不过，你们两个人仍然处于领先位置。

1720
01:22:12,550 --> 01:22:14,500
Nicely done, whoever you are.
干得漂亮，无论你是谁。

1721
01:22:14,500 --> 01:22:23,450
All right, next question, what does I++ do in C++ where I is an integer value?
好的，下一题，在 C++ 中，当 I 是一个整数值时，I++ 会做什么？

1722
01:22:23,450 --> 01:22:26,290
Note, for the record, we did not teach C++ in this course,
注意，为了记录，我们在这门课中没有教 C++，

1723
01:22:26,290 --> 01:22:29,980
but this question is from you.
但这个问题是你们提出的。

1724
01:22:29,980 --> 01:22:34,600
I will admit it's the same as in C, which we did teach.
我承认它与 C 语言中的一样，我们教过 C 语言。

1725
01:22:34,600 --> 01:22:37,840
Decrements the integer, deletes the integer, increments the integer by one,
递减整数，删除整数，将整数加 1，

1726
01:22:37,840 --> 01:22:40,030
or reassigns the integer to zero?
或者将整数重新分配为零？

1727
01:22:40,030 --> 01:22:42,580
The most popular answer and correct answer
最受欢迎的答案也是正确答案

1728
01:22:42,580 --> 01:22:45,490
is increments the integer by one.
是将整数加一。

1729
01:22:45,490 --> 01:22:47,500
It definitely doesn't decrement, so.
它肯定不会递减，所以。

1730
01:22:47,500 --> 01:22:49,990
All right, two responses still atop the list.
好的，两个回复仍然位于列表的首位。

1731
01:22:49,990 --> 01:22:52,900
And here we have 6,000-plus, 6,000, and 6,000.
这里有 6000 多个、6000 个和 6000 个。

1732
01:22:52,900 --> 01:22:53,980
So it's getting closer.
所以越来越接近了。

1733
01:22:53,980 --> 01:22:56,890
Using a hash table to retrieve data is useful
使用哈希表检索数据很有用

1734
01:22:56,890 --> 01:23:03,490
because it theoretically achieves a search time of O of n, O of n log n,
因为它理论上可以实现 O(n)、O(n log n) 的搜索时间，

1735
01:23:03,490 --> 01:23:06,250
O of log n, or O of 1?
O(log n) 还是 O(1)？

1736
01:23:09,240 --> 01:23:10,950
Five seconds to make your decision.
还有 5 秒钟做出决定。

1737
01:23:10,950 --> 01:23:13,200
Getting a little harder.
越来越难了。

1738
01:23:13,200 --> 01:23:16,920
And let's see the results.
让我们看看结果。

1739
01:23:16,920 --> 01:23:24,630
O of 1, only 30% of you got the correct answer from a very core week 5 topic.
O(1)，只有 30% 的人从第 5 周的核心主题中得到了正确答案。

1740
01:23:24,630 --> 01:23:27,360
That is the theoretical hope of a hash table.
这就是哈希表的理论希望。

1741
01:23:27,360 --> 01:23:33,090
In practice, though, to be fair, it can devolve, as we saw, into O of n.
不过，公平地说，在实践中，它可能会退化为 O(n)，正如我们所见。

1742
01:23:33,090 --> 01:23:36,850
We didn't really see those other two answers in the context of hash tables
我们并没有真正看到其他两个答案在哈希表的上下文中

1743
01:23:36,850 --> 01:23:37,590
specifically.
具体而言。

1744
01:23:37,590 --> 01:23:41,340
All right, wow, a28c3 is in the lead now.
好的，哇，a28c3 现在领先了。

1745
01:23:41,340 --> 01:23:46,020
Let's take a look at number 10, halfway there.
让我们看看第 10 题，已经过半了。

1746
01:23:46,020 --> 01:23:48,230
What is the first program we made in CS50?
我们在 CS50 中编写的第一个程序是什么？

1747
01:23:48,230 --> 01:23:49,640
This should be fast.
这应该很快。

1748
01:23:49,640 --> 01:23:52,745
All right, Greet, Meow, DNA, Hello, world?
好的，Greet、Meow、DNA、Hello, world？

1749
01:24:03,940 --> 01:24:04,790
One second.
一秒钟。

1750
01:24:04,790 --> 01:24:10,870
And it was, indeed, Hello, world, Hello, world.
确实，是 Hello, world，Hello, world。

1751
01:24:10,870 --> 01:24:15,490
All right, still in the lead with 10,000 points.
好的，仍然领先，得分 10000 分。

1752
01:24:15,490 --> 01:24:17,770
And now let's move on to the second half.
现在让我们进入下半场。

1753
01:24:17,770 --> 01:24:21,940
Question 11, when malloc is used to allocate memory in a C program,
第 11 题，当在 C 程序中使用 malloc 分配内存时，

1754
01:24:21,940 --> 01:24:30,670
that memory is allocated in the pile, heap, bin, or stack?
该内存是在堆、堆栈、箱子还是堆栈中分配的？

1755
01:24:30,670 --> 01:24:32,290
Very creative set of answers.
非常有创意的一组答案。

1756
01:24:35,290 --> 01:24:36,460
Five seconds.
还有 5 秒钟。

1757
01:24:40,390 --> 01:24:43,850
All right, and the results have heap at 43%.
好的，结果显示堆为 43%。

1758
01:24:46,630 --> 01:24:49,480
Malloc was from the heap at the top.
Malloc 是从顶部的堆分配的。

1759
01:24:49,480 --> 01:24:52,830
The stack is where function calls go.
堆栈是函数调用发生的地方。

1760
01:24:52,830 --> 01:24:54,580
It's getting a little more worrisome here.
这里有点令人担忧了。

1761
01:24:54,580 --> 01:24:56,030
But that's OK.
但没关系。

1762
01:24:56,030 --> 01:24:59,350
Still in the lead with perfect score, it seems, 11,000 points.
看来仍然领先，分数为 11000 分。

1763
01:24:59,350 --> 01:25:02,780
Next up is number 12.
接下来是第 12 题。

1764
01:25:02,780 --> 01:25:06,580
Which data structure allows you to change its size dynamically and store
哪种数据结构允许您动态更改其大小并存储

1765
01:25:06,580 --> 01:25:08,920
values in different areas of the memory--
不同区域的内存中的值——

1766
01:25:08,920 --> 01:25:11,980
an array, a queue, a linked list, or a stack?
数组、队列、链表还是堆栈？

1767
01:25:15,890 --> 01:25:18,650
Change its size dynamically and store different values
动态更改其大小并存储不同的值

1768
01:25:18,650 --> 01:25:21,680
in different areas of the memory.
在内存的不同区域中。

1769
01:25:21,680 --> 01:25:28,100
And the answer from the group is a linked list at 62%, which is correct.
小组的答案是链表，占 62%，这是正确的。

1770
01:25:28,100 --> 01:25:31,730
An array, as we defined it, cannot be resized.
数组，按照我们的定义，不能调整大小。

1771
01:25:31,730 --> 01:25:34,477
You can create a new array, copy everything over.
您可以创建一个新的数组，将所有内容复制到新数组中。

1772
01:25:34,477 --> 01:25:37,310
I'm starting to think maybe we shouldn't end the class on this note.
我开始觉得也许我们不应该以这种方式结束课程。

1773
01:25:37,310 --> 01:25:38,180
But that's OK.
但没关系。

1774
01:25:38,180 --> 01:25:39,200
We'll move on.
我们继续吧。

1775
01:25:39,200 --> 01:25:41,030
12,000 points for the lead.
领先者获得 12000 分。

1776
01:25:41,030 --> 01:25:46,400
And number 13, what does CSS stand for in web development--
第13题，在网页开发中，CSS代表什么？

1777
01:25:46,400 --> 01:25:50,900
computer style sheets, cascading style sheets, creative style systems,
计算机样式表，层叠样式表，创意样式系统，

1778
01:25:50,900 --> 01:25:53,730
colorful sheets styles?
多彩的样式表？

1779
01:25:53,730 --> 01:25:59,600
And most popular answer is correct with 81%, cascading style sheets.
最受欢迎的答案是正确的，81%的人选择了层叠样式表。

1780
01:25:59,600 --> 01:26:03,590
On the top 10 list here at 1,300 points, still a perfect score,
在排行榜上，得分1300，仍然是满分，

1781
01:26:03,590 --> 01:26:07,040
and our three human volunteers are doing well here too.
我们的三位人类志愿者也表现出色。

1782
01:26:07,040 --> 01:26:11,240
14, how to represent a decimal number 5 in binary.
第14题，如何用二进制表示十进制数字5。

1783
01:26:11,240 --> 01:26:13,160
All right, here we go.
好的，我们开始吧。

1784
01:26:13,160 --> 01:26:14,195
I'll let you read these.
我来读一下这些选项。

1785
01:26:23,750 --> 01:26:31,520
All rights, fingers crossed, decimal number 5 in binary is, indeed, 101.
好了，祈祷一下，二进制的十进制数字5确实是101。

1786
01:26:31,520 --> 01:26:36,110
Because that's a 4 plus 0 plus 1 gives us a decimal 5.
因为4加0加1等于十进制的5。

1787
01:26:36,110 --> 01:26:41,180
All right, next question, and amazing a28c3, whoever you are out there,
好的，下一个问题，a28c3，你是谁，

1788
01:26:41,180 --> 01:26:42,110
nicely done.
做得很好。

1789
01:26:42,110 --> 01:26:44,750
Who is the CS50 mascot--
CS50的吉祥物是谁？

1790
01:26:44,750 --> 01:26:49,460
cat, duck, robot dog Spot, Oscar the Grouch?
猫，鸭子，机器人狗Spot，奥斯卡怪人？

1791
01:26:49,460 --> 01:26:51,440
All of whom have appeared in some form.
他们都以某种形式出现过。

1792
01:26:55,790 --> 01:27:03,340
This one will be a little looser with answers, but looks like duck and cat
这个答案会比较宽泛，但看起来鸭子和猫

1793
01:27:03,340 --> 01:27:04,720
were both the most popular.
都是最受欢迎的。

1794
01:27:04,720 --> 01:27:07,120
Duck has kind of become the mascot, suffice it to say.
可以说，鸭子已经成为吉祥物了。

1795
01:27:07,120 --> 01:27:09,500
Cat is kind of everywhere on CS50 social media.
猫在CS50的社交媒体上无处不在。

1796
01:27:09,500 --> 01:27:11,620
So we'll accept cat as well.
所以我们也接受猫。

1797
01:27:11,620 --> 01:27:14,860
We love Spot, but has only made that one appearance.
我们喜欢Spot，但它只出现过一次。

1798
01:27:14,860 --> 01:27:16,900
15,000.
15000。

1799
01:27:16,900 --> 01:27:20,650
Final few questions, what is the output of printf quote, unquote, "1" plus
最后几个问题，printf "1" 加

1800
01:27:20,650 --> 01:27:23,320
quote, unquote, "2?"
"2" 的输出是什么？

1801
01:27:23,320 --> 01:27:27,850
It will return an error, twelve, 3, or 12?
会返回错误，十二，3，还是12？

1802
01:27:27,850 --> 01:27:31,750
English and digits respectively there.
分别是英文和数字。

1803
01:27:31,750 --> 01:27:32,760
Six seconds.
6秒钟。

1804
01:27:36,480 --> 01:27:37,620
All right, one second.
好的，1秒钟。

1805
01:27:37,620 --> 01:27:42,950
And 12 with 74% is correct.
12，74%正确。

1806
01:27:42,950 --> 01:27:45,410
Because it's not quite 12, it is more rather
因为它不是完全的12，而是

1807
01:27:45,410 --> 01:27:49,580
1, 2 because those are two strings that got concatenated would not actually
1，2，因为这两个字符串被连接在一起，实际上不会

1808
01:27:49,580 --> 01:27:50,870
be an error in that case.
造成错误。

1809
01:27:50,870 --> 01:27:52,690
It's just not what you expect.
只是不像你预期的结果。

1810
01:27:52,690 --> 01:27:55,190
All right, it's getting a little harder, but still someone's
好的，越来越难了，但仍然有人

1811
01:27:55,190 --> 01:27:56,060
got a perfect score.
拿到了满分。

1812
01:27:56,060 --> 01:27:58,310
What does LIFO stand for?
LIFO代表什么？

1813
01:27:58,310 --> 01:28:04,100
Lost In First Order, Last In First Out, Let Inside Fall Outside,
丢失在第一顺序，后进先出，让内部掉到外面，

1814
01:28:04,100 --> 01:28:08,570
Long Indentation For Organization?
长缩进用于组织？

1815
01:28:08,570 --> 01:28:09,230
Good one.
不错。

1816
01:28:14,420 --> 01:28:19,160
Last In First Out, and we discussed this in the context of a stack.
后进先出，我们之前在栈的背景下讨论过这个。

1817
01:28:19,160 --> 01:28:21,200
Because as you pile things on top of the stack,
因为当你把东西堆放在栈顶时，

1818
01:28:21,200 --> 01:28:23,330
the last one in is the first one out.
最后一个进去的也是第一个出来的。

1819
01:28:23,330 --> 01:28:25,520
All right, nicely done, this player here.
好的，这位玩家做得很好。

1820
01:28:25,520 --> 01:28:26,930
Three questions to go.
还有三个问题。

1821
01:28:26,930 --> 01:28:30,410
On average, how early did you submit the weekly pset?
平均来说，你提前多久提交了每周的作业？

1822
01:28:30,410 --> 01:28:34,580
A couple of days early, no rush, the morning of, a couple of hours early,
提前几天，不着急，在早上，提前几个小时，

1823
01:28:34,580 --> 01:28:40,070
but was not too nervous, 11:59:59, I live on the edge.
但我没有太紧张，11:59:59，我生活在边缘。

1824
01:28:40,070 --> 01:28:41,870
Again, user-generated content.
再次强调，这是用户生成的内容。

1825
01:28:44,670 --> 01:28:47,350
And the most popular answer--
最受欢迎的答案是——

1826
01:28:47,350 --> 01:28:51,450
[LAUGHTER] Carter and I conferred before class
[笑声] 卡特和我课前商量了一下

1827
01:28:51,450 --> 01:28:53,280
and we autocratically decreed that this is
我们专断地宣布，这就是

1828
01:28:53,280 --> 01:28:55,980
the only right answer and the only one we
唯一正确答案，也是我们唯一

1829
01:28:55,980 --> 01:29:01,440
will accept here, though we appreciate the others as well.
会接受的答案，虽然我们也感谢其他答案。

1830
01:29:01,440 --> 01:29:05,270
Wow, all right, did you take this class for the CS50 shirt?
哇，好吧，你上这门课是为了 CS50 的 T 恤吗？

1831
01:29:07,920 --> 01:29:13,380
Yes, no, maybe, I'm not telling you?
是的，不，也许，我不会告诉你？

1832
01:29:13,380 --> 01:29:20,150
So that is this here shirt, which you'll get at the CS50 fair.
所以，这就是这件 T 恤，你将在 CS50 展览会上得到。

1833
01:29:20,150 --> 01:29:23,470
One second.
等一下。

1834
01:29:23,470 --> 01:29:27,460
And, yes, no, maybe, I'm not telling you, this time, we'll accept all four
而且，是的，不，也许，我不会告诉你，这一次，我们会接受这四个

1835
01:29:27,460 --> 01:29:30,147
of those, which brings us to our final question, at which point
其中所有，这让我们进入了最后一个问题，届时

1836
01:29:30,147 --> 01:29:32,230
we'll reveal the scores of all of our participants
我们将公布所有参与者的分数

1837
01:29:32,230 --> 01:29:34,940
and see if we can get the number one score online.
看看我们是否能获得在线排名第一的分数。

1838
01:29:34,940 --> 01:29:37,900
What is the phrase that David says at the end of each lecture?
大卫在每节课结束时说的那句话是什么？

1839
01:29:41,450 --> 01:29:44,470
[INTERPOSING VOICES]
[打断的声音]

1840
01:29:49,640 --> 01:29:51,390
DAVID MALAN: All right, before we actually
大卫·马兰：好吧，在我们实际

1841
01:29:51,390 --> 01:29:54,000
say what the right answer is, though we can show it,
说出正确答案之前，虽然我们可以展示出来，

1842
01:29:54,000 --> 01:30:00,040
Carter, we'll see that there is 98%--
卡特，我们会发现有 98% 的人——

1843
01:30:00,040 --> 01:30:04,000
I've never said this at the end here, but 98% answers there.
我以前从没在结尾说过，但有 98% 的答案在那里。

1844
01:30:04,000 --> 01:30:05,850
Let's go ahead and look at the top chart.
让我们看一下排行榜。

1845
01:30:05,850 --> 01:30:11,160
Do we know who web_a28c3 is?
我们知道 web_a28c3 是谁吗？

1846
01:30:11,160 --> 01:30:12,960
Oh my goodness, come on down.
我的天啊，快下来。

1847
01:30:12,960 --> 01:30:16,438
And among our friends here, can you pull up each of your scores
在我们这里的朋友中，你能拉出你们各自的分数吗？

1848
01:30:16,438 --> 01:30:17,355
if you're able to see?
如果你能看到？

1849
01:30:20,080 --> 01:30:29,260
And among our human volunteers, 16,792, 17,292, 16,958.
而我们的人类志愿者中，分别是 16,792、17,292、16,958。

1850
01:30:29,260 --> 01:30:32,420
So we have our human winner as well.
所以，我们的人类赢家也出现了。

1851
01:30:32,420 --> 01:30:36,062
So without further ado, allow me to thank our volunteers.
所以，话不多说，让我感谢一下我们的志愿者。

1852
01:30:36,062 --> 01:30:37,270
Thanks so much to CS50 staff.
非常感谢 CS50 的工作人员。

1853
01:30:37,270 --> 01:30:38,920
We're about to give out some cookies and, if you want,
我们准备发放一些饼干，如果你愿意的话，

1854
01:30:38,920 --> 01:30:39,970
some stress balls here.
一些减压球。

1855
01:30:39,970 --> 01:30:41,380
Cake is now served.
现在上蛋糕。

1856
01:30:41,380 --> 01:30:43,600
And this was CS50.
这就是 CS50。

1857
01:30:43,600 --> 01:30:45,965
[CHEERING]
[欢呼声]

1858
01:30:45,965 --> 01:30:47,040
[INTERPOSING VOICES]
[打断的声音]

1859
01:30:47,040 --> 01:30:50,390
[MUSIC PLAYING]
[音乐播放]
