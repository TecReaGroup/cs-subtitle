1
00:00:00,000 --> 00:00:03,472
[MUSIC PLAYING]
[音乐播放]

2
00:01:01,550 --> 00:01:03,830
DAVID J. MALAN: All right, this is CS50.
大卫·马兰：好的，这是 CS50。

3
00:01:03,830 --> 00:01:06,230
And this is already week nine.
这已经是第九周了。

4
00:01:06,230 --> 00:01:08,540
And this means this is the week where we synthesize
这意味着，本周我们将整合

5
00:01:08,540 --> 00:01:13,670
the past several weeks, from Python to SQL to HTML to CSS to JavaScript.
过去几周学习过的知识，从 Python 到 SQL，从 HTML 到 CSS，再到 JavaScript。

6
00:01:13,670 --> 00:01:16,580
Each of those languages that we've rather looked at in isolation
我们之前单独学习的每一种语言

7
00:01:16,580 --> 00:01:19,790
now rather come together toward an end of just making
现在将结合在一起，最终目标是创建

8
00:01:19,790 --> 00:01:25,980
more modern applications, be them web based or be they mobile based as well.
更多现代化的应用程序，无论是基于 Web 的还是基于移动设备的。

9
00:01:25,980 --> 00:01:29,060
So, up until now, we've been using, to serve all of the web stuff
所以，到目前为止，我们一直在使用一个名为 HTTP server 的程序来处理所有的 Web 内容

10
00:01:29,060 --> 00:01:31,640
that you've done, this program called HTTP server.
你所做的所有 Web 工作。

11
00:01:31,640 --> 00:01:32,900
Now, this isn't a CS50 thing.
现在，这不是 CS50 的东西。

12
00:01:32,900 --> 00:01:36,260
It's just a standard program that we've installed into Codespaces.
它只是一个我们安装到 Codespaces 的标准程序。

13
00:01:36,260 --> 00:01:39,450
So it's a Linux program that just runs your own web server.
所以它是一个 Linux 程序，它可以运行你自己的 Web 服务器。

14
00:01:39,450 --> 00:01:42,140
And it allows you to run it on nonstandard ports.
它允许你在非标准端口上运行它。

15
00:01:42,140 --> 00:01:44,420
For instance, you've been using it on port 80, 80
例如，你一直在端口 80 上使用它，80

16
00:01:44,420 --> 00:01:49,398
only because Codespaces is using 80 and 443, recall, which were the defaults.
仅仅是因为 Codespaces 使用了 80 和 443，你还记得吧，那是默认的。

17
00:01:49,398 --> 00:01:51,440
But, up until now, this program's purpose in life
但是，到目前为止，这个程序存在的意义

18
00:01:51,440 --> 00:01:55,520
was just to serve static content, so like web pages written in HTML,
只是提供静态内容，比如用 HTML 编写的网页，

19
00:01:55,520 --> 00:01:59,100
maybe some CSS, maybe some JavaScript that you wrote in advance
可能还有一些 CSS，一些你事先写好的 JavaScript 代码

20
00:01:59,100 --> 00:02:02,040
that just never really changes until such time
这些代码在你不登录服务器并保存文件进行编辑之前，都不会改变。

21
00:02:02,040 --> 00:02:05,640
as you log back into the server, save the file after making some edits,
直到你登录回服务器，修改完文件后保存它。

22
00:02:05,640 --> 00:02:07,320
and then someone reloads their page.
然后有人重新加载他们的页面。

23
00:02:07,320 --> 00:02:11,640
But, of course, the web that we all use today, be it Gmail or any website,
但是，当然，我们今天使用的网络，无论是 Gmail 还是任何网站，

24
00:02:11,640 --> 00:02:13,240
is so much more interactive.
都是更加交互式的。

25
00:02:13,240 --> 00:02:15,240
When you search for something on Google, there's
当你搜索一些东西时，谷歌上

26
00:02:15,240 --> 00:02:18,960
no Google engineer that, in advance, has written up an HTML
没有谷歌工程师事先编写好一个 HTML 页面

27
00:02:18,960 --> 00:02:22,470
page containing a list of 10 cats or 10 dogs
包含 10 只猫或 10 只狗的列表

28
00:02:22,470 --> 00:02:26,430
or 10 birds just waiting for someone to search for that particular keyword.
或 10 只鸟，仅仅等待着有人搜索那个特定的关键字。

29
00:02:26,430 --> 00:02:28,200
Rather, there's some database involved.
相反，这里涉及到一个数据库。

30
00:02:28,200 --> 00:02:30,060
The HTML's being dynamically generated.
HTML 页面是动态生成的。

31
00:02:30,060 --> 00:02:31,860
And it's all indeed very dynamic.
而且，它确实是动态的。

32
00:02:31,860 --> 00:02:34,980
So whereas, last week, we focused on websites,
所以，上周，我们专注于网站，

33
00:02:34,980 --> 00:02:38,070
this week we'll focus really on web applications.
本周我们将重点关注 Web 应用程序。

34
00:02:38,070 --> 00:02:40,590
And, really, the key difference is just that applications
实际上，关键区别在于，应用程序

35
00:02:40,590 --> 00:02:45,120
take input and produce output whereas websites are really generally thought
接收输入并产生输出，而网站通常被认为是

36
00:02:45,120 --> 00:02:45,960
of as static.
静态的。

37
00:02:45,960 --> 00:02:46,920
But it's a blurry line.
但这是一个模糊的界限。

38
00:02:46,920 --> 00:02:48,795
It's not necessarily a technical distinction.
这并不一定是一个技术上的区别。

39
00:02:48,795 --> 00:02:51,070
But today things start to get much more interactive.
但今天，事情开始变得更加交互式。

40
00:02:51,070 --> 00:02:53,648
So we're not going to be able to use HTTP server alone.
所以我们不能仅仅使用 HTTP 服务器。

41
00:02:53,648 --> 00:02:56,190
We're going to need something a little smarter that knows how
我们需要一些更智能的东西，它知道如何

42
00:02:56,190 --> 00:02:59,010
to take input from users via the URL.
通过 URL 接收用户的输入。

43
00:02:59,010 --> 00:03:02,610
So, in fact, let's look at some sample URLs that we looked at last week
实际上，让我们看看上周我们看过的几个示例 URL

44
00:03:02,610 --> 00:03:05,980
just to remind ourselves of some of the jargon and really the syntax.
来提醒我们一些术语，以及语法。

45
00:03:05,980 --> 00:03:09,360
So here's a standard URL and Flask, recall,
所以这是一个标准的 URL，你还记得 Flask 吗？

46
00:03:09,360 --> 00:03:11,280
is just the default page on the server.
它只是服务器上的默认页面。

47
00:03:11,280 --> 00:03:15,340
And, usually, the file is called index.html by convention.
通常，根据约定，这个文件被称为 index.html。

48
00:03:15,340 --> 00:03:18,090
But, depending on the operating system or web server you're using,
但是，这取决于你使用的操作系统或 web 服务器，

49
00:03:18,090 --> 00:03:19,380
it could be a different file.
它可能是一个不同的文件。

50
00:03:19,380 --> 00:03:22,720
But index.html is probably the most common default.
但 index.html 可能是最常见的默认文件。

51
00:03:22,720 --> 00:03:26,490
So you could explicitly state the file name on most web servers
因此，你可以在大多数 web 服务器上明确指定文件名

52
00:03:26,490 --> 00:03:29,670
like file.html, index.html, whatever it is.
例如 file.html、index.html 等等。

53
00:03:29,670 --> 00:03:33,010
You can have folders or directories on a web server.
你可以在 web 服务器上创建文件夹或目录。

54
00:03:33,010 --> 00:03:36,600
And this would imply that your index.html file is
这意味着你的 index.html 文件位于

55
00:03:36,600 --> 00:03:39,210
in a folder called folder in this case.
在本例中，一个名为 folder 的文件夹中。

56
00:03:39,210 --> 00:03:44,950
Or you can have a folder/file or even folder/folder/folder/file and so forth.
或者，你可以创建文件夹/文件，甚至是文件夹/文件夹/文件夹/文件，等等。

57
00:03:44,950 --> 00:03:50,260
So this is a very direct mapping from the URL to the file system,
所以这是一种从 URL 到文件系统的直接映射，

58
00:03:50,260 --> 00:03:52,380
so to speak, like the hard drive on the server.
可以这样说，就像服务器上的硬盘驱动器一样。

59
00:03:52,380 --> 00:03:55,530
But, today, we're going to do, like most computer scientists tend to do,
但是，今天我们将做大多数计算机科学家通常做的事情，

60
00:03:55,530 --> 00:03:57,420
is more of an abstraction of this.
对它进行更抽象的处理。

61
00:03:57,420 --> 00:03:59,130
This is how URLs look.
这就是 URL 的外观。

62
00:03:59,130 --> 00:04:02,220
But it turns out, once you control the web server with code,
但事实证明，一旦你用代码控制 web 服务器，

63
00:04:02,220 --> 00:04:06,330
you don't need things to line up with actual file names and files.
你就不需要将它们与实际的文件名和文件对齐。

64
00:04:06,330 --> 00:04:08,740
You can really put your content wherever you want.
你可以将内容放在任何你想要的地方。

65
00:04:08,740 --> 00:04:10,740
And so, in general, we're going to focus today
因此，总的来说，我们今天将重点关注

66
00:04:10,740 --> 00:04:14,250
on just thinking of everything after the domain name as a path,
将域名后面的所有内容视为路径，

67
00:04:14,250 --> 00:04:15,390
generally speaking.
一般来说。

68
00:04:15,390 --> 00:04:19,019
And a synonym for this, in the context of the web, would also just be a route.
在 web 环境中，这个的同义词就是路由。

69
00:04:19,019 --> 00:04:23,040
So a route is just some number of letters, maybe some slashes, maybe
因此，路由只是一些字母，可能是一些斜杠，也可能

70
00:04:23,040 --> 00:04:26,920
a file extension that refers to some part of your application.
是一个文件扩展名，它指向你应用程序的一部分。

71
00:04:26,920 --> 00:04:30,780
But, more interestingly-- and this is what makes things an application
但更有趣的是，这使得它们成为一个应用程序，

72
00:04:30,780 --> 00:04:32,280
and not just a static website--
而不仅仅是一个静态网站。

73
00:04:32,280 --> 00:04:35,670
recall, that this is how websites can take input
回想一下，这就是网站接受输入的方式，

74
00:04:35,670 --> 00:04:40,590
in the form of URLs, a question mark, then key equals value pair.
以 URL 的形式，一个问号，然后是键值对。

75
00:04:40,590 --> 00:04:42,870
Or if you want two or maybe three or four,
或者如果你想要两个、三个或四个，

76
00:04:42,870 --> 00:04:44,820
you separate them with ampersands.
你就用 "&" 符号将它们隔开。

77
00:04:44,820 --> 00:04:46,110
But that's kind of it.
但就是这样了。

78
00:04:46,110 --> 00:04:48,627
The web today is going to work just like it did last week,
如今的 web 工作方式和上周一样，

79
00:04:48,627 --> 00:04:51,210
but we're going to start leveraging these primitives in a much
但我们将开始以更强大的方式利用这些基本元素，

80
00:04:51,210 --> 00:04:53,470
more powerful, more interactive way.
更具互动性。

81
00:04:53,470 --> 00:04:56,430
So here, recall, is what might be inside of the virtual envelope
所以，回想一下，当你搜索 google.com 上的东西时，虚拟信封里可能包含什么。

82
00:04:56,430 --> 00:04:58,830
when you search for something on google.com.
当你搜索 google.com 上的东西时，

83
00:04:58,830 --> 00:05:02,070
It's going to request of the web server/search, which
它将向 web 服务器/搜索发出请求，它

84
00:05:02,070 --> 00:05:05,282
is the name, by convention, of Google's search application
根据惯例，是 Google 搜索应用程序的名称

85
00:05:05,282 --> 00:05:07,990
because they've got a lot of businesses running on their servers.
因为他们在服务器上运行着许多业务。

86
00:05:07,990 --> 00:05:11,610
And if you have ?q=cats, this is essentially the message,
如果你有 ?q=cats，这本质上就是消息，

87
00:05:11,610 --> 00:05:15,060
the HTTP message that would've been in last week's virtual envelope when I
上周我搜索 cats 时，那个虚拟信封中包含的 HTTP 消息。

88
00:05:15,060 --> 00:05:16,500
searched for cats.
搜索 cats 时，

89
00:05:16,500 --> 00:05:18,690
Hopefully, you get back a response from the server
希望你能收到服务器的回复

90
00:05:18,690 --> 00:05:20,220
containing those actual cats.
包含那些实际的猫。

91
00:05:20,220 --> 00:05:23,940
But, again, there's probably a lot more logic going on with a database
但再次强调，可能还有更多逻辑与数据库一起运作

92
00:05:23,940 --> 00:05:27,480
and somehow generating that HTML that Google is doing for us.
并以某种方式生成 Google 为我们生成的 HTML 代码。

93
00:05:27,480 --> 00:05:30,240
So we, today, are going to introduce really
因此，今天我们将真正介绍

94
00:05:30,240 --> 00:05:33,300
what's called a framework or technically a microframework, which
一种名为框架，或者更准确地说，微框架的东西，它

95
00:05:33,300 --> 00:05:36,450
means it's relatively small versus alternatives that are out there.
这意味着它相对较小，与市面上的其他替代方案相比。

96
00:05:36,450 --> 00:05:37,800
And it's called Flask.
它被称为Flask。

97
00:05:37,800 --> 00:05:40,350
So Flask is really a third-party library--
所以Flask实际上是一个第三方库——

98
00:05:40,350 --> 00:05:42,420
and it's popular in the Python world-- that's
它在Python世界中很流行——就是说

99
00:05:42,420 --> 00:05:46,260
just going to make it easier to implement web applications using
它将使使用Python实现web应用程序变得更容易。

100
00:05:46,260 --> 00:05:46,920
Python.
Python。

101
00:05:46,920 --> 00:05:47,940
There are alternatives.
还有其他替代方案。

102
00:05:47,940 --> 00:05:50,190
A very popular one is called Django, which some of you
一个非常流行的叫做Django，你们中有些人

103
00:05:50,190 --> 00:05:51,310
might've heard of before.
可能之前听说过。

104
00:05:51,310 --> 00:05:54,510
And there's dozens of others in decreasing popularity daresay.
还有几十个其他，按照流行度递减。

105
00:05:54,510 --> 00:05:57,870
But Flask is among the most popular microframeworks,
但是Flask是最流行的微框架之一，

106
00:05:57,870 --> 00:06:00,900
which means you can really just solve a few problems pretty
这意味着你实际上可以非常简单地解决几个问题

107
00:06:00,900 --> 00:06:04,350
simply without feeling like you're learning some third-party library
简单地，而不会感觉自己在学习一些第三方库

108
00:06:04,350 --> 00:06:06,870
as much as you are learning concepts that transcend
就像你在学习超越

109
00:06:06,870 --> 00:06:08,560
one particular implementation.
特定实现的理念一样。

110
00:06:08,560 --> 00:06:11,850
So we're going to introduce you to a framework called Flask.
所以我们将向大家介绍一个名为Flask的框架。

111
00:06:11,850 --> 00:06:13,560
And that's going to allow us, ultimately,
这将最终让我们

112
00:06:13,560 --> 00:06:17,520
to start web applications not by running HTTP server today
启动web应用程序，不是通过运行今天的HTTP服务器

113
00:06:17,520 --> 00:06:20,970
but literally running flask space run.
而是通过运行flask run。

114
00:06:20,970 --> 00:06:23,370
So this framework literally gives you a command,
所以这个框架实际上给你一个命令，

115
00:06:23,370 --> 00:06:26,100
on your Mac, your PC, your codespace once it's installed,
在你的Mac、PC或codespace上，一旦安装好，

116
00:06:26,100 --> 00:06:28,170
that allows you to start a web server by running
就可以通过运行命令启动web服务器

117
00:06:28,170 --> 00:06:30,858
flask run instead of HTTP server.
flask run，而不是HTTP服务器。

118
00:06:30,858 --> 00:06:33,150
So, again, last week, it was all about static websites.
所以，再说一次，上周，我们谈论的都是静态网站。

119
00:06:33,150 --> 00:06:36,370
This week, it's all about dynamic websites instead.
本周，我们谈论的是动态网站。

120
00:06:36,370 --> 00:06:39,180
And, by framework, we really generally mean-- not just
而框架，我们通常指的是——不仅仅是

121
00:06:39,180 --> 00:06:42,060
using some third-party code but third-party conventions
使用一些第三方代码，而是第三方约定

122
00:06:42,060 --> 00:06:45,270
that just some human or humans decided is the way
一些人或人们认为是构建应用程序的方式

123
00:06:45,270 --> 00:06:46,770
you will build your applications.
你将构建你的应用程序。

124
00:06:46,770 --> 00:06:50,790
Usually, this is just based on lessons learned after making application
通常，这只是基于在构建应用程序之后吸取的教训

125
00:06:50,790 --> 00:06:51,660
after application.
之后得出的教训。

126
00:06:51,660 --> 00:06:53,787
Humans around the internet realized, you know what?
互联网上的开发人员意识到，你知道吗？

127
00:06:53,787 --> 00:06:57,120
We should probably standardize the names of our files, the names of our folders,
我们应该将文件和文件夹的名字进行规范化，

128
00:06:57,120 --> 00:06:58,550
and how things are laid out.
以及如何布局。

129
00:06:58,550 --> 00:07:01,150
And so, even though this is not the only way to do things,
所以，即使这不是唯一的做法，

130
00:07:01,150 --> 00:07:05,620
the way that Flask prescribes that we programmers do things is this.
Flask 规定程序员应该按照以下方式进行操作。

131
00:07:05,620 --> 00:07:10,540
We'll, starting today, always have a Python program called app.py
从今天开始，我们将始终有一个名为 app.py 的 Python 程序

132
00:07:10,540 --> 00:07:12,280
by convention, like in our folder.
按照约定，就像在我们的文件夹中一样。

133
00:07:12,280 --> 00:07:15,730
And we're going to have a folder called templates, inside of which
我们还将有一个名为 templates 的文件夹，里面包含

134
00:07:15,730 --> 00:07:19,937
is any of the actual HTML, maybe CSS, maybe JavaScript that we write.
我们编写的任何实际的 HTML、CSS 或 JavaScript 代码。

135
00:07:19,937 --> 00:07:22,270
But you can actually put some of that content elsewhere.
但是你实际上可以将其中一些内容放在其他地方。

136
00:07:22,270 --> 00:07:24,700
And, in fact, you'll see there's going to be generally
事实上，你会看到通常

137
00:07:24,700 --> 00:07:29,180
two other files or folders you'll see me create or me use today.
还有两个其他文件或文件夹你会看到我今天创建或使用。

138
00:07:29,180 --> 00:07:33,040
One is called requirements.txt, which is literally just a simple text
一个是 requirements.txt，它实际上只是一个简单的文本

139
00:07:33,040 --> 00:07:37,330
file wherein you specify one per line what third-party libraries
文件，你可以在其中一行一行地指定要使用的第三方库

140
00:07:37,330 --> 00:07:38,170
you want to use.
你想要使用。

141
00:07:38,170 --> 00:07:41,890
This file just makes it easy to install those libraries with a command.
这个文件使用命令安装这些库变得容易。

142
00:07:41,890 --> 00:07:44,260
And then, lastly, a static folder.
然后，最后，还有一个静态文件夹。

143
00:07:44,260 --> 00:07:50,050
And it's in this folder that you put images or .css files or .js files,
在这个文件夹中，你可以存放图片或.css文件、.js文件，

144
00:07:50,050 --> 00:07:53,440
literally files that are meant to be static that you might change them once
字面意思是，这些文件是静态的，你可能偶尔会修改它们

145
00:07:53,440 --> 00:07:55,610
in a while, but they're not changing every day.
但它们不是每天都在变化。

146
00:07:55,610 --> 00:07:58,540
And so you just want to isolate them to a particular folder.
所以你只需要将它们隔离到一个特定的文件夹中。

147
00:07:58,540 --> 00:07:59,590
Why is it this way?
为什么是这样呢？

148
00:07:59,590 --> 00:08:03,250
Eh, a bunch of humans decided this feels like a clean solution.
嗯，很多人都认为这是一个干净的解决方案。

149
00:08:03,250 --> 00:08:06,610
But reasonable people will disagree and different frameworks lay things out
但是，明智的人会不同意，不同的框架会有不同的布局

150
00:08:06,610 --> 00:08:07,370
differently.
方式。

151
00:08:07,370 --> 00:08:11,410
So, when using a framework for the first time, you take a class or read a book
所以，当你第一次使用一个框架时，你可以参加一个课程或者阅读一本书

152
00:08:11,410 --> 00:08:12,920
or read the documentation.
或者阅读文档。

153
00:08:12,920 --> 00:08:17,060
And it will essentially guide you to how you should lay out your application.
它基本上会指导你如何布局你的应用程序。

154
00:08:17,060 --> 00:08:20,530
So let's go ahead and do exactly that and make an application that quite
让我们继续做，并创建一个应用程序，它相当

155
00:08:20,530 --> 00:08:24,100
simply and, by design, underwhelmingly implements Hello, world.
简单，并且按设计，平淡地实现了 Hello, world。

156
00:08:24,100 --> 00:08:27,040
But, rather than do this statically, let me
但与其静态地实现，不如让我

157
00:08:27,040 --> 00:08:29,560
do it in a way that starts to use this framework so
用一种开始使用这个框架的方式来实现，这样

158
00:08:29,560 --> 00:08:32,440
that, in the next version of it, we can actually take user input
在它的下一个版本中，我们就可以真正地获取用户的输入

159
00:08:32,440 --> 00:08:34,750
and have it say not Hello, world but maybe Hello,
并让它说，不是 Hello, world，而是 Hello,

160
00:08:34,750 --> 00:08:37,720
David, or Hello, Yulia or anyone else.
David，或 Hello, Yulia，或者其他人。

161
00:08:37,720 --> 00:08:40,480
All right, so let me go over here to VS Code.
好的，让我去 VS Code 上。

162
00:08:40,480 --> 00:08:44,680
And let me go ahead, and, initially, let me start with the familiar.
让我继续，首先，让我从熟悉的开始。

163
00:08:44,680 --> 00:08:49,510
And let me go ahead and start by simply creating the HTML page that I really
让我继续，并从简单地创建一个 HTML 页面开始，这个页面是我真正

164
00:08:49,510 --> 00:08:53,000
want to show to my visitors when they visit my application.
想展示给我的访问者，当他们访问我的应用程序的时候。

165
00:08:53,000 --> 00:08:56,290
So I'm going to go ahead and, somewhat incorrectly, initially,
所以，我将继续，虽然最初有点不正确，

166
00:08:56,290 --> 00:08:58,540
but just to make a point, I'm going to go ahead and do
但为了说明一点，我将继续

167
00:08:58,540 --> 00:09:02,353
code index.html to open up a new tab.
输入代码 index.html 来打开一个新的标签页。

168
00:09:02,353 --> 00:09:05,020
I'll hide my terminal window just to give myself some more room.
我会隐藏我的终端窗口，给自己腾出更多空间。

169
00:09:05,020 --> 00:09:08,910
And then really fast I'm going to type out some boilerplate HTML.
然后，我将快速地输入一些 HTML 模板。

170
00:09:08,910 --> 00:09:14,970
So DOCTYPE html, just like last week, open bracket html Lang equals en just
所以 DOCTYPE html，就像上周一样，打开括号 html Lang 等于 en 仅仅

171
00:09:14,970 --> 00:09:18,510
to tell the VS Code that I'm--
告诉 VS Code 我正在使用...

172
00:09:18,510 --> 00:09:20,880
to tell the web that I'm largely using English here.
告诉网络我在这里主要使用英语。

173
00:09:20,880 --> 00:09:24,073
In the head of my page, I'm going to have, of course, the title of the page.
在我的页面的头部，当然，我会加上页面的标题。

174
00:09:24,073 --> 00:09:26,490
And I'll keep it simple and just say something like hello.
我会保持简单，只写一些类似 hello 的东西。

175
00:09:26,490 --> 00:09:30,900
But just so that this website actually renders nicely on mobile devices,
但为了让这个网站在移动设备上正常渲染，

176
00:09:30,900 --> 00:09:33,540
I'm going to use one of those meta tags we talked briefly
我会使用我们上周简要谈论过的一种元标签

177
00:09:33,540 --> 00:09:39,360
about last week whereby if I say meta name equals viewport--
上周，如果我说 meta name 等于 viewport...

178
00:09:39,360 --> 00:09:43,050
and viewport refers to just the big rectangular region of your browser--
而 viewport 指的是浏览器中那个大的矩形区域...

179
00:09:43,050 --> 00:09:48,510
the content of this meta tag is going to be initial scale
这个元标签的内容将是 initial scale

180
00:09:48,510 --> 00:09:51,750
equals 1 and width equals device width.
等于 1 并且 width 等于 device width。

181
00:09:51,750 --> 00:09:54,660
I always have to copy-paste this or look it up myself.
我总是不得不复制粘贴它或者自己查找。

182
00:09:54,660 --> 00:09:57,780
But this line here essentially tells the browser
但这一行本质上告诉浏览器

183
00:09:57,780 --> 00:10:01,090
that, no matter how wide the device is, whether it's
无论设备有多宽，无论是

184
00:10:01,090 --> 00:10:05,530
a laptop or desktop or maybe a vertical cell phone or tablet,
笔记本电脑、台式电脑，还是垂直的手机或平板电脑，

185
00:10:05,530 --> 00:10:09,070
size the viewport to that device.
将视窗大小调整到该设备的大小。

186
00:10:09,070 --> 00:10:12,373
Otherwise, your website might look super small on mobile devices
否则，您的网站在移动设备上可能会看起来很小

187
00:10:12,373 --> 00:10:15,040
if you don't use this tag to tell the browser, take into account
如果您不使用此标签来告诉浏览器，请考虑

188
00:10:15,040 --> 00:10:18,250
the actual device width rather than shrinking the 12-point font
实际设备宽度，而不是缩小 12 点字体

189
00:10:18,250 --> 00:10:20,500
to something that's hard for folks to read.
使字体难以阅读。

190
00:10:20,500 --> 00:10:24,250
So, for now, I'm just going to generally copy-paste that or type it out
所以，现在，我将一般地复制粘贴或键入它

191
00:10:24,250 --> 00:10:27,062
from my printout here.
从我的打印内容中。

192
00:10:27,062 --> 00:10:29,270
All right, beyond that, we need the body of the page.
好的，除此之外，我们需要页面的主体。

193
00:10:29,270 --> 00:10:30,228
We'll keep that simple.
我们会保持简单。

194
00:10:30,228 --> 00:10:33,800
So body, and then, in here, hello comma world.
所以是主体，然后在里面，hello, world。

195
00:10:33,800 --> 00:10:35,740
So that's it for my website thus far.
到目前为止，我的网站就是这样。

196
00:10:35,740 --> 00:10:36,430
It's static.
它是静态的。

197
00:10:36,430 --> 00:10:39,500
Nothing about this is going to incorporate my name or anyone else's.
这方面不会包含我的名字或任何其他人的名字。

198
00:10:39,500 --> 00:10:43,540
So I could technically use HTTP server to serve up this web page,
所以理论上我可以使用 HTTP 服务器来提供此网页，

199
00:10:43,540 --> 00:10:46,960
open it in a browser, and I would see the actual contents.
在浏览器中打开它，我就可以看到实际内容。

200
00:10:46,960 --> 00:10:49,510
But let's instead create a bit of work for us
但是，让我们为我们自己创造一些工作

201
00:10:49,510 --> 00:10:53,290
and sort of overengineer this problem but to set the stage for actually
并且对这个问题进行过度设计，但为了为实际情况做好准备

202
00:10:53,290 --> 00:10:56,210
taking in dynamic input like a user's name.
接收动态输入，比如用户的姓名。

203
00:10:56,210 --> 00:10:57,880
So let me go ahead and to do this.
所以让我继续做这件事。

204
00:10:57,880 --> 00:11:01,120
I'm going to go ahead and open my terminal window again.
我将继续打开我的终端窗口。

205
00:11:01,120 --> 00:11:04,210
I'm going to close the index.html file.
我将关闭 index.html 文件。

206
00:11:04,210 --> 00:11:06,910
I'm going to make a new directory called templates,
我将创建一个名为 templates 的新目录，

207
00:11:06,910 --> 00:11:08,860
which, again, was the default folder name I
再次，这是我使用的默认文件夹名称

208
00:11:08,860 --> 00:11:11,230
mentioned that this framework expects.
提到的这个框架期望的。

209
00:11:11,230 --> 00:11:16,100
And I'm going to move index.html into that templates folder using mv, a Linux
我将使用 mv（一个 Linux 命令）将 index.html 移动到 templates 文件夹中。

210
00:11:16,100 --> 00:11:16,600
command.
命令。

211
00:11:16,600 --> 00:11:21,878
If you're more comfy, you can open up the file, the File Explorer at right.
如果您更喜欢，您可以打开文件，即右侧的文件资源管理器。

212
00:11:21,878 --> 00:11:23,920
You'll see, in advance, I downloaded a directory.
您将看到，提前，我下载了一个目录。

213
00:11:23,920 --> 00:11:26,590
I'll occasionally borrow content from today called src9,
我偶尔会借用今天名为 src9 的内容，

214
00:11:26,590 --> 00:11:28,090
but there is my templates folder.
但那里是我的 templates 文件夹。

215
00:11:28,090 --> 00:11:30,850
And you could click in the GUI in order to do
您可以在 GUI 中单击以执行

216
00:11:30,850 --> 00:11:32,565
what I just did at the command line.
我在命令行中刚刚执行的操作。

217
00:11:32,565 --> 00:11:35,440
All right, and, after this, let's go ahead and create one other file,
好的，在此之后，让我们继续创建另一个文件，

218
00:11:35,440 --> 00:11:37,270
app.py.
app.py。

219
00:11:37,270 --> 00:11:41,750
And, in app.py, let me go ahead now and do this.
在 app.py 中，让我现在继续执行此操作。

220
00:11:41,750 --> 00:11:48,310
I'm going to import some functions that come with this framework called Flask.
我将导入一些与名为 Flask 的框架一起提供的函数。

221
00:11:48,310 --> 00:11:54,010
So I'm going to say from flask, in lowercase, import Flask, capital F,
所以我要说，从 flask（小写）导入 Flask（大写 F），

222
00:11:54,010 --> 00:11:59,250
and also a function called render template and an object called request.
以及一个名为 render_template 的函数和一个名为 request 的对象。

223
00:11:59,250 --> 00:12:00,083
Now, how to do this?
现在，如何做到这一点？

224
00:12:00,083 --> 00:12:02,667
You literally read the documentation, or you listen to someone
您可以直接阅读文档，或者听别人

225
00:12:02,667 --> 00:12:04,830
like me tell you to begin your program this way.
像我一样告诉您以这种方式开始您的程序。

226
00:12:04,830 --> 00:12:09,180
In the Flask framework comes three pieces of functionality
Flask 框架提供了三个功能模块

227
00:12:09,180 --> 00:12:12,780
that are just useful to incorporate into my own program as we're about to see.
它们对我的程序非常有用，正如我们即将看到的那样。

228
00:12:12,780 --> 00:12:15,990
Here's the line of code via which I can tell this framework
这是一行代码，通过它我可以告诉这个框架

229
00:12:15,990 --> 00:12:20,940
to treat my file, app.py, as indeed a web application.
将我的文件 app.py 视为一个 Web 应用程序。

230
00:12:20,940 --> 00:12:23,430
I create a variable, typically called app.
我创建了一个变量，通常称为 app。

231
00:12:23,430 --> 00:12:27,000
I set that equal to the return value of calling
我将其设置为调用

232
00:12:27,000 --> 00:12:31,110
this Flask function and pass in it, somewhat weirdly,
Flask 函数的返回值，并以某种奇怪的方式传递到其中，

233
00:12:31,110 --> 00:12:32,920
the name of this file.
这个文件的名字。

234
00:12:32,920 --> 00:12:37,660
So this is the only weird thing for now in that we haven't used this much,
所以目前为止唯一奇怪的是，我们还没有使用它很多，

235
00:12:37,660 --> 00:12:45,090
if at all. __name__ is a special variable in Python that literally
如果有的话。__name__ 是 Python 中的一个特殊变量，它实际上

236
00:12:45,090 --> 00:12:49,120
refers to the current file's name, no matter what file name you gave it.
指的是当前文件的名字，无论你给它起了什么名字。

237
00:12:49,120 --> 00:12:51,000
So it's a nice way of referring to yourself
所以这是指代你自己的好方法

238
00:12:51,000 --> 00:12:54,665
without manually typing the file name, which might change down the line.
而不必手动输入文件名，因为文件名可能会在以后发生变化。

239
00:12:54,665 --> 00:12:56,290
And then, lastly, I'm going to do this.
最后，我要做这个。

240
00:12:56,290 --> 00:12:58,570
And this is one other piece of new syntax for now.
而这是目前为止另一个新的语法。

241
00:12:58,570 --> 00:13:02,830
I'm going to use an @ and say app.route.
我将使用一个 @ 并说 app.route。

242
00:13:02,830 --> 00:13:05,950
And then in quotes, as an argument to this route function,
然后在引号中，作为此 route 函数的参数，

243
00:13:05,950 --> 00:13:09,430
I'm going to specify the route for which I'm implementing some code
我将指定我要实现一些代码的路由

244
00:13:09,430 --> 00:13:12,010
/ being the default, by convention.
/ 是默认值，这是约定俗成的。

245
00:13:12,010 --> 00:13:14,260
I'm going to define immediately below that a function
我将立即在下面定义一个函数

246
00:13:14,260 --> 00:13:16,310
that I can technically call anything I want,
从技术上来说，我可以给它起任何名字，

247
00:13:16,310 --> 00:13:18,935
but I'm going to get in the habit of using reasonable defaults.
但我要养成使用合理默认值的习惯。

248
00:13:18,935 --> 00:13:21,423
So I'm going to call this function index by default.
所以默认情况下，我将这个函数命名为 index。

249
00:13:21,423 --> 00:13:22,840
But that's not a hard requirement.
但这并不是硬性要求。

250
00:13:22,840 --> 00:13:25,570
And then, inside of this function, I'm simply
然后，在这个函数里面，我只是

251
00:13:25,570 --> 00:13:31,270
going to return this, return "hello, world", quote, unquote.
要返回这个，返回 "hello, world"，引号。

252
00:13:31,270 --> 00:13:32,350
And that's it.
就是这样。

253
00:13:32,350 --> 00:13:36,400
This I now claim is a beginning of an actual web application.
我现在声称，这是一个真正的 Web 应用程序的开始。

254
00:13:36,400 --> 00:13:38,980
It looks a little magical or cryptic as to what's going on.
看起来有点神奇或神秘，不知道发生了什么。

255
00:13:38,980 --> 00:13:43,630
But, per the jargon I introduced earlier, this function here app.route
但是，根据我之前介绍的术语，这里这个函数 app.route

256
00:13:43,630 --> 00:13:46,090
is defining a route for this application that
为这个应用程序定义了一个路由，

257
00:13:46,090 --> 00:13:48,475
implies that whenever a human visit slash
这意味着只要一个人访问斜杠

258
00:13:48,475 --> 00:13:51,490
on this application, what should happen is
在这个应用程序上，应该发生的事情是

259
00:13:51,490 --> 00:13:53,740
this function index should get called.
这个函数 index 应该被调用。

260
00:13:53,740 --> 00:13:56,020
And that function's purpose in life, at the moment,
而这个函数目前存在的意义

261
00:13:56,020 --> 00:14:00,350
is just to return, quote, unquote, "hello, world", and that's it.
就是返回 "hello, world"，就这样。

262
00:14:00,350 --> 00:14:02,060
So let me go ahead and do this.
所以让我继续做这个。

263
00:14:02,060 --> 00:14:04,265
Let me open my terminal and just to keep everything
让我打开我的终端，为了保持所有东西

264
00:14:04,265 --> 00:14:06,640
clean because we're going to have a bunch of applications
干净，因为我们今天会有一堆应用程序

265
00:14:06,640 --> 00:14:07,432
today in the works.
正在进行中。

266
00:14:07,432 --> 00:14:09,790
I'm going to create one other folder called hello.
我将创建一个名为 hello 的文件夹。

267
00:14:09,790 --> 00:14:16,370
And I'm going to move app.py and templates into that hello folder.
我将把 app.py 和 templates 移动到 hello 文件夹中。

268
00:14:16,370 --> 00:14:18,910
So if I now type ls in my own personal account,
所以，如果我现在在我的个人帐户中输入 ls，

269
00:14:18,910 --> 00:14:22,850
I've got that folder hello and also src9, which I brought with me today.
我拥有那个名为 hello 的文件夹，还有 src9，我今天把它带来了。

270
00:14:22,850 --> 00:14:26,650
So if I now cd into hello and type ls again,
所以如果我现在 cd 到 hello 并再次输入 ls，

271
00:14:26,650 --> 00:14:29,410
I'll see the two things we just created together, app.py
我将看到我们一起创建的两个东西，app.py

272
00:14:29,410 --> 00:14:30,500
and the templates folder.
和 templates 文件夹。

273
00:14:30,500 --> 00:14:33,520
And if I go one step further in ls templates itself,
如果我在 ls templates 本身中再往前走一步，

274
00:14:33,520 --> 00:14:36,460
I should see, of course, index.html.
我当然应该看到 index.html。

275
00:14:36,460 --> 00:14:39,490
All right, so a lot of steps to go through just to get started.
好吧，所以要启动，需要经历很多步骤。

276
00:14:39,490 --> 00:14:42,070
But you'll see that this is fairly boilerplate eventually.
但你最终会看到，这相当于是模板。

277
00:14:42,070 --> 00:14:44,500
I'm not going to run an HTTP server, but I
我不会运行一个 HTTP 服务器，但是我

278
00:14:44,500 --> 00:14:49,030
am going to run flask run, which will turn this app.py into a working web
将运行 flask run，它将把这个 app.py 变成一个可工作的 Web

279
00:14:49,030 --> 00:14:49,707
application.
应用程序。

280
00:14:49,707 --> 00:14:52,540
The output after I hit Enter is going to look a little more cryptic.
我按下回车键后的输出会更难懂一些。

281
00:14:52,540 --> 00:14:54,670
It's going to warn me this is a development server.
它会警告我这是一个开发服务器。

282
00:14:54,670 --> 00:14:57,110
You should not use that same command in the real world.
你不应该在真实世界中使用相同的命令。

283
00:14:57,110 --> 00:14:59,860
You should actually configure Flask a little differently if you're
如果你打算在现实世界中使用它，你实际上应该对 Flask 进行一些不同的配置。

284
00:14:59,860 --> 00:15:01,277
going to use it in the real world.
如果你打算在现实世界中使用它，你实际上应该对 Flask 进行一些不同的配置。

285
00:15:01,277 --> 00:15:05,260
But it does show me the random URL that GitHub created for me.
但它确实向我展示了 GitHub 为我创建的随机 URL。

286
00:15:05,260 --> 00:15:07,240
And I'm going to go ahead and open this URL.
我将继续打开这个 URL。

287
00:15:07,240 --> 00:15:08,770
It's going to open in a new tab.
它将在一个新标签页中打开。

288
00:15:08,770 --> 00:15:11,620
And, voila, that is my web application.
瞧，这就是我的 Web 应用程序。

289
00:15:11,620 --> 00:15:13,720
Completely underwhelming, but you'll notice
完全乏善可陈，但你会注意到

290
00:15:13,720 --> 00:15:15,760
that, even though Chrome is hiding this, this
即使 Chrome 隐藏了它，但这个

291
00:15:15,760 --> 00:15:21,170
is the equivalent of my having visited at the end of this URL simply a slash.
等同于我在这个 URL 的末尾访问了一个简单的斜杠。

292
00:15:21,170 --> 00:15:26,320
All right, if I zoom out here, though, and maybe right-click or Control-click,
好吧，如果我在这里缩小，也许右键单击或 Control-单击，

293
00:15:26,320 --> 00:15:28,510
and I choose View page source--
然后我选择查看页面源代码 -

294
00:15:28,510 --> 00:15:30,910
recall, this is available in most every browser--
回想一下，这在大多数浏览器中都可用 -

295
00:15:30,910 --> 00:15:34,180
you'll see that this isn't actually HTML because, at the moment,
你会看到这实际上不是 HTML，因为目前，

296
00:15:34,180 --> 00:15:36,910
I'm literally just returning, quote, unquote, "hello, world".
我实际上只是返回了引号中的“hello, world”。

297
00:15:36,910 --> 00:15:37,983
So, yes, it's text.
所以，是的，它是文本。

298
00:15:37,983 --> 00:15:39,400
It's being rendered as a web page.
它正在被渲染为一个网页。

299
00:15:39,400 --> 00:15:42,430
But it's not technically a web page that has valid HTML.
但从技术上讲，它不是一个具有有效 HTML 的网页。

300
00:15:42,430 --> 00:15:44,020
So what I'm going to do here is this.
所以我要做的是这个。

301
00:15:44,020 --> 00:15:46,180
I'm going to go back into VS Code.
我将回到 VS Code。

302
00:15:46,180 --> 00:15:48,370
I'm going to open a second terminal by clicking
我将通过点击打开第二个终端

303
00:15:48,370 --> 00:15:50,650
the plus icon toward the bottom right of my screen,
屏幕右下角的加号，

304
00:15:50,650 --> 00:15:52,570
just so I can keep the server running.
这样我就可以让服务器保持运行。

305
00:15:52,570 --> 00:15:54,890
But-- actually, nope, let me go ahead and do this.
但是 - 实际上，不，让我继续这样做。

306
00:15:54,890 --> 00:15:56,200
Let me kill this terminal.
让我关闭这个终端。

307
00:15:56,200 --> 00:15:59,210
Let me actually-- oops, I killed the wrong one.
让我实际 - 哎呀，我关错了。

308
00:15:59,210 --> 00:16:03,430
Let me instead go into my hello directory again.
让我回到我的 hello 目录。

309
00:16:03,430 --> 00:16:06,190
Let me open up app.py.
让我打开 app.py。

310
00:16:06,190 --> 00:16:11,020
And this time, instead of saying hello, world, let me do this.
这一次，与其说 hello, world，不如让我这样做。

311
00:16:11,020 --> 00:16:14,500
I want to return the contents of index.html,
我想返回 index.html 的内容，

312
00:16:14,500 --> 00:16:18,710
which is that whole file I created, but I can't just specify its file name.
这是我创建的整个文件，但我不能仅仅指定它的文件名。

313
00:16:18,710 --> 00:16:20,030
But I can do this.
但我可以这样做。

314
00:16:20,030 --> 00:16:22,210
I can call a function called render_template,
我可以调用一个名为 render_template 的函数，

315
00:16:22,210 --> 00:16:23,470
which comes with Flask.
它随 Flask 一起提供。

316
00:16:23,470 --> 00:16:26,590
And its purpose in life is to go get that file from a folder
它的作用是从一个名为 templates 的文件夹中获取该文件

317
00:16:26,590 --> 00:16:29,080
called templates, open it up and then send
打开它，然后发送

318
00:16:29,080 --> 00:16:31,150
all of those bytes, all of those characters
所有这些字节，所有这些字符

319
00:16:31,150 --> 00:16:33,318
to the user's actual browser.
到用户的实际浏览器。

320
00:16:33,318 --> 00:16:34,610
So let me go ahead and do this.
所以让我继续这样做。

321
00:16:34,610 --> 00:16:36,070
Let me open my terminal again.
让我重新打开我的终端。

322
00:16:36,070 --> 00:16:40,210
Let me do flask run inside of this same folder hello.
让我在这个相同的 hello 文件夹中运行 flask run。

323
00:16:40,210 --> 00:16:43,960
I'm now going to go back to my tab here, click Reload,
我现在将回到我的标签页，点击重新加载，

324
00:16:43,960 --> 00:16:46,240
and nothing appears to have changed.
并且似乎没有任何变化。

325
00:16:46,240 --> 00:16:50,680
But if I right-click and choose View source this time after reloading,
但如果我在重新加载后右键单击并选择查看源代码，

326
00:16:50,680 --> 00:16:54,460
now you'll see all of the HTML that I composed.
现在你将看到我编写的全部 HTML。

327
00:16:54,460 --> 00:16:57,410
All right, so this has taken way more steps
好吧，所以这需要更多步骤

328
00:16:57,410 --> 00:17:01,290
to do what we achieved by just running HTTP server last week.
来完成我们上周仅仅通过运行 HTTP 服务器所实现的功能。

329
00:17:01,290 --> 00:17:05,180
But here's where now things can get a little interesting, whereby
但现在事情变得有趣起来，因为

330
00:17:05,180 --> 00:17:08,000
now that we have this framework laid out,
现在我们已经建立了这个框架，

331
00:17:08,000 --> 00:17:10,460
we can actually introduce other features of the framework
我们实际上可以引入框架的其他功能

332
00:17:10,460 --> 00:17:12,592
to make things more dynamic.
让事情更加动态。

333
00:17:12,592 --> 00:17:14,550
So, for instance, what I'm going to do is this.
例如，我要做的是：

334
00:17:14,550 --> 00:17:17,270
I'm going to now introduce a feature of that variable
我现在要引入该变量的一个功能，

335
00:17:17,270 --> 00:17:21,740
that I also imported called request, which refers to any HTTP request.
我之前也导入了一个叫做请求的变量，它指的是任何 HTTP 请求。

336
00:17:21,740 --> 00:17:23,569
And it turns out, there's a property inside
事实证明，它内部有一个属性

337
00:17:23,569 --> 00:17:25,819
of there called args, which is actually going
叫做 args，实际上会

338
00:17:25,819 --> 00:17:28,369
to be a dictionary of all of the key value pairs
成为所有键值对的字典，

339
00:17:28,369 --> 00:17:30,950
that the human might've provided via the URL.
用户可能通过 URL 提供这些键值对。

340
00:17:30,950 --> 00:17:34,670
So I don't have to figure out, how do I find the thing after the question mark?
所以我不用考虑，怎么才能在问号后面找到那个东西？

341
00:17:34,670 --> 00:17:36,980
I don't have to worry about parsing the ampersands.
我不用担心解析和号。

342
00:17:36,980 --> 00:17:39,470
Flask does all of that for me and just hands
Flask 为我完成了所有这些工作，并直接将

343
00:17:39,470 --> 00:17:43,830
me anything after the URL in a Python dictionary instead.
URL 后面的任何内容以 Python 字典的形式传递给我。

344
00:17:43,830 --> 00:17:44,790
So let me do this.
所以让我这样做。

345
00:17:44,790 --> 00:17:47,697
Let me go back to VS Code here.
让我回到 VS Code。

346
00:17:47,697 --> 00:17:49,280
Let me go ahead and hide the terminal.
让我隐藏终端。

347
00:17:49,280 --> 00:17:54,770
But, in app.py, let me go ahead and make a relatively simple change.
但在 app.py 中，让我做一个相对简单的更改。

348
00:17:54,770 --> 00:17:58,860
Let me go ahead and do this.
让我这样做。

349
00:17:58,860 --> 00:18:05,300
Let me go ahead and open up in my hello folder, let me open up index.html.
让我打开我的 hello 文件夹，让我打开 index.html。

350
00:18:05,300 --> 00:18:09,260
And let me go ahead and get rid of world and just put a placeholder here.
让我把 world 去掉，在这里放一个占位符。

351
00:18:09,260 --> 00:18:13,020
Using curly brackets, two of them, on the left and right,
使用大括号，左右各两个，

352
00:18:13,020 --> 00:18:15,600
I'm going to go ahead and plug in a variable like name.
我要插入一个叫做 name 的变量。

353
00:18:15,600 --> 00:18:19,430
So here's now where I'm treating index.html not as literally
所以现在我将 index.html 不再视为一个字面意义上的

354
00:18:19,430 --> 00:18:23,730
an HTML page anymore, but more as a template in the literal sense.
HTML 页面，而是更像一个字面意义上的模板。

355
00:18:23,730 --> 00:18:25,910
So a template is kind of like a blueprint whereby
所以模板就像蓝图一样，通过它

356
00:18:25,910 --> 00:18:29,000
you can construct most of what you want the human to see but then
你可以构建你想让用户看到的大部分内容，然后

357
00:18:29,000 --> 00:18:31,460
leave little placeholders in, a la a blueprint
在里面留下一些占位符，就像蓝图一样

358
00:18:31,460 --> 00:18:33,440
where you can fill in certain blanks.
你可以填入一些空白。

359
00:18:33,440 --> 00:18:37,120
The double curly quotes here is actually a feature
这里的双大括号实际上是一个功能

360
00:18:37,120 --> 00:18:38,870
of technically another language-- it's not
在技术上是另一种语言的功能，它不是

361
00:18:38,870 --> 00:18:40,670
a programming language-- called Jinja.
一门编程语言，它叫做 Jinja。

362
00:18:40,670 --> 00:18:44,000
But Jinja is simply a language that a bunch of other humans
但是 Jinja 仅仅是一种语言，很多其他的人

363
00:18:44,000 --> 00:18:46,460
came up with that standardizes what syntax
发明了这种语言，它标准化了你可以使用的语法

364
00:18:46,460 --> 00:18:49,770
you can use for these placeholders and some other features as well.
用于这些占位符和其他一些功能。

365
00:18:49,770 --> 00:18:52,550
So this is going to happen more and more as you progress more
所以，随着你在编程和计算机科学方面的进步，这种情况会越来越多。

366
00:18:52,550 --> 00:18:54,153
in programming and CS.
在编程和计算机科学方面的进步，这种情况会越来越多。

367
00:18:54,153 --> 00:18:57,320
It's not going to be as simple as, oh, I'm implementing something in Python.
它不会像这样简单，哦，我在 Python 中实现了一些东西。

368
00:18:57,320 --> 00:19:00,410
Or, oh, I'm implementing something in C. It's generally going to be,
或者，哦，我在 C 中实现了一些东西。通常来说，

369
00:19:00,410 --> 00:19:04,350
oh, I'm implementing something with this full stack of software,
哦，我在这个完整的软件堆栈中实现了一些东西，

370
00:19:04,350 --> 00:19:09,660
including HTML, CSS, Python, some SQL, some Jinja, and so forth.
包括 HTML、CSS、Python、一些 SQL、一些 Jinja，等等。

371
00:19:09,660 --> 00:19:13,220
So into your vocabulary is now going to generally come a list of technologies
所以你的词汇里现在通常会包含你用来解决问题的技术列表，

372
00:19:13,220 --> 00:19:15,410
that you're using when solving some problem, no
不再是单独的语言。

373
00:19:15,410 --> 00:19:17,210
longer individual languages.
不再是单独的语言。

374
00:19:17,210 --> 00:19:18,920
So, by this, I just mean this.
所以，我的意思是，就是这样。

375
00:19:18,920 --> 00:19:22,250
The Flask framework took a look around the internet and saw,
Flask 框架在互联网上四处查看，发现

376
00:19:22,250 --> 00:19:24,860
OK, the humans at the Jinja group came up
好吧，Jinja 小组的人想出了

377
00:19:24,860 --> 00:19:27,830
with a nice simple syntax for putting placeholders in.
一个简单而简洁的语法，用于放置占位符。

378
00:19:27,830 --> 00:19:30,800
Let's support that syntax in Flask.
让我们在 Flask 中支持这种语法。

379
00:19:30,800 --> 00:19:33,720
So it's sort of one framework collaborating with another.
所以这有点像一个框架与另一个框架之间的协作。

380
00:19:33,720 --> 00:19:38,450
So if I go back to app.py now, how do I actually pass from my application
所以，如果我现在回到 app.py，我如何将我的应用程序中

381
00:19:38,450 --> 00:19:41,750
to that template whatever the human has typed in?
输入的内容传递到模板？

382
00:19:41,750 --> 00:19:43,830
Well, it turns out I can go ahead and do this.
事实证明，我可以继续这样做。

383
00:19:43,830 --> 00:19:46,500
Let me go ahead and in my index function, which, again,
让我在 index 函数中，再次

384
00:19:46,500 --> 00:19:50,697
is what's going to get called anytime someone visits that slash route,
是每次有人访问斜杠路由时会被调用的函数，

385
00:19:50,697 --> 00:19:53,030
I'm going to go ahead and create a variable called name.
我将创建一个名为 name 的变量。

386
00:19:53,030 --> 00:19:56,790
I'm going to set it equal to requests.args.
我将它设置为等于 requests.args。

387
00:19:56,790 --> 00:20:01,760
And then I'm going to go ahead and say, how about, quote, unquote, "name".
然后我将继续说，如何，引号，引号，"name"。

388
00:20:01,760 --> 00:20:05,390
I claimed, a moment ago, that args is a dictionary that
我之前说过，args 是一个字典，它

389
00:20:05,390 --> 00:20:08,750
just comes automatically with Flask and whenever
会自动与 Flask 配合使用，并且每当

390
00:20:08,750 --> 00:20:11,030
a human makes a request to the server, and it
人类向服务器发出请求时，它

391
00:20:11,030 --> 00:20:14,330
puts in that dictionary all of the key value pairs from the URL.
会将 URL 中所有键值对放入该字典中。

392
00:20:14,330 --> 00:20:16,460
And the last thing I'm going to do here is this.
我要做的最后一件事是这个。

393
00:20:16,460 --> 00:20:18,320
I'm going to actually say-- and, actually, just let
我实际上会说 - 并且，实际上，让我

394
00:20:18,320 --> 00:20:19,550
me make this more explicit.
更明确一点。

395
00:20:19,550 --> 00:20:22,640
Let me call this placeholder literally placeholder.
让我把这个占位符称为占位符。

396
00:20:22,640 --> 00:20:25,230
And what I'm going to do now is, in render template,
我现在要做的就是在渲染模板中

397
00:20:25,230 --> 00:20:28,522
I'm going to take advantage of one other feature that comes with this function.
利用这个函数的另一个功能。

398
00:20:28,522 --> 00:20:30,780
It can take one or more arguments.
它可以接受一个或多个参数。

399
00:20:30,780 --> 00:20:33,770
And if you pass in more, you can specify variables
如果你传入更多，你可以指定变量

400
00:20:33,770 --> 00:20:35,730
that you want the function to have access to.
你想让函数访问。

401
00:20:35,730 --> 00:20:40,940
So I can literally do something like this, placeholder equals name.
所以我可以直接这样做，placeholder 等于 name。

402
00:20:40,940 --> 00:20:44,090
So recall that Python supports named parameters, which
请记住，Python 支持命名参数，即

403
00:20:44,090 --> 00:20:47,040
just means that you can pass in multiple arguments to a function.
意味着你可以向函数传递多个参数。

404
00:20:47,040 --> 00:20:48,870
But you can specify them by name.
但是你可以按名称指定它们。

405
00:20:48,870 --> 00:20:53,240
So I am calling one of these arguments placeholder.
所以我在调用其中一个参数占位符。

406
00:20:53,240 --> 00:20:55,490
And I'm setting the value of that argument
我正在设置该参数的值

407
00:20:55,490 --> 00:20:58,740
equal to name, which itself is a variable that I
等于 name，它本身是一个我

408
00:20:58,740 --> 00:21:00,790
defined just a moment ago.
刚定义的变量。

409
00:21:00,790 --> 00:21:02,730
So, now, what's going to happen?
现在会发生什么？

410
00:21:02,730 --> 00:21:08,010
Well, let me actually go back to my VS Code.
好吧，让我回到我的 VS Code。

411
00:21:08,010 --> 00:21:11,010
I'm going to go ahead and run Flask as I did before.
我将继续像之前一样运行 Flask。

412
00:21:11,010 --> 00:21:12,970
The URL is not going to change in this case,
在这种情况下，URL 不会改变，

413
00:21:12,970 --> 00:21:14,820
I'm going to go back to my other tab.
我会回到我的另一个选项卡。

414
00:21:14,820 --> 00:21:18,900
I'm going to go ahead now and change the URL manually-- let me zoom in here--
我现在将手动更改 URL - 让我放大这里 -

415
00:21:18,900 --> 00:21:20,204
to be /?name=David.
设置为 /?name=David。

416
00:21:22,678 --> 00:21:23,970
I'm not going to hit Enter yet.
我还没有按 Enter 键。

417
00:21:23,970 --> 00:21:24,990
Let me zoom out.
让我缩小。

418
00:21:24,990 --> 00:21:31,590
But, when I do zoom out here, I think we should see now, hello, David.
但是，当我在这里缩小时，我认为我们现在应该看到，你好，David。

419
00:21:31,590 --> 00:21:32,340
So here we go.
就是这样。

420
00:21:32,340 --> 00:21:33,240
Enter.
回车。

421
00:21:33,240 --> 00:21:35,370
And, voila, we see hello, David.
瞧，我们看到了你好，David。

422
00:21:35,370 --> 00:21:37,470
But, more interestingly, if I view source
但更有趣的是，如果我查看源代码

423
00:21:37,470 --> 00:21:40,560
here by right-clicking or Control-clicking on the page or opening
通过右键单击或 Control-单击页面或打开

424
00:21:40,560 --> 00:21:43,320
developer tools and so forth and go to View page source,
开发人员工具等等，然后去查看页面源代码，

425
00:21:43,320 --> 00:21:46,170
it appears that what the server sent to my browser
看起来服务器发送到我的浏览器的是

426
00:21:46,170 --> 00:21:49,050
is literally a web page that says hello, David.
一个字面意义上说“你好，大卫”的网页。

427
00:21:49,050 --> 00:21:50,490
There is no more placeholder.
没有占位符了。

428
00:21:50,490 --> 00:21:52,410
There is no more curly braces.
没有大括号了。

429
00:21:52,410 --> 00:21:56,370
Literally, the content that came from the server is that string.
字面意义上，来自服务器的内容就是那个字符串。

430
00:21:56,370 --> 00:21:58,620
And so this is the distinction now between being
所以这就是静态应用和动态应用之间的区别。

431
00:21:58,620 --> 00:22:00,690
a static application versus dynamic.
静态应用与动态应用的区别。

432
00:22:00,690 --> 00:22:05,530
What I wrote statically was literally this index.html file.
我静态地写的，其实是这个index.html文件。

433
00:22:05,530 --> 00:22:08,130
But what got served dynamically is that file
但是动态服务的是那个文件

434
00:22:08,130 --> 00:22:13,870
plus the substitution or interpolation of that placeholder variable.
加上那个占位符变量的替换或插值。

435
00:22:13,870 --> 00:22:17,340
So we have the beginnings, it would seem, of a web application.
所以，看起来我们有了网页应用的雏形。

436
00:22:17,340 --> 00:22:18,510
And think back to Google.
想想Google。

437
00:22:18,510 --> 00:22:23,220
Google is essentially implemented the same way, /search?q=cats.
Google本质上也是用同样的方式实现的，/search?q=cats。

438
00:22:23,220 --> 00:22:26,700
So they're doing more with the key value pair than just spitting it back out,
所以它们对键值对的操作不仅仅是直接输出，

439
00:22:26,700 --> 00:22:30,750
but we have the beginnings now of a dynamic application.
但我们现在有了动态应用的雏形。

440
00:22:30,750 --> 00:22:38,330
Any questions on any of this code or this framework thus far?
关于这段代码或框架，目前有什么问题吗？

441
00:22:38,330 --> 00:22:40,668
Any questions thus far.
目前有什么问题吗？

442
00:22:40,668 --> 00:22:42,460
No, all right, well, let's see what happens
没有，好的，让我们看看会发生什么

443
00:22:42,460 --> 00:22:44,140
if I don't cooperate like a human.
如果我不像人类一样配合。

444
00:22:44,140 --> 00:22:47,470
Let me actually go ahead and get rid of that parameter, hit Enter again,
让我把参数删掉，再按回车，

445
00:22:47,470 --> 00:22:51,200
and I actually now got an HTTP 400 error.
现在我得到一个HTTP 400错误。

446
00:22:51,200 --> 00:22:52,490
So this actually seems bad.
看起来不太好。

447
00:22:52,490 --> 00:22:56,110
And it's a little subtle, but if I zoom into the tab here, it indeed says 400.
这有点微妙，但如果我放大这里的标签，它确实显示了400。

448
00:22:56,110 --> 00:22:59,500
That's one of the HTTP status codes that you generally shouldn't
这是一个HTTP状态码，你一般不应该

449
00:22:59,500 --> 00:23:01,180
see unless something goes wrong.
看到它，除非有什么错误。

450
00:23:01,180 --> 00:23:02,470
200 meant OK.
200代表OK。

451
00:23:02,470 --> 00:23:04,390
404 meant file not found.
404代表文件未找到。

452
00:23:04,390 --> 00:23:07,300
400 means that something went wrong.
400代表有错误发生。

453
00:23:07,300 --> 00:23:10,210
I guess I didn't pass in a name as I was supposed to.
我猜我没有像预期的那样传入一个名字。

454
00:23:10,210 --> 00:23:14,080
But that's only because I was sort of blindly expecting this placeholder
但这只是因为我有点盲目地期望这个占位符

455
00:23:14,080 --> 00:23:14,780
to exist.
存在。

456
00:23:14,780 --> 00:23:18,440
So let me be a little smarter and code a little more defensively now as follows.
所以让我更聪明一点，现在用更防御性的代码来写，如下所示。

457
00:23:18,440 --> 00:23:19,400
Let me say this.
让我这么说。

458
00:23:19,400 --> 00:23:26,770
How about if there is a name parameter in the requests arguments,
如果请求参数中有name参数，

459
00:23:26,770 --> 00:23:29,440
then go ahead and create a variable called name,
那么就创建一个名为name的变量，

460
00:23:29,440 --> 00:23:33,280
set it equal to request.args, quote, unquote, "name".
把它设置为request.args，引号，反引号，“name”。

461
00:23:33,280 --> 00:23:35,740
So treat it as a dictionary with that key.
所以把它看成是带有那个键的字典。

462
00:23:35,740 --> 00:23:39,160
Else, if there is no name in the URL, let's
否则，如果URL中没有name，让我们

463
00:23:39,160 --> 00:23:41,750
just default this variable to being something sensible like,
把这个变量默认设置为一些合理的，比如，

464
00:23:41,750 --> 00:23:42,770
quote, unquote, "world".
引号，反引号，“world”。

465
00:23:42,770 --> 00:23:46,250
So, now, let's proactively, using some sort of "week one style"
所以，现在，让我们积极地，使用某种“第一周风格”

466
00:23:46,250 --> 00:23:48,980
conditional code, albeit in Python now from week six,
条件代码，尽管现在是来自第六周的Python代码，

467
00:23:48,980 --> 00:23:53,400
let's just check is name in the URL, if so grab its value.
让我们检查一下URL中是否有name，如果有就获取它的值。

468
00:23:53,400 --> 00:23:55,740
Otherwise, default to world instead.
否则，默认使用world。

469
00:23:55,740 --> 00:23:57,740
So I'm still going to leave this code as is,
所以，我仍然保留这段代码，

470
00:23:57,740 --> 00:24:00,920
passing in the placeholder for this template to get plugged in here.
传入这个模板的占位符，以便在这里插入。

471
00:24:00,920 --> 00:24:06,020
But, now, if I go back to the browser and I just reload without passing
但是，现在，如果我回到浏览器，并且只是刷新而没有传入，

472
00:24:06,020 --> 00:24:10,140
in name=David or anything else, now we have a sensible default.
如果使用 `name=David` 或者其他任何东西，现在我们就有了合理的默认值。

473
00:24:10,140 --> 00:24:16,460
And if I go back to my View source tab and reload, I'll see that I have hello,
如果我回到 "查看源代码" 选项卡并重新加载，我将看到 "hello"，

474
00:24:16,460 --> 00:24:17,760
world in this case.
在这种情况下是 "world"。

475
00:24:17,760 --> 00:24:23,000
However, if I go back up to that URL and do /?name=David, now we have David.
但是，如果我回到该 URL 并添加 `/?name=David`，现在我们就有 "David" 了。

476
00:24:23,000 --> 00:24:26,090
If I change the URL to be name=Carter, now we have Carter.
如果我将 URL 改为 `name=Carter`，现在我们就有 "Carter" 了。

477
00:24:26,090 --> 00:24:29,158
So, indeed, we do have the beginnings of something that's more dynamic.
所以，确实，我们已经开始拥有更加动态的东西了。

478
00:24:29,158 --> 00:24:30,950
Of course, this is a little tedious to have
当然，这样写 if 和 else 有一些繁琐，

479
00:24:30,950 --> 00:24:32,750
to write out this if and this else.
要写出这个 if 和 else。

480
00:24:32,750 --> 00:24:36,800
There's ways to condense this code to be a little tighter and a little faster
有一些方法可以压缩这段代码，使其更加紧凑，执行速度也更快，

481
00:24:36,800 --> 00:24:37,970
to actually implement.
以便实际实现。

482
00:24:37,970 --> 00:24:40,520
And, in fact, let me go ahead and propose that.
实际上，让我来提出建议。

483
00:24:40,520 --> 00:24:42,020
We just do this.
我们只需要这样做。

484
00:24:42,020 --> 00:24:45,200
Instead of treating args as a dictionary as
与其将 `args` 视为字典，

485
00:24:45,200 --> 00:24:48,080
we did with square brackets-- which can cause problems
就像我们用方括号那样，那样可能会导致问题，

486
00:24:48,080 --> 00:24:50,130
if that key does not exist.
如果该键不存在。

487
00:24:50,130 --> 00:24:52,670
In fact, let me go back to that version.
实际上，让我回到那个版本。

488
00:24:52,670 --> 00:24:56,720
Let me undo, undo, undo, whereby I'm just blindly
让我撤销，撤销，撤销，这样我就可以直接

489
00:24:56,720 --> 00:25:00,080
going into request.args to get name.
进入 `request.args` 获取 `name`。

490
00:25:00,080 --> 00:25:03,200
In fact, instead of just blindly indexing into this dictionary
实际上，与其直接索引这个字典，

491
00:25:03,200 --> 00:25:06,210
called args, which turns out we can do this instead.
叫做 `args`，我们其实可以这样做。

492
00:25:06,210 --> 00:25:09,560
Let me go ahead and say request.args.get,
让我来写 `request.args.get`，

493
00:25:09,560 --> 00:25:12,380
which is a function that comes with a dictionary,
这是一个字典自带的函数，

494
00:25:12,380 --> 00:25:15,290
and I can specify the name of the key that I want to get.
我可以指定想要获取的键的名称。

495
00:25:15,290 --> 00:25:19,100
And, by default, if there is no key called name in a dictionary,
默认情况下，如果字典中没有名为 `name` 的键，

496
00:25:19,100 --> 00:25:21,200
you're going to get back a default value of none,
你将获得一个默认值为 `None` 的值，

497
00:25:21,200 --> 00:25:24,020
which is kind of like Python's equivalent of null,
有点类似于 Python 中的 null，

498
00:25:24,020 --> 00:25:26,120
but it's none, capital N, in Python.
但在 Python 中，它是 `None`，大写 N。

499
00:25:26,120 --> 00:25:28,370
But if you want to give it a different default,
但如果你想给它一个不同的默认值，

500
00:25:28,370 --> 00:25:30,293
it's handy to know that this get function,
值得知道的是，这个 `get` 函数，

501
00:25:30,293 --> 00:25:32,210
which you can use with dictionaries in general
它可以用于一般的字典，

502
00:25:32,210 --> 00:25:34,940
can take a second argument, which will be the default
可以接受第二个参数，该参数将作为默认值，

503
00:25:34,940 --> 00:25:40,560
value that you do get back if, in fact, there is no such key called name.
你确实会获取该值，如果事实上没有名为 `name` 的键。

504
00:25:40,560 --> 00:25:43,680
So what this means is I can actually now keep all of the code the same,
所以这意味着我现在实际上可以保持所有代码不变，

505
00:25:43,680 --> 00:25:44,763
but it's a little tighter.
但它更简洁了。

506
00:25:44,763 --> 00:25:46,070
There's no if or else.
没有 if 或 else。

507
00:25:46,070 --> 00:25:49,760
I can go back to my other browser window, click reload,
我可以回到我的另一个浏览器窗口，点击重新加载，

508
00:25:49,760 --> 00:25:51,200
and it still works for Carter.
它仍然对 "Carter" 有效。

509
00:25:51,200 --> 00:25:54,380
But if I get rid of that, I can now have hello,
但如果我删除它，现在我可以有 "hello"，

510
00:25:54,380 --> 00:25:56,420
world still working just as before.
"world" 仍然像以前一样工作。

511
00:25:56,420 --> 00:25:59,870
And just to add one more potential point of confusion to the mix,
为了给这个混合增加另一个潜在的混淆点，

512
00:25:59,870 --> 00:26:05,990
it's a little dopey to say placeholder literally in your template,
在模板中直接说 "占位符" 有点傻，

513
00:26:05,990 --> 00:26:10,070
especially if you're going to be using multiple pairs of curly braces for one
特别是如果你要为一个变量使用多个花括号对，

514
00:26:10,070 --> 00:26:11,670
variable or another or another.
或者另一个，或者另一个。

515
00:26:11,670 --> 00:26:13,910
So better style would be to actually call
所以更好的风格是实际调用

516
00:26:13,910 --> 00:26:17,760
the variable what makes sense for what it is you're plugging in.
变量，它对你要插入的内容是有意义的。

517
00:26:17,760 --> 00:26:20,540
So hello, name, with the name in curly braces.
所以 "hello, name"，用花括号括起来的 `name`。

518
00:26:20,540 --> 00:26:24,080
This is-- I show this, though, because it gets a little confusing
我展示这个，是因为它会有点混乱，

519
00:26:24,080 --> 00:26:27,493
if your variable's called name, and that's still
如果你的变量名为 name，而且它仍然

520
00:26:27,493 --> 00:26:28,910
going to be the value you pass in.
将是你要传递的值。

521
00:26:28,910 --> 00:26:31,400
You're going to very often see in the world of Flask
你会经常在 Flask 的世界中看到

522
00:26:31,400 --> 00:26:35,540
this convention, where you literally write something equals something where
这种惯例，你实际上写 something 等于 something，其中

523
00:26:35,540 --> 00:26:37,580
the names there are exactly the same.
那里的名称完全相同。

524
00:26:37,580 --> 00:26:41,190
And the only thing to keep in mind here is that the name--
这里唯一需要注意的是名称——

525
00:26:41,190 --> 00:26:43,910
this is the name of this parameter.
这是这个参数的名称。

526
00:26:43,910 --> 00:26:46,670
This is the value of this parameter.
这是这个参数的值。

527
00:26:46,670 --> 00:26:50,210
The fact that everything seems to be called name in this program
事实上，在这个程序中，所有东西似乎都叫做 name

528
00:26:50,210 --> 00:26:53,630
is because these technical terms are colliding with the English word
是因为这些专业术语与我们所知的英语单词冲突

529
00:26:53,630 --> 00:26:57,420
that you and I know as name for my name, Carter's name, and so forth.
我们称之为 name，我的名字，Carter 的名字等等。

530
00:26:57,420 --> 00:27:01,700
But get past that only because it will be very common to literally see
但是要克服这一点，因为这将非常常见，你实际上会看到

531
00:27:01,700 --> 00:27:04,640
something equals something, where just for visual convenience
something 等于 something，仅仅是为了视觉上的方便

532
00:27:04,640 --> 00:27:08,510
the variable's name is exactly the value that you want to pass in.
变量的名称恰好是你想要传递的值。

533
00:27:08,510 --> 00:27:11,720
So that too here is conventional.
所以在这里也是惯例。

534
00:27:11,720 --> 00:27:13,220
All right, a little cryptic.
好吧，有点神秘。

535
00:27:13,220 --> 00:27:17,270
But common boilerplate that you'll start to see again and again.
但这是你会一遍又一遍看到的常见模板。

536
00:27:17,270 --> 00:27:19,490
Any questions now about this?
现在对这个有什么问题吗？

537
00:27:22,530 --> 00:27:23,220
No?
没有？

538
00:27:23,220 --> 00:27:26,400
OK, so let's make things a little more interesting and representative
好的，让我们让事情更有趣，更具代表性

539
00:27:26,400 --> 00:27:27,900
of a real-world app.
一个真实的应用程序。

540
00:27:27,900 --> 00:27:31,470
Let me propose that, now, we go about implementing
现在，让我建议我们去实现

541
00:27:31,470 --> 00:27:34,578
maybe a second template altogether.
也许是一个完全不同的第二个模板。

542
00:27:34,578 --> 00:27:36,120
In fact, let me go ahead and do this.
事实上，让我继续做这件事。

543
00:27:36,120 --> 00:27:39,750
It'd be nice if the human doesn't need to be technologically savvy enough
如果人类不需要足够的技术娴熟

544
00:27:39,750 --> 00:27:42,420
to say that, oh, if you want to be greeted by this website,
来说，哦，如果你想被这个网站问候，

545
00:27:42,420 --> 00:27:45,840
you have to literally change the URL yourself, type in name equals--
你必须自己更改 URL，输入 name 等于——

546
00:27:45,840 --> 00:27:46,560
no one does that.
没有人会那样做。

547
00:27:46,560 --> 00:27:49,620
That's just not how the web works in terms of user interface,
这仅仅不是 web 在用户界面方面的工作方式，

548
00:27:49,620 --> 00:27:52,050
but that is how browsers and servers do work.
但这就是浏览器和服务器的工作方式。

549
00:27:52,050 --> 00:27:54,488
But, of course, on the web, we almost always use forms.
当然，在 web 上，我们几乎总是使用表单。

550
00:27:54,488 --> 00:27:55,780
So let me go ahead and do this.
所以让我继续做这件事。

551
00:27:55,780 --> 00:28:00,570
Let me go into index.html, and let me get rid of just this hello, body.
让我进入 index.html，让我只去掉这个 hello，body。

552
00:28:00,570 --> 00:28:03,760
And, instead, let me actually create an HTML form.
并且，让我实际创建一个 HTML 表单。

553
00:28:03,760 --> 00:28:08,460
This form is going to use the get method if only so that we can
这个表单将使用 get 方法，只是为了我们可以

554
00:28:08,460 --> 00:28:10,830
see what's going on inside of the URL.
查看 URL 内部发生了什么。

555
00:28:10,830 --> 00:28:15,300
This form is going to have an input where I'm going to turn autocomplete
这个表单将有一个输入框，我将关闭自动完成功能

556
00:28:15,300 --> 00:28:17,010
off, just like last week.
就像上周一样。

557
00:28:17,010 --> 00:28:20,880
I'm going to do auto focus just to move the cursor there nicely by default.
我将使用 auto focus 来默认地将光标很好地移动到那里。

558
00:28:20,880 --> 00:28:25,840
Somewhat confusingly, I'm going to give this input a name of name
有点令人困惑的是，我将给这个输入框一个名为 name 的名字

559
00:28:25,840 --> 00:28:29,540
because I want Carter's name, my name, or someone else's human name.
因为我想要 Carter 的名字，我的名字，或者其他人的名字。

560
00:28:29,540 --> 00:28:31,780
But I'm going to give it placeholder text of,
但我将给它一个占位符文本，

561
00:28:31,780 --> 00:28:33,670
quote, unquote, "Name", capitalized, just
引号，引号，“Name”，大写，只是

562
00:28:33,670 --> 00:28:37,030
to be grammatically clear as to what we're prompting the user for.
为了语法上清晰地表明我们正在提示用户输入什么。

563
00:28:37,030 --> 00:28:39,775
And the type of this field is going to be text.
而且这个字段的类型将是文本。

564
00:28:39,775 --> 00:28:42,400
Although, that's the implied default if I don't give it a type.
虽然，如果我不给它一个类型，那就是隐含的默认值。

565
00:28:42,400 --> 00:28:45,790
I'm going to lastly have a button in this form, the type of which
最后，我将在这个表单中有一个按钮，它的类型是

566
00:28:45,790 --> 00:28:49,000
is submit so that the browser knows to submit this form.
提交按钮的作用是让浏览器知道要提交该表单。

567
00:28:49,000 --> 00:28:51,370
And the label I'm going to put on this button is Greet.
我要给这个按钮添加的标签是“问候”。

568
00:28:51,370 --> 00:28:53,245
So I'm going to type in my name, click Greet.
所以我将输入我的名字，然后点击“问候”。

569
00:28:53,245 --> 00:28:55,610
And I want to see hello, David or the like.
我希望看到“你好，大卫”或类似的文字。

570
00:28:55,610 --> 00:28:58,930
But I need to specify the action for this form.
但我需要指定这个表单的动作。

571
00:28:58,930 --> 00:29:02,120
And recall that, when we implemented "Google", quote, unquote,
还记得我们实现“谷歌”时，

572
00:29:02,120 --> 00:29:03,620
we did a little something like this.
我们做了一些类似的事情。

573
00:29:03,620 --> 00:29:08,080
Https://www.google.com/search, well, we're
https://www.google.com/search，嗯，我们

574
00:29:08,080 --> 00:29:09,530
not going to punt to Google today.
今天不会使用谷歌。

575
00:29:09,530 --> 00:29:12,200
We are implementing our own applications.
我们正在实现我们自己的应用程序。

576
00:29:12,200 --> 00:29:16,090
So if this were a search application, I could literally have an action
因此，如果这是一个搜索应用程序，我可以直接有一个动作

577
00:29:16,090 --> 00:29:19,750
of /search, but let's do something a little more semantically sensible.
为 /search，但让我们做一些语义上更合理的事情。

578
00:29:19,750 --> 00:29:22,810
Let's create our brand new route called /greet.
让我们创建一个名为 /greet 的全新路由。

579
00:29:22,810 --> 00:29:24,290
This is not the name of a folder.
这不是文件夹的名字。

580
00:29:24,290 --> 00:29:25,457
It's not the name of a file.
这不是文件的名字。

581
00:29:25,457 --> 00:29:30,040
It's more generically a path or a route that is now up to me to implement.
更笼统地说，它是一个路径或路由，现在由我来实现。

582
00:29:30,040 --> 00:29:33,580
If I go back, though, to this application and reload this page,
但是，如果我回到这个应用程序并重新加载这个页面，

583
00:29:33,580 --> 00:29:36,580
notice that I have the beginnings of a more user-friendly form
请注意，我有一个更加用户友好的表单的雏形

584
00:29:36,580 --> 00:29:38,420
that's asking me for this name.
它正在询问我的名字。

585
00:29:38,420 --> 00:29:41,560
However, if I do type in David and click Greet--
然而，如果我输入大卫并点击问候——

586
00:29:41,560 --> 00:29:43,880
I'll zoom in just a moment--
我放大一下——

587
00:29:43,880 --> 00:29:50,150
notice that the URL does change to /greet?name=David just like google.com
请注意，URL 确实更改为 /greet?name=David，就像 google.com 一样

588
00:29:50,150 --> 00:29:50,650
works.
起作用。

589
00:29:50,650 --> 00:29:53,560
But, of course, we're getting a 404 not found because I
但当然，我们得到了 404 未找到，因为我

590
00:29:53,560 --> 00:29:55,570
haven't implemented this route yet.
还没有实现这个路由。

591
00:29:55,570 --> 00:29:56,630
So let me zoom out.
所以让我缩小。

592
00:29:56,630 --> 00:29:58,270
Let me go back to VS Code.
让我回到 VS Code。

593
00:29:58,270 --> 00:30:03,610
Let me open app.py and make a little bit of a change there.
让我打开 app.py，并在那里做一些更改。

594
00:30:03,610 --> 00:30:08,530
Let me make a little bit of a change and say this in app.py.
让我做一些更改，并在 app.py 中说这句话。

595
00:30:08,530 --> 00:30:14,590
In app.py, instead of just getting the user's name and this default,
在 app.py 中，与其仅仅获取用户名和默认值，

596
00:30:14,590 --> 00:30:18,970
let's simplify the index route and just have it sole purpose in life
让我们简化索引路由，让它唯一的生命意义

597
00:30:18,970 --> 00:30:23,020
be to render index.html, the thing that contains the form.
就是渲染 index.html，它包含表单。

598
00:30:23,020 --> 00:30:28,090
I'm going to now, though, create a second route, so app.route, quote,
但是现在，我要创建一个第二个路由，所以 app.route，引号，

599
00:30:28,090 --> 00:30:29,410
unquote, "/greet".
引号，"/greet"。

600
00:30:29,410 --> 00:30:31,420
And I could call this route anything I want.
我可以随意命名这个路由。

601
00:30:31,420 --> 00:30:32,950
But greet seems sensible.
但“问候”似乎很合理。

602
00:30:32,950 --> 00:30:35,380
I'm going to call the function below it anything I want.
我要给下面的函数命名为我想要的任何名字。

603
00:30:35,380 --> 00:30:38,672
But, just to keep myself sane, I'm going to call it the same thing as the route
但是，为了保持清醒，我要给它和路由取同样的名字

604
00:30:38,672 --> 00:30:40,640
even though that's not strictly required.
即使这不是强制要求的。

605
00:30:40,640 --> 00:30:44,240
And then, in this route, I'm going to go ahead and do this.
然后，在这个路由中，我要继续做这件事。

606
00:30:44,240 --> 00:30:48,760
I'm going to create a variable called name, set it equal to request.args.get,
我要创建一个名为 name 的变量，将它设置为 request.args.get，

607
00:30:48,760 --> 00:30:52,570
quote, unquote, "name", then, quote, unquote, "world", so
引号，引号，“name”，然后，引号，引号，“world”，所以

608
00:30:52,570 --> 00:30:54,250
the exact same line as before.
这行代码与之前完全相同。

609
00:30:54,250 --> 00:30:59,200
And then I'm going to return render_template, which
然后我将返回 render_template，它

610
00:30:59,200 --> 00:31:00,970
is the function that comes with Flask.
是 Flask 附带的函数。

611
00:31:00,970 --> 00:31:05,740
I'm going to specify this time, though, render a template called greet.html--
不过，这次我要指定渲染一个名为 greet.html 的模板——

612
00:31:05,740 --> 00:31:08,980
which doesn't exist yet, but that's not going to be a hard problem to solve--
它还不存在，但这并不难解决——

613
00:31:08,980 --> 00:31:12,410
and pass in that variable.
并将该变量传递进去。

614
00:31:12,410 --> 00:31:15,160
So the last thing I need to do is this.
所以最后一步就是这个。

615
00:31:15,160 --> 00:31:17,950
And I'm going to cheat and copy and, in a moment,
我会作弊，复制，然后在一会儿

616
00:31:17,950 --> 00:31:22,820
paste the contents of index.html into a new file called greet.html as follows.
将index.html的内容粘贴到一个名为greet.html的新文件中，如下所示。

617
00:31:22,820 --> 00:31:25,300
Let me open up VS Code here in my other terminal.
让我在我的另一个终端中打开VS Code。

618
00:31:25,300 --> 00:31:31,750
Let me go ahead and write code templates/greet.html.
让我继续写代码templates/greet.html。

619
00:31:31,750 --> 00:31:35,530
Notice that I'm making sure to put the new file in the templates folder.
注意，我确保将新文件放到templates文件夹中。

620
00:31:35,530 --> 00:31:38,620
Or I could cd into it and then run the code command.
或者我可以cd到它里面，然后运行code命令。

621
00:31:38,620 --> 00:31:40,202
That's going to give me a new file.
这将会给我一个新文件。

622
00:31:40,202 --> 00:31:42,160
I'm going to hide my terminal, paste that code,
我要隐藏我的终端，粘贴该代码，

623
00:31:42,160 --> 00:31:43,660
and I'm going to get rid of the form.
我要去掉表单。

624
00:31:43,660 --> 00:31:46,202
And, frankly, I should've just copied and pasted this earlier
坦白地说，我应该早点复制粘贴

625
00:31:46,202 --> 00:31:49,900
because the only thing I'm going to put in greet.html is hello
因为我将在greet.html中放入的唯一东西是hello

626
00:31:49,900 --> 00:31:52,600
and then, in curly braces, my placeholder, which
然后，在花括号中，我的占位符，它

627
00:31:52,600 --> 00:31:54,950
we started to call name a moment ago.
我们刚才开始称之为名字。

628
00:31:54,950 --> 00:31:59,530
So, to recap if I go into my terminal again, if I type ls,
所以，回顾一下，如果我再次进入我的终端，如果我输入ls，

629
00:31:59,530 --> 00:32:00,940
I've still got app.py.
我仍然有app.py。

630
00:32:00,940 --> 00:32:02,180
I've still got templates.
我仍然有templates。

631
00:32:02,180 --> 00:32:06,340
But if I look inside of templates now, I've got two templates-- index.html
但是，如果我现在看看templates里面，我有两个模板——index.html

632
00:32:06,340 --> 00:32:10,510
and greet.html. index.html is the thing you see when you visit my website.
和greet.html。index.html是你访问我的网站时看到的东西。

633
00:32:10,510 --> 00:32:15,520
greet.html is the thing you see when you submit that form, it would seem.
greet.html是你提交该表单时看到的东西，看起来是。

634
00:32:15,520 --> 00:32:19,120
So, indeed, if I go back to my browser and hit back--
所以，事实上，如果我回到我的浏览器，然后点击后退——

635
00:32:19,120 --> 00:32:20,560
so I get back to that form.
所以我回到了那个表单。

636
00:32:20,560 --> 00:32:22,070
For good measure, I'm going to reload because I
为了保险起见，我要刷新，因为我

637
00:32:22,070 --> 00:32:24,560
want to make sure I have the latest version of everything.
想确保我有所有东西的最新版本。

638
00:32:24,560 --> 00:32:26,780
I'm going to now try typing my name David.
我现在要尝试输入我的名字David。

639
00:32:26,780 --> 00:32:27,720
I'll zoom in.
我要放大。

640
00:32:27,720 --> 00:32:31,820
You'll see that the URL will again change to /greet with the question mark
你会看到URL再次变为/greet，带有问号

641
00:32:31,820 --> 00:32:32,660
and my name.
和我的名字。

642
00:32:32,660 --> 00:32:36,800
But, hopefully, we now indeed don't see a 404
但是，希望我们现在确实不会看到404

643
00:32:36,800 --> 00:32:39,420
because the new route actually exists.
因为新路由实际上存在。

644
00:32:39,420 --> 00:32:41,990
And if I zoom out, right-click or Control-click
如果我缩小，右键单击或Control-单击

645
00:32:41,990 --> 00:32:44,390
and go to View page source, you still see
然后转到查看页面源代码，你仍然会看到

646
00:32:44,390 --> 00:32:49,100
what appears to be a HTML file just for me even though it was dynamically
看起来像一个只针对我的HTML文件，即使它是动态的

647
00:32:49,100 --> 00:32:52,280
generated instead.
生成的。

648
00:32:52,280 --> 00:32:56,450
All right, if you're on board that this seems to be a correct application
好的，如果你同意这看起来是一个正确的应用程序

649
00:32:56,450 --> 00:32:59,750
insofar as it does what I wanted it to do,
因为它做了我想要它做的事情，

650
00:32:59,750 --> 00:33:03,410
let's critique the design as we've been in the habit of doing.
让我们像我们一直以来的习惯那样，批判一下设计。

651
00:33:03,410 --> 00:33:10,390
I've now got three files, app.py, greet.html, and index.html.
我现在有三个文件，app.py、greet.html和index.html。

652
00:33:10,390 --> 00:33:13,930
What might you not like about the design of this web application
即使你以前从未做过这些事情，你可能不喜欢这个web应用程序的设计吗？

653
00:33:13,930 --> 00:33:16,210
even if you've never done this stuff before?
是的。

654
00:33:16,210 --> 00:33:17,108
Yeah.
[听不清]

655
00:33:17,108 --> 00:33:18,900
AUDIENCE: [INAUDIBLE]
是的，greet和index.html的内容相同，

656
00:33:20,250 --> 00:33:23,490
DAVID J. MALAN: Yeah, greet and index.html have the same contents,
除了主体中间的那一两行。

657
00:33:23,490 --> 00:33:26,827
except for that one or few lines in the middle of the body.
我的意思是，我实际上是复制粘贴的，这通常

658
00:33:26,827 --> 00:33:29,160
I mean, I literally copied and pasted, which, generally,
即使我偶尔在课堂上这样做以节省时间，

659
00:33:29,160 --> 00:33:31,327
even though I do it sometimes in class to save time,
如果我最终在我的文件中拥有相同的代码，

660
00:33:31,327 --> 00:33:34,410
if I end up with the same code in my files,


661
00:33:34,410 --> 00:33:37,440
that's probably cutting some corner and not the best design.
这可能是一种偷懒的做法，而且不是最好的设计。

662
00:33:37,440 --> 00:33:37,943
Why?
为什么？

663
00:33:37,943 --> 00:33:40,860
Well, what if I want to go in and change the title of this application
好吧，如果我想进入并更改此应用程序的标题

664
00:33:40,860 --> 00:33:42,625
from hello to something else.
从“hello”改为其他内容呢？

665
00:33:42,625 --> 00:33:43,500
It's not a huge deal.
这不是什么大问题。

666
00:33:43,500 --> 00:33:45,083
But I have to change it in two places.
但我必须在两个地方更改它。

667
00:33:45,083 --> 00:33:47,160
What if I've got some pretty CSS that I've added?
如果我添加了一些漂亮的 CSS 呢？

668
00:33:47,160 --> 00:33:49,380
And so I've got some CSS up here in one file.
因此我在一个文件中放了一些 CSS。

669
00:33:49,380 --> 00:33:52,140
I need to copy it into another file, change it both places.
我需要将它复制到另一个文件，并在两个地方都更改它。

670
00:33:52,140 --> 00:33:55,630
Generally, having duplication of anything is bad design.
一般来说，任何东西的重复都是糟糕的设计。

671
00:33:55,630 --> 00:33:58,770
So it turns out, there is a way to solve this.
事实证明，有一种方法可以解决这个问题。

672
00:33:58,770 --> 00:34:01,230
And this is one of the features that you really
而这正是你在使用 Web 框架时才能真正获得的功能之一，无论是 Flask 还是其他框架。

673
00:34:01,230 --> 00:34:04,890
start to get from a web framework, be it Flask or anything else.
你会得到解决这些问题的方案。

674
00:34:04,890 --> 00:34:07,469
You get solutions to these problems.
所以我现在要做的就是这个。

675
00:34:07,469 --> 00:34:08,969
So what I'm going to do now is this.
我要为这个应用程序创建一个第三个也是最后一个文件。

676
00:34:08,969 --> 00:34:12,179
I'm going to create a third and final file for this application
从复制我已经有的内容开始。

677
00:34:12,179 --> 00:34:15,510
by starting by copying what I have already.
让我回到我的终端窗口。

678
00:34:15,510 --> 00:34:19,290
Let me go back to my terminal window here.
让我在 templates 文件夹中创建一个名为 layout.html 的第三个模板。

679
00:34:19,290 --> 00:34:23,650
And let me create a third template in the templates folder called
它不必叫这个名字，但这是惯例。

680
00:34:23,650 --> 00:34:24,858
layout.html.
所以我在这里总是这样做。

681
00:34:24,858 --> 00:34:27,400
It doesn't have to be called that, but that's the convention.
当我创建这个文件并隐藏我的终端时，

682
00:34:27,400 --> 00:34:28,909
So I'll always do that here.
我要继续将所有内容复制粘贴。

683
00:34:28,909 --> 00:34:31,239
And, when I create this file and hide my terminal,
但我要进入这个名为 layout.html 的文件的主体中，

684
00:34:31,239 --> 00:34:34,010
I'm going to go ahead and copy-paste all of that content.
它与我所有其他文件中的内容完全相同。

685
00:34:34,010 --> 00:34:39,610
But I'm going to go inside of the body of this file, called layout.html,
我将使用稍微奇怪的语法。

686
00:34:39,610 --> 00:34:44,469
which is otherwise identical across all of my files.
这更多的是 Jinja 语法，一些其他人多年前想出来的。

687
00:34:44,469 --> 00:34:46,900
And what I'm going to do is use slightly weird syntax.
我要这样做。

688
00:34:46,900 --> 00:34:50,230
This is more of that Jinja syntax that some other humans came up
一个单花括号和一个百分号。

689
00:34:50,230 --> 00:34:51,130
with years ago.
我要指定“block”这个词，然后指定我想要为这个块起的名字。

690
00:34:51,130 --> 00:34:52,690
And I'm going to do this.
根据惯例，我会保持简单，

691
00:34:52,690 --> 00:34:55,449
Single curly brace and a percent sign.
只使用与我所在标签名称完全相同的内容，即 block body。

692
00:34:55,449 --> 00:35:00,332
I'm going to specify the word block and then any name I want for this block.
然后我在右花括号之前放一个百分号。

693
00:35:00,332 --> 00:35:02,290
And, by convention, I'm going to keep it simple
我在这里不需要任何东西。

694
00:35:02,290 --> 00:35:04,810
and just use the exact same thing as the name of the tag
所以乍一看这也会很奇怪。

695
00:35:04,810 --> 00:35:06,760
that I'm inside, so block body.
但这是一个惯例。

696
00:35:06,760 --> 00:35:10,570
And then I'm going to put a percent sign just before the close curly brace.
我将用百分号再加一个花括号，

697
00:35:10,570 --> 00:35:12,200
I don't need anything inside of this.
然后字面上写上“endblock”，中间没有空格。

698
00:35:12,200 --> 00:35:13,930
So this too's going to look weird at first glance.
我要打开并关闭一个不是 HTML 标签的东西。

699
00:35:13,930 --> 00:35:14,975
But it's a convention.
如果你愿意，它是一个 Jinja 标签。

700
00:35:14,975 --> 00:35:17,350
I'm going to do another curly brace with the percent sign
所以，再次，你会看到更多证据表明，世界上合理的人

701
00:35:17,350 --> 00:35:20,710
and then literally the word endblock, no space.
在语法上存在分歧，或者至少使用精神上类似的语法，

702
00:35:20,710 --> 00:35:24,160
And I'm going to open and close what isn't an HTML tag.
但不会与 HTML 已经使用的尖括号语法冲突。

703
00:35:24,160 --> 00:35:26,240
It's a Jinja tag, if you will.
长话短说，这是一种指定的方式，

704
00:35:26,240 --> 00:35:28,900
So, again, you see yet more evidence of reasonable humans
你想要一个占位符，而不仅仅是一个单个变量的值，

705
00:35:28,900 --> 00:35:30,760
in the world kind of disagreeing on syntax
你可以用它来替换一些内容，例如你标题中的所有内容。

706
00:35:30,760 --> 00:35:33,530
or at least using syntax that's similar in spirit
所以，这是一个创建布局或模板的好方法，

707
00:35:33,530 --> 00:35:38,530
but doesn't clash with the syntax, the angled brackets that HTML already uses.
你可以在其中插入任何内容。

708
00:35:38,530 --> 00:35:41,500
Long story short, this is a way of specifying
因此，如果你需要更改一个页面中不止一个地方的标题，

709
00:35:41,500 --> 00:35:45,460
that you want a placeholder, not just for a single variable's value
你只需要更改 layout.html 文件中的一处即可。

710
00:35:45,460 --> 00:35:47,420
but for a whole block of code.
但它适用于整块代码。

711
00:35:47,420 --> 00:35:48,700
Maybe it's simply a sentence.
也许它只是一句话。

712
00:35:48,700 --> 00:35:51,760
Maybe it's a whole-- a web form element or more.
也许它是一个完整的网络表单元素，或者更多。

713
00:35:51,760 --> 00:35:54,940
This is a placeholder now for a block of code.
现在这是一个代码块的占位符。

714
00:35:54,940 --> 00:36:00,410
And the way I can do this-- or the way I can use this template--
而我这样做的方式，或者我使用这个模板的方式，

715
00:36:00,410 --> 00:36:03,640
and this is where template now is getting all the more literal
而这正是模板现在变得越来越字面化的部分。

716
00:36:03,640 --> 00:36:05,410
in the sense of what templates do.
从模板的功能意义上来说。

717
00:36:05,410 --> 00:36:07,130
I'm going to go ahead and do this.
我将继续执行此操作。

718
00:36:07,130 --> 00:36:11,590
I'm going to go into my two other files, like greet.html.
我将进入我的另外两个文件，比如 greet.html。

719
00:36:11,590 --> 00:36:16,120
The only line that's different in this file vis-a-vis index.html
与 index.html 相比，该文件唯一的区别在于

720
00:36:16,120 --> 00:36:18,070
is which line number?
哪一行？

721
00:36:18,070 --> 00:36:20,857
9 is the only line that is unique.
第 9 行是唯一不同的行。

722
00:36:20,857 --> 00:36:22,190
So what I'm going to do is this.
所以我将这样做。

723
00:36:22,190 --> 00:36:24,040
I'm going to highlight that and copy it.
我将选中它并复制它。

724
00:36:24,040 --> 00:36:26,530
And then I'm going to delete everything else in this file
然后我将删除该文件中的所有其他内容

725
00:36:26,530 --> 00:36:27,850
because it's just redundant.
因为它们是冗余的。

726
00:36:27,850 --> 00:36:30,130
Everything I need is in layout.html.
我需要的一切都在 layout.html 中。

727
00:36:30,130 --> 00:36:34,030
At the top of this file, I'm going to use another curly brace and a percent
在这个文件的顶部，我将使用另一个花括号和一个百分号

728
00:36:34,030 --> 00:36:36,160
sign, but I'm going to use a special keyword that
符号，但我将使用一个特殊的关键字，

729
00:36:36,160 --> 00:36:38,470
comes with Jinja called extends.
它与 Jinja 一起使用，叫做 extends。

730
00:36:38,470 --> 00:36:42,070
And I'm going to specify in quotes here the name of the template
我将在引号中指定要扩展的模板名称。

731
00:36:42,070 --> 00:36:45,320
that I want to extend, so to speak.
也就是说，我想要扩展它。

732
00:36:45,320 --> 00:36:48,520
So this is an example of what's in computer science known as inheritance.
所以，这是一个计算机科学中被称为继承的概念的例子。

733
00:36:48,520 --> 00:36:53,800
I want to take everything from that layout and inherit from it
我想从那个布局中获取所有内容，并从它继承

734
00:36:53,800 --> 00:36:56,860
all of its lines but plug in some of my own,
它所有的行，但插入一些我自己的行，

735
00:36:56,860 --> 00:36:59,350
sort of from a parent-child relationship.
有点像父子关系。

736
00:36:59,350 --> 00:37:02,320
Inside of this file, now, I'm going to specify
现在，在这个文件内部，我将指定

737
00:37:02,320 --> 00:37:08,590
that the custom body that I want is this block body just like before.
我想要自定义的正文是这个 block body，就像以前一样。

738
00:37:08,590 --> 00:37:11,770
And then, down here, I'm going to preemptively say endblock just
然后，在这里，我将抢先说 endblock，只是

739
00:37:11,770 --> 00:37:13,750
to finish my thought in advance.
为了提前完成我的想法。

740
00:37:13,750 --> 00:37:18,340
And then, inside of this block body, I'm going to simply paste that line of code
然后，在这个 block body 内部，我将简单地粘贴那行代码

741
00:37:18,340 --> 00:37:20,350
that I Stole from the original version.
我从原始版本中“偷”来的那行代码。

742
00:37:20,350 --> 00:37:23,230
So I'll concede that this is pretty ugly.
我承认这看起来很丑陋。

743
00:37:23,230 --> 00:37:26,770
I've added three cryptic-looking lines, all of which
我添加了三行看起来很神秘的代码，它们都

744
00:37:26,770 --> 00:37:29,530
relate to Jinja templating, again, syntax
与 Jinja 模板有关，再次说明，语法

745
00:37:29,530 --> 00:37:32,770
that humans invented to give you the ability to write templates,
是由人类发明的，它让你有能力编写模板，

746
00:37:32,770 --> 00:37:33,730
or blueprints.
或者蓝图。

747
00:37:33,730 --> 00:37:37,480
But the point is that this single line, now line 5,
但重点是，这单行代码，现在是第 5 行，

748
00:37:37,480 --> 00:37:41,290
is going to get plugged into that template, called layout.html,
将被插入到那个名为 layout.html 的模板中，

749
00:37:41,290 --> 00:37:45,230
wherever that body block is meant to go.
无论 body 块应该放在哪里。

750
00:37:45,230 --> 00:37:47,230
Lastly, I'm going to go ahead and do this.
最后，我将继续执行此操作。

751
00:37:47,230 --> 00:37:53,022
The only lines in index.html that are unique are these here, 9, 10, 11, 12.
index.html 中唯一不同的行是这些，第 9 行、第 10 行、第 11 行和第 12 行。

752
00:37:53,022 --> 00:37:55,480
So I'm going to highlight those and delete everything else.
所以我将选中它们并删除所有其他内容。

753
00:37:55,480 --> 00:37:59,890
And then I'm going to do the exact same thing, extends layout.html at the top
然后我将执行完全相同的事情，在文件顶部使用 extends layout.html

754
00:37:59,890 --> 00:38:03,730
of this file, then, below that, block body.
然后，在它下面是 block body。

755
00:38:03,730 --> 00:38:07,420
Inside of the block body, I'm going to then say endblock at the end.
在 block body 内部，我将在最后说 endblock。

756
00:38:07,420 --> 00:38:10,870
And, in the middle of that, I'm going to paste those lines of code.
在中间，我将粘贴那些代码行。

757
00:38:10,870 --> 00:38:14,350
Just stylistically, I'm going to indent them just so I'm super clear visually
仅仅从样式上来说，我会将它们缩进，这样视觉上就能非常清晰

758
00:38:14,350 --> 00:38:16,060
on what is inside of what.
哪些东西包含着哪些东西。

759
00:38:16,060 --> 00:38:17,290
But that's it.
就这样。

760
00:38:17,290 --> 00:38:18,310
So ugly?
所以很丑吗？

761
00:38:18,310 --> 00:38:21,510
Yes, but, as soon as your web pages get longer and longer,
是的，但是，一旦你的网页越来越长，

762
00:38:21,510 --> 00:38:23,500
this ends up being a drop in the bucket.
这就会变得微不足道。

763
00:38:23,500 --> 00:38:27,090
It's three ugly-looking lines relative to a lot of HTML
相对于大量可能要插入并为你的应用定制的 HTML 代码来说，这只是三行难看的代码

764
00:38:27,090 --> 00:38:30,100
that you might be plugging in and customizing for your application.
而已。

765
00:38:30,100 --> 00:38:32,340
So now index.html looks like this.
所以现在 index.html 就像这样。

766
00:38:32,340 --> 00:38:34,390
greet.html looks like this.
greet.html 就像这样。

767
00:38:34,390 --> 00:38:38,910
And the only way they differ is the actual contents of that block of code.
它们唯一的区别就是那段代码块的实际内容。

768
00:38:38,910 --> 00:38:42,900
layout.html is the main blueprint that's going to govern
layout.html 是主要的蓝图，它将支配

769
00:38:42,900 --> 00:38:44,760
what the whole website looks like.
整个网站的外观。

770
00:38:44,760 --> 00:38:46,410
I can change the title in one place.
我可以在一个地方改变标题。

771
00:38:46,410 --> 00:38:49,020
I can add some pretty CSS in one place and so forth.
我可以在一个地方添加一些漂亮的 CSS 代码等等。

772
00:38:49,020 --> 00:38:51,090
It's going to apply to each of those files.
它将应用于每个文件。

773
00:38:51,090 --> 00:38:52,980
And, now, somewhat underwhelmingly perhaps,
现在，也许有点令人失望，

774
00:38:52,980 --> 00:38:57,570
if I go back to this application and I click reload,
如果我回到这个应用程序并点击重新加载，

775
00:38:57,570 --> 00:39:00,970
nothing is different because it still just works.
没什么变化，因为它仍然正常工作。

776
00:39:00,970 --> 00:39:03,840
But I've made arguably a better design because now,
但我可以说设计更好了，因为现在，

777
00:39:03,840 --> 00:39:07,290
when I change things to Carter here or I get rid of it altogether
当我在这里将东西改为 Carter 或完全去掉它时

778
00:39:07,290 --> 00:39:09,120
and just visit the default--
并且仅仅访问默认的--

779
00:39:09,120 --> 00:39:12,510
rather, if I just visit slash there, I'll get the form.
或者，如果我只是访问那里的斜杠，我会得到表单。

780
00:39:12,510 --> 00:39:15,390
I've at least handled the situation where--
我至少处理了这种情况--

781
00:39:15,390 --> 00:39:18,060
I've eliminated the situation where I've just copied and pasted
我消除了仅仅复制粘贴的情况

782
00:39:18,060 --> 00:39:20,570
the same boilerplate code.
相同的样板代码。

783
00:39:20,570 --> 00:39:24,130
So odds are someone like Google is doing something like this.
所以，很可能像 Google 这样的公司正在做类似的事情。

784
00:39:24,130 --> 00:39:27,100
It's probably fancier certainly than this example.
当然，它可能比这个例子更复杂。

785
00:39:27,100 --> 00:39:30,670
But any time you search for something on Google, generally, the top of the page
但是，无论何时你在 Google 上搜索东西，一般来说，页面的顶部

786
00:39:30,670 --> 00:39:31,337
looks the same.
看起来都一样。

787
00:39:31,337 --> 00:39:33,170
Maybe the bottom of the page looks the same.
也许页面的底部看起来也一样。

788
00:39:33,170 --> 00:39:34,930
There's maybe some ads always at the top.
也许顶部总是有一些广告。

789
00:39:34,930 --> 00:39:36,710
And then there's 10 search results.
然后有 10 个搜索结果。

790
00:39:36,710 --> 00:39:40,420
So, probably, what they've done is they have some template that looks roughly
所以，他们可能已经做了一些模板，看起来大致

791
00:39:40,420 --> 00:39:42,730
like this with all of the boilerplate stuff
像这样，包含所有他们希望每个用户在每个搜索结果页面上看到的样板代码

792
00:39:42,730 --> 00:39:45,640
that they want every human to see on every page of search results.
。

793
00:39:45,640 --> 00:39:50,080
And then they're just somehow customizing the block--
然后他们只是以某种方式定制了代码块--

794
00:39:50,080 --> 00:39:53,680
a block of code somewhere there in the middle.
位于中间的某段代码。

795
00:39:53,680 --> 00:40:01,040
All right, questions on any of this actual templating technique?
好的，对任何实际的模板技术有什么问题吗？

796
00:40:01,040 --> 00:40:02,690
Anything at all?
任何问题都可以？

797
00:40:02,690 --> 00:40:05,000
All right, how about another question about design?
好的，关于设计还有其他问题吗？

798
00:40:05,000 --> 00:40:08,690
If I go back to this URL here and I search for something like David,
如果我回到这里这个 URL 并搜索像 David 这样的东西，

799
00:40:08,690 --> 00:40:12,320
it's not that big a deal that it ends up in the URL.
它最终出现在 URL 中并不是什么大问题。

800
00:40:12,320 --> 00:40:15,890
And, in fact, what's nice about HTTP parameters ending up in the URL
事实上，HTTP 参数最终出现在 URL 中的好处是，

801
00:40:15,890 --> 00:40:18,260
is that URLs are therefore stateful.
URL 因此具有状态。

802
00:40:18,260 --> 00:40:21,560
If you copy this URL and paste it into an email,
如果你复制此 URL 并将其粘贴到电子邮件中，

803
00:40:21,560 --> 00:40:25,770
assuming the web server is still up and running at that URL, it will just work.
假设 Web 服务器仍然在那个 URL 上运行，它就会正常工作。

804
00:40:25,770 --> 00:40:27,530
And the human to whom you send that link,
而你发送该链接的人，

805
00:40:27,530 --> 00:40:30,020
they will see David or Carter or whatever name's
他们会看到大卫或卡特，或者任何名字

806
00:40:30,020 --> 00:40:32,570
actually in that form, which may be as useful behavior.
实际上以这种形式，这可能是一种有用的行为。

807
00:40:32,570 --> 00:40:34,827
Not so much for this application, but imagine now
这对这个应用来说意义不大，但现在想象一下

808
00:40:34,827 --> 00:40:37,410
that you want to send someone a link of Google search results.
你想给某人发送一个谷歌搜索结果的链接。

809
00:40:37,410 --> 00:40:42,020
It's a good thing that Google puts q=cats or dogs or birds or whatever
谷歌将 q=cats 或 dogs 或 birds 等等放在 URL 中是一件好事

810
00:40:42,020 --> 00:40:45,260
in the URL because then the URL itself is stateful.
在 URL 中，因为这样 URL 本身就具有状态性。

811
00:40:45,260 --> 00:40:47,750
What you see is what the recipient will see
你看到的就是接收者会看到的内容

812
00:40:47,750 --> 00:40:52,070
because all of the inputs of the server that's requisite is in that URL.
因为服务器所需的所有输入都在该 URL 中。

813
00:40:52,070 --> 00:40:54,650
But suppose that this form field, if I go back,
但假设这个表单字段，如果我返回，

814
00:40:54,650 --> 00:41:01,890
wasn't asking for my name but my credit card number or my password up here.
不是询问我的姓名，而是询问我的信用卡号码或密码。

815
00:41:01,890 --> 00:41:04,170
That should start to rub you the wrong way because it
这应该让你感到不舒服，因为

816
00:41:04,170 --> 00:41:08,190
feels like no good will come from exposing private information in the URL
感觉在 URL 中暴露私密信息不会带来任何好处

817
00:41:08,190 --> 00:41:10,710
because if you have a nosy sibling look over your shoulder.
因为如果你有一个爱管闲事兄弟姐妹从你背后偷看。

818
00:41:10,710 --> 00:41:11,820
There it is in your search history.
它就在你的搜索历史记录中。

819
00:41:11,820 --> 00:41:14,790
A roommate goes through your autocomplete and finds the data there.
室友会浏览你的自动完成并找到数据。

820
00:41:14,790 --> 00:41:17,370
Or if you do, for whatever reason, copy-paste it,
或者出于任何原因，你复制粘贴它，

821
00:41:17,370 --> 00:41:21,270
you're accidentally including private information in these URLs.
你就会无意中将私人信息包含在这些 URL 中。

822
00:41:21,270 --> 00:41:25,110
So I said last week that there is an alternative to sending things
所以上周我说过，有一种替代方法可以发送东西

823
00:41:25,110 --> 00:41:28,290
in the URL and that alternative is to use something
在 URL 中，这种替代方法是使用一些东西

824
00:41:28,290 --> 00:41:31,500
that's not called get but a verb in the world of HTTP
它不叫 get，而是在 HTTP 世界中称为动词

825
00:41:31,500 --> 00:41:33,760
that's called post instead.
叫做 post。

826
00:41:33,760 --> 00:41:35,850
And it's actually a relatively simple change.
这实际上是一个相对简单的改变。

827
00:41:35,850 --> 00:41:42,420
If I go into index.html, I can simply change the method from get to post.
如果我进入 index.html，我可以简单地将方法从 get 更改为 post。

828
00:41:42,420 --> 00:41:44,700
Get is the default. Post is an alternative.
Get 是默认值。Post 是一种替代方法。

829
00:41:44,700 --> 00:41:47,970
Even though, in some contexts, you'll see capitals, in HTML,
尽管在某些情况下你会看到大写字母，但在 HTML 中，

830
00:41:47,970 --> 00:41:51,690
it should be lowercase, another example of left hand not talking to right.
它应该是小写字母，这是左脚不跟右脚走的另一个例子。

831
00:41:51,690 --> 00:41:56,460
But, in this case, if I go now to my other tab with the browser,
但在这个例子中，如果我现在使用浏览器进入另一个标签页，

832
00:41:56,460 --> 00:41:59,700
reload the page because I want to get the latest version of the form,
重新加载页面，因为我想获取表单的最新版本，

833
00:41:59,700 --> 00:42:01,380
if I now type David--
如果我现在输入大卫 --

834
00:42:01,380 --> 00:42:06,000
and I'll zoom in-- before hitting Enter, if you watch the URL now,
我将放大 - 在点击回车键之前，如果你现在观察 URL，

835
00:42:06,000 --> 00:42:12,030
you should not see that ?name=David is up there,
你应该看不到 ?name=David 在那里，

836
00:42:12,030 --> 00:42:14,250
nor would be your credit card or your password.
你的信用卡或密码也不会在那里。

837
00:42:14,250 --> 00:42:16,650
Unfortunately, we're seeing another HTTP status
不幸的是，我们看到了另一个 HTTP 状态

838
00:42:16,650 --> 00:42:20,130
code we haven't seen yet, 405, Method Not Allowed.
代码，我们还没见过，405，方法不允许。

839
00:42:20,130 --> 00:42:21,160
Well, why is that?
为什么呢？

840
00:42:21,160 --> 00:42:23,880
That's because now that I fully control the web server,
那是因为我现在完全控制了 Web 服务器，

841
00:42:23,880 --> 00:42:27,060
I need to tell the web server that I do want to support not just get
我需要告诉 Web 服务器，我不仅要支持 get

842
00:42:27,060 --> 00:42:29,520
which is the default but post as well.
这是默认的，而且还要支持 post。

843
00:42:29,520 --> 00:42:31,815
The method the user is using is not supported.
用户使用的方法不支持。

844
00:42:31,815 --> 00:42:33,690
So this is an easy fix even though it's going
所以这是一个简单的修复，尽管它将

845
00:42:33,690 --> 00:42:35,280
to look a little cryptic at first.
最初看起来有点神秘。

846
00:42:35,280 --> 00:42:40,530
If you want your greet method to support not just get but post,
如果你希望你的 greet 方法不仅支持 get，还支持 post，

847
00:42:40,530 --> 00:42:43,990
you can specify another argument to this route function.
你可以为这个路由函数指定另一个参数。

848
00:42:43,990 --> 00:42:49,050
So the default is literally this, methods= and then in square brackets,
所以默认值实际上是这个，methods= 然后在方括号中，

849
00:42:49,050 --> 00:42:50,640
quote, unquote, "GET".
引号，引号，“GET”。

850
00:42:50,640 --> 00:42:51,690
So what is this?
这是什么？

851
00:42:51,690 --> 00:42:56,490
Methods is apparently a named argument being passed into the route function.
显然，Methods 是一个传递给路由函数的命名参数。

852
00:42:56,490 --> 00:42:58,620
I claim its default value is this.
我断言它的默认值是这个。

853
00:42:58,620 --> 00:43:01,500
What do the square brackets indicate in Python?
在 Python 中，方括号表示什么？

854
00:43:01,500 --> 00:43:02,220
Not a dictionary.
不是字典。

855
00:43:02,220 --> 00:43:03,860
Square brackets.
方括号。

856
00:43:03,860 --> 00:43:07,700
A list, so it's a list of strings or strs in this case.
一个列表，所以它是一个字符串列表，或者在本例中是 strs。

857
00:43:07,700 --> 00:43:09,288
This is the implicit default.
这是隐式默认值。

858
00:43:09,288 --> 00:43:10,580
So you don't have to type this.
所以你不用输入这个。

859
00:43:10,580 --> 00:43:13,560
It's just what works out of the box automatically.
它就是开箱即用的自动功能。

860
00:43:13,560 --> 00:43:16,250
But if you want to change this from get to post,
但如果你想将其从 get 更改为 post，

861
00:43:16,250 --> 00:43:20,150
you have to include methods equals a list of the methods
你必须包含方法等于方法列表

862
00:43:20,150 --> 00:43:21,650
that you do want to support.
你想要支持的方法。

863
00:43:21,650 --> 00:43:24,350
For another time, there's other HTTP methods.
还有其他 HTTP 方法。

864
00:43:24,350 --> 00:43:25,280
There's delete.
有删除。

865
00:43:25,280 --> 00:43:27,452
There's put.
有更新。

866
00:43:27,452 --> 00:43:29,660
Those are the two biggies that you might use as well.
这两个是你可以使用的两个大方法。

867
00:43:29,660 --> 00:43:32,930
Those are generally not supported as easily in the world of browsers,
在浏览器世界中，这些通常并不容易支持，

868
00:43:32,930 --> 00:43:34,910
but get and post certainly are.
但 get 和 post 确实可以。

869
00:43:34,910 --> 00:43:37,340
If you wanted to support both for whatever reason,
如果你想出于任何原因支持两者，

870
00:43:37,340 --> 00:43:40,460
you can literally have a comma separated list of those methods instead.
你可以简单地用逗号分隔这些方法的列表。

871
00:43:40,460 --> 00:43:42,770
But we don't really need both for privacy's sake.
但出于隐私考虑，我们不需要两者。

872
00:43:42,770 --> 00:43:44,720
I claim I'm only going to use post now.
我声称我现在只打算使用 post。

873
00:43:44,720 --> 00:43:47,930
So now if I go back to my other tab, go back
所以现在如果我回到另一个标签页，回到

874
00:43:47,930 --> 00:43:51,480
to the form, reload to make sure everything is as expected,
表格，重新加载以确保一切如预期一样，

875
00:43:51,480 --> 00:43:57,980
and now type in David and zoom in, you won't see my name in the URL.
现在输入 David 并放大，你不会在 URL 中看到我的名字。

876
00:43:57,980 --> 00:44:02,060
But you will-- or you won't see it-- oh, good, not intended.
但你会——或者你不会看到它——哦，很好，不是故意这样。

877
00:44:02,060 --> 00:44:04,840
But nor will you see it even in the body of the web page.
而且你甚至不会在网页主体中看到它。

878
00:44:04,840 --> 00:44:06,490
So it's super secure.
所以它非常安全。

879
00:44:06,490 --> 00:44:09,250
Why?
为什么？

880
00:44:09,250 --> 00:44:12,720
I screwed up, but why?
我搞砸了，但为什么？

881
00:44:12,720 --> 00:44:13,740
Yes.
是的。

882
00:44:13,740 --> 00:44:15,570
AUDIENCE: [INAUDIBLE]
听众：[听不见]

883
00:44:17,770 --> 00:44:19,660
DAVID J. MALAN: Yes, so good intuition.
DAVID J. MALAN：是的，很好的直觉。

884
00:44:19,660 --> 00:44:22,960
Even if you knew that before, you might think through rationally,
即使你之前就知道，你可能也会理性地思考，

885
00:44:22,960 --> 00:44:24,460
how might this be--
这可能是——

886
00:44:24,460 --> 00:44:26,180
why might this be behaving this way?
为什么它会这样表现？

887
00:44:26,180 --> 00:44:32,770
Well, if I go into app.py, it seems that if world is the value of the name
好吧，如果我进入 app.py，看起来如果 world 是名字的值

888
00:44:32,770 --> 00:44:36,670
placeholder, well, it must be the case that there is no name
占位符，那么一定不存在名字

889
00:44:36,670 --> 00:44:39,980
key in request.args in this case.
在本例中，request.args 中的键。

890
00:44:39,980 --> 00:44:42,520
However, there's an alternative to request.args,
但是，request.args 还有一个替代方案，

891
00:44:42,520 --> 00:44:44,320
and it's called request.form.
它叫做 request.form。

892
00:44:44,320 --> 00:44:48,880
This is another example of visible and hidden being opposites of one another,
这是可见和隐藏相互对立的另一个例子，

893
00:44:48,880 --> 00:44:51,550
request.args and request.form, at least for me,
request.args 和 request.form，至少对我来说，

894
00:44:51,550 --> 00:44:54,380
are not obvious mappings to GET and POST, respectively.
不是对 GET 和 POST 的明显映射。

895
00:44:54,380 --> 00:44:56,270
But that's what the Flask folks did.
但这就是 Flask 开发人员所做的。

896
00:44:56,270 --> 00:44:59,770
And so the simple fix now, if I go back to VS Code,
因此，简单的解决方法是，如果我回到 VS Code，

897
00:44:59,770 --> 00:45:04,030
is to change request.args to request.form
将 request.args 更改为 request.form

898
00:45:04,030 --> 00:45:07,750
if you want to use post instead of get.
如果你想使用 post 而不是 get。

899
00:45:07,750 --> 00:45:12,440
This is a weird misnomer because they're both coming from forms,
这是一个奇怪的误称，因为它们都来自表单，

900
00:45:12,440 --> 00:45:14,410
whether you're using GET or POST.
无论您使用 GET 还是 POST。

901
00:45:14,410 --> 00:45:16,930
But this is what some folks decided.
但这就是一些人的决定。

902
00:45:16,930 --> 00:45:20,990
So let me go back to my browser, go back to the original form, reload
所以让我回到我的浏览器，回到原来的表单，重新加载

903
00:45:20,990 --> 00:45:24,530
to make sure I get the fresh HTML, type in my name now, David,
以确保我得到最新的 HTML，现在输入我的名字，大卫，

904
00:45:24,530 --> 00:45:26,510
zoom in, and click Greet.
放大，然后点击问候。

905
00:45:26,510 --> 00:45:29,600
And, this time, you won't see my name in the URL,
而且，这次，你不会在 URL 中看到我的名字，

906
00:45:29,600 --> 00:45:33,000
but you should see it in the body of the page.
但你应该在页面的主体中看到它。

907
00:45:33,000 --> 00:45:35,300
So we've achieved some form of privacy, if you will.
所以，如果你愿意，我们已经实现了一些隐私。

908
00:45:35,300 --> 00:45:39,125
Better applied to things like credit card numbers, passwords, and the like.
更适用于信用卡号码、密码等。

909
00:45:39,125 --> 00:45:41,420
Phew, other questions?
呼，还有其他问题吗？

910
00:45:41,420 --> 00:45:43,160
On any of this thus far?
到目前为止，对这些有任何疑问吗？

911
00:45:45,910 --> 00:45:47,980
Anything yet?
有什么问题吗？

912
00:45:47,980 --> 00:45:50,230
No, all right, yes, in the middle.
没有，好的，是的，在中间。

913
00:45:50,230 --> 00:45:54,472
AUDIENCE: [INAUDIBLE] post and get, the request [INAUDIBLE]??
观众：[听不清] post 和 get，请求[听不清]？

914
00:46:04,797 --> 00:46:06,130
DAVID J. MALAN: A good question.
大卫·J·马兰：一个好问题。

915
00:46:06,130 --> 00:46:10,180
To repeat if you were supporting both GET and POST,
再说一次，如果你同时支持 GET 和 POST，

916
00:46:10,180 --> 00:46:13,210
should we have a second line that's also checking request.args?
我们是否应该添加第二行来检查 request.args？

917
00:46:13,210 --> 00:46:14,500
Yes, if you were.
是的，如果你那样做了。

918
00:46:14,500 --> 00:46:18,440
I, though, decided, at the last minute, only to support POST not GET.
不过，我在最后一刻决定只支持 POST，不支持 GET。

919
00:46:18,440 --> 00:46:19,940
So I don't have to bother with that.
所以我不必为此烦恼。

920
00:46:19,940 --> 00:46:23,380
But your question's a perfect segue to a final example of this Hello application
但你的问题是完美地引入了这个 Hello 应用的最后一个示例

921
00:46:23,380 --> 00:46:27,160
where you can actually consolidate different types of functionality
在那里，你实际上可以将不同类型的功能

922
00:46:27,160 --> 00:46:28,490
into individual routes.
合并到各个路由中。

923
00:46:28,490 --> 00:46:28,990
Why?
为什么？

924
00:46:28,990 --> 00:46:31,240
Well, at the moment, this application is super simple.
好吧，目前，这个应用程序非常简单。

925
00:46:31,240 --> 00:46:34,090
It's literally got one form and then one resulting page.
它实际上只有一个表单，然后是一个结果页面。

926
00:46:34,090 --> 00:46:37,810
But it's implemented, therefore, with a pair of routes, a pair of functions.
但它是用一对路由，一对函数实现的。

927
00:46:37,810 --> 00:46:39,800
No big deal for small applications.
对于小型应用程序来说，没什么大不了的。

928
00:46:39,800 --> 00:46:41,975
But if you imagine a more complicated application,
但如果你想象一个更复杂的应用程序，

929
00:46:41,975 --> 00:46:44,350
be it Google or anything else that has many different web
无论是谷歌还是其他任何拥有很多不同网页的网站

930
00:46:44,350 --> 00:46:47,020
forms on different pages, it's a little annoying
表单在不同的页面上，这有点令人讨厌

931
00:46:47,020 --> 00:46:51,257
if every form needs to separate routes if only because you now
如果每个表单都需要单独的路由，仅仅因为你现在

932
00:46:51,257 --> 00:46:53,590
have to keep track of literally twice as many functions.
必须跟踪实际上两倍数量的函数。

933
00:46:53,590 --> 00:46:55,382
Your colleagues, your teaching fellow needs
你的同事，你的助教需要

934
00:46:55,382 --> 00:46:57,100
to know which one is related to which.
知道哪个函数对应哪个路由。

935
00:46:57,100 --> 00:46:58,930
So there's something to be said design-wise
所以，从设计的角度来看，

936
00:46:58,930 --> 00:47:02,770
about consolidating related functionality into one single route
将相关功能合并到一个单一的路由中

937
00:47:02,770 --> 00:47:04,270
so that everything is together.
以便将所有内容放在一起。

938
00:47:04,270 --> 00:47:07,945
Well, we can achieve that relatively simply as follows.
好吧，我们可以通过以下方法相对简单地实现。

939
00:47:07,945 --> 00:47:13,850
So let me go ahead and completely eliminate this greet route and simply
所以让我继续完全删除这个 greet 路由，并且只

940
00:47:13,850 --> 00:47:16,310
have everything exist in the /route.
让所有内容都存在于 /route 中。

941
00:47:16,310 --> 00:47:19,310
And I'm going to go ahead and highlight and cut these lines out of there
我要继续将这些行高亮显示并剪切掉

942
00:47:19,310 --> 00:47:20,280
altogether.
全部。

943
00:47:20,280 --> 00:47:24,860
But if I want my single /route to support multiple methods,
但如果我想要我的单个 /route 支持多种方法，

944
00:47:24,860 --> 00:47:30,290
I indeed need to use methods equals and then, in square brackets, GET and POST.
我确实需要使用 methods 等于，然后，在方括号中，GET 和 POST。

945
00:47:30,290 --> 00:47:31,260
Order doesn't matter.
顺序无关紧要。

946
00:47:31,260 --> 00:47:33,350
But I'll keep them alphabetical in this case.
但我会在本例中按字母顺序排列它们。

947
00:47:33,350 --> 00:47:38,540
Inside of my index route, I need to in advance is the user visiting me
在我的索引路由内部，我需要提前知道用户是否访问我

948
00:47:38,540 --> 00:47:39,980
via GET or POST?
通过 GET 还是 POST？

949
00:47:39,980 --> 00:47:42,470
Because if it's via GET, I want them to see the form.
因为如果通过 GET，我希望他们看到表单。

950
00:47:42,470 --> 00:47:45,440
If it's via POST, I want to process, the form, that is,
如果通过 POST，我希望处理表单，也就是说，

951
00:47:45,440 --> 00:47:47,150
do something with the user's input.
对用户的输入进行一些操作。

952
00:47:47,150 --> 00:47:49,010
So it turns out it's relatively simple.
事实证明，这相对简单。

953
00:47:49,010 --> 00:47:55,470
If request.method equals equals "POST", then I can do the following.
如果 request.method 等于 "POST"，那么我可以执行以下操作。

954
00:47:55,470 --> 00:47:59,120
So you can literally check the request object, which comes with Flask,
因此，你可以直接检查 request 对象，它随 Flask 一起提供，

955
00:47:59,120 --> 00:48:02,810
to figure out, was the word GET or the word POST in that virtual envelope?
以确定那个虚拟信封中是 GET 还是 POST？

956
00:48:02,810 --> 00:48:05,790
And, depending on the answer, you can do something like this.
然后，根据答案，你可以执行类似的操作。

957
00:48:05,790 --> 00:48:09,260
I can paste those lines from earlier, whereby I get
我可以粘贴前面提到的那些行，其中我获得

958
00:48:09,260 --> 00:48:13,100
the variable name from request.form.
request.form 中的变量名。

959
00:48:13,100 --> 00:48:17,330
And then I render the template greet.html, passing in that name.
然后我渲染 greet.html 模板，传入那个名字。

960
00:48:17,330 --> 00:48:18,800
Otherwise, you know what?
否则，你知道吗？

961
00:48:18,800 --> 00:48:22,200
I could just do else, return the template itself.
我可以直接使用 else，返回模板本身。

962
00:48:22,200 --> 00:48:27,410
So if the method is POST, go ahead and process the form just as we did before.
因此，如果方法是 POST，继续处理表单，就像我们之前做的那样。

963
00:48:27,410 --> 00:48:31,790
Else, go ahead and just render the index template which contains the form.
否则，继续渲染包含表单的 index 模板。

964
00:48:31,790 --> 00:48:33,710
Strictly speaking, I don't even need the else.
严格来说，我甚至不需要 else。

965
00:48:33,710 --> 00:48:36,380
I can get rid of that, just to tighten this up a little bit,
我可以去掉它，只是为了稍微压缩一下代码，

966
00:48:36,380 --> 00:48:38,010
and unindent my last line.
并取消缩进最后一行。

967
00:48:38,010 --> 00:48:38,510
Why?
为什么？

968
00:48:38,510 --> 00:48:42,860
Because recall that, from C, from Python, as soon as you return a value,
因为回想一下，从 C，从 Python，一旦你返回一个值，

969
00:48:42,860 --> 00:48:46,045
nothing in that function is going to get executed thereafter.
该函数中没有任何内容将在之后执行。

970
00:48:46,045 --> 00:48:48,170
So you might as well kind of tighten up the code so
因此，你不妨压缩一下代码，这样

971
00:48:48,170 --> 00:48:52,770
that you don't bother adding undue indentation if not needed.
你就不必在不需要的情况下添加多余的缩进。

972
00:48:52,770 --> 00:48:57,810
So notice, now, if I go back to my browser, reload here,
所以请注意，现在，如果我回到我的浏览器，在这里重新加载，

973
00:48:57,810 --> 00:48:59,360
it's not going to work yet.
它还不能工作。

974
00:48:59,360 --> 00:49:01,640
But let's see if you can diagnose the issue.
但让我们看看你是否可以诊断问题。

975
00:49:01,640 --> 00:49:05,570
If I type in David here and click Greet, now I'm
如果我在这里输入 David 并点击 Greet，现在我

976
00:49:05,570 --> 00:49:08,780
back to getting a 404 but for different reasons.
又回到了得到 404，但原因不同。

977
00:49:08,780 --> 00:49:11,570
AUDIENCE: [INAUDIBLE]
观众：[听不清]

978
00:49:12,065 --> 00:49:14,440
DAVID J. MALAN: Good, I haven't changed-- not the method.
大卫·J·马兰：好的，我没有改变——方法没有变。

979
00:49:14,440 --> 00:49:16,910
But I haven't changed the action in the form itself.
但我没有改变表单本身的 action。

980
00:49:16,910 --> 00:49:20,470
So if I go back to VS Code here and I go into the web forms,
所以如果我回到这里的 VS Code，然后进入 web 表单，

981
00:49:20,470 --> 00:49:22,600
the HTML, POST is still fine.
HTML 中的 POST 仍然没问题。

982
00:49:22,600 --> 00:49:24,730
But there is no /greet route anymore.
但 /greet 路由不再存在。

983
00:49:24,730 --> 00:49:27,205
So I actually can just specify slash.
所以我实际上可以直接指定斜杠。

984
00:49:27,205 --> 00:49:30,252
Or it turns out if you omit that altogether, the form will assume
或者事实证明，如果你完全省略它，表单会认为

985
00:49:30,252 --> 00:49:32,710
that you want to submit it to the very route from which you
你想要将其提交到你所在的路由

986
00:49:32,710 --> 00:49:34,437
came so that is fine as well.
这就是，这也很好。

987
00:49:34,437 --> 00:49:37,270
I'm going to go ahead now and go back to that other tab and go back.
我现在将继续返回到那个其他选项卡并返回。

988
00:49:37,270 --> 00:49:38,710
I'm going to reload the page.
我将重新加载页面。

989
00:49:38,710 --> 00:49:40,460
And, just for good measure, this time, I'm
并且，为了保险起见，这次我

990
00:49:40,460 --> 00:49:43,160
going to Control-click or right-click View page source.
将使用 Ctrl+单击或右键单击“查看页面源代码”。

991
00:49:43,160 --> 00:49:45,790
And, here, yep, the action has indeed updated.
并且，在这里，是的，action 确实已更新。

992
00:49:45,790 --> 00:49:47,140
So I think I fixed the bug.
所以我想我修复了 bug。

993
00:49:47,140 --> 00:49:51,490
Now if I type in David and click greet, we're back in business with it working.
现在，如果我输入 David 并点击 greet，它又可以正常工作了。

994
00:49:51,490 --> 00:49:54,040
So notice that this still allows me the convenience
所以请注意，这仍然允许我方便地

995
00:49:54,040 --> 00:49:59,500
of having two separate templates, one for the form which shows the--
拥有两个单独的模板，一个用于显示表单的模板——

996
00:49:59,500 --> 00:50:03,010
which collects the user input and one for the actual greeting
一个用于收集用户输入，另一个用于实际问候

997
00:50:03,010 --> 00:50:04,420
which displays the user input.
显示用户输入。

998
00:50:04,420 --> 00:50:07,120
So I'd argue that it still makes sense to keep those separate.
所以我认为将它们分开仍然是有意义的。

999
00:50:07,120 --> 00:50:09,940
But I can avoid bloating my app.py by having
但我可以避免我的 app.py 代码膨胀，方法是

1000
00:50:09,940 --> 00:50:14,645
two methods for every single feature that I might want to implement.
为我可能想要实现的每个功能创建两个方法。

1001
00:50:14,645 --> 00:50:17,030
Now, there is still a bug in this implementation
现在，这个实现中仍然存在一个错误

1002
00:50:17,030 --> 00:50:18,800
even though it's a little bit subtle.
虽然它有点微妙。

1003
00:50:18,800 --> 00:50:22,850
So recall that, previously, we introduced this default value of world
回想一下，之前我们引入了这个 world 的默认值

1004
00:50:22,850 --> 00:50:26,900
just in case the form doesn't actually contain the word world
以防表格实际上不包含 world 这个词

1005
00:50:26,900 --> 00:50:31,040
as might've happened if I didn't-- if I [INAUDIBLE] into the URL that I was
就像我之前手动请求 URL 时没有输入或 [听不清] 一样。

1006
00:50:31,040 --> 00:50:33,110
requesting manually as I did before.
手动请求。

1007
00:50:33,110 --> 00:50:36,140
But it turns out that if you're using an actual form and not,
但事实证明，如果你正在使用一个真实的表格，而不是

1008
00:50:36,140 --> 00:50:39,350
of course, expecting the human to type anything into the URL bar, which
当然，期望人们在 URL 地址栏中输入任何内容，

1009
00:50:39,350 --> 00:50:41,840
no human would do, it turns out that the browser is still
没有人会这样做，事实证明浏览器仍然

1010
00:50:41,840 --> 00:50:45,980
going to submit a name parameter even if its value is blank,
会提交一个 name 参数，即使它的值为空，

1011
00:50:45,980 --> 00:50:48,290
that is, empty, the so-called empty string.
也就是空字符串。

1012
00:50:48,290 --> 00:50:51,290
And so even if it's the empty string, it's
所以即使是空字符串，它也

1013
00:50:51,290 --> 00:50:53,090
still going to be considered to be a value
仍然会被认为是一个值

1014
00:50:53,090 --> 00:50:57,125
and, therefore, not worthy of having the default value of world plugged in.
因此，它不值得使用 world 的默认值。

1015
00:50:57,125 --> 00:51:01,340
In other words, if I open up my terminal window here, rerun flask run,
换句话说，如果我在这里打开我的终端窗口，重新运行 flask run，

1016
00:51:01,340 --> 00:51:06,260
and go back over to my browser, and load this example, if I type in David,
然后回到我的浏览器，加载这个例子，如果我输入 David，

1017
00:51:06,260 --> 00:51:09,290
as before, I'm going to be greeted with hello, David.
和以前一样，我会收到 hello, David 的问候。

1018
00:51:09,290 --> 00:51:12,980
But if I try this again and don't provide an actual name but just click
但如果我再试一次，不提供实际的姓名，只点击

1019
00:51:12,980 --> 00:51:16,190
Greet, it turns out the name parameter's still
Greet，事实证明 name 参数仍然

1020
00:51:16,190 --> 00:51:20,870
going to be submitted to the server, in which case request.form.get is not
会被提交到服务器，在这种情况下，request.form.get 不会

1021
00:51:20,870 --> 00:51:24,840
going to rely on the default value but rather that empty string value.
依赖于默认值，而是依赖于空字符串值。

1022
00:51:24,840 --> 00:51:29,060
And so we see what appears to be a bit of an aesthetic bug hello, nothing.
因此，我们看到似乎存在一个美观的错误：hello, nothing。

1023
00:51:29,060 --> 00:51:30,920
So how can we go about fixing this?
那么我们如何解决这个问题呢？

1024
00:51:30,920 --> 00:51:35,480
Well, perhaps the simplest way is to no longer rely on this default
嗯，也许最简单的方法是不再依赖这个默认

1025
00:51:35,480 --> 00:51:38,210
value here inside of app.py.
值，它在 app.py 中。

1026
00:51:38,210 --> 00:51:41,180
So, in fact, let me go ahead and delete that default value altogether
所以，事实上，让我继续删除那个默认值

1027
00:51:41,180 --> 00:51:47,240
and pass name in as the variable it still is into greet.html, our template.
并将 name 作为变量传递到 greet.html 模板中。

1028
00:51:47,240 --> 00:51:51,230
But, in greet.html, let's add a bit of logic
但是在 greet.html 中，让我们添加一些逻辑

1029
00:51:51,230 --> 00:51:56,420
there whereby we conditionally display the name if and only if it's not empty.
在那里，我们只有在 name 不为空的情况下才显示它。

1030
00:51:56,420 --> 00:52:00,980
In other words, before I output blindly name inside of these curly braces,
换句话说，在我盲目地输出这些花括号内的 name 之前，

1031
00:52:00,980 --> 00:52:05,060
let me borrow some syntax from Python and actually use, within my Jinja
让我借用一下 Python 的语法，实际上在我的 Jinja

1032
00:52:05,060 --> 00:52:07,700
template, a conditional like this.
模板中使用这样的条件语句。

1033
00:52:07,700 --> 00:52:10,970
Open curly brace and then a percent sign because, this time,
打开花括号，然后是百分号，因为这次，

1034
00:52:10,970 --> 00:52:13,520
I want logic, not just interpolation of a variable.
我想要逻辑，而不仅仅是变量的插值。

1035
00:52:13,520 --> 00:52:15,620
And I'm going to say if name.
我要说 if name。

1036
00:52:15,620 --> 00:52:19,430
And then I'm going to do another percent sign and a single curly brace.
然后，我将添加另一个百分号和一个单花括号。

1037
00:52:19,430 --> 00:52:23,300
And then, after that, I'm going to still use my variable name name
然后，在那之后，我仍然会使用我的变量名 name

1038
00:52:23,300 --> 00:52:24,930
inside of two curly braces.
放在两个花括号内。

1039
00:52:24,930 --> 00:52:29,660
But, after that, I'm going to do again a single curly brace, a single percent
但是，在那之后，我将再次使用一个单花括号，一个单百分号

1040
00:52:29,660 --> 00:52:33,110
sign, and then I'm going to say else followed by one more percent sign.
符号，然后我将说 else，后面跟着一个百分号。

1041
00:52:33,110 --> 00:52:36,410
And then, after that, I'm going to go ahead and actually put my default value
然后，在那之后，我将继续并实际输入我的默认值

1042
00:52:36,410 --> 00:52:41,690
world and then close this if conditional with a single curly brace,
世界，然后用一个单花括号关闭这个 if 条件语句，

1043
00:52:41,690 --> 00:52:45,770
a single percent sign, and endif.
一个单百分号，以及 endif。

1044
00:52:45,770 --> 00:52:49,680
And then I'm going to go ahead and close that tag there.
然后，我将继续并关闭那里的标签。

1045
00:52:49,680 --> 00:52:53,670
So, in Jinja, it turns out that we can use it not only to plug in values.
所以，在 Jinja 中，事实证明，我们不仅可以用来插入值。

1046
00:52:53,670 --> 00:52:56,450
We can also do a bit of lightweight conditional logic using
我们还可以使用 if、else 和 endif 来进行一些轻量级的条件逻辑，

1047
00:52:56,450 --> 00:52:59,360
an if and an else and an endif in this case, which
在这种情况下，它

1048
00:52:59,360 --> 00:53:02,300
isn't quite like Python-- indeed the endif is a little bit different.
不像 Python - 实际上 endif 有点不同。

1049
00:53:02,300 --> 00:53:04,357
But this is particular now to the Jinja template.
但这现在是 Jinja 模板所特有的。

1050
00:53:04,357 --> 00:53:06,440
And I've done it all on one line just because this
我将所有内容都放在一行上，仅仅因为这

1051
00:53:06,440 --> 00:53:09,830
is a fairly bit-sized conditional, either print out the name
是一个相当小的条件语句，要么打印出姓名

1052
00:53:09,830 --> 00:53:10,880
or print out world.
要么打印出 world。

1053
00:53:10,880 --> 00:53:14,750
Otherwise, I could actually put these template tags on their own lines
否则，我实际上可以将这些模板标签放在它们自己的行上

1054
00:53:14,750 --> 00:53:17,660
in order to spread things out all the more.
以便更充分地分散事物。

1055
00:53:17,660 --> 00:53:19,880
We'll see now, before long, that there's actually
我们很快就会看到，实际上

1056
00:53:19,880 --> 00:53:24,240
some other control flow capabilities of Jinja including loops and more.
Jinja 还有一些其他的控制流功能，包括循环等等。

1057
00:53:24,240 --> 00:53:27,590
But, for now, this is a nice way to solve that one problem because now,
但现在，这是一个解决那个问题的不错方法，因为现在，

1058
00:53:27,590 --> 00:53:32,510
when I go back into my application and I go back to the form and type
当我回到我的应用程序，回到表单，输入

1059
00:53:32,510 --> 00:53:35,690
in D-A-V-I-D, it's still going to work as expected, hello, David.
D-A-V-I-D，它仍然按预期工作，hello，David。

1060
00:53:35,690 --> 00:53:39,620
But if I go back one final time, type nothing in thereby sending
但如果我最后再回来一次，不输入任何内容，从而发送

1061
00:53:39,620 --> 00:53:43,160
an empty value to the server and click Greet here to demonstrate as much,
一个空值到服务器，并点击 Greet 这里来演示这一点，

1062
00:53:43,160 --> 00:53:46,430
now we do, in fact, see hello, world.
现在，我们确实看到了 hello，world。

1063
00:53:46,430 --> 00:53:53,120
All right, any questions on this final example of just saying hello?
好了，关于这个简单说 hello 的最后一个例子，还有问题吗？

1064
00:53:53,120 --> 00:53:58,870
From those basics come pretty much all of dynamic web applications today.
从这些基本知识出发，几乎诞生了今天所有的动态网页应用程序。

1065
00:53:58,870 --> 00:53:59,370
No?
没有？

1066
00:53:59,370 --> 00:54:02,340
All right, so if you'll indulge me, here's an actual web application
好吧，如果你允许我，这里有一个真实的网页应用程序

1067
00:54:02,340 --> 00:54:03,970
that I made back in the day.
是我以前制作的。

1068
00:54:03,970 --> 00:54:07,620
So, when I was a sophomore, I think I was not very athletic,
所以，当我还是大二的时候，我想我不是很擅长运动，

1069
00:54:07,620 --> 00:54:11,100
so I didn't so much do freshman intramural sports as I did run them
所以我没有参加大一新生校内运动，而是负责管理它们

1070
00:54:11,100 --> 00:54:12,220
with a roommate of mine.
和我的一位室友一起。

1071
00:54:12,220 --> 00:54:13,500
So we were sophomores in Mather House.
所以我们是大二学生，住在 Mather House。

1072
00:54:13,500 --> 00:54:14,292
He was the athlete.
他是运动员。

1073
00:54:14,292 --> 00:54:16,170
I was the aspiring computer scientist.
我是一个有抱负的计算机科学家。

1074
00:54:16,170 --> 00:54:20,280
And so this was actually a screenshot of the very first web application
所以，这实际上是我制作的第一个网页应用程序的截图

1075
00:54:20,280 --> 00:54:20,940
I ever made.
我曾经制作过。

1076
00:54:20,940 --> 00:54:22,600
And this will sound old too.
这听起来也很老。

1077
00:54:22,600 --> 00:54:24,750
But, back in my day, freshman year, when we
但是，在我那个年代，大一的时候，当我们

1078
00:54:24,750 --> 00:54:27,750
registered for Frosh IMs, or Freshman Intramural Sports,
报名参加 Frosh IMs，也就是大一新生校内运动，

1079
00:54:27,750 --> 00:54:29,790
you would literally walk across Harvard yard
你真的要走过哈佛庭院

1080
00:54:29,790 --> 00:54:34,923
to Wigglesworth, where a certain proctor or RA lived who was running Frosh IMs.
到 Wigglesworth，那里住着一位负责管理 Frosh IMs 的导师或 RA。

1081
00:54:34,923 --> 00:54:36,840
And you would literally slide a sheet of paper
你真的要在一张纸上写下你的名字

1082
00:54:36,840 --> 00:54:39,270
under the door with your name on it and your choice of sports
和你想注册的运动项目，然后塞到门下面。

1083
00:54:39,270 --> 00:54:40,520
that you want to register for.
你想注册的运动项目。

1084
00:54:40,520 --> 00:54:43,210
So that was the state of the art in 1995.
所以这就是 1995 年的技术前沿。

1085
00:54:43,210 --> 00:54:45,630
This was ripe for disruption as people would now say.
正如人们现在所说，这是颠覆的成熟时机。

1086
00:54:45,630 --> 00:54:50,218
And, once I actually took CS50 in the fall of 1996, which did not
然后，我实际上是在 1996 年秋季上了 CS50，当时它并没有

1087
00:54:50,218 --> 00:54:52,260
teach, funny enough, web programming at the time,
教，有趣的是，当时没有教网页编程，

1088
00:54:52,260 --> 00:54:55,140
I think I spent that winter or spring figuring out
我想我在那个冬天或春天花时间弄清楚

1089
00:54:55,140 --> 00:54:59,692
how to do stuff with web programming, not using C and not even using Python.
如何使用网页编程，不使用 C 语言，甚至不使用 Python。

1090
00:54:59,692 --> 00:55:02,650
At the time, I was using a language called Perl, which is still with us
当时，我使用的是一种叫做 Perl 的语言，它现在依然存在

1091
00:55:02,650 --> 00:55:05,410
but not as popular as it was back in the day.
但没有以前那么流行了。

1092
00:55:05,410 --> 00:55:08,530
But what you're seeing here is a hideous screenshot
但你在这里看到的，是一个丑陋的截图

1093
00:55:08,530 --> 00:55:10,420
of what the user interface was.
展示了当时的界面。

1094
00:55:10,420 --> 00:55:14,710
This was me learning how to repeat background in images infinitely,
当时我在学习如何无限重复图像背景，

1095
00:55:14,710 --> 00:55:16,300
no matter how big the page was.
无论页面有多大。

1096
00:55:16,300 --> 00:55:19,550
Back in the day, there was no CSS, I think, even at the time.
那时，我想，甚至当时还没有 CSS。

1097
00:55:19,550 --> 00:55:22,308
So every one of these menu options was actually an image.
所以，每一个菜单选项实际上都是一个图片。

1098
00:55:22,308 --> 00:55:24,850
And even though-- this is a screenshot, so it's not animated.
虽然——这只是一个截图，所以它没有动画。

1099
00:55:24,850 --> 00:55:27,850
If you would hover over any of these words, what
如果你把鼠标悬停在这些词语上，我会

1100
00:55:27,850 --> 00:55:31,180
I would do using JavaScript, which did exist in an early form,
用早期的 JavaScript 做的是，

1101
00:55:31,180 --> 00:55:34,660
was just change the image from a blue image to a red image,
只是把图片从蓝色变成红色，

1102
00:55:34,660 --> 00:55:39,670
creating the illusion of the trickery we did last week with text decoration,
营造出我们上周用文本装饰所做的技巧的幻觉，

1103
00:55:39,670 --> 00:55:40,960
as you might recall in hover.
你可能还记得，用 hover 来实现。

1104
00:55:40,960 --> 00:55:42,830
So the web's come a long way.
所以，网络已经走了很长一段路。

1105
00:55:42,830 --> 00:55:46,180
But this is still representative, amazingly, some 20 years later
但令人惊讶的是，二十年后，这仍然代表着

1106
00:55:46,180 --> 00:55:48,160
of how web applications still work.
网络应用程序是如何运作的。

1107
00:55:48,160 --> 00:55:49,540
I used a different language.
我使用了一种不同的语言。

1108
00:55:49,540 --> 00:55:52,510
I used a different backend for my data or database.
我使用了不同的后端来处理我的数据或数据库。

1109
00:55:52,510 --> 00:55:56,810
But everything I did then we will now do effectively today
但我当时所做的一切，我们现在实际上可以在今天做

1110
00:55:56,810 --> 00:55:59,900
and beyond because the principles have not changed.
以及未来，因为原理并没有改变。

1111
00:55:59,900 --> 00:56:03,010
It's all based ultimately on HTTP and all of the stuff
这一切最终都基于 HTTP，以及我们

1112
00:56:03,010 --> 00:56:06,350
we discussed thus far this past week and now this.
过去一周以及现在讨论的所有东西。

1113
00:56:06,350 --> 00:56:09,460
So let's go ahead and make the beginnings of this website,
所以，让我们开始创建这个网站，

1114
00:56:09,460 --> 00:56:12,850
though, perhaps without as many of the hideous images underneath it.
不过，也许可以不用那么多难看的图片。

1115
00:56:12,850 --> 00:56:17,560
In my VS Code, I'm going to go ahead and close all of my prior tabs.
在我的 VS Code 中，我要关闭所有之前的标签。

1116
00:56:17,560 --> 00:56:22,060
I'll open up my terminal, and I'll hit Control-c to exit out
我将打开我的终端，然后按下 Ctrl+C 来退出

1117
00:56:22,060 --> 00:56:26,620
of Flask just like you can hit Control-c to exit out of the HTTP server.
Flask，就像你可以按下 Ctrl+C 来退出 HTTP 服务器一样。

1118
00:56:26,620 --> 00:56:30,700
I'm going to go ahead and hit cd to go back to my main workspace.
我将按下 cd 返回我的主工作区。

1119
00:56:30,700 --> 00:56:34,090
And I'm going to create a new folder with mkdir called froshims
我将使用 mkdir 创建一个名为 froshims 的新文件夹

1120
00:56:34,090 --> 00:56:37,840
so that all of my new application is inside of this folder.
这样我的所有新应用程序都将在这个文件夹中。

1121
00:56:37,840 --> 00:56:40,180
I'm going to cd into froshims.
我将进入 froshims 文件夹。

1122
00:56:40,180 --> 00:56:42,580
And let's go ahead and make a very simple application
让我们创建一个非常简单的应用程序

1123
00:56:42,580 --> 00:56:47,103
that essentially pretends to let first years register for a sport.
它本质上模拟了让一年级新生注册一项运动。

1124
00:56:47,103 --> 00:56:49,270
So I'm going to need to do a bit of typing up front.
所以我需要先输入一些东西。

1125
00:56:49,270 --> 00:56:50,895
But I'll do the first one from scratch.
但我将从头开始第一个。

1126
00:56:50,895 --> 00:56:53,440
And then we'll start just evolving that same example.
然后，我们将开始逐步演进那个例子。

1127
00:56:53,440 --> 00:56:57,080
Let me go ahead and do this.
让我来做一下。

1128
00:56:57,080 --> 00:56:59,290
Let me go ahead and--
让我来——

1129
00:56:59,290 --> 00:57:00,350
actually, we'll do this.
实际上，我们会这样做。

1130
00:57:00,350 --> 00:57:02,020
We'll cut one corner.
我们会省掉一个步骤。

1131
00:57:02,020 --> 00:57:07,630
I'm going to go ahead and copy, from my hello example, app.py into this folder.
我将从我的 hello 示例中复制 app.py 文件到这个文件夹中。

1132
00:57:07,630 --> 00:57:10,570
I'm going to go ahead and copy from my hello examples
我将从我的 hello 示例中

1133
00:57:10,570 --> 00:57:13,120
templates my layout into this folder.
复制模板布局到这个文件夹中。

1134
00:57:13,120 --> 00:57:15,610
I'm going to create a new folder called templates.
我将创建一个名为 templates 的新文件夹。

1135
00:57:15,610 --> 00:57:18,760
I'm going to move that copied layout into templates
我将把复制的布局移动到 templates 文件夹中

1136
00:57:18,760 --> 00:57:22,000
so that, at this point in the story, if I clear my screen and type ls,
这样，在这个时间点，如果我清除屏幕并输入 ls 命令，

1137
00:57:22,000 --> 00:57:24,062
I've got the beginnings of a web application,
我就有了 web 应用程序的基础，

1138
00:57:24,062 --> 00:57:26,020
even though it's specific to just saying hello.
即使它只是用于简单的问候。

1139
00:57:26,020 --> 00:57:28,810
But I'm going to go ahead and into the templates folder
但是，我将继续进入 templates 文件夹

1140
00:57:28,810 --> 00:57:31,450
and go into layout.html.
并进入 layout.html 文件。

1141
00:57:31,450 --> 00:57:35,560
Let's just change this ever so slightly to say froshims as the title
我们稍微修改一下，将标题改为 froshims

1142
00:57:35,560 --> 00:57:38,050
just so we know we're looking at the right application.
这样我们就知道我们正在查看正确的应用程序。

1143
00:57:38,050 --> 00:57:43,060
And, now, let me go ahead and create a new file called how
现在，我将创建一个名为 how 的新文件

1144
00:57:43,060 --> 00:57:46,360
about index.html inside of templates that,
about index.html，放在 templates 文件夹中，

1145
00:57:46,360 --> 00:57:53,860
just as before, is going to extend that there template, so extends layout.html.
就像之前一样，它将继承模板，因此使用 extends layout.html。

1146
00:57:53,860 --> 00:57:57,400
Inside of here, I'm going to say block body just as before.
在这里，我将像之前一样输入 block body。

1147
00:57:57,400 --> 00:57:59,448
Preemptively going to say endblock.
提前输入 endblock。

1148
00:57:59,448 --> 00:58:01,240
And then, inside of here, I'm going to make
然后，在这里，我将创建

1149
00:58:01,240 --> 00:58:05,020
the beginnings of a super simple web page for first-year intramural.
一个非常简单的网页，用于一年级校内联赛报名。

1150
00:58:05,020 --> 00:58:08,290
So I'm going to use an h1 tag that's sort of big and bold that
因此我将使用 h1 标签，它比较大，而且加粗，

1151
00:58:08,290 --> 00:58:11,320
just says register at the top of the page sort of like a title.
它在页面顶部显示 “register”，有点像标题。

1152
00:58:11,320 --> 00:58:13,270
Below that, I'm going to have a form.
在下面，我将添加一个表单。

1153
00:58:13,270 --> 00:58:17,260
The action of this form I'm going to say proactively is going to say
我将提前声明该表单的 action 属性为

1154
00:58:17,260 --> 00:58:18,340
to /register.
/register。

1155
00:58:18,340 --> 00:58:19,090
So that's a to do.
所以，这是一个待办事项。

1156
00:58:19,090 --> 00:58:21,820
We're going to have to go implement a register route.
我们将需要实现一个 register 路由。

1157
00:58:21,820 --> 00:58:24,525
The method I'm going to use is post just for privacy's sake
我将使用 post 方法，纯粹为了保护隐私

1158
00:58:24,525 --> 00:58:26,650
so that if roommates are sharing the same computer,
这样，如果室友共用一台电脑，

1159
00:58:26,650 --> 00:58:29,440
they don't see, in the autocomplete, who's registered for what.
他们就不会在自动完成功能中看到谁注册了哪个项目。

1160
00:58:29,440 --> 00:58:34,240
Inside of that form, I'm going to have a single input first where
在表单中，我将首先添加一个单独的输入框，

1161
00:58:34,240 --> 00:58:37,000
autocomplete is off.
自动完成功能已关闭。

1162
00:58:37,000 --> 00:58:38,487
Autofocus is on.
自动聚焦功能已打开。

1163
00:58:38,487 --> 00:58:40,570
The name of this field will be name because I want
该字段的名称将是 name，因为我想

1164
00:58:40,570 --> 00:58:43,240
to ask the humans for their human name.
向用户询问他们的姓名。

1165
00:58:43,240 --> 00:58:45,610
The placeholder, just to be self-describing,
占位符，为了自描述，

1166
00:58:45,610 --> 00:58:49,850
is going to be, quote, unquote, "Name", capital N grammatically.
将是双引号包裹的 “Name”，首字母 N 大写，符合语法。

1167
00:58:49,850 --> 00:58:52,600
And then, lastly, the type of this field, though it's the default,
最后，该字段的类型，虽然是默认类型，

1168
00:58:52,600 --> 00:58:53,245
is text.
是 text。

1169
00:58:53,245 --> 00:58:57,400
So, so far, this is actually pretty darn similar to the hello example
到目前为止，这与 hello 示例非常相似

1170
00:58:57,400 --> 00:58:58,750
soliciting someone's name.
用于获取用户姓名。

1171
00:58:58,750 --> 00:59:01,630
But now I want to maybe implement a dropdown
但现在我可能想实现一个下拉

1172
00:59:01,630 --> 00:59:03,640
menu via which you can select a sport.
菜单，用于选择运动项目。

1173
00:59:03,640 --> 00:59:06,910
And, back in the day, I think the first version of froshims,
以前，我认为 froshims 的第一个版本，

1174
00:59:06,910 --> 00:59:09,650
students could only register for basketball, soccer,
学生只能注册篮球、足球，

1175
00:59:09,650 --> 00:59:11,000
and ultimate Frisbee.
以及极限飞盘。

1176
00:59:11,000 --> 00:59:12,640
So those were three of the fall sports.
所以，这三个是秋季运动项目。

1177
00:59:12,640 --> 00:59:14,210
So let me do this.
所以，让我来做这个。

1178
00:59:14,210 --> 00:59:17,620
It's a little weirdly named, but a dropdown menu in HTML
它有一个有点奇怪的名字，但在 HTML 中，下拉菜单

1179
00:59:17,620 --> 00:59:20,980
is called a select menu because you select something from it.
被称为选择菜单，因为你可以从中选择某些东西。

1180
00:59:20,980 --> 00:59:25,390
The name of this input, which is really what it is, is going to be sport.
这个输入的名称，实际上它就是这个，将是 sport。

1181
00:59:25,390 --> 00:59:27,700
Though, I could call the input anything I want.
不过，我可以随意给输入命名。

1182
00:59:27,700 --> 00:59:31,330
And, inside of this select element, I'm going to have a few options.
而且，在这个选择元素内部，我将有一些选项。

1183
00:59:31,330 --> 00:59:38,050
I'm going to have one where the option is how about basketball?
我将有一个选项是篮球怎么样？

1184
00:59:38,050 --> 00:59:41,530
Another option, the value of which is soccer.
另一个选项，它的值是足球。

1185
00:59:41,530 --> 00:59:45,805
And, lastly, a third option, the value of which is ultimate Frisbee.
最后，第三个选项，它的值是极限飞盘。

1186
00:59:45,805 --> 00:59:46,930
So just those three sports.
所以只有这三种运动。

1187
00:59:46,930 --> 00:59:49,030
But suffice it to say we could add even more.
但足以说明我们可以添加更多。

1188
00:59:49,030 --> 00:59:51,460
And then, outside of this select menu, I'm
然后，在这个选择菜单之外，我

1189
00:59:51,460 --> 00:59:55,060
going to have a button just like the hello example, the type of which
将有一个按钮，就像 hello 示例一样，它的类型

1190
00:59:55,060 --> 00:59:57,730
is submit, just to be super explicit even though that's not
是提交，为了非常明确，尽管这并不是

1191
00:59:57,730 --> 00:59:58,820
strictly necessary.
严格必要的。

1192
00:59:58,820 --> 01:00:01,100
But it's another attribute you'll see in the wild.
但这是你在野外会看到的另一个属性。

1193
01:00:01,100 --> 01:00:04,097
And then the name on the value of this button will be register.
然后这个按钮的名称或值将是 register。

1194
01:00:04,097 --> 01:00:05,930
So it's clear that you're not being greeted,
所以很明显，你并没有被问候，

1195
01:00:05,930 --> 01:00:08,120
but you're actually registering for sports.
而你实际上是报名参加运动。

1196
01:00:08,120 --> 01:00:13,070
Now, we're not quite good to go yet, but let me go into VS code's terminal
现在，我们还没有完全准备好，但让我进入 VS Code 的终端

1197
01:00:13,070 --> 01:00:13,580
again.
再来。

1198
01:00:13,580 --> 01:00:16,922
Let me open up app.py and close my terminal again.
让我打开 app.py 并再次关闭我的终端。

1199
01:00:16,922 --> 01:00:19,380
And let's just whittle this down to something super simple.
我们只需把它简化为一个非常简单的东西。

1200
01:00:19,380 --> 01:00:21,088
I don't want to get overwhelmed just yet.
我不想现在就感到不知所措。

1201
01:00:21,088 --> 01:00:22,970
I don't want to support even POST.
我甚至不想支持 POST。

1202
01:00:22,970 --> 01:00:25,730
So let's just whittle this down to the essence of this.
所以我们只需把它简化为它的本质。

1203
01:00:25,730 --> 01:00:28,460
So I can do a quick check mentally and make sure now,
所以我可以在脑海中快速检查一下，现在确保

1204
01:00:28,460 --> 01:00:32,480
when I run flask, that I'm serving up that registration form.
当我运行 Flask 时，我正在提供那个注册表单。

1205
01:00:32,480 --> 01:00:36,980
So, in my terminal, I'm going to run flask run in my froshims folder.
所以，在我的终端中，我将在我 froshims 文件夹中运行 flask run。

1206
01:00:36,980 --> 01:00:38,270
So far, so good.
到目前为止，一切顺利。

1207
01:00:38,270 --> 01:00:41,750
It's going to be by default the same URL unless I've rebuilt or created
它默认情况下将是同一个 URL，除非我重建或创建

1208
01:00:41,750 --> 01:00:42,810
a brand new codespace.
一个全新的代码空间。

1209
01:00:42,810 --> 01:00:46,370
So let me go back to my other tab and reload that URL.
所以让我回到我的另一个选项卡并重新加载那个 URL。

1210
01:00:46,370 --> 01:00:49,760
And, OK, we've got the beginnings of a more interesting form now.
好的，我们现在有了更有趣表单的雏形。

1211
01:00:49,760 --> 01:00:51,420
So it's got place for my name.
所以它有我的名字的占位符。

1212
01:00:51,420 --> 01:00:54,000
It's got a dropdown for the three sports.
它有一个包含三种运动的下拉菜单。

1213
01:00:54,000 --> 01:00:57,830
So let's see what happens, D-A-V-I-D. We'll say soccer.
所以让我们看看会发生什么，D-A-V-I-D。我们说足球。

1214
01:00:57,830 --> 01:01:01,310
And, when I click Register, just to be clear, what route will
然后，当我点击注册时，为了清楚起见，我将通过哪个路由

1215
01:01:01,310 --> 01:01:05,045
I find myself at per my URL?
在 URL 中找到我自己？

1216
01:01:05,045 --> 01:01:07,910
Slash.
斜杠。

1217
01:01:07,910 --> 01:01:08,970
What was it to be?
它是什么？

1218
01:01:08,970 --> 01:01:12,800
If I go back into my index.
如果我回到我的索引。

1219
01:01:12,800 --> 01:01:13,880
/register.
/register。

1220
01:01:13,880 --> 01:01:18,150
But what error will I see presumably at this point in time,
但到目前为止，我可能会看到什么错误，

1221
01:01:18,150 --> 01:01:22,470
given that app.py has only been implemented to this extent?
鉴于 app.py 仅实现了到目前为止的内容？

1222
01:01:22,470 --> 01:01:25,740
So probably 404 because the route won't be found.
所以可能是 404，因为找不到路由。

1223
01:01:25,740 --> 01:01:28,850
So if I click Register, I indeed end up at /register.
所以，如果我点击注册，我确实最终到了 /register。

1224
01:01:28,850 --> 01:01:31,703
But if I zoom in up top here, 404 not found.
但是，如果我在这里放大到顶部，404 未找到。

1225
01:01:31,703 --> 01:01:33,870
All right, so it's the beginnings of an application.
好的，所以这是一个应用程序的开端。

1226
01:01:33,870 --> 01:01:36,328
But I've not-- I've implemented the front end, so to speak,
但我还没有——可以说，我实现了前端，

1227
01:01:36,328 --> 01:01:40,010
the user interface but not the back end, the business logic that actually
用户界面，但不是后端，实际处理用户输入的业务逻辑，

1228
01:01:40,010 --> 01:01:41,750
does something with the user input.
对用户输入做些什么。

1229
01:01:41,750 --> 01:01:43,790
But a couple of enhancements here.
但是这里有一些改进。

1230
01:01:43,790 --> 01:01:46,400
But these are largely niceties in HTML.
但这些基本上只是 HTML 中的一些细微之处。

1231
01:01:46,400 --> 01:01:51,200
It's a little bad user experience that by default you're
默认情况下，这有点糟糕的用户体验，因为你正在

1232
01:01:51,200 --> 01:01:52,437
registering for basketball.
注册篮球项目。

1233
01:01:52,437 --> 01:01:53,270
I mean, that's fine.
我的意思是，这很好。

1234
01:01:53,270 --> 01:01:56,360
But, arguably, you're biasing people toward registering for basketball.
但可以说，你正在诱导人们注册篮球项目。

1235
01:01:56,360 --> 01:01:59,610
Or they might not realize that they're registering for basketball because they
或者他们可能没有意识到他们正在注册篮球项目，因为他们

1236
01:01:59,610 --> 01:02:01,100
didn't explicitly choose a sport.
没有明确选择一项运动。

1237
01:02:01,100 --> 01:02:03,770
So having a random, an arbitrary default that
因此，有一个随机的、任意的默认值，

1238
01:02:03,770 --> 01:02:05,870
just happens to be the first word alphabetically
正好是字母顺序上的第一个词，

1239
01:02:05,870 --> 01:02:07,730
is a little weak when it comes to design.
在设计方面有点弱。

1240
01:02:07,730 --> 01:02:09,313
So there's different ways to fix this.
所以有很多方法可以解决这个问题。

1241
01:02:09,313 --> 01:02:12,230
But one way is to do this.
但其中一种方法是这样做。

1242
01:02:12,230 --> 01:02:14,840
Add a new option at the very top.
在最上面添加一个新的选项。

1243
01:02:14,840 --> 01:02:18,860
But go ahead and disable it so that the user can't themselves
但继续禁用它，这样用户就不能自己

1244
01:02:18,860 --> 01:02:21,500
select it because you want them to select an actual sport.
选择它，因为你希望他们选择一项真正的运动。

1245
01:02:21,500 --> 01:02:24,720
By default, you can specify that it's indeed selected.
默认情况下，你可以指定它确实被选中。

1246
01:02:24,720 --> 01:02:27,270
And it has no value.
而且它没有值。

1247
01:02:27,270 --> 01:02:31,660
So not to judge any sport, but this particular option has no value.
所以，不是要评判任何运动，而是这个特定的选项没有值。

1248
01:02:31,660 --> 01:02:34,690
But what the human sees is the word sport, for instance.
但人类看到的是“运动”这个词，例如。

1249
01:02:34,690 --> 01:02:35,850
So this is kind of a hack.
所以这有点像黑客手段。

1250
01:02:35,850 --> 01:02:39,030
Ideally, the Select menu would just have a placeholder attribute
理想情况下，选择菜单只需要一个占位符属性

1251
01:02:39,030 --> 01:02:41,070
like the actual input boxes does.
就像实际的输入框一样。

1252
01:02:41,070 --> 01:02:43,060
But that does not exist.
但它不存在。

1253
01:02:43,060 --> 01:02:46,480
So if I reload now, it looks a little more user friendly.
所以，如果我现在重新加载，它看起来会更人性化一些。

1254
01:02:46,480 --> 01:02:47,640
So it says sport.
所以它显示“运动”。

1255
01:02:47,640 --> 01:02:49,800
I can't select sport ever again.
我以后再也不能选择“运动”了。

1256
01:02:49,800 --> 01:02:52,800
But it is the default, but I can select one of these three sports
但它是默认值，但我可以从这三种运动中选择一种

1257
01:02:52,800 --> 01:02:55,590
which just increases the probability that the human does
这只是增加了人们会这样做的可能性

1258
01:02:55,590 --> 01:02:57,328
what you might expect.
你可能会预料到的。

1259
01:02:57,328 --> 01:02:59,370
Of course, there's something else I can add here.
当然，我还可以在这里添加其他内容。

1260
01:02:59,370 --> 01:03:01,320
Suppose I don't even give my name.
假设我甚至不输入我的名字。

1261
01:03:01,320 --> 01:03:02,760
It still went through.
它仍然通过了。

1262
01:03:02,760 --> 01:03:03,930
It didn't work.
它没有成功。

1263
01:03:03,930 --> 01:03:05,250
It's still a 405, but the--
它仍然是 405，但是——

1264
01:03:05,250 --> 01:03:05,820
404.
404。

1265
01:03:05,820 --> 01:03:07,830
But the browser didn't stop me.
但浏览器没有阻止我。

1266
01:03:07,830 --> 01:03:10,050
So recall that we do have some other tricks.
所以请记住，我们还有一些其他技巧。

1267
01:03:10,050 --> 01:03:13,170
For instance, I can say that this dropdown, this select menu
例如，我可以说这个下拉菜单，这个选择菜单

1268
01:03:13,170 --> 01:03:15,870
is itself required-- or, sorry, not this one.
本身是必需的——或者，抱歉，不是这个。

1269
01:03:15,870 --> 01:03:19,000
The text box is itself required, for instance.
例如，文本框本身是必需的。

1270
01:03:19,000 --> 01:03:21,600
So now if I go back to the form and reload
所以现在，如果我返回表单并重新加载

1271
01:03:21,600 --> 01:03:24,900
and I just ignore the name question and click Register,
而我只是忽略姓名问题并点击注册，

1272
01:03:24,900 --> 01:03:26,340
the browser's going to yell at me.
浏览器会警告我。

1273
01:03:26,340 --> 01:03:28,380
Now, recall that this is not robust.
现在，请记住，这不是健壮的。

1274
01:03:28,380 --> 01:03:30,510
Client-side validation is not good.
客户端验证不好。

1275
01:03:30,510 --> 01:03:32,600
Why?
为什么？

1276
01:03:32,600 --> 01:03:34,683
What'd we learn last week?
我们上周学了什么？

1277
01:03:34,683 --> 01:03:37,100
Yeah, I mean, I can literally right-click or Control-click
是的，我的意思是，我可以直接右键单击或 Ctrl+单击

1278
01:03:37,100 --> 01:03:38,720
and open up Developer Tools.
并打开开发者工具。

1279
01:03:38,720 --> 01:03:42,620
I can go into that form using the Developer Tools.
我可以使用开发者工具进入该表单。

1280
01:03:42,620 --> 01:03:46,820
I can literally find the word required, delete it, and voila.
我可以直接找到 "required" 这个词，删除它，然后就完成了。

1281
01:03:46,820 --> 01:03:49,670
This form will now go through because the browser's
现在，这个表单将能够提交，因为浏览器

1282
01:03:49,670 --> 01:03:50,900
going to do what I change.
将执行我所做的更改。

1283
01:03:50,900 --> 01:03:54,950
So it's useful for user experience, making just things a little prettier
因此，它对用户体验很有用，使事情看起来更漂亮

1284
01:03:54,950 --> 01:03:56,480
and faster to validate.
并且更快速地进行验证。

1285
01:03:56,480 --> 01:03:58,370
But it's not going to be robust defense.
但它不会成为可靠的防御措施。

1286
01:03:58,370 --> 01:04:02,930
All right, so let's go back now to VS Code into my actual route
好的，现在让我们回到 VS Code，进入我的实际路由

1287
01:04:02,930 --> 01:04:07,140
and implement at least something here that resembles registration.
并在这里实现至少类似注册的功能。

1288
01:04:07,140 --> 01:04:08,930
So I'm going to go into app.py.
所以，我将进入 app.py。

1289
01:04:08,930 --> 01:04:11,300
And, in app.py, let's create this second route.
在 app.py 中，让我们创建第二个路由。

1290
01:04:11,300 --> 01:04:16,400
So, at app.route, quote, unquote, "/register"
因此，在 app.route，引号引起来，"/register"

1291
01:04:16,400 --> 01:04:18,808
to match what is in my HTML.
以匹配我 HTML 中的内容。

1292
01:04:18,808 --> 01:04:19,850
Let me define a function.
让我定义一个函数。

1293
01:04:19,850 --> 01:04:21,080
I can call it anything I want.
我可以随意命名它。

1294
01:04:21,080 --> 01:04:24,038
But, again, good convention to just call it the same thing as the route
但同样，良好的习惯是将其命名与路由相同

1295
01:04:24,038 --> 01:04:26,060
name so you don't get out of sync.
名称，这样你就不会不同步。

1296
01:04:26,060 --> 01:04:28,520
And then there's a couple of things I might want to do.
然后，我可能想做几件事。

1297
01:04:28,520 --> 01:04:31,190
When you register for this particular form,
当您注册此特定表单时，

1298
01:04:31,190 --> 01:04:36,860
what are the two things that the server should probably check for?
服务器应该检查哪些两件事？

1299
01:04:36,860 --> 01:04:39,750
What kind of logic should I have here?
我应该在这里使用什么样的逻辑？

1300
01:04:39,750 --> 01:04:41,320
Yeah.
是的。

1301
01:04:41,320 --> 01:04:44,085
AUDIENCE: [INAUDIBLE] at anything for [INAUDIBLE]..
观众：[听不清] 任何东西 [听不清]..

1302
01:04:44,085 --> 01:04:46,710
DAVID J. MALAN: OK, so let's make sure that the name is present
大卫·马兰：好的，所以让我们确保名称存在

1303
01:04:46,710 --> 01:04:48,420
and the sport is present, ideally.
并且理想情况下，运动也存在。

1304
01:04:48,420 --> 01:04:51,240
So let's actually validate the user's input just like get int
所以，让我们像 get int 一样验证用户的输入

1305
01:04:51,240 --> 01:04:52,440
did back in week one.
在第一周做的那样。

1306
01:04:52,440 --> 01:04:56,340
Just like get string, get float, and all of those,
就像 get string、get float 和所有那些，

1307
01:04:56,340 --> 01:04:58,510
they made sure that you actually got input.
它们确保您确实获得了输入。

1308
01:04:58,510 --> 01:05:00,250
So there's a bunch of ways I can do this,
所以我有很多方法可以做到这一点，

1309
01:05:00,250 --> 01:05:03,210
but I'm going to go ahead and take a relatively canonical approach.
但我将采用一种相对规范的方法。

1310
01:05:03,210 --> 01:05:09,450
If not request.form.get, quote, unquote, "name",
如果 request.form.get，引号引起来，"name" 不存在，

1311
01:05:09,450 --> 01:05:12,990
I'm going to go ahead and then return, how about let's just see,
我会继续执行，然后返回，让我们看看，

1312
01:05:12,990 --> 01:05:17,320
failure, quote, unquote, "failure" just as a quick and dirty solution.
failure，引号引起来，"failure" 作为一个快速而肮脏的解决方案。

1313
01:05:17,320 --> 01:05:22,830
So if it is not the case that there is a value for the name field,
所以，如果名称字段没有值，

1314
01:05:22,830 --> 01:05:24,782
just assume that there's a failure.
就假设出现了错误。

1315
01:05:24,782 --> 01:05:25,740
So how can I test this?
那么，我该如何测试呢？

1316
01:05:25,740 --> 01:05:27,370
Let me go back to the other tab.
让我回到另一个选项卡。

1317
01:05:27,370 --> 01:05:30,840
Let me go ahead and not type in my name and click Register.
让我不要输入我的名字，然后单击注册。

1318
01:05:30,840 --> 01:05:33,480
And notice-- well, OK, I need to get rid of the required
然后注意 -- 好的，我需要去掉 "required"

1319
01:05:33,480 --> 01:05:35,952
if I actually want to see this thing go through.
如果我真的想看到这个东西被提交。

1320
01:05:35,952 --> 01:05:36,660
So you know what?
所以，你知道吗？

1321
01:05:36,660 --> 01:05:38,820
Let's just change the template.
让我们更改模板。

1322
01:05:38,820 --> 01:05:41,130
Let's get rid of that so I don't have to hack into it
让我们去掉它，这样我就不必手动入侵它

1323
01:05:41,130 --> 01:05:42,520
and delete things manually.
并手动删除内容。

1324
01:05:42,520 --> 01:05:43,860
So let me reload the form.
所以，让我重新加载表单。

1325
01:05:43,860 --> 01:05:45,260
Let me not type a name.
让我不输入名字。

1326
01:05:45,260 --> 01:05:46,240
Click register.
点击注册。

1327
01:05:46,240 --> 01:05:48,220
And, oh, dang it.
哦，糟糕。

1328
01:05:48,220 --> 01:05:50,740
405, Method Not Allowed.
405，方法不允许。

1329
01:05:50,740 --> 01:05:54,590
What's the fix for this in my app.py?
我的 app.py 中怎么解决这个问题？

1330
01:05:54,590 --> 01:05:56,105
What line number needs to change?
哪一行代码需要修改？

1331
01:05:58,930 --> 01:06:00,975
Yeah, over there.
对，就在那里。

1332
01:06:00,975 --> 01:06:01,850
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1333
01:06:01,850 --> 01:06:05,255
DAVID J. MALAN: Yeah, I need to allow both or at least POST at this point.
是的，我需要允许两者，或者至少允许 POST 方法。

1334
01:06:05,255 --> 01:06:06,630
So I'll keep it more restrictive.
所以我将限制更严格。

1335
01:06:06,630 --> 01:06:10,430
So methods equals and then in a list, quote, unquote,
所以 methods 等于一个列表，用引号括起来，

1336
01:06:10,430 --> 01:06:14,270
POST because that's what I'm using in my template as the method.
POST，因为这是我在模板中用作方法的。

1337
01:06:14,270 --> 01:06:15,680
All right, let's try again.
好吧，我们再试一次。

1338
01:06:15,680 --> 01:06:17,070
I'm going to go back.
我要返回。

1339
01:06:17,070 --> 01:06:19,850
I'm going to not type a name, and I'm going to click Register.
我不会输入名字，然后点击注册。

1340
01:06:19,850 --> 01:06:22,730
OK, so we caught the fact that the name was not provided.
好的，我们捕捉到了没有提供名字的事实。

1341
01:06:22,730 --> 01:06:25,220
Let's now go back and try again and actually cooperate.
现在让我们返回，再试一次，并真正合作。

1342
01:06:25,220 --> 01:06:28,830
David, Register, OK, now internal server error.
David，注册，好的，现在是内部服务器错误。

1343
01:06:28,830 --> 01:06:30,800
So something's gone even worse here.
所以这里出了更大的问题。

1344
01:06:30,800 --> 01:06:32,840
And, unfortunately, you're going to start to see
不幸的是，在接下来的几周里你会开始看到

1345
01:06:32,840 --> 01:06:34,710
this over the next couple of weeks.
这种情况。

1346
01:06:34,710 --> 01:06:39,230
This is like Python and the web's equivalent of segmentation fault.
这就像 Python 和 Web 的等效于段错误。

1347
01:06:39,230 --> 01:06:42,690
It's a different issue, but it's going to hurt just the same, unfortunately.
这是一个不同的问题，但不幸的是，它会带来同样的痛苦。

1348
01:06:42,690 --> 01:06:44,302
So let's go back to VS Code here.
所以让我们回到这里的 VS Code。

1349
01:06:44,302 --> 01:06:47,510
Nothing seems to have gone wrong, but that's because I've hidden my terminal.
似乎没有出错，但那是因为我隐藏了我的终端。

1350
01:06:47,510 --> 01:06:50,450
Let me open my terminal window, and, oh, OK, so
让我打开我的终端窗口，哦，好的，所以

1351
01:06:50,450 --> 01:06:54,470
it looks like I made a crazy number of mistakes here somehow.
看起来我在这里犯了很多错误。

1352
01:06:54,470 --> 01:06:58,130
But let me go ahead and focus on--
但我继续关注 -

1353
01:06:58,130 --> 01:07:00,500
and the formatting's a little weird for some reason.
并且格式有点奇怪，不知道为什么。

1354
01:07:00,500 --> 01:07:01,340
Here we go.
来了。

1355
01:07:01,340 --> 01:07:04,290
It's a little cryptic at first glance, but here's
乍一看有点神秘，但这里

1356
01:07:04,290 --> 01:07:06,390
the most important line of output.
是最重要的输出行。

1357
01:07:06,390 --> 01:07:09,810
The view function for, quote, unquote, "Register" did not
“Register” 的视图函数没有

1358
01:07:09,810 --> 01:07:11,560
return a valid response.
返回有效的响应。

1359
01:07:11,560 --> 01:07:13,440
So you're not going to see this one too often
所以你不太可能经常看到它

1360
01:07:13,440 --> 01:07:16,740
most likely unless you do what I did, which was you didn't have an else.
除非你像我一样，没有 else 语句。

1361
01:07:16,740 --> 01:07:19,110
You didn't handle the situation where there is a name
你没有处理有名字的情况

1362
01:07:19,110 --> 01:07:20,800
and something should've come back.
应该返回一些东西。

1363
01:07:20,800 --> 01:07:21,900
So maybe I could do this.
所以也许我可以这样做。

1364
01:07:21,900 --> 01:07:25,007
By default, I could just say something like success as a catch
默认情况下，我可以简单地说像 success 这样的捕获

1365
01:07:25,007 --> 01:07:27,090
all even though I've not done anything useful yet.
尽管我还没有做任何有用的事情。

1366
01:07:27,090 --> 01:07:28,030
Let me try this again.
让我再试一次。

1367
01:07:28,030 --> 01:07:28,920
Let me go back.
让我回去。

1368
01:07:28,920 --> 01:07:30,480
David is typed in.
David 已经输入了。

1369
01:07:30,480 --> 01:07:32,310
No sport, Register.
没有运动，注册。

1370
01:07:32,310 --> 01:07:34,110
OK, so now I'm making progress again.
好的，我现在又取得了进展。

1371
01:07:34,110 --> 01:07:38,980
So just like week one stuff, I make sure I'm always returning some value,
所以就像第一周的内容一样，我确保我总是返回一些值，

1372
01:07:38,980 --> 01:07:41,070
whether it's success or failure in this case.
无论在这种情况下是成功还是失败。

1373
01:07:41,070 --> 01:07:43,200
All right, let's do something a little more interesting, though.
好吧，让我们做一些更有趣的事情吧。

1374
01:07:43,200 --> 01:07:44,140
I could do this.
我可以这样做。

1375
01:07:44,140 --> 01:07:49,620
How about elif not request.form.get sport.
如果我们使用 `elif not request.form.get sport` 会怎么样？

1376
01:07:49,620 --> 01:07:52,950
I could similarly return failure.
我可以同样返回一个失败信息。

1377
01:07:52,950 --> 01:07:56,600
But this is a little silly to have two nearly identical conditionals.
但是，拥有两个几乎相同的条件语句有点蠢。

1378
01:07:56,600 --> 01:07:58,350
So, actually, let me just tighten this up.
所以，让我来简化一下。

1379
01:07:58,350 --> 01:08:01,980
Let me go ahead and, instead, get rid of those two lines
让我来把这两行代码删掉，

1380
01:08:01,980 --> 01:08:09,330
and maybe just do something like this in Python or not request.form.get sport.
然后用 Python 写成这样，或者用 `not request.form.get sport`。

1381
01:08:09,330 --> 01:08:12,990
This is maybe the tightest way just to ask two questions that are essentially
这也许是最紧凑的方式，可以同时问两个本质上

1382
01:08:12,990 --> 01:08:15,060
the same but for two different keys.
相同的问题，但是针对两个不同的键值。

1383
01:08:15,060 --> 01:08:17,850
But returning, quote, unquote, "failure"'s a little weak.
但是返回一个 `failure`  有点弱。

1384
01:08:17,850 --> 01:08:19,170
That's not a valid web page.
那不是一个有效的网页。

1385
01:08:19,170 --> 01:08:20,830
It's literally the word failure.
它只是单词 `failure`。

1386
01:08:20,830 --> 01:08:25,020
So maybe we do this, render_template, quote, unquote, "failure.html".
所以，也许我们可以使用 `render_template` 并返回 `failure.html` 文件。

1387
01:08:25,020 --> 01:08:25,770
And you know what?
你知道吗？

1388
01:08:25,770 --> 01:08:30,609
Down here, render_template success.html.
在下方，我们用 `render_template` 返回 `success.html`。

1389
01:08:30,609 --> 01:08:33,240
So we actually send the browser a valid web page, not just
所以，我们实际上向浏览器发送一个有效的网页，而不是仅仅

1390
01:08:33,240 --> 01:08:34,529
a single English word.
一个英文单词。

1391
01:08:34,529 --> 01:08:36,487
Of course, we're going to need those templates.
当然，我们需要那些模板。

1392
01:08:36,487 --> 01:08:39,300
So let me go in and do something like this.
所以，让我来做一些事情。

1393
01:08:39,300 --> 01:08:45,630
If I go into, how about, my terminal window.
如果我进入我的终端窗口。

1394
01:08:45,630 --> 01:08:48,479
I need another terminal because Flask is still running in that one.
我需要另外一个终端，因为 Flask 还在之前的终端中运行。

1395
01:08:48,479 --> 01:08:53,640
Let me go into froshims and let me do code of templates success.html.
让我进入 `froshims` 目录，然后在 `templates` 文件夹中创建 `success.html`。

1396
01:08:53,640 --> 01:08:56,859
I'm going to save a few keystrokes and copy-paste all that stuff from index.
为了节省一些按键，我要从 `index.html` 文件中复制粘贴一些内容。

1397
01:08:56,859 --> 01:08:58,050
But I'm going to delete most of it.
但是我将删除大部分内容。

1398
01:08:58,050 --> 01:09:00,092
And I'm just going to keep it super simple today.
我今天就将其保持超级简单。

1399
01:09:00,092 --> 01:09:03,147
You are registered.
你已经注册了。

1400
01:09:03,147 --> 01:09:05,189
And then-- well, really, not really because we're
然后，实际上，并不是真的因为我们

1401
01:09:05,189 --> 01:09:07,731
not going to bother doing anything yet with the user's input.
现在还没有打算对用户输入进行任何处理。

1402
01:09:07,731 --> 01:09:09,670
Let me do something similar now for failure.
现在，让我为 `failure` 文件做一些类似的事情。

1403
01:09:09,670 --> 01:09:13,500
So code templates failure.html.
创建 `templates` 文件夹中的 `failure.html` 文件。

1404
01:09:13,500 --> 01:09:15,149
I'm going to copy-paste the same thing.
我将复制粘贴相同的内容。

1405
01:09:15,149 --> 01:09:18,040
And now I'm going to say the opposite, You are not registered.
现在，我要说相反的内容，你没有注册。

1406
01:09:18,040 --> 01:09:20,040
But I'm not going to be very useful, and I'm not
但我不会很有用，也不会

1407
01:09:20,040 --> 01:09:22,800
going to even yet tell the user what they have done wrong.
告诉用户他们做错了什么。

1408
01:09:22,800 --> 01:09:25,500
But at least now we have the beginnings of a froshims app.
但至少我们现在已经有了 `froshims` 应用的雏形。

1409
01:09:25,500 --> 01:09:27,930
So let me go back, reload everything.
所以，让我回到首页，刷新一下页面。

1410
01:09:27,930 --> 01:09:31,109
Let me not cooperate at all and click Register.
让我不合作一下，点击注册按钮。

1411
01:09:31,109 --> 01:09:34,029
OK, so you are not registered because of some failure.
好的，你没有注册，因为某些错误。

1412
01:09:34,029 --> 01:09:34,920
I'll type in my name.
我会输入我的名字。

1413
01:09:34,920 --> 01:09:36,370
OK, let's at least do that much.
好的，至少要做到这一点。

1414
01:09:36,370 --> 01:09:37,470
I'm still not registered.
我仍然没有注册。

1415
01:09:37,470 --> 01:09:38,279
Let's go back.
让我们回到首页。

1416
01:09:38,279 --> 01:09:40,470
Let's leave David and choose soccer.
让我们把 `David` 改成 `soccer`。

1417
01:09:40,470 --> 01:09:43,270
Now, OK, now you are registered.
好的，现在你已经注册了。

1418
01:09:43,270 --> 01:09:45,779
So I got the success template instead.
所以，我得到了 `success` 模板。

1419
01:09:45,779 --> 01:09:49,560
All right, so that seems to be better progress or at least the beginnings
好的，看起来这是一个不错的进步，或者至少是一个开始

1420
01:09:49,560 --> 01:09:51,750
of an actually useful application.
一个真正有用的应用程序的开始。

1421
01:09:51,750 --> 01:09:53,860
But let's actually do more validation.
但是，让我们来进行更多验证。

1422
01:09:53,860 --> 01:09:54,360
Why?
为什么？

1423
01:09:54,360 --> 01:09:56,250
Because notice what the human could still do.
因为注意，人类仍然可以做些什么。

1424
01:09:56,250 --> 01:09:58,800
Suppose that, out of principle, you really
假设，出于原则，你真的

1425
01:09:58,800 --> 01:10:01,780
want to register for a different sport.
想注册一个不同的运动项目。

1426
01:10:01,780 --> 01:10:03,750
So you're not a fan of soccer.
所以你不太喜欢足球？

1427
01:10:03,750 --> 01:10:05,220
You want American football.
你想玩美式橄榄球。

1428
01:10:05,220 --> 01:10:07,770
So let's right-click or Control-click on that.
所以让我们右键点击或 Ctrl 键点击它。

1429
01:10:07,770 --> 01:10:08,880
Choose Inspect.
选择检查。

1430
01:10:08,880 --> 01:10:10,650
And you can even do this client side.
你甚至可以在客户端进行操作。

1431
01:10:10,650 --> 01:10:12,870
Let me write click on the Select menu.
让我右键点击“选择”菜单。

1432
01:10:12,870 --> 01:10:15,690
In Chrome, let me select Edit as HTML.
在 Chrome 中，让我选择“以 HTML 编辑”。

1433
01:10:15,690 --> 01:10:18,550
You can start adding any HTML you want.
你可以开始添加任何你想要的 HTML 代码。

1434
01:10:18,550 --> 01:10:24,420
So let me add an option football close option enter.
所以让我添加一个选项“足球”，然后关闭选项并按回车键。

1435
01:10:24,420 --> 01:10:28,600
And, aha, now you have to support football as well.
然后，啊哈，现在你必须支持美式橄榄球了。

1436
01:10:28,600 --> 01:10:32,140
Of course, this is going to work because if I type in David and football
当然，这会起作用，因为如果我在里面输入 David 和足球

1437
01:10:32,140 --> 01:10:34,890
and Register even though I'm not doing anything with the response,
并点击“注册”，即使我没有对响应做任何操作，

1438
01:10:34,890 --> 01:10:38,190
I got through that validation filter because I was just
我通过了那个验证过滤器，因为我只是

1439
01:10:38,190 --> 01:10:40,210
checking that there's an actual value.
检查是否存在实际的值。

1440
01:10:40,210 --> 01:10:45,960
So this is now no longer really correct because some annoying first year who's
所以现在这不再完全正确了，因为一些讨厌的 CS50 大一新生会

1441
01:10:45,960 --> 01:10:48,000
just taken CS50 is now going to do something
刚学完 CS50 就去做一些

1442
01:10:48,000 --> 01:10:49,410
like this to my web application.
类似这样的事情来破坏我的网页应用。

1443
01:10:49,410 --> 01:10:52,410
And we're going to have bogus data in the database, ultimately.
最终，我们的数据库中将会有虚假数据。

1444
01:10:52,410 --> 01:10:56,537
So how do you defend against this properly when it really is that easy?
所以，当事情真的很容易时，你如何才能正确地防御这种攻击？

1445
01:10:56,537 --> 01:10:59,370
And, honestly, as soon as you put a web application on the internet,
老实说，一旦你把一个网页应用放到互联网上，

1446
01:10:59,370 --> 01:11:02,580
bad things will happen to it because people with too much free time.
它就会遭殃，因为那些有太多空闲时间的人会捣乱。

1447
01:11:02,580 --> 01:11:06,077
So how do we defend against it?
所以我们如何防御这种攻击呢？

1448
01:11:06,077 --> 01:11:07,410
What would be a better approach?
更好的方法是什么？

1449
01:11:07,410 --> 01:11:08,336
Yeah.
是的。

1450
01:11:08,336 --> 01:11:10,320
AUDIENCE: [INAUDIBLE]
听众：[听不清]

1451
01:11:13,300 --> 01:11:15,730
DAVID J. MALAN: Nice, so add another conditional such
很好，所以添加另一个条件，

1452
01:11:15,730 --> 01:11:18,490
that the only things allowed are the sports we actually
以便只允许我们实际提供的运动项目

1453
01:11:18,490 --> 01:11:19,753
are offering this semester.
在本学期提供。

1454
01:11:19,753 --> 01:11:20,920
And, in fact, you know what?
事实上，你知道吗？

1455
01:11:20,920 --> 01:11:23,080
We can take this one step further.
我们可以更进一步。

1456
01:11:23,080 --> 01:11:28,210
The fact that I hardcoded into my form, my select menu, those three sports--
我将这三个运动项目硬编码到了我的表单和下拉菜单中，

1457
01:11:28,210 --> 01:11:31,340
it'd be nice to maybe factor out those sports altogether
最好能把这些运动项目完全分离出来

1458
01:11:31,340 --> 01:11:34,900
so that I have one authoritative list that's used for generating the form
这样我就可以有一个权威的列表，用来生成表单

1459
01:11:34,900 --> 01:11:36,980
and also validating the user's input.
以及验证用户的输入。

1460
01:11:36,980 --> 01:11:37,750
So let me do this.
所以让我来做这件事。

1461
01:11:37,750 --> 01:11:39,790
In app.py, let me go in here.
在 app.py 中，让我进入这里。

1462
01:11:39,790 --> 01:11:43,660
And I can put this, how about, the top of my file, to be conventional.
我可以把它放到文件顶部，这是惯例。

1463
01:11:43,660 --> 01:11:46,390
I'm going to create a global variable called sports.
我将创建一个名为 sports 的全局变量。

1464
01:11:46,390 --> 01:11:49,900
By convention, in Python, I'm going to make it all uppercase even though that
按照惯例，在 Python 中，我将把它全部大写，尽管这

1465
01:11:49,900 --> 01:11:51,760
doesn't mean anything functional.
并没有什么功能上的意义。

1466
01:11:51,760 --> 01:11:53,680
There's no const keyword in Python.
Python 中没有 const 关键字。

1467
01:11:53,680 --> 01:11:56,770
So it's more on the honor system that no one else should touch this.
所以，更多的是一种道德约束，即其他人不应该修改它。

1468
01:11:56,770 --> 01:11:59,470
But, inside of my list here, let's go ahead
但是，在我的列表里，让我们继续

1469
01:11:59,470 --> 01:12:03,380
and do only the official three, basketball, soccer,
只添加三个官方的项目：篮球、足球

1470
01:12:03,380 --> 01:12:05,270
and ultimate Frisbee.
和极限飞盘。

1471
01:12:05,270 --> 01:12:09,340
So now I have a Python list of values that it
所以现在我有一个 Python 列表，它包含了

1472
01:12:09,340 --> 01:12:12,350
would be nice to use to generate that other form.
用来生成那个表单的值，这会很棒。

1473
01:12:12,350 --> 01:12:13,940
So this is maybe nonobvious.
所以这可能不太明显。

1474
01:12:13,940 --> 01:12:16,680
But I think it's just an application of past ideas.
但我认为这只是对过去想法的应用。

1475
01:12:16,680 --> 01:12:17,690
What if I do this?
如果我这样做呢？

1476
01:12:17,690 --> 01:12:21,140
What if I pass into my index.html template
如果我传递到我的 index.html 模板中

1477
01:12:21,140 --> 01:12:25,700
a placeholder called sports and set it equal to the value
一个名为 sports 的占位符，并将其设置为等于该值

1478
01:12:25,700 --> 01:12:28,100
of that global variable sports.
该全局变量 sports 的值。

1479
01:12:28,100 --> 01:12:30,950
Now, I'm trying to adhere to best practices.
现在，我正在尝试遵循最佳实践。

1480
01:12:30,950 --> 01:12:33,300
The placeholder is called sports in lowercase.
占位符被称为 sports，用小写字母。

1481
01:12:33,300 --> 01:12:36,260
But the actual variable I called all uppercase just
但实际变量我全部用大写字母命名只是

1482
01:12:36,260 --> 01:12:39,470
to make clear that it's a constant even though that's on the honor system.
为了明确它是一个常量，即使这只是基于信任系统。

1483
01:12:39,470 --> 01:12:40,700
But this too is conventional.
但这也很常规。

1484
01:12:40,700 --> 01:12:43,910
This is a Pythonic way or a Flask-centric way to do this.
这是一种 Python 风格或 Flask 中心化的做法。

1485
01:12:43,910 --> 01:12:48,720
But now, in index.html, this is where Jinja gets interesting.
但现在，在 index.html 中，这里就是 Jinja 开始变得有趣的地方。

1486
01:12:48,720 --> 01:12:51,530
This lightweight syntax for using placeholders
这种轻量级的占位符使用语法

1487
01:12:51,530 --> 01:12:55,110
gets interesting because I can now do something like this.
变得有趣，因为我现在可以做一些类似的事情。

1488
01:12:55,110 --> 01:12:57,170
I'm going to delete all three of the sports
我要删除所有三个运动

1489
01:12:57,170 --> 01:13:02,180
but not the disabled option, which is just the placeholder text, inside
但不是禁用选项，它只是占位符文本，在里面

1490
01:13:02,180 --> 01:13:03,080
of this select menu.
这个下拉菜单中。

1491
01:13:03,080 --> 01:13:04,310
Now I'm going to do this.
现在我要这样做。

1492
01:13:04,310 --> 01:13:08,300
Just like Python, I'm going to say for sport
就像 Python 一样，我要说 for sport

1493
01:13:08,300 --> 01:13:13,190
in sports using the curly brace notation and the percent signs, which
在 sports 中使用花括号和百分号，它们

1494
01:13:13,190 --> 01:13:18,800
are Jinja specific even though Jinja and Python use almost the same syntax.
是 Jinja 特定的，即使 Jinja 和 Python 使用几乎相同的语法。

1495
01:13:18,800 --> 01:13:20,300
And that's one of the upsides of it.
这也是它的优势之一。

1496
01:13:20,300 --> 01:13:21,592
You're not learning two things.
你不用学两件事。

1497
01:13:21,592 --> 01:13:25,250
You're learning 1.1 new things.
你学的是 1.1 件新东西。

1498
01:13:25,250 --> 01:13:27,980
endfor, which looks stupid, but this is a convention
endfor，看起来很傻，但这是一种约定

1499
01:13:27,980 --> 01:13:31,070
in a lot of languages to literally say end and the name of the keyword
在很多语言中，实际上就是说 end 和关键字的名称

1500
01:13:31,070 --> 01:13:33,080
that you are ending with no space.
你结束的地方，没有空格。

1501
01:13:33,080 --> 01:13:38,780
Inside of this Jinja loop, I'm going to write an option element once, option.
在这个 Jinja 循环中，我将编写一个 option 元素，一次，option。

1502
01:13:38,780 --> 01:13:41,870
And then, inside of the two option tags, I'm
然后，在两个 option 标签中，我

1503
01:13:41,870 --> 01:13:44,540
going to do my placeholder syntax with two curly braces
将使用我的占位符语法，用两个花括号

1504
01:13:44,540 --> 01:13:47,450
and just say sport like this.
并像这样说 sport。

1505
01:13:47,450 --> 01:13:52,250
And if I now go back into my browser tab and hit back here
如果我现在回到我的浏览器标签并点击返回这里

1506
01:13:52,250 --> 01:13:55,130
and I reload the page, notice that I still
然后我重新加载页面，请注意我仍然

1507
01:13:55,130 --> 01:13:58,250
have a dropdown that's still automatically populated
有一个下拉菜单，它仍然自动填充

1508
01:13:58,250 --> 01:14:02,330
because indeed if I go to View page source and look at the actual HTML,
因为实际上，如果我查看页面源代码并查看实际的 HTML，

1509
01:14:02,330 --> 01:14:04,610
there's some extra weird whitespace, but that's
有一些额外的奇怪空格，但那是

1510
01:14:04,610 --> 01:14:06,230
because I hit Enter in my template.
因为我在我的模板中按了回车键。

1511
01:14:06,230 --> 01:14:09,440
And it's generating literally what I put inside of that Jinja tag.
它正在生成我放在那个 Jinja 标签里面的内容。

1512
01:14:09,440 --> 01:14:12,230
It's generating that list of sports.
它正在生成那个运动列表。

1513
01:14:12,230 --> 01:14:13,070
And it turns out--
事实证明——

1514
01:14:13,070 --> 01:14:15,470
I'm going to do this just to be thorough.
我要做这件事，仅仅是为了彻底。

1515
01:14:15,470 --> 01:14:18,410
It turns out that the option element technically lets
事实证明，option 元素从技术上讲允许

1516
01:14:18,410 --> 01:14:21,590
you specify a value for that sport.
你指定该运动的值。

1517
01:14:21,590 --> 01:14:23,660
Often, they're one and the same.
通常，它们是一样的。

1518
01:14:23,660 --> 01:14:26,780
What the human sees is what the value of the option is.
人类看到的是选项的值。

1519
01:14:26,780 --> 01:14:29,660
It's kind of like the a href thing in the world of URLs.
这有点像 URL 世界中的 a href 东西。

1520
01:14:29,660 --> 01:14:31,787
But this is not going to change the functionality.
但这不会改变功能。

1521
01:14:31,787 --> 01:14:32,870
But it's going to do this.
但它将执行此操作。

1522
01:14:32,870 --> 01:14:37,910
If I reload now and I View page source, this is maybe a more common way
如果我现在重新加载并查看页面源代码，这可能是一种更常见的方式

1523
01:14:37,910 --> 01:14:41,150
to see options where, in orange, in my browser,
查看选项，用橙色显示在我的浏览器中，

1524
01:14:41,150 --> 01:14:43,160
is what the server is going to receive.
是服务器将要接收的内容。

1525
01:14:43,160 --> 01:14:45,260
In white is what the human's going to see.
白色是人类将要看到的内容。

1526
01:14:45,260 --> 01:14:49,130
They don't have to be one and the same for reasons we'll soon see.
它们不必完全相同，原因我们很快就会看到。

1527
01:14:49,130 --> 01:14:51,200
But what's nice now is that if I do actually
但现在很好的是，如果我真的

1528
01:14:51,200 --> 01:14:54,560
want to officially support American football, I can go in here,
想正式支持美式足球，我可以在这里，

1529
01:14:54,560 --> 01:14:56,840
add "football", quote, unquote, to my list,
将“足球”添加到我的列表中，

1530
01:14:56,840 --> 01:14:59,480
go back to the form, reload, and voila.
回到表单，重新加载，瞧。

1531
01:14:59,480 --> 01:15:01,070
Now I have a list of all four.
现在我有四个的列表。

1532
01:15:01,070 --> 01:15:03,690
But I haven't done the second side of what you proposed,
但我还没有做你提议的第二部分，

1533
01:15:03,690 --> 01:15:05,550
which is actually validate those sports.
那就是验证那些运动。

1534
01:15:05,550 --> 01:15:06,320
So let me do that.
所以让我来做。

1535
01:15:06,320 --> 01:15:08,000
Let me go over to app.py.
让我去看看 app.py。

1536
01:15:08,000 --> 01:15:12,120
And, in app.py-- and we'll no longer support football there--
在 app.py 中，我们不再支持那里的足球，

1537
01:15:12,120 --> 01:15:14,480
let's do this in my registration route.
让我们在注册路线中做这个。

1538
01:15:14,480 --> 01:15:18,260
So, instead of just checking, is there a value?
所以，与其只是检查是否有值，

1539
01:15:18,260 --> 01:15:20,990
And the whole point of using not is kind of like in C
使用“not”的整个要点就像在 C 中

1540
01:15:20,990 --> 01:15:23,520
where you use an exclamation point to invert the meaning.
你用感叹号来反转含义。

1541
01:15:23,520 --> 01:15:27,650
So if it's empty but it's not, then it's-- the whole value is true.
所以，如果它为空，但它不为空，那么它是——整个值都是真的。

1542
01:15:27,650 --> 01:15:29,130
Let's get rid of this line.
让我们去掉这行。

1543
01:15:29,130 --> 01:15:31,500
And let's instead do something like this.
让我们改为做这样的事情。

1544
01:15:31,500 --> 01:15:35,810
How about if not request.form.get name.
如果 request.form.get name 不是，怎么样？

1545
01:15:35,810 --> 01:15:37,940
So let's still just check for a name.
所以让我们还是只检查是否有名字。

1546
01:15:37,940 --> 01:15:46,370
Or request.form.get, quote, unquote, "sport" is not in the sports list.
或者 request.form.get，引号，“sport”不在体育列表中。

1547
01:15:46,370 --> 01:15:48,870
Now go ahead and say there's a failure.
现在说一下有错误。

1548
01:15:48,870 --> 01:15:49,830
So what does this mean?
所以这意味着什么？

1549
01:15:49,830 --> 01:15:54,365
If I go back to the browser and reload, I now see only three sports.
如果我回到浏览器并重新加载，现在我只能看到三种运动。

1550
01:15:54,365 --> 01:15:55,490
And I think this will work,
我认为这会奏效，

1551
01:15:55,490 --> 01:15:56,480
OK, David.
好的，大卫。

1552
01:15:56,480 --> 01:16:00,240
We'll register, say, for soccer, Register, and it seems to work.
我们将注册，比如，足球，注册，看起来它奏效了。

1553
01:16:00,240 --> 01:16:02,720
But if some hacker comes along and really
但如果一些黑客出现，并且真的

1554
01:16:02,720 --> 01:16:05,810
wants to register for American football, I'll right-click there.
想要注册美式足球，我会在那里右键单击。

1555
01:16:05,810 --> 01:16:07,160
I'll inspect this.
我会检查一下。

1556
01:16:07,160 --> 01:16:10,100
I'm going to hack the form and add a bogus option
我将破解表单并添加一个虚假选项

1557
01:16:10,100 --> 01:16:12,470
at the very end just for myself.
在最后，只是为了我自己。

1558
01:16:12,470 --> 01:16:17,340
And, down here, I'm going to say option value equals, quote, unquote,
然后，在下面，我要说 option value 等于，引号，

1559
01:16:17,340 --> 01:16:19,560
"football".
“足球”。

1560
01:16:19,560 --> 01:16:22,405
And then, inside of the option, I'm going
然后，在选项内部，我将

1561
01:16:22,405 --> 01:16:25,530
to say football just to be consistent even though they're one and the same.
说足球，为了保持一致，尽管它们是同一个。

1562
01:16:25,530 --> 01:16:26,700
Save that.
保存。

1563
01:16:26,700 --> 01:16:28,740
Close the developer tools.
关闭开发者工具。

1564
01:16:28,740 --> 01:16:30,780
Choose the hacked option.
选择破解的选项。

1565
01:16:30,780 --> 01:16:34,240
Register, but, no, we caught it this time.
注册，但是，不，这次我们抓住了它。

1566
01:16:34,240 --> 01:16:35,800
So this is hugely important.
所以这非常重要。

1567
01:16:35,800 --> 01:16:38,490
And there are so many darn websites in the real world where
现实世界中，有太多糟糕的网站，

1568
01:16:38,490 --> 01:16:41,580
the programmers either don't know or don't care
程序员要么不知道，要么不关心

1569
01:16:41,580 --> 01:16:43,920
to actually validate stuff server side.
实际上在服务器端验证东西。

1570
01:16:43,920 --> 01:16:46,500
This is how servers quite often get hacked.
这就是服务器经常被黑客入侵的方式。

1571
01:16:46,500 --> 01:16:50,250
You might have client-side validation using HTML or JavaScript.
你可能使用 HTML 或 JavaScript 进行客户端验证。

1572
01:16:50,250 --> 01:16:51,000
And it looks nice.
看起来不错。

1573
01:16:51,000 --> 01:16:51,760
It's immediate.
它是即时的。

1574
01:16:51,760 --> 01:16:53,160
It's very pretty and graphical.
它非常漂亮，图形化。

1575
01:16:53,160 --> 01:16:56,700
But if you're not also paranoically checking on the server,
但如果你没有偏执地检查服务器，

1576
01:16:56,700 --> 01:16:58,500
this is indeed how servers get hacked.
这确实就是服务器被黑客攻击的方式。

1577
01:16:58,500 --> 01:17:01,170
Or, at least in the best case here, your data set
或者，至少在最好的情况下，你的数据集

1578
01:17:01,170 --> 01:17:04,180
is sort of polluted with sports that you're not actually going to offer.
会充满你不打算提供的运动。

1579
01:17:04,180 --> 01:17:06,097
So this is not a very harmful attack, but it's
所以这不是一个非常有害的攻击，但它是

1580
01:17:06,097 --> 01:17:10,410
representative of what kind of actions can be taken on your server
代表了在你的服务器上可以采取的行动类型

1581
01:17:10,410 --> 01:17:12,420
if you don't distrust the user.
如果你不怀疑用户。

1582
01:17:12,420 --> 01:17:14,530
So, unfortunately, this is kind of a negative day.
所以，不幸的是，今天有点负面。

1583
01:17:14,530 --> 01:17:17,470
Never, ever trust user input.
永远不要信任用户输入。

1584
01:17:17,470 --> 01:17:20,950
We saw that already with SQL and injection attacks.
我们已经在 SQL 和注入攻击中看到了这一点。

1585
01:17:20,950 --> 01:17:23,080
All right, any other questions?
好的，还有其他问题吗？

1586
01:17:23,080 --> 01:17:26,810
Any questions thus far on this?
到目前为止对此有任何问题吗？

1587
01:17:26,810 --> 01:17:30,340
Otherwise, we'll add a bit of spice in just a moment.
否则，我们一会儿会加点调味料。

1588
01:17:30,340 --> 01:17:30,850
No?
没有？

1589
01:17:30,850 --> 01:17:32,920
All right, well, just to show you an alternative to this,
好的，为了向你展示一个替代方案，

1590
01:17:32,920 --> 01:17:35,740
let me change the GUI, the Graphical User Interface, slightly.
让我稍微改变一下 GUI，图形用户界面。

1591
01:17:35,740 --> 01:17:37,720
Drop-down menus pretty compelling here.
下拉菜单在这里非常引人注目。

1592
01:17:37,720 --> 01:17:39,340
But there's other techniques.
但还有其他技术。

1593
01:17:39,340 --> 01:17:43,330
And we won't dwell on HTML tags, which you can pick up largely online.
我们不会详细讨论 HTML 标签，你可以在网上找到大部分内容。

1594
01:17:43,330 --> 01:17:47,650
But let me go into maybe index.html just to show you
但让我进入 index.html，向你展示

1595
01:17:47,650 --> 01:17:49,870
one different approach here.
这里一种不同的方法。

1596
01:17:49,870 --> 01:17:53,020
And if you really like radio buttons, the little circles that
如果你真的喜欢单选按钮，那些小圆圈

1597
01:17:53,020 --> 01:17:56,650
are mutually exclusive-- this is a throwback to radios, before my time,
是互斥的——这是对无线电的回归，在我那个时代之前，

1598
01:17:56,650 --> 01:17:59,680
in cars where, when you pushed the button for one radio station,
在汽车上，当你按下某个广播电台的按钮时，

1599
01:17:59,680 --> 01:18:02,200
it would pop out the buttons for another, essentially,
它会弹出另一个的按钮，本质上，

1600
01:18:02,200 --> 01:18:05,050
for your favorite channels.
为了你最喜欢的频道。

1601
01:18:05,050 --> 01:18:08,690
Radio buttons are, by definition, therefore, mutually exclusive.
因此，根据定义，单选按钮是互斥的。

1602
01:18:08,690 --> 01:18:11,900
So if I want to see those radio buttons and not a select menu,
所以如果我想看到这些单选按钮，而不是一个下拉菜单，

1603
01:18:11,900 --> 01:18:13,780
let me go into index.html.
让我进入 index.html。

1604
01:18:13,780 --> 01:18:17,650
And, instead of this select menu, let me actually delete that.
然后，代替这个下拉菜单，让我把它删除。

1605
01:18:17,650 --> 01:18:20,560
And even though this isn't going to be super pretty, let me do this.
虽然这看起来不会超级漂亮，但让我这样做。

1606
01:18:20,560 --> 01:18:26,740
for sport in sports, just as before, endfor, just preemptively.
对于运动中的运动，就像之前一样，结束循环，先发制人。

1607
01:18:26,740 --> 01:18:29,170
Inside of this Jinja loop, I'm going to do this.
在这个 Jinja 循环中，我要这样做。

1608
01:18:29,170 --> 01:18:30,980
I'm going to do an actual input tag.
我将使用一个真正的 input 标签。

1609
01:18:30,980 --> 01:18:32,300
But it's not going to be text.
但它不会是文本。

1610
01:18:32,300 --> 01:18:33,950
But the name of this tag--
但这个标签的名称——

1611
01:18:33,950 --> 01:18:38,420
of this element is going to be sport.
这个元素的名称将是 sport。

1612
01:18:38,420 --> 01:18:43,160
The type of this element is going to be radio for radio buttons.
这个元素的类型将是 radio，用于单选按钮。

1613
01:18:43,160 --> 01:18:47,690
And the value of this button is going to be whatever that sport is.
这个按钮的值将是该运动。

1614
01:18:47,690 --> 01:18:51,320
But what the human is going to see next to the radio button to the right
但人类在单选按钮右侧看到的是

1615
01:18:51,320 --> 01:18:53,147
is the same thing, the name of the sport.
同样的东西，运动的名称。

1616
01:18:53,147 --> 01:18:54,980
So this is going to look a little different.
所以这看起来会有点不同。

1617
01:18:54,980 --> 01:18:58,250
And it is going to look ugly in my black and white viewport here with no CSS.
而且在没有 CSS 的黑白视窗中，它看起来会很丑。

1618
01:18:58,250 --> 01:19:01,820
But it does speak to how you can change the user interface just using
但这确实说明了如何仅使用不同的构建块来更改用户界面。

1619
01:19:01,820 --> 01:19:04,260
different building blocks.
不同的构建块。

1620
01:19:04,260 --> 01:19:05,420
Let me reload.
让我重新加载一下。

1621
01:19:05,420 --> 01:19:07,565
And, OK, it's probably not the right call here
好的，这可能不是这里的正确做法

1622
01:19:07,565 --> 01:19:09,440
because it's just kind of making things ugly.
因为它只是让事情变得难看。

1623
01:19:09,440 --> 01:19:13,640
But it's as simple as that because if I now click on this or this or this,
但这很简单，因为如果我现在点击这个，这个或者这个，

1624
01:19:13,640 --> 01:19:15,860
they're indeed mutually exclusive.
它们确实互斥。

1625
01:19:15,860 --> 01:19:20,300
However, suppose that you want to allow the particularly athletic first years
但是，假设你想允许那些特别有运动天赋的一年级新生

1626
01:19:20,300 --> 01:19:23,120
to sign up for not one but two sports or all three.
报名参加一项运动，而是两项或三项。

1627
01:19:23,120 --> 01:19:25,760
In no case now can you support that right now.
现在，你无法支持这种情况。

1628
01:19:25,760 --> 01:19:28,250
The workaround now for a bad website would
对于一个糟糕的网站，现在的变通方法是

1629
01:19:28,250 --> 01:19:31,302
be, oh, just go register twice, or go register three times.
哦，就是去注册两次，或者去注册三次。

1630
01:19:31,302 --> 01:19:33,260
It's not a huge deal because you just hit back.
这不是什么大问题，因为你只需要点击返回。

1631
01:19:33,260 --> 01:19:34,880
And then you change the dropdown and submit.
然后你改变下拉菜单并提交。

1632
01:19:34,880 --> 01:19:36,780
You hit back you change the dropdown and submit.
你点击返回，改变下拉菜单并提交。

1633
01:19:36,780 --> 01:19:38,000
But that's just bad design.
但这只是糟糕的设计。

1634
01:19:38,000 --> 01:19:39,900
Surely, we can do better than that.
当然，我们可以做得更好。

1635
01:19:39,900 --> 01:19:43,340
So, in fact, let's make one change here and use checkboxes.
所以，实际上，让我们在这里进行一个更改，使用复选框。

1636
01:19:43,340 --> 01:19:46,310
And if you've never really thought hard about this in the web,
如果你以前从未真正认真想过这个问题，

1637
01:19:46,310 --> 01:19:50,000
radio buttons and checkboxes have this distinct property
单选按钮和复选框具有这种独特的属性

1638
01:19:50,000 --> 01:19:53,180
where the former is mutually exclusive, and the latter
前者是互斥的，而后者

1639
01:19:53,180 --> 01:19:58,100
is inclusive whereby you can check 0 or more of those boxes collectively.
是包含的，你可以集体选中这些框中的 0 个或多个。

1640
01:19:58,100 --> 01:20:01,580
So if I actually just go into that same template
所以，如果我真的进入那个相同的模板

1641
01:20:01,580 --> 01:20:06,440
and change the type of this input from radio to checkbox
并将此输入的类型从单选按钮更改为复选框

1642
01:20:06,440 --> 01:20:09,590
and then go back to the browser and reload,
然后回到浏览器并重新加载，

1643
01:20:09,590 --> 01:20:12,770
you immediately get what you and I see in the real world as checkboxes.
你会立即得到你和我，在现实世界中所看到的复选框。

1644
01:20:12,770 --> 01:20:17,120
And the upside of this is that you can check now 0 or more of them.
这样做的好处是，你现在可以选中 0 个或多个。

1645
01:20:17,120 --> 01:20:19,010
But the catch-- and this is subtle--
但是问题是——而且这一点很微妙——

1646
01:20:19,010 --> 01:20:23,880
the catch with our code right now is that we're only expecting one value.
我们现在代码的问题是，我们只期望一个值。

1647
01:20:23,880 --> 01:20:26,120
So it's a minor fix, but it's a useful thing to know.
所以这是一个小修补，但这是一个有用的知识。

1648
01:20:26,120 --> 01:20:31,010
If I go back to app.py, if I actually want to get all of the sports
如果我回到 app.py，如果我真的想获取所有运动

1649
01:20:31,010 --> 01:20:35,300
from the users, I'm going to have to change my validation slightly.
来自用户，我将不得不稍微改变一下我的验证。

1650
01:20:35,300 --> 01:20:36,550
So I'm going to do this.
所以我会这样做。

1651
01:20:36,550 --> 01:20:39,460
I'm going to check for the presence of a name as before.
我将像以前一样检查是否存在一个名字。

1652
01:20:39,460 --> 01:20:42,280
But then I'm going to use a loop to validate the sports because I
但随后，我将使用一个循环来验证这些运动，因为我

1653
01:20:42,280 --> 01:20:44,697
don't want them to slip, like football, back into the list
不想让它们溜回去，就像足球一样，回到列表中

1654
01:20:44,697 --> 01:20:45,800
even if it's not there.
即使它不在那里。

1655
01:20:45,800 --> 01:20:47,320
So I'm going to say this in Python.
所以我会在 Python 中这样写。

1656
01:20:47,320 --> 01:20:52,828
for each sport in request.form.getall.
对于 request.form.getall 中的每项运动

1657
01:20:52,828 --> 01:20:57,370
If you know it's a checkbox, you want to get all of the checked values, not one,
如果你知道它是一个复选框，你想要获取所有选中的值，而不是一个，

1658
01:20:57,370 --> 01:21:01,030
for the sport parameter, then go ahead and do this.
对于 sport 参数，然后继续执行此操作。

1659
01:21:01,030 --> 01:21:06,130
If the current sport is not in that sports list up top,
如果当前运动不在顶部的那个运动列表中，

1660
01:21:06,130 --> 01:21:10,440
then go ahead and return render_template failure.html.
那么，继续返回 render_template failure.html。

1661
01:21:13,780 --> 01:21:14,900
Did I make a mistake here?
我在这里犯错了吗？

1662
01:21:14,900 --> 01:21:16,340
I think we're good there.
我认为我们在这里没问题。

1663
01:21:16,340 --> 01:21:19,510
So we're checking against every value that was checked on the form.
所以我们正在检查表单中所选中的每个值。

1664
01:21:19,510 --> 01:21:20,770
Is it actually valid?
它是否有效？

1665
01:21:20,770 --> 01:21:24,850
And so now if I go in here, reload, type in my name David, and I'll
所以现在，如果我在这里，重新加载，输入我的名字 David，然后我会……

1666
01:21:24,850 --> 01:21:28,030
just check one of them, for instance, because I've not hacked the form
比如，就检查其中一个，因为我没有黑掉表单

1667
01:21:28,030 --> 01:21:30,682
and added something bogus like football.
并在里面添加了一些虚假的东西，比如足球。

1668
01:21:30,682 --> 01:21:32,140
Maybe someone was alluding to this.
也许有人在暗示这个。

1669
01:21:32,140 --> 01:21:33,470
I see now an error.
我现在看到了一个错误。

1670
01:21:33,470 --> 01:21:35,057
So let's do this together.
所以我们一起做吧。

1671
01:21:35,057 --> 01:21:36,140
Not sure what I did wrong.
我不确定我做错了什么。

1672
01:21:36,140 --> 01:21:39,370
I'm going to open up my terminal and go to here.
我要打开我的终端，并转到此处。

1673
01:21:39,370 --> 01:21:42,520
And, oh, interesting, my spacing's a little weird here.
而且，哦，有趣的是，我的间距在这里有点奇怪。

1674
01:21:42,520 --> 01:21:43,960
But attribute error.
但是属性错误。

1675
01:21:43,960 --> 01:21:48,310
Immutable dictionary has no attribute getall.
不可变字典没有属性 getall。

1676
01:21:48,310 --> 01:21:51,020
So this is me lying to you.
所以这是我在骗你。

1677
01:22:02,540 --> 01:22:03,740
I don't think so.
我不这么认为。

1678
01:22:03,740 --> 01:22:07,040
But [INAUDIBLE], are you here?
但是 [听不清]，你在吗？

1679
01:22:07,040 --> 01:22:09,710
Did Flask change since I last did this?
自从我上次做这件事以来，Flask 有变化吗？

1680
01:22:09,710 --> 01:22:12,460
No.
没有。

1681
01:22:12,460 --> 01:22:19,696
OK, so Flask post form getall.
好的，所以 Flask post 表单 getall。

1682
01:22:19,696 --> 01:22:21,220
All right, here we go.
好的，我们开始吧。

1683
01:22:21,220 --> 01:22:23,650
About 2012, this is probably out of date.
大约 2012 年，这可能已经过时了。

1684
01:22:23,650 --> 01:22:25,750
But ah.
但是啊。

1685
01:22:28,320 --> 01:22:30,330
You know, that's not a bad idea, OK.
你知道，这不是一个坏主意，好的。

1686
01:22:38,390 --> 01:22:47,360
All right, OK, in Flask, how do I get all of the values
好的，好的，在 Flask 中，如何获取所有值

1687
01:22:47,360 --> 01:22:56,240
from an HTML input of type checkbox from request.form?
来自 request.form 中类型为复选框的 HTML 输入？

1688
01:22:59,370 --> 01:23:01,890
Well, this is horrifying.
好吧，这太可怕了。

1689
01:23:01,890 --> 01:23:02,940
getlist!
getlist！

1690
01:23:02,940 --> 01:23:04,710
Damn it, OK.
该死，好吧。

1691
01:23:04,710 --> 01:23:05,940
What a good duck.
真是个好鸭子。

1692
01:23:05,940 --> 01:23:10,810
All right, so-- all right, so we'll rewind in time.
好的，所以 - 好的，所以我们会倒回时间。

1693
01:23:10,810 --> 01:23:11,850
So thank you.
所以谢谢。

1694
01:23:11,850 --> 01:23:15,161
[APPLAUSE]
[鼓掌]

1695
01:23:16,580 --> 01:23:17,660
So that's a good lesson.
所以这是一个很好的教训。

1696
01:23:17,660 --> 01:23:19,110
Just do as I do.
就像我做的那样。

1697
01:23:19,110 --> 01:23:22,680
All right, so getlist will get you a list of all of those values.
好的，所以 getlist 将会获得所有这些值的列表。

1698
01:23:22,680 --> 01:23:25,550
So now if I go ahead and register as David,
所以现在，如果我继续以 David 的身份注册，

1699
01:23:25,550 --> 01:23:27,530
click just soccer without injecting something
只点击足球，而不用注入一些东西

1700
01:23:27,530 --> 01:23:29,812
like American football and Register, now I'm,
像美式足球，然后点击注册，现在我，

1701
01:23:29,812 --> 01:23:32,270
in fact, registered but not really, not really in the sense
事实上，已经注册了，但实际上没有，在某种意义上说没有

1702
01:23:32,270 --> 01:23:35,250
that we haven't actually done anything with the data.
我们实际上没有对数据做任何事情。

1703
01:23:35,250 --> 01:23:38,540
So this is to say, ultimately, that there's a lot of these building blocks,
所以，最终的意思是，有很多这样的构建模块，

1704
01:23:38,540 --> 01:23:42,260
not only in HTML, which is mostly a throwback to last week but also now,
不仅在 HTML 中，它主要是一个对上周的回顾，而且现在，

1705
01:23:42,260 --> 01:23:45,530
in Flask, where you can process all of those building blocks
在 Flask 中，你可以处理所有这些构建模块

1706
01:23:45,530 --> 01:23:48,200
and take control over what up, until now,
并控制到目前为止，

1707
01:23:48,200 --> 01:23:51,620
is usually the domain of Google or the websites that you actually use.
通常是谷歌或你实际使用的网站的领域。

1708
01:23:51,620 --> 01:23:54,140
Now you actually have more of the building blocks via which
现在，你实际上拥有了更多用来实现这些事物的构建模块。

1709
01:23:54,140 --> 01:23:56,010
to implement these things yourself.
你自己实现这些东西。

1710
01:23:56,010 --> 01:23:59,300
So let's go ahead and add some final features to froshims
所以，让我们继续为 froshims 添加一些最终功能

1711
01:23:59,300 --> 01:24:02,150
here where we're actually doing something with the results.
在这里，我们实际上用结果做了一些事情。

1712
01:24:02,150 --> 01:24:04,650
And, for this, I'm going to open up a version in advance.
并且，为此，我将提前打开一个版本。

1713
01:24:04,650 --> 01:24:06,620
So I'm going to go over to VS Code here.
所以我要去到 VS Code 这里。

1714
01:24:06,620 --> 01:24:13,140
And let me go ahead and close these tabs but go into my second terminal window.
然后让我继续关闭这些标签，但进入我的第二个终端窗口。

1715
01:24:13,140 --> 01:24:15,380
And I'm going to go into today's src9 directory.
我要进入今天的 src9 目录。

1716
01:24:15,380 --> 01:24:18,120
And I'm going to go into version 4 of froshims, which has
我将进入 froshims 的版本 4，它包含

1717
01:24:18,120 --> 01:24:20,138
everything we just did plus a bit more.
我们刚刚做的一切，再加上一些。

1718
01:24:20,138 --> 01:24:22,180
In particular, I'm going to go ahead and do this.
特别是，我要继续做这个。

1719
01:24:22,180 --> 01:24:24,330
I'm going to show you app.py, which, additionally,
我将向你展示 app.py，另外，

1720
01:24:24,330 --> 01:24:25,680
has some comments throughout.
在整个文件中有一些注释。

1721
01:24:25,680 --> 01:24:31,860
But, in app.py, what you'll notice is that, after all of my validation,
但是，在 app.py 中，你会注意到，在我完成所有验证之后，

1722
01:24:31,860 --> 01:24:34,630
I'm actually got a couple of new features here.
我实际上在这里添加了一些新功能。

1723
01:24:34,630 --> 01:24:38,040
It's a little weak in terms of UI to just tell the user failure.
仅仅告诉用户失败，在 UI 方面有点弱。

1724
01:24:38,040 --> 01:24:39,210
You are not registered.
你没有注册。

1725
01:24:39,210 --> 01:24:41,010
That's all my template previously did.
这就是我之前的所有模板所做的。

1726
01:24:41,010 --> 01:24:45,360
But what if I borrow an idea from my index template where all of this time,
但是，如果我从我的索引模板借鉴一个想法，在那里，我一直，

1727
01:24:45,360 --> 01:24:48,190
for hello and froshims, I've been passing in input.
对于 hello 和 froshims，我一直传递输入。

1728
01:24:48,190 --> 01:24:49,330
So what if I do this?
那如果我这样做呢？

1729
01:24:49,330 --> 01:24:50,190
Let me show you.
让我演示给你看。

1730
01:24:50,190 --> 01:24:58,230
In templates, failure.html-- or, rather, let's see, in templates, error.html.
在模板中，failure.html--或者，让我们看看，在模板中，error.html。

1731
01:24:58,230 --> 01:25:00,570
So notice this, I can make the beginnings
所以请注意这一点，我可以开始创建

1732
01:25:00,570 --> 01:25:03,190
of a common format for an error page.
错误页面的通用格式。

1733
01:25:03,190 --> 01:25:05,760
So, in error.html of this fourth example,
所以，在这个第四个例子中的 error.html 中，

1734
01:25:05,760 --> 01:25:08,440
I've just got some big, bold error message at the top.
我只是在顶部放了一些大而粗的错误消息。

1735
01:25:08,440 --> 01:25:10,560
But I have a paragraph tag inside of which
但我在里面有一个段落标签

1736
01:25:10,560 --> 01:25:13,380
is a placeholder for an error message.
是错误消息的占位符。

1737
01:25:13,380 --> 01:25:17,520
And then I've gone one step further just because and put a happy cat or grumpy
然后，我仅仅因为这样做，更进一步，放了一只快乐的猫或一只沮丧的

1738
01:25:17,520 --> 01:25:21,630
cat as an image to let you down easy that something has gone wrong.
猫作为图片，让你更容易地接受发生了错误的事实。

1739
01:25:21,630 --> 01:25:25,770
But this is like now every website where there's generally some customized error
但这就像现在每个网站，通常都会有一些定制的错误

1740
01:25:25,770 --> 01:25:28,410
message when something has gone wrong or when you have not
消息，当发生错误时，或者当你没有

1741
01:25:28,410 --> 01:25:30,550
cooperated with the rules of the form.
与表单的规则配合。

1742
01:25:30,550 --> 01:25:32,230
So what am I doing instead?
那我在做什么呢？

1743
01:25:32,230 --> 01:25:35,820
Instead of rendering failure.html very generically,
与渲染非常通用的 failure.html 不同，

1744
01:25:35,820 --> 01:25:38,220
I'm rendering this new template error.html.
我正在渲染这个新的模板 error.html。

1745
01:25:38,220 --> 01:25:39,820
And I'm passing in a custom message.
并且我传递了一个自定义消息。

1746
01:25:39,820 --> 01:25:40,320
Why?
为什么？

1747
01:25:40,320 --> 01:25:44,528
Because now, in my app.py, my logic, I can actually say,
因为现在，在我的 app.py 中，我的逻辑，我实际上可以这么说，

1748
01:25:44,528 --> 01:25:45,570
you're missing your name.
你缺少你的名字。

1749
01:25:45,570 --> 01:25:46,528
You're missing a sport.
你缺少一个运动项目。

1750
01:25:46,528 --> 01:25:51,300
Or I can tell the human what the error, which is much better user interface.
或者我可以告诉人类错误是什么，这在用户界面上要好得多。

1751
01:25:51,300 --> 01:25:53,910
Down here, though, on this new line, here's
不过，在这下面，在这条新的行上，这里就是

1752
01:25:53,910 --> 01:25:57,300
where I'm now beginning to actually register registrants.
我开始真正注册注册者的地方。

1753
01:25:57,300 --> 01:25:58,870
What's the easiest way to do this?
最简单的做法是什么？

1754
01:25:58,870 --> 01:26:00,960
Well, let me scroll to the top of this file.
好吧，让我滚动到这个文件的顶部。

1755
01:26:00,960 --> 01:26:04,860
And you'll see that, in addition, to a big list of sports,
你会看到，除了一个庞大的运动项目列表之外，

1756
01:26:04,860 --> 01:26:08,850
I also have an empty dictionary initially of registrants.
我最初还有一个空的注册者字典。

1757
01:26:08,850 --> 01:26:09,480
Why?
为什么？

1758
01:26:09,480 --> 01:26:14,290
Well, dictionaries are this nice Swiss army knife, key-value pair, key, value,
好吧，字典就像一把瑞士军刀，键值对，键，值，

1759
01:26:14,290 --> 01:26:15,060
key, value.
键，值。

1760
01:26:15,060 --> 01:26:16,470
Names could be keys.
名字可以是键。

1761
01:26:16,470 --> 01:26:18,570
And maybe sports could be values, at least
也许运动项目可以是值，至少

1762
01:26:18,570 --> 01:26:20,190
if I'm supporting just single sports.
如果我仅仅支持单一运动项目。

1763
01:26:20,190 --> 01:26:22,065
So I could have a fancier structure, but this
所以我可以有一个更复杂的结构，但这个

1764
01:26:22,065 --> 01:26:25,270
seems sufficient, two columns, key, value, for name, sport, name, sport,
似乎足够了，两列，键，值，用于名字，运动项目，名字，运动项目，

1765
01:26:25,270 --> 01:26:26,080
and so forth.
等等。

1766
01:26:26,080 --> 01:26:31,290
So how do I put a person's name into that global dictionary?
那么，如何将一个人的姓名放入该全局字典中呢？

1767
01:26:31,290 --> 01:26:35,040
Well, I'll use the syntax from week six, registrants bracket name
嗯，我将使用第六周的语法，registrants 括号名称

1768
01:26:35,040 --> 01:26:39,090
equals sport that associates that value with that key.
等于 sport，它将该值与该键关联起来。

1769
01:26:39,090 --> 01:26:43,622
And, now, what you'll see in that I've added a new route /registrants.
现在，你会看到我添加了一个新的路由 /registrants。

1770
01:26:43,622 --> 01:26:45,330
And this is where things get interesting.
而这正是事情变得有趣的地方。

1771
01:26:45,330 --> 01:26:47,520
If I look at this premade route as you will too,
如果我查看这个预制的路由，你也会这样做，

1772
01:26:47,520 --> 01:26:50,590
as you look at code that's been written for you in the weeks to come,
就像你查看未来几周为你编写的代码一样，

1773
01:26:50,590 --> 01:26:54,930
well, this sort of invites me to look at registrants.html.
嗯，这似乎在邀请我查看 registrants.html。

1774
01:26:54,930 --> 01:26:55,650
Why?
为什么？

1775
01:26:55,650 --> 01:26:58,470
Apparently, this registrants.html template
显然，这个 registrants.html 模板

1776
01:26:58,470 --> 01:27:02,070
is being passed this global dictionary.
正在传递这个全局字典。

1777
01:27:02,070 --> 01:27:03,240
How might I use that?
我该如何使用它？

1778
01:27:03,240 --> 01:27:05,910
Well, let me go into VS Code's terminal.
好吧，让我进入 VS Code 的终端。

1779
01:27:05,910 --> 01:27:09,930
Let me take a look at registrants.html.
让我看一下 registrants.html。

1780
01:27:09,930 --> 01:27:12,390
And, interesting, we haven't used this HTML much.
有趣的是，我们并没有太多地使用这个 HTML。

1781
01:27:12,390 --> 01:27:14,350
I used it super briefly last week.
上周我非常简短地使用过它。

1782
01:27:14,350 --> 01:27:15,305
This is an HTML table.
这是一个 HTML 表格。

1783
01:27:15,305 --> 01:27:17,430
It's not going to look super pretty because I'm not
它不会看起来非常漂亮，因为我没有

1784
01:27:17,430 --> 01:27:19,650
using bootstrap or CSS more generally.
使用 Bootstrap 或更一般的 CSS。

1785
01:27:19,650 --> 01:27:23,070
But notice that, in the table's head, there's
但是请注意，在表格的头部，有

1786
01:27:23,070 --> 01:27:26,610
name and sport from left to right in the two columns.
从左到右两列中分别为 name 和 sport。

1787
01:27:26,610 --> 01:27:30,000
And then, in the table body or tbody, notice
然后，在表格主体或 tbody 中，请注意

1788
01:27:30,000 --> 01:27:36,570
that I have a whole bunch of tr, tr, tr, one for every registrant in that Jinja
我有很多 tr，tr，tr，每个 tr 都对应该 Jinja 中的每个注册者

1789
01:27:36,570 --> 01:27:37,110
loop.
循环。

1790
01:27:37,110 --> 01:27:40,830
Each of the cells, the table datas have the person's name.
每个单元格，即表格数据都包含该人的姓名。

1791
01:27:40,830 --> 01:27:45,000
And then if you go inside of that dictionary and look up the name,
然后，如果你进入那个字典并查找该姓名，

1792
01:27:45,000 --> 01:27:48,720
you get the value thereof, so name, sport, name, sport.
你会得到它的值，所以姓名、运动、姓名、运动。

1793
01:27:48,720 --> 01:27:53,550
And the route, of course, again, is just this, render registrants.html
当然，路由仍然是这个，渲染 registrants.html

1794
01:27:53,550 --> 01:27:55,150
by passing in that dictionary.
通过传入那个字典。

1795
01:27:55,150 --> 01:27:56,940
So what is registrants.html?
那么 registrants.html 是什么呢？

1796
01:27:56,940 --> 01:27:57,640
It's just this.
就是这个。

1797
01:27:57,640 --> 01:28:00,630
So I think if we go and run this version of the application,
所以，我认为如果我们运行这个版本的应用程序，

1798
01:28:00,630 --> 01:28:02,350
we have some nice new features.
我们有一些很棒的新功能。

1799
01:28:02,350 --> 01:28:04,200
Let me go ahead and do Flask--
让我继续使用 Flask -

1800
01:28:04,200 --> 01:28:07,530
let me kill Flask in the other window just so it's not using the same port.
让我在另一个窗口中关闭 Flask，这样它就不会使用相同的端口。

1801
01:28:07,530 --> 01:28:11,040
Let me do flask run inside of froshims4.
让我在 froshims4 中执行 flask run。

1802
01:28:11,040 --> 01:28:12,420
So far, so good.
目前为止，一切顺利。

1803
01:28:12,420 --> 01:28:14,110
Let me go over to my other tab.
让我切换到另一个标签页。

1804
01:28:14,110 --> 01:28:14,710
Let me reload.
让我重新加载。

1805
01:28:14,710 --> 01:28:15,900
So I get the latest HTML.
这样我就能获得最新的 HTML。

1806
01:28:15,900 --> 01:28:18,150
I'm going to go ahead and type in something like David
我将继续输入像 David 这样的内容

1807
01:28:18,150 --> 01:28:20,495
but select no sport using radio buttons.
但使用单选按钮选择没有运动。

1808
01:28:20,495 --> 01:28:21,870
So, again, you can only pick one.
所以，再说一次，你只能选择一个。

1809
01:28:21,870 --> 01:28:25,350
And now not only am I seeing one grumpy cat there.
现在，我不仅看到了一只生气的小猫。

1810
01:28:25,350 --> 01:28:28,380
It's also telling me at the top that I'm missing the sport.
它还在顶部告诉我，我缺少运动。

1811
01:28:28,380 --> 01:28:31,830
Conversely, if I reload the page, don't give my name.
相反，如果我重新加载页面，不提供我的姓名。

1812
01:28:31,830 --> 01:28:33,900
But do give the sport and register.
但要提供运动并注册。

1813
01:28:33,900 --> 01:28:36,060
Now you see that I'm missing name and not sport.
现在你会看到，我缺少姓名，而不是运动。

1814
01:28:36,060 --> 01:28:39,480
So, again, the UI is not very pretty, but it has the building blocks
所以，再说一次，UI 并不漂亮，但它具有构建块。

1815
01:28:39,480 --> 01:28:41,860
of being much more appropriate.
更合适得多。

1816
01:28:41,860 --> 01:28:43,470
Let me now cooperate on both fronts.
现在让我在这两个方面都进行合作。

1817
01:28:43,470 --> 01:28:46,800
David wants to register for soccer, Register.
大卫想要报名参加足球，报名。

1818
01:28:46,800 --> 01:28:48,750
And now notice where I am.
现在注意我身在何处。

1819
01:28:48,750 --> 01:28:51,930
Apparently, I got redirected to the registrants route,
显然，我被重定向到了注册路线，

1820
01:28:51,930 --> 01:28:54,290
inside of which is this two column table.
其内是这个两列表格。

1821
01:28:54,290 --> 01:28:55,540
It's not very interesting yet.
现在还不太有趣。

1822
01:28:55,540 --> 01:28:56,940
So let me go back to the form.
所以让我回到表单。

1823
01:28:56,940 --> 01:28:58,860
And let me register Carter, for instance,
例如，让我注册卡特，

1824
01:28:58,860 --> 01:29:00,990
for, say, basketball, Register.
比如，参加篮球，报名。

1825
01:29:00,990 --> 01:29:02,520
And now there's two of us.
现在我们两个人了。

1826
01:29:02,520 --> 01:29:04,410
Let me actually go back to the form.
让我实际回到表单。

1827
01:29:04,410 --> 01:29:07,650
And let me register Yulia for ultimate Frisbee, Register.
让我注册尤利娅参加极限飞盘，报名。

1828
01:29:07,650 --> 01:29:08,920
Now there's three of us.
现在我们三个人了。

1829
01:29:08,920 --> 01:29:11,950
And, again, the CSS is ugly, but I do have an HTML table.
再说一次，CSS 很难看，但我确实有一个 HTML 表格。

1830
01:29:11,950 --> 01:29:14,790
And if I right-click and View page source,
如果我右键单击并查看页面源代码，

1831
01:29:14,790 --> 01:29:18,630
you'll see David, soccer; Carter, basketball; Yulia, ultimate Frisbee all
你会看到大卫，足球；卡特，篮球；尤利娅，极限飞盘，全部

1832
01:29:18,630 --> 01:29:20,280
as tr, tr, tr.
都是 tr，tr，tr。

1833
01:29:20,280 --> 01:29:23,850
So, again, if you now think about an app like Gmail in your inbox,
所以，再说一次，如果你现在考虑像收件箱里的 Gmail 这样的应用，

1834
01:29:23,850 --> 01:29:27,010
odds are if your inbox is indeed a big table,
如果你的收件箱确实是张大表格，

1835
01:29:27,010 --> 01:29:29,430
then it's probably tr, tr, tr, tr.
那么它很可能是 tr，tr，tr，tr。

1836
01:29:29,430 --> 01:29:32,700
And Google is rendering all of that HTML dynamically
而谷歌正在动态地渲染所有这些 HTML

1837
01:29:32,700 --> 01:29:36,120
based on all of the emails in some variable somewhere.
基于某个变量中的所有电子邮件。

1838
01:29:36,120 --> 01:29:39,810
Well, let me go back here and see, how did that redirect work?
好吧，让我回到这里看看，那个重定向是怎么工作的？

1839
01:29:39,810 --> 01:29:41,580
Let's watch this a little more slowly.
让我们再慢点看看。

1840
01:29:41,580 --> 01:29:44,060
Let me go up to the main form at slash.
让我去到斜杠下的主表单。

1841
01:29:44,060 --> 01:29:45,540
Let me type in David.
让我输入大卫。

1842
01:29:45,540 --> 01:29:47,520
Let me type in-- select soccer.
让我输入——选择足球。

1843
01:29:47,520 --> 01:29:49,380
And let me Zoom in to the URL.
让我放大 URL。

1844
01:29:49,380 --> 01:29:52,230
And notice that, when I submit this form,
注意，当我提交这个表单时，

1845
01:29:52,230 --> 01:29:58,560
even though the action is /register, I'm indeed ending up at /registrants.
尽管 action 是 /register，但我的确最终到达了 /registrants。

1846
01:29:58,560 --> 01:30:00,225
So how is that actually happening?
所以，这究竟是怎么发生的？

1847
01:30:00,225 --> 01:30:02,100
Well, let me go back and do it one more time.
好吧，让我返回并再做一次。

1848
01:30:02,100 --> 01:30:04,290
But, this time, let me open up Developer Tools.
但是，这次，让我打开开发者工具。

1849
01:30:04,290 --> 01:30:07,740
Let me go to the Network tab, which, recall, we played with last week.
让我去网络选项卡，记得吗，我们上周玩过它。

1850
01:30:07,740 --> 01:30:09,640
And let me go ahead and do this again.
让我继续这样做。

1851
01:30:09,640 --> 01:30:13,560
So David, Soccer, and I'm going to click Register.
所以大卫，足球，我要点击注册。

1852
01:30:13,560 --> 01:30:17,880
And now, notice, interesting, two routes were actually involved.
现在，注意，有趣的是，实际上涉及了两条路线。

1853
01:30:17,880 --> 01:30:19,680
The first one here is Register.
这里第一个是注册。

1854
01:30:19,680 --> 01:30:23,160
But notice if I go to headers, ah, 302 found.
但是注意，如果我去到标题，啊，302 找到了。

1855
01:30:23,160 --> 01:30:25,350
302 indicated some kind of redirect.
302 表示某种重定向。

1856
01:30:25,350 --> 01:30:27,210
What's the redirect going to?
重定向到哪里？

1857
01:30:27,210 --> 01:30:29,610
Well, if I look-- scroll down here at response headers,
好吧，如果我看看——向下滚动到响应标题，

1858
01:30:29,610 --> 01:30:31,527
there's a lot of stuff that's not interesting,
有很多东西不有趣，

1859
01:30:31,527 --> 01:30:35,280
but location was the one we cared about last week. /registrants, oh,
但 location 是我们上周关注的。/registrants，哦，

1860
01:30:35,280 --> 01:30:39,660
that's why the second request over here at left is actually /registrants.
这就是为什么左边这里的第二个请求实际上是 /registrants。

1861
01:30:39,660 --> 01:30:43,260
And it is 200 OK because it's all of these basic building
它是 200 OK，因为它包含所有这些基础构建

1862
01:30:43,260 --> 01:30:45,450
blocks from last week and now this.
模块，来自上周，现在还有这个。

1863
01:30:45,450 --> 01:30:47,500
Where did that redirect come from?
那个重定向来自哪里？

1864
01:30:47,500 --> 01:30:50,530
Well, now you have the ability to do this.
好吧，现在你有能力做到这一点。

1865
01:30:50,530 --> 01:30:55,080
Notice that, in my register route, the last thing I said we had done
请注意，在我的注册路由中，我最后说我们已经做的事情

1866
01:30:55,080 --> 01:30:58,740
was add the name and the value to this global dictionary.
是在将名称和值添加到这个全局字典中。

1867
01:30:58,740 --> 01:31:03,760
But the very last thing I did was redirect the user to the /registrants
但我做的最后一件事是将用户重定向到 /registrants

1868
01:31:03,760 --> 01:31:04,260
route.
路由。

1869
01:31:04,260 --> 01:31:05,400
What is redirect?
什么是重定向？

1870
01:31:05,400 --> 01:31:07,500
Well, at the very top of this file, notice
嗯，在这个文件的顶部，请注意

1871
01:31:07,500 --> 01:31:11,940
that I proactively imported not just flask, render_template, and request.
我主动导入的不仅仅是 flask、render_template 和 request。

1872
01:31:11,940 --> 01:31:14,880
I also imported redirect this time, which
这次我还导入了 redirect，它

1873
01:31:14,880 --> 01:31:20,580
is a function that comes with Flask that automatically issues the HTTP 302
是一个与 Flask 一起提供的函数，它会自动发出 HTTP 302

1874
01:31:20,580 --> 01:31:25,650
redirect for you without you having to know anything about those numbers
重定向，而无需你了解任何关于这些数字的知识

1875
01:31:25,650 --> 01:31:27,150
or otherwise.
或其他任何信息。

1876
01:31:27,150 --> 01:31:30,720
Let's do one final example before we break for snacks.
在我们去吃零食前，让我们做一个最后的例子。

1877
01:31:30,720 --> 01:31:35,820
In this final example, froshims5, let's actually do something with SQL.
在这个最后的例子中，froshims5，让我们实际使用一下 SQL。

1878
01:31:35,820 --> 01:31:39,570
SQL, after all, allows us to persist the data because this version here,
毕竟，SQL 允许我们持久化数据，因为这里的这个版本，

1879
01:31:39,570 --> 01:31:43,740
with this global dictionary, what's the downside of using this global variable
使用这个全局字典，使用这个全局变量的缺点是什么

1880
01:31:43,740 --> 01:31:46,910
to store all of our registrants?
来存储我们所有的注册者？

1881
01:31:46,910 --> 01:31:47,960
What's the downside?
缺点是什么？

1882
01:31:47,960 --> 01:31:49,378
Yeah.
对。

1883
01:31:49,378 --> 01:31:51,723
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1884
01:31:52,657 --> 01:31:54,990
DAVID J. MALAN: Exactly, so, as soon as the server quits
大卫·马兰：没错，所以，一旦服务器关闭

1885
01:31:54,990 --> 01:31:57,485
or if something goes wrong like maybe the power goes out,
或者如果出现问题，比如电源断电，

1886
01:31:57,485 --> 01:31:59,610
or we have multiple servers or something like that,
或者我们有多个服务器，诸如此类，

1887
01:31:59,610 --> 01:32:01,920
we'll lose the contents of that dictionary.
我们会丢失该字典的内容。

1888
01:32:01,920 --> 01:32:04,470
And so that's not really good to store data
因此，这不是一个真正适合存储数据的做法

1889
01:32:04,470 --> 01:32:08,040
that you care about in the computer's memory alone or RAM.
你关心的数据，仅存储在计算机的内存或 RAM 中。

1890
01:32:08,040 --> 01:32:11,973
You want to store it on disk using something like fopen and fwrite
你应该将其存储在磁盘上，使用像 fopen 和 fwrite 这样的工具

1891
01:32:11,973 --> 01:32:13,890
and all of the file I/O stuff we talked about.
以及我们讨论过的所有文件 I/O 相关内容。

1892
01:32:13,890 --> 01:32:17,070
But, in week seven, recall, we introduced SQL.
但是，在第七周，你还记得，我们引入了 SQL。

1893
01:32:17,070 --> 01:32:19,960
So that writes things to disk in a .db file.
这样会将内容写入磁盘上的 .db 文件中。

1894
01:32:19,960 --> 01:32:22,290
So let's actually do that with one final example.
所以让我们用一个最后的例子实际操作一下。

1895
01:32:22,290 --> 01:32:26,160
Let me go ahead and close these tabs here in my terminal.
让我先在我的终端中关闭这些标签。

1896
01:32:26,160 --> 01:32:29,550
Let me go ahead and close the old version of froshims
让我先关闭 froshims 的旧版本

1897
01:32:29,550 --> 01:32:32,040
and go into froshims5 now.
然后现在进入 froshims5。

1898
01:32:32,040 --> 01:32:37,080
And, in this version, let me show you, in app.py, the following.
在这个版本中，让我在 app.py 中向你展示以下内容。

1899
01:32:37,080 --> 01:32:40,290
It's almost the same in terms of what we're importing from Flask.
从 Flask 中导入的内容几乎是一样的。

1900
01:32:40,290 --> 01:32:43,320
But I'm also going to import from CS50's library
但我还要从 CS50 的库中导入

1901
01:32:43,320 --> 01:32:47,220
a SQL function, which we used briefly when we wrote code
一个 SQL 函数，我们在编写代码时简短地用过它

1902
01:32:47,220 --> 01:32:49,600
in Python to talk to a SQLite database.
在 Python 中与 SQLite 数据库进行交互。

1903
01:32:49,600 --> 01:32:51,630
This is the one example of a CS50 training wheel
这是 CS50 辅助工具的一个例子

1904
01:32:51,630 --> 01:32:54,750
that we actually do keep on deliberately through the end of the term
我们确实有意保留到学期结束

1905
01:32:54,750 --> 01:32:56,500
because it's actually just really annoying
因为使用大多数第三方库与 SQL 交互，以一种用户友好的方式真的很烦人

1906
01:32:56,500 --> 01:33:00,572
to use most third-party libraries with SQL in as user friendly a way.
使用大多数第三方库与 SQL 交互，以一种用户友好的方式真的很烦人。

1907
01:33:00,572 --> 01:33:03,280
You're welcome to, but I do think that, even though you shouldn't
你可以使用它们，但我认为，尽管你不应该

1908
01:33:03,280 --> 01:33:06,940
be using get in getstring, getfloat anymore the SQL function's actually
再使用 getstring、getfloat 中的 get，SQL 函数实际上

1909
01:33:06,940 --> 01:33:09,450
pretty darn useful, I would say.
非常有用，我可以这么说。

1910
01:33:09,450 --> 01:33:10,600
So how do we use this?
我们如何使用它？

1911
01:33:10,600 --> 01:33:13,990
Everything in this file so far is pretty much the same except for that import,
到目前为止，这个文件中的一切都与之前基本相同，除了那个导入，

1912
01:33:13,990 --> 01:33:15,890
including these lines here.
包括这些行。

1913
01:33:15,890 --> 01:33:20,020
But notice that I am opening up a file called froshims.db.
但请注意，我正在打开一个名为 froshims.db 的文件。

1914
01:33:20,020 --> 01:33:22,300
And that's a database that's empty initially.
它是一个最初为空的数据库。

1915
01:33:22,300 --> 01:33:23,382
But it is in my account.
但它在我的账户中。

1916
01:33:23,382 --> 01:33:24,590
So, actually, let me do this.
所以，实际上，让我这样做。

1917
01:33:24,590 --> 01:33:28,180
Let me run sqlite3 on froshims.db.
让我在 froshims.db 上运行 sqlite3。

1918
01:33:28,180 --> 01:33:29,950
Let me increase the size of my terminal.
让我增加终端的大小。

1919
01:33:29,950 --> 01:33:30,790
Hit Enter.
按回车键。

1920
01:33:30,790 --> 01:33:35,280
What can I type to see the structure of this database?
我该输入什么才能查看该数据库的结构？

1921
01:33:35,280 --> 01:33:37,610
Sorry.
抱歉。

1922
01:33:37,610 --> 01:33:38,673
Wait, what?
等等，什么？

1923
01:33:38,673 --> 01:33:39,600
AUDIENCE: [INAUDIBLE]
观众：[听不清]

1924
01:33:39,600 --> 01:33:41,058
DAVID J. MALAN: Oh, yes, thank you.
大卫·J·马兰：哦，是的，谢谢。

1925
01:33:41,058 --> 01:33:42,240
.schema should show me.
.schema 应该会显示给我。

1926
01:33:42,240 --> 01:33:46,530
OK, it's actually a very simple database, a registrants table with one,
好的，它实际上是一个非常简单的数据库，一个包含一个的 registrants 表，

1927
01:33:46,530 --> 01:33:50,170
two, three columns, an ID for a unique identifier,
两个，三个列，一个 ID 用作唯一标识符，

1928
01:33:50,170 --> 01:33:52,660
a primary key, the name of the person, and the sport
主键，人的姓名，以及运动

1929
01:33:52,660 --> 01:33:53,910
for which they're registering.
他们正在注册的运动。

1930
01:33:53,910 --> 01:33:56,880
And, presumably, the ID will be automatically incremented for me.
而且，可以推测，ID 会自动为我递增。

1931
01:33:56,880 --> 01:33:58,830
So let me exit out of that.
所以，让我退出它。

1932
01:33:58,830 --> 01:34:00,870
Go back to app.py.
回到 app.py。

1933
01:34:00,870 --> 01:34:04,800
And this line 8 here is just giving me access to that SQLite database.
而这里的第 8 行只是给了我访问该 SQLite 数据库的权限。

1934
01:34:04,800 --> 01:34:07,440
And recall that the three slashes are appropriate.
请记住，三个斜杠是合适的。

1935
01:34:07,440 --> 01:34:10,290
It's not a typo relative to something like a URL.
与像 URL 这样的东西相比，这不是一个错别字。

1936
01:34:10,290 --> 01:34:12,580
Here is my three sports that I want to support.
这是我想要支持的三个运动。

1937
01:34:12,580 --> 01:34:15,670
Looks like my index route is pretty much the same.
看来我的索引路由几乎相同。

1938
01:34:15,670 --> 01:34:16,930
So nothing new there.
所以那里没什么新东西。

1939
01:34:16,930 --> 01:34:19,110
In fact, I'm using that same lesson as before
事实上，我正在使用与之前相同的课程

1940
01:34:19,110 --> 01:34:20,760
in passing in the whole sports list.
传递整个运动列表。

1941
01:34:20,760 --> 01:34:22,350
Notice that, OK, this is interesting.
注意，好的，这很有趣。

1942
01:34:22,350 --> 01:34:26,668
Deregister, this version is going to let users sort of bow out of a sport
取消注册，这个版本将允许用户退出某个运动，

1943
01:34:26,668 --> 01:34:28,710
as tends to happen over the course of a semester.
正如在一个学期中经常发生的。

1944
01:34:28,710 --> 01:34:29,877
But we'll come back to that.
但我们稍后会回到这个问题。

1945
01:34:29,877 --> 01:34:31,530
But let's look at register now.
但现在让我们看看 register。

1946
01:34:31,530 --> 01:34:35,160
register is almost the same even though I do have some comments here.
register 几乎相同，尽管我在此有一些注释。

1947
01:34:35,160 --> 01:34:37,450
We're making sure to validate the form.
我们正在确保验证表单。

1948
01:34:37,450 --> 01:34:39,250
But this is where it gets interesting.
但这就是它变得有趣的地方。

1949
01:34:39,250 --> 01:34:43,000
I'm now inserting rows into the database to register these registrants.
我现在正在将行插入到数据库中以注册这些注册者。

1950
01:34:43,000 --> 01:34:47,290
Notice that I'm using CS50's library to insert into the registrants table
请注意，我正在使用 CS50 的库插入 registrants 表

1951
01:34:47,290 --> 01:34:50,440
into these two columns name and sport, these two values.
到这两个列 name 和 sport 中，这两个值。

1952
01:34:50,440 --> 01:34:54,100
And I'm being very careful to use question marks to escape the user's
而且我非常小心地使用问号来转义用户的

1953
01:34:54,100 --> 01:34:55,990
input to avoid injection attacks.
输入以避免注入攻击。

1954
01:34:55,990 --> 01:34:58,030
And then I just redirect the user.
然后我就重定向用户。

1955
01:34:58,030 --> 01:35:01,240
But what's going to be interesting about this version is this too,
但这个版本有趣的地方还在于，

1956
01:35:01,240 --> 01:35:05,980
/registrants no longer just uses Jinja and iterates over a global variable.
/registrants 不再仅仅使用 Jinja 并在全局变量上迭代。

1957
01:35:05,980 --> 01:35:09,520
In this version, we're selecting all of the registrants
在这个版本中，我们正在选择所有注册者

1958
01:35:09,520 --> 01:35:12,370
and getting back a list of dictionaries.
并返回一个字典列表。

1959
01:35:12,370 --> 01:35:15,730
And then we're passing that list of dictionaries
然后我们将该字典列表

1960
01:35:15,730 --> 01:35:19,690
into the Jinja template called registrants.html.
传递到名为 registrants.html 的 Jinja 模板中。

1961
01:35:19,690 --> 01:35:22,090
So, just to make clear what's going on there,
所以，为了清楚地说明那里发生了什么，

1962
01:35:22,090 --> 01:35:25,540
let me open up templates and registrants.html.
让我打开模板和注册用户.html。

1963
01:35:25,540 --> 01:35:27,700
It's almost the same as before.
它几乎和以前一样。

1964
01:35:27,700 --> 01:35:31,450
Notice that I'm using the dot notation this time, which Jinja also supports.
请注意，这次我使用的是点符号，Jinja 也支持它。

1965
01:35:31,450 --> 01:35:34,700
And it's almost always the same as the square bracket notation.
它几乎总是与方括号符号相同。

1966
01:35:34,700 --> 01:35:37,270
So you'll see both in documentation online.
因此，您将在在线文档中看到这两种方式。

1967
01:35:37,270 --> 01:35:42,133
But notice that I have a third column in the registrants table
但是请注意，我在注册表中有一个第三列

1968
01:35:42,133 --> 01:35:43,300
that's a little interesting.
这有点意思。

1969
01:35:43,300 --> 01:35:45,580
And this will be the final lesson for froshims.
这将是新生入学的最后一课。

1970
01:35:45,580 --> 01:35:50,710
A button via which people can deregister themselves, like a bow out of froshims.
一个按钮，人们可以通过它自己取消注册，就像从新生入学中退出一样。

1971
01:35:50,710 --> 01:35:51,560
So let's do this.
让我们这样做。

1972
01:35:51,560 --> 01:35:52,390
Open the terminal.
打开终端。

1973
01:35:52,390 --> 01:35:55,820
Let's do flask run in version 5 of this here.
让我们在这个版本 5 中运行 Flask。

1974
01:35:55,820 --> 01:36:01,750
Let me go into my other tab, close the Developer Tools, go to the /route,
让我进入我的另一个标签，关闭开发者工具，转到 /route，

1975
01:36:01,750 --> 01:36:04,040
and I have a form quite like before.
我有一个和以前一样的表单。

1976
01:36:04,040 --> 01:36:06,880
But now, when I register, David for soccer and click
但是现在，当我注册大卫参加足球，然后点击

1977
01:36:06,880 --> 01:36:09,490
Register, notice that it's ugly UI.
注册，注意它是一个丑陋的 UI。

1978
01:36:09,490 --> 01:36:13,240
But there's a button next to David to deregister themselves.
但是在大卫旁边有一个按钮可以让他自己取消注册。

1979
01:36:13,240 --> 01:36:14,350
Let's go back to slash.
让我们回到斜杠。

1980
01:36:14,350 --> 01:36:18,100
Let me also register Carter, for instance, for basketball and so forth.
让我还注册卡特，例如，参加篮球等等。

1981
01:36:18,100 --> 01:36:19,390
There's now two buttons.
现在有两个按钮。

1982
01:36:19,390 --> 01:36:23,350
This, now, is what really ties together our discussion of SQL
现在，这真正将我们对 SQL 的讨论联系在一起

1983
01:36:23,350 --> 01:36:26,560
and primary keys with the world of the web.
以及主键与 web 世界。

1984
01:36:26,560 --> 01:36:29,560
Suppose that there were two Davids in the class, which there surely are,
假设班上有两个大卫，肯定会有，

1985
01:36:29,560 --> 01:36:32,380
two Carters, two Yulias, two of any names.
两个卡特，两个尤利亚，两个任何名字。

1986
01:36:32,380 --> 01:36:34,900
We clearly can't rely on first names alone
我们显然不能仅仅依靠名字

1987
01:36:34,900 --> 01:36:37,670
to uniquely identify humans in a room like this.
来唯一地识别像这样房间里的人。

1988
01:36:37,670 --> 01:36:40,240
So we probably should use opaque identifiers,
所以我们可能应该使用不透明标识符，

1989
01:36:40,240 --> 01:36:42,670
that is, those numbers, 1, 2, 3.
也就是说，那些数字，1、2、3。

1990
01:36:42,670 --> 01:36:44,590
Indeed, if I go into VS Code--
实际上，如果我进入 VS Code -

1991
01:36:44,590 --> 01:36:46,690
let me open another terminal and make it bigger.
让我打开另一个终端，并把它放大。

1992
01:36:46,690 --> 01:36:53,620
And, in my src9 froshims version 5, let me run sqlite3 of froshims.db.
在我的 src9 新生入学版本 5 中，让我运行 froshims.db 的 sqlite3。

1993
01:36:53,620 --> 01:37:00,230
And, sure enough, if I do SELECT * FROM registrants; I'll see the two of us
当然，如果我执行 SELECT * FROM registrants；我会看到我们两个人

1994
01:37:00,230 --> 01:37:00,730
thus far.
到目前为止。

1995
01:37:00,730 --> 01:37:02,770
And we've indeed been automatically-- been
而且我们确实被自动地 - 被

1996
01:37:02,770 --> 01:37:06,880
assigned an auto-incrementing primary key, 1, 2, respectively.
分配了一个自动递增的主键，分别是 1、2。

1997
01:37:06,880 --> 01:37:11,140
That's useful now in the web especially or user interfaces in general.
这在 web 上，尤其是在一般的用户界面中非常有用。

1998
01:37:11,140 --> 01:37:15,100
If I view this page as source, here in my browser,
如果我将此页面视为源代码，在我的浏览器中，

1999
01:37:15,100 --> 01:37:20,410
notice that both David and Carter have their own form in a third td
请注意，大卫和卡特都在第三个 td 中有自己的表单

2000
01:37:20,410 --> 01:37:21,360
element next to them.
元素旁边。

2001
01:37:21,360 --> 01:37:22,610
And that's what gives us this.
这就是我们得到它的原因。

2002
01:37:22,610 --> 01:37:25,420
But notice that form, even though it's an ugly UI,
但是请注意，这个表单，即使它是一个丑陋的 UI，

2003
01:37:25,420 --> 01:37:32,620
is a form that will post to a /deregister route a hidden input,
是一个将发布到 /deregister 路由的表单，带有一个隐藏的输入，

2004
01:37:32,620 --> 01:37:36,520
the name of which is ID to match the primary key column,
它的名字是 ID，用于匹配主键列，

2005
01:37:36,520 --> 01:37:40,870
the value of which is 1 for me and 2 for Carter.
它的值为 1 代表我，2 代表卡特。

2006
01:37:40,870 --> 01:37:44,410
So this is how you stitch together a browser and a server.
所以，这就是你将浏览器和服务器缝合在一起的方式。

2007
01:37:44,410 --> 01:37:46,450
When there's a database involved, you just
当涉及到数据库时，你只需

2008
01:37:46,450 --> 01:37:49,720
uniquely identify the things you care about by passing numbers around
通过传递数字来唯一地识别你关心的东西。

2009
01:37:49,720 --> 01:37:51,940
from browser to server and back.
从浏览器到服务器再返回。

2010
01:37:51,940 --> 01:37:54,970
You might visually show David and Soccer and Carter and Basketball.
你可能在视觉上展示大卫和足球以及卡特和篮球。

2011
01:37:54,970 --> 01:37:57,460
But the server only needs the unique identifier.
但服务器只需要唯一的标识符。

2012
01:37:57,460 --> 01:37:59,830
And that's why we dwelled so much, in week seven,
这就是为什么我们在第七周花了那么多时间，

2013
01:37:59,830 --> 01:38:02,780
on these primary keys and, in turn, foreign keys.
讲解这些主键以及相关的外键。

2014
01:38:02,780 --> 01:38:08,020
So, when I go back to this form here and click on deregister,
所以，当我回到这个表单并点击取消注册时，

2015
01:38:08,020 --> 01:38:13,270
this is going to submit ID equals 1 to the /deregister route which should--
这将提交ID等于1到/deregister路由，它应该--

2016
01:38:13,270 --> 01:38:15,520
and this was the only route we didn't look at earlier.
这是我们之前没有看过的唯一一条路线。

2017
01:38:15,520 --> 01:38:17,990
Let me open up app.py again.
让我再次打开app.py。

2018
01:38:17,990 --> 01:38:21,520
You'll see that this happens in deregister.
你会看到这发生在deregister中。

2019
01:38:21,520 --> 01:38:24,550
In the deregister route, which only supports POST,
在deregister路由中，它只支持POST，

2020
01:38:24,550 --> 01:38:27,460
I'm going to get the ID from the form.
我将从表单中获取ID。

2021
01:38:27,460 --> 01:38:31,780
If there is, in fact, an ID and it wasn't missing for some reason,
如果实际上存在一个ID，并且它没有因为某种原因丢失，

2022
01:38:31,780 --> 01:38:34,480
I'm going to execute delete from registrants
我将执行从registrants删除

2023
01:38:34,480 --> 01:38:38,593
where ID equals question mark as a placeholder, passing in that number.
其中ID等于问号作为占位符，传入该数字。

2024
01:38:38,593 --> 01:38:41,260
And then I'm just going to redirect the user back to registrants
然后，我将把用户重定向回registrants

2025
01:38:41,260 --> 01:38:44,450
so they can see who is still actually registered.
以便他们可以看到谁实际上仍然注册了。

2026
01:38:44,450 --> 01:38:48,730
So if I go back to my browser here and I deregister myself,
所以，如果我回到我的浏览器，并取消注册我自己，

2027
01:38:48,730 --> 01:38:50,350
we should see that now that's gone.
我们应该看到它现在不见了。

2028
01:38:50,350 --> 01:38:52,780
And if I deregister Carter, that's now gone.
如果我取消注册卡特，它现在也消失了。

2029
01:38:52,780 --> 01:38:57,640
And if I indeed go back to VS Code, open up my terminal window, make it bigger,
如果我确实回到VS Code，打开我的终端窗口，并将其放大，

2030
01:38:57,640 --> 01:39:02,000
run SELECT * FROM registrants, now no one is registered for the sport.
运行SELECT * FROM registrants，现在没有人注册了这项运动。

2031
01:39:02,000 --> 01:39:05,180
And so we've effectively stitched all of these things together.
所以我们有效地将所有这些东西缝合在一起。

2032
01:39:05,180 --> 01:39:07,810
So that's all how we might implement froshims.
所以这就是我们如何实现froshims。

2033
01:39:07,810 --> 01:39:10,360
Just so you've heard the vocabulary, what we've implemented
为了让你听到这些词汇，我们所实现的是

2034
01:39:10,360 --> 01:39:14,500
is a paradigm known MVC, Model View Controller,
一个被称为MVC的范式，即模型-视图-控制器，

2035
01:39:14,500 --> 01:39:18,580
where the view is everything the human sees, the templates, the HTML, the CSS,
其中视图是人类所看到的一切，模板，HTML，CSS，

2036
01:39:18,580 --> 01:39:19,450
the JavaScript.
以及JavaScript。

2037
01:39:19,450 --> 01:39:22,697
The controller is everything that's in app.py, the logic
控制器是app.py中的一切，逻辑

2038
01:39:22,697 --> 01:39:24,280
that we've actually been implementing.
是我们一直在实现的。

2039
01:39:24,280 --> 01:39:27,700
But, as soon as you introduce a database especially or even
但是，一旦你引入一个数据库，尤其是甚至

2040
01:39:27,700 --> 01:39:31,150
a global dictionary, then you have the M in MVC, a model, which
一个全局字典，那么你就会在MVC中得到M，即模型，它

2041
01:39:31,150 --> 01:39:32,650
is where all of your data is stored.
是所有数据存储的地方。

2042
01:39:32,650 --> 01:39:34,240
Now, you don't have to think about it this way.
现在，你不必这样想。

2043
01:39:34,240 --> 01:39:37,060
But humans, over time, realized that, wow, most of our web apps
但随着时间的推移，人类意识到，哇，我们的大多数网络应用程序

2044
01:39:37,060 --> 01:39:38,960
follow this similar paradigm.
都遵循这种类似的范式。

2045
01:39:38,960 --> 01:39:42,160
So they started thinking about different components of the application
所以他们开始考虑应用程序的不同组件

2046
01:39:42,160 --> 01:39:44,660
as having these different identifiers.
具有这些不同的标识符。

2047
01:39:44,660 --> 01:39:45,880
So there's still a lot more.
所以还有很多。

2048
01:39:45,880 --> 01:39:48,820
We have not yet considered how, when you log into a website,
我们还没有考虑当你在网站上登录时，

2049
01:39:48,820 --> 01:39:50,800
the website remembers that you've logged in.
网站如何记住你已经登录了。

2050
01:39:50,800 --> 01:39:53,560
We've not remembered how you can keep track of what's
我们还没有记住如何跟踪某人的购物车里有什么。

2051
01:39:53,560 --> 01:39:55,370
inside of someone's shopping cart.
东西。

2052
01:39:55,370 --> 01:39:57,460
This was a lot of effort just for two-second joke.
这只是为了一个两秒钟的笑话，就付出了很多努力。

2053
01:39:57,460 --> 01:40:00,903
But let's go-- with that said, for roll-ups and snacks
但是，话虽如此，为了补充和零食，

2054
01:40:00,903 --> 01:40:02,570
as served, let's take a 10-minute break.
我们休息十分钟。

2055
01:40:02,570 --> 01:40:07,130
We'll see you in 10 for that and more as we wrap up.
我们将在 10 分钟后回来，届时我们将继续讨论更多内容。

2056
01:40:07,130 --> 01:40:10,630
All right, we are back, and let's consider now
好了，我们回来了，现在让我们考虑一下

2057
01:40:10,630 --> 01:40:13,210
how web applications typically work when you actually
当您实际上使用网络应用程序时，它们通常是如何工作的

2058
01:40:13,210 --> 01:40:17,110
have to log into them, which is most every web application nowadays.
需要登录时，如今几乎所有网络应用程序都是这样工作的。

2059
01:40:17,110 --> 01:40:20,233
Somehow or other, even though you only log in once,
尽管您只登录一次，

2060
01:40:20,233 --> 01:40:22,900
at least at the start of the day or the start of the browser tab
至少在一天开始或浏览器标签页打开时，

2061
01:40:22,900 --> 01:40:24,760
that you open, somehow or other, websites
您打开的网站，总能以某种方式

2062
01:40:24,760 --> 01:40:27,460
are still able to remember that you've logged in already.
记住您已经登录了。

2063
01:40:27,460 --> 01:40:31,100
And that's how you see your Gmail inbox or your social media feed or the like.
这就是为什么您能看到您的 Gmail 收件箱或社交媒体信息流等等。

2064
01:40:31,100 --> 01:40:33,640
So here, for instance, is a representative login form.
所以这里，例如，是一个典型的登录表单。

2065
01:40:33,640 --> 01:40:37,270
This one here for Gmail or for all of Google services.
这个用于 Gmail 或所有 Google 服务。

2066
01:40:37,270 --> 01:40:40,510
And let's consider what actually happens underneath the hood with respect
现在让我们考虑一下当您使用您的用户名和密码登录到这样的网站时，这些虚拟信封在引擎盖下实际发生了什么。

2067
01:40:40,510 --> 01:40:44,560
to those virtual envelopes when you do log in with your username and password
涉及到那些虚拟信封，当您使用您的用户名和密码登录到这样的网站时

2068
01:40:44,560 --> 01:40:45,760
to a site like this.
到这样的网站。

2069
01:40:45,760 --> 01:40:49,270
Well, typically, inside of the virtual envelope
通常情况下，在您的浏览器发送到 Google 服务器的虚拟信封内，也就是 accounts.google.com，

2070
01:40:49,270 --> 01:40:54,010
that your browser sends to Google servers, that is, accounts.google.com,
您的浏览器发送到 Google 服务器的虚拟信封内，也就是 accounts.google.com，

2071
01:40:54,010 --> 01:40:55,750
is a request maybe for that form.
可能是一个对该表单的请求。

2072
01:40:55,750 --> 01:41:00,178
So GET slash HTTP version 2 or whatever version your browser's actually working
所以 GET 斜杠 HTTP 版本 2 或者您的浏览器实际工作中的任何版本

2073
01:41:00,178 --> 01:41:01,720
and some other headers dot, dot, dot.
以及其他一些标头等等。

2074
01:41:01,720 --> 01:41:04,300
But, for the most part, that's what we've seen thus far.
但到目前为止，这基本上是我们所见过的。

2075
01:41:04,300 --> 01:41:06,333
When you then actually log in--
当您真正登录时——

2076
01:41:06,333 --> 01:41:08,500
or, rather, when you visit that page, hopefully, you
或者说，当您访问那个页面时，希望您

2077
01:41:08,500 --> 01:41:11,500
get back a response from the server saying that everything is OK.
从服务器获得一个回复，说明一切正常。

2078
01:41:11,500 --> 01:41:12,760
That is 200, OK.
也就是 200，表示一切正常。

2079
01:41:12,760 --> 01:41:16,660
And the response that comes back is text/html, so same as last week.
返回的响应是 text/html，与上周一样。

2080
01:41:16,660 --> 01:41:20,060
This is just what's inside of those virtual envelopes back and forth.
这只是这些虚拟信封来回传递的内容。

2081
01:41:20,060 --> 01:41:24,130
But, when you log in to a server, it turns out, typically,
但是，当您登录到服务器时，事实证明，通常情况下，

2082
01:41:24,130 --> 01:41:27,190
what's happening is that the server is, unbeknownst to you,
服务器正在做的事情是，在您不知情的情况下，

2083
01:41:27,190 --> 01:41:30,820
kind of stamping your hand once it's verified your username
在验证了您的用户名之后，服务器会给您盖章

2084
01:41:30,820 --> 01:41:34,090
and your password to remember that you have logged in.
以及密码，以记住您已经登录。

2085
01:41:34,090 --> 01:41:36,130
In particular, what Google server is going
特别是，Google 服务器在您访问了该表单并通过 POST 提交了该表单后，

2086
01:41:36,130 --> 01:41:41,050
to send back after you visited that form and submitted that form as via POST,
Google 服务器将在您访问了该表单并通过 POST 提交了该表单后，

2087
01:41:41,050 --> 01:41:43,850
is you're going to get back a response that looks like this.
您将获得一个看起来像这样的响应。

2088
01:41:43,850 --> 01:41:45,730
It's going to, hopefully, say 200, OK.
希望它会说 200，表示一切正常。

2089
01:41:45,730 --> 01:41:49,390
It's probably going to be a web page written in text/html.
它可能是一个用 text/html 编写的网页。

2090
01:41:49,390 --> 01:41:53,020
But an additional HTTP header that we didn't focus on last week, which
但还有一个上周我们没有关注的 HTTP 标头，它

2091
01:41:53,020 --> 01:41:55,150
is this one, the Set-Cookie header.
就是这个，Set-Cookie 标头。

2092
01:41:55,150 --> 01:41:59,140
And the Set-Cookie header specifies yet another one
Set-Cookie 标头指定了另一个

2093
01:41:59,140 --> 01:42:01,690
of these key-value pairs, the name of which
这些键值对，它的名称

2094
01:42:01,690 --> 01:42:04,990
can actually be anything depending on the server, the value of which
可以是任何东西，取决于服务器，它的值

2095
01:42:04,990 --> 01:42:07,340
is some unique identifier.
是一个唯一的标识符。

2096
01:42:07,340 --> 01:42:10,400
So you've all probably heard about cookies in the context of the web.
所以你们可能都听说过网络中的 cookie。

2097
01:42:10,400 --> 01:42:13,240
You've probably heard that they're not good for your privacy.
你们可能听说过它们对隐私不好。

2098
01:42:13,240 --> 01:42:15,310
And that's generally true.
这通常是正确的。

2099
01:42:15,310 --> 01:42:19,450
But cookies need to exist if you want web pages to be
但是，如果您希望网页能够

2100
01:42:19,450 --> 01:42:23,470
or websites to be stateful, that is, remember a little something about you.
或者网站要保持状态，也就是说，记住你的一些信息。

2101
01:42:23,470 --> 01:42:27,760
And so session is the name of the--
所以会话是这个的名称——

2102
01:42:27,760 --> 01:42:30,370
session is a word that describes the maintenance
会话是一个描述维护的词

2103
01:42:30,370 --> 01:42:32,503
of state between a client and a server.
客户端和服务器之间状态。

2104
01:42:32,503 --> 01:42:35,170
That is to say, if the server's remembering something about you,
也就是说，如果服务器记得你的一些信息，

2105
01:42:35,170 --> 01:42:40,130
you have a session with that server, the equivalent, really, of a shopping cart.
你与该服务器之间就存在一个会话，这实际上相当于一个购物车。

2106
01:42:40,130 --> 01:42:43,830
So, in fact, if you go to amazon.com or any website via which you can not only
实际上，如果你去 Amazon.com 或者任何你可以不仅

2107
01:42:43,830 --> 01:42:48,930
log in but add items to a shopping cart or equivalent, that is a session.
登录，还能将商品添加到购物车或类似东西的网站，那就是一个会话。

2108
01:42:48,930 --> 01:42:52,750
Shopping cart is the real-world equivalent thereof.
购物车是现实世界中的等价物。

2109
01:42:52,750 --> 01:42:55,530
So this Set-Cookie header is essentially a directive
所以这个 Set-Cookie 头部本质上是一个指令

2110
01:42:55,530 --> 01:43:00,360
from the server to your browser to store this value in the browser's
来自服务器到你的浏览器，将这个值存储到浏览器的

2111
01:43:00,360 --> 01:43:04,200
memory somewhere, either for the life of the browser tab or maybe even longer,
内存中某个地方，要么是该浏览器标签的整个生命周期，要么可能更长，

2112
01:43:04,200 --> 01:43:08,010
for an hour, a day, a year, depending on the expiration time that's actually
一个小时、一天、一年，具体取决于实际设置的过期时间。

2113
01:43:08,010 --> 01:43:08,520
set.
设置。

2114
01:43:08,520 --> 01:43:12,810
The idea, though, is that because your browser is designed to understand HTTP
不过，思路是，因为你的浏览器被设计成理解 HTTP

2115
01:43:12,810 --> 01:43:16,650
also, just like the server, you're on the honor system, your browser,
同样，就像服务器一样，你遵循的是诚信系统，你的浏览器，

2116
01:43:16,650 --> 01:43:20,580
such that the next time you visit Google's same server,
所以下次你访问 Google 的同一个服务器时，

2117
01:43:20,580 --> 01:43:24,300
you should remind the server what cookie was set.
你应该提醒服务器设置了什么 cookie。

2118
01:43:24,300 --> 01:43:27,240
That is to say, the browser should send back to the server,
也就是说，浏览器应该发送回服务器，

2119
01:43:27,240 --> 01:43:31,830
not set cookie because it's already been set, but a cookie header that
不是设置 cookie，因为它已经设置过了，而是一个包含相同值的 cookie 头部。

2120
01:43:31,830 --> 01:43:34,120
contains exactly that same value.
包含完全相同的那个值。

2121
01:43:34,120 --> 01:43:36,270
So the metaphor here is kind of like when
所以这里的一个比喻是，就像当你

2122
01:43:36,270 --> 01:43:40,240
you go into maybe a bar or a club or an amusement park,
走进一个酒吧、夜店或游乐园，

2123
01:43:40,240 --> 01:43:43,390
and you showed your ticket, or you paid your fees, ideally,
你出示了你的票，或者你支付了费用，理想情况下，

2124
01:43:43,390 --> 01:43:47,393
they'd do something like stamp your hand such that the next time you
他们会做一些类似在你的手上盖章之类的事情，这样下次你

2125
01:43:47,393 --> 01:43:50,560
go through the line, you don't have to take out your ticket again or your ID
排队的时候，你就不必再拿出你的票或你的身份证

2126
01:43:50,560 --> 01:43:53,020
and prove that you have paid or that you belong there.
来证明你已经支付了费用，或者证明你属于这里。

2127
01:43:53,020 --> 01:43:54,370
You just show your hand stamp.
你只要出示你的手上的印章就可以了。

2128
01:43:54,370 --> 01:43:57,162
And the idea is that the bouncer can trust
这个思路是，门卫可以信任

2129
01:43:57,162 --> 01:43:58,870
that if you're presenting this hand stamp
如果你出示这个手上的印章，

2130
01:43:58,870 --> 01:44:02,078
and maybe it's the right color and the right picture for that particular day,
而且它可能是当天正确的颜色和图案，

2131
01:44:02,078 --> 01:44:04,570
they should just let you in without prompting you again
他们就应该让你进去，不用再问你

2132
01:44:04,570 --> 01:44:09,380
for your ticket or your money or, in this case, your username and password.
你的票、你的钱，或者在本例中，你的用户名和密码。

2133
01:44:09,380 --> 01:44:12,340
So cookies are a very good thing functionally.
所以从功能上来说，cookie 是一件非常好的东西。

2134
01:44:12,340 --> 01:44:14,470
They are a feature of HTTP.
它们是 HTTP 的一个功能。

2135
01:44:14,470 --> 01:44:18,113
And they are how servers implement state between themselves and you
它们是服务器在自身和你之间实现状态的方式

2136
01:44:18,113 --> 01:44:20,530
because, after all, when you click on a link on a web page
因为，毕竟，当你点击网页上的链接时，

2137
01:44:20,530 --> 01:44:22,330
or another link on a web page, eventually,
或者网页上的另一个链接，最终，

2138
01:44:22,330 --> 01:44:24,040
the browser icon stops spinning.
浏览器图标停止旋转。

2139
01:44:24,040 --> 01:44:27,310
And it's no longer connected to you typically.
而且它通常不再连接到你。

2140
01:44:27,310 --> 01:44:31,660
But, so long as the next link you click results in a virtual envelope going
但是，只要你点击的下一个链接导致一个虚拟信封从

2141
01:44:31,660 --> 01:44:34,670
from client to server containing this header,
客户端发送到服务器，并包含这个头部，

2142
01:44:34,670 --> 01:44:38,180
it's the equivalent of just reminding the server who you are.
它就相当于提醒服务器你是谁。

2143
01:44:38,180 --> 01:44:42,080
This value is generally a big number, a big alphanumeric number,
这个值通常是一个大数字，一个大的字母数字组合，

2144
01:44:42,080 --> 01:44:44,150
so it's some unique identifier.
所以它是一个独特的标识符。

2145
01:44:44,150 --> 01:44:48,930
Generally speaking, cookies do not need to contain your actual username,
一般来说，cookie 不需要包含你的实际用户名，

2146
01:44:48,930 --> 01:44:50,090
your actual password.
你的实际密码。

2147
01:44:50,090 --> 01:44:51,560
That's generally frowned upon.
这通常是不被接受的。

2148
01:44:51,560 --> 01:44:53,548
The useful information like your username,
有用的信息，比如你的用户名，

2149
01:44:53,548 --> 01:44:55,340
your password, what's in your shopping cart
你的密码，你的购物车里有什么

2150
01:44:55,340 --> 01:44:57,260
can be stored entirely server side.
都可以完全存储在服务器端。

2151
01:44:57,260 --> 01:45:00,530
This cookie is just a reminder to the server who you are.
这个 cookie 只是提醒服务器你是谁。

2152
01:45:00,530 --> 01:45:02,360
The problem with cookies, though, nowadays
然而，如今 cookie 的问题是

2153
01:45:02,360 --> 01:45:05,150
is that they're used so often for advertising,
它们被用来做广告，

2154
01:45:05,150 --> 01:45:06,890
for tracking, and the like.
用来跟踪等等。

2155
01:45:06,890 --> 01:45:07,760
Why is that?
为什么呢？

2156
01:45:07,760 --> 01:45:11,095
Well, this is a natural result of that basic primitive.
嗯，这是那个基本原语的自然结果。

2157
01:45:11,095 --> 01:45:13,970
If your browser unbeknownst to you is in the habit of just presenting
如果你的浏览器在不知不觉中习惯了每次访问网站就展示

2158
01:45:13,970 --> 01:45:16,820
this hand stamp every time it visits a website,
这个手印，

2159
01:45:16,820 --> 01:45:19,700
you're proactively reminding websites who
你就主动地提醒网站你是谁，

2160
01:45:19,700 --> 01:45:21,890
you are again and again, at least who you
一次又一次地提醒他们，至少你是谁，

2161
01:45:21,890 --> 01:45:24,110
are in the sense of if you logged in.
从你是否登录的角度来说。

2162
01:45:24,110 --> 01:45:26,240
Now they'll always know who you are.
现在他们总是知道你是谁。

2163
01:45:26,240 --> 01:45:30,170
Even if you're in incognito mode, for instance, private mode browsing,
即使你在隐身模式下，例如，私密模式浏览，

2164
01:45:30,170 --> 01:45:31,910
your hand is still getting stamped.
你的手仍然会被盖章。

2165
01:45:31,910 --> 01:45:35,120
Your incognito window is still sending that same unique identifier
你的隐身窗口仍然会发送同一个独特的标识符

2166
01:45:35,120 --> 01:45:35,970
again and again.
一次又一次。

2167
01:45:35,970 --> 01:45:37,970
And, so long as you don't log in, they might not
只要你不登录，他们可能不会

2168
01:45:37,970 --> 01:45:40,580
know that your Carter or David, but they do
知道你是 Carter 还是 David，但他们确实

2169
01:45:40,580 --> 01:45:45,410
know you're the same user or the same person using that browser or, rather,
知道你是同一个用户，或者同一个使用那个浏览器的人，或者说，

2170
01:45:45,410 --> 01:45:49,040
the same browser visiting the website because that hand stamp is
同一个访问网站的浏览器，因为那个手印

2171
01:45:49,040 --> 01:45:50,730
going to be sent again and again.
会一遍又一遍地被发送。

2172
01:45:50,730 --> 01:45:54,350
But, when you clear your cookies or when you close your incognito window,
但是，当你清除你的 cookie 或关闭你的隐身窗口时，

2173
01:45:54,350 --> 01:45:57,360
that's like washing your hand and starting fresh,
就像洗手然后重新开始一样，

2174
01:45:57,360 --> 01:45:59,130
getting a new unique identifier.
获得一个新的唯一标识符。

2175
01:45:59,130 --> 01:46:02,270
So you appear to be someone different even though, as an aside,
所以你看起来像是一个不同的人，即使作为旁白，

2176
01:46:02,270 --> 01:46:04,520
even if you're in the habit of using incognito mode
即使你习惯使用隐身模式

2177
01:46:04,520 --> 01:46:06,950
and clearing your browser tabs and all of that,
并清除你的浏览器标签页等等，

2178
01:46:06,950 --> 01:46:11,780
with very, very high probability, servers can still track you nowadays
很有可能，服务器现在仍然可以追踪到你

2179
01:46:11,780 --> 01:46:13,640
based on your IP address, of course, which
根据你的 IP 地址，当然，它

2180
01:46:13,640 --> 01:46:16,910
is on the outside of those envelopes, based on the particular browser
在那些信封的外面，根据你安装的特定浏览器

2181
01:46:16,910 --> 01:46:19,730
extensions that you have installed, based on the various fonts
扩展程序，根据你安装的各种字体

2182
01:46:19,730 --> 01:46:20,840
that you have installed.
你安装的字体。

2183
01:46:20,840 --> 01:46:23,360
There's some crazy-high-percentage likelihood
有一个非常高的可能性

2184
01:46:23,360 --> 01:46:26,840
that a browser can uniquely identify you even if you're scrubbing
浏览器可以唯一识别你，即使你在清理

2185
01:46:26,840 --> 01:46:28,880
your tracks in this way, so just FYI.
你的踪迹，所以仅供参考。

2186
01:46:28,880 --> 01:46:32,270
But, for today's purposes, it all derives from this thing called cookies.
但，就今天而言，这一切都源于这个叫做 cookie 的东西。

2187
01:46:32,270 --> 01:46:33,920
And this is how they are then set.
这就是它们被设置的方式。

2188
01:46:33,920 --> 01:46:36,740
So let's actually use this a little more productively
所以让我们实际更有效地利用它

2189
01:46:36,740 --> 01:46:41,930
and leverage it in the context of Flask by using another global variable that
并将其应用于 Flask 的环境中，使用另一个全局变量，该变量

2190
01:46:41,930 --> 01:46:44,660
comes with Flask that you can import that gives you access
与 Flask 一起提供，你可以导入它，它可以让你访问

2191
01:46:44,660 --> 01:46:46,250
to the equivalent of a shopping cart.
类似于购物车的功能。

2192
01:46:46,250 --> 01:46:49,130
That is to say, Flask deals with all of this stuff
也就是说，Flask 处理了所有这些东西

2193
01:46:49,130 --> 01:46:52,610
like setting cookies and checking for cookies and all of the plumbing.
比如设置 cookie、检查 cookie 以及所有基础功能。

2194
01:46:52,610 --> 01:46:54,650
Someone else have solved that for you.
其他人已经为你解决了这些问题。

2195
01:46:54,650 --> 01:46:57,830
And Flask just handles the contents of the shopping cart
Flask 只处理购物车的内容

2196
01:46:57,830 --> 01:47:01,350
or the username to you in the context of a variable.
或以变量的形式将用户名提供给你。

2197
01:47:01,350 --> 01:47:02,930
So let me go over to VS Code here.
所以让我切换到 VS Code。

2198
01:47:02,930 --> 01:47:05,690
And, during the break, I created a new folder called login.
在休息期间，我创建了一个名为 login 的新文件夹。

2199
01:47:05,690 --> 01:47:10,082
If I type ls, I've got the beginnings of an app.py and a templates folder.
如果我输入 ls，我会有一个 app.py 和一个 templates 文件夹。

2200
01:47:10,082 --> 01:47:12,290
And, in the templates folder, I've got the beginnings
在 templates 文件夹里，我还有

2201
01:47:12,290 --> 01:47:15,650
of a layout.html and an index.html just so I
layout.html 和 index.html 文件，这样我

2202
01:47:15,650 --> 01:47:18,518
don't have to type quite as many characters to get started.
就不需要输入太多字符来开始。

2203
01:47:18,518 --> 01:47:20,310
What I'm going to do with this app, though,
我打算用这个应用程序来做的是

2204
01:47:20,310 --> 01:47:23,510
is let's implement a very simple app that allows the user to log in
实现一个非常简单的应用程序，允许用户登录

2205
01:47:23,510 --> 01:47:26,960
and demonstrates how a server can remember that you are, in fact,
并演示服务器如何记住你是否确实

2206
01:47:26,960 --> 01:47:27,690
logged in.
登录。

2207
01:47:27,690 --> 01:47:29,750
So let me open up app.py.
所以让我打开 app.py。

2208
01:47:29,750 --> 01:47:32,750
And, at the very top of this file, which is otherwise--
在这个文件的开头，它原本是

2209
01:47:32,750 --> 01:47:38,600
let me shorten this even further so it looks as simple as possible.
让我进一步简化它，使其看起来尽可能简单。

2210
01:47:38,600 --> 01:47:44,000
In this app.py, let me go ahead and simply add one more import
在这个 app.py 文件中，让我继续添加一个导入

2211
01:47:44,000 --> 01:47:45,800
up here called session.
它名为 session。

2212
01:47:45,800 --> 01:47:48,800
And that's going to give me the equivalent of a shopping
这将给我一个相当于购物车的工具。

2213
01:47:48,800 --> 01:47:50,030
cart at my disposal.
我可以随意使用。

2214
01:47:50,030 --> 01:47:51,290
But I do need to configure it.
但我需要配置它。

2215
01:47:51,290 --> 01:47:53,290
And there's some different ways to configure it.
有一些不同的配置方法。

2216
01:47:53,290 --> 01:47:55,520
But the conventional way or a recommended way
但是传统的或推荐的方法

2217
01:47:55,520 --> 01:47:59,360
here is as follows, to run app.config.
是如下运行 app.config。

2218
01:47:59,360 --> 01:48:03,680
And then set this configuration variable, which is flask specific,
然后设置这个 Flask 特定的配置变量

2219
01:48:03,680 --> 01:48:08,180
called SESSION_PERMANENT equals false so that this will indeed
名为 SESSION_PERMANENT 等于 false，这样它将成为

2220
01:48:08,180 --> 01:48:10,220
be treated as a session cookie.
一个会话 cookie。

2221
01:48:10,220 --> 01:48:13,520
So, as soon as you quit your browser or close your tabs, typically,
因此，当您退出浏览器或关闭选项卡时，通常

2222
01:48:13,520 --> 01:48:15,950
what's in the session will be deleted.
会话中的内容将会被删除。

2223
01:48:15,950 --> 01:48:17,848
This does tend to vary by browser.
这确实会因浏览器而异。

2224
01:48:17,848 --> 01:48:20,390
Sometimes things might be kept around longer than you expect.
有时某些东西可能会比你预期的保留更长时间。

2225
01:48:20,390 --> 01:48:23,432
But, by default, this is going to ensure that, essentially, the cookie is
但是，默认情况下，这将确保 cookie 实际上

2226
01:48:23,432 --> 01:48:25,430
deleted when you quit the browser.
在您退出浏览器时被删除。

2227
01:48:25,430 --> 01:48:29,870
I'm also going to do this app.config SESSION_TYPE is going
我也将进行 app.config SESSION_TYPE 设置

2228
01:48:29,870 --> 01:48:32,180
to equal, quote, unquote, "filesystem".
等于“filesystem”。

2229
01:48:32,180 --> 01:48:36,020
This just ensures that the contents of your shopping cart or equivalent
这只是确保您的购物车内容或类似内容

2230
01:48:36,020 --> 01:48:38,960
are stored in the servers--
存储在服务器的

2231
01:48:38,960 --> 01:48:43,490
in the server's files, not in the cookie itself for privacy's sake.
文件中，而不是在 cookie 本身中，出于隐私考虑。

2232
01:48:43,490 --> 01:48:46,820
And, lastly, I'm going to activate sections on this app
最后，我将在这个应用程序上激活部分内容

2233
01:48:46,820 --> 01:48:48,440
by just running this line of code.
通过运行这一行代码。

2234
01:48:48,440 --> 01:48:51,800
These, for today's purposes, are sort of copy-paste-able lines
这些对于今天的目的来说，是可复制粘贴的代码行

2235
01:48:51,800 --> 01:48:55,430
that just get sessions working in a recommended manner for you.
可以使会话以推荐的方式为您工作。

2236
01:48:55,430 --> 01:49:00,150
Hereafter, now, we can just use them as we expect, as we would hope.
从现在开始，我们可以像预期的那样使用它们，就像我们希望的那样。

2237
01:49:00,150 --> 01:49:01,020
So let me do this.
所以让我来做这件事。

2238
01:49:01,020 --> 01:49:07,160
Let me now open up another file in templates called, say, index.html.
现在让我在 templates 文件夹中打开另一个文件，例如 index.html。

2239
01:49:07,160 --> 01:49:10,730
And, in index.html, I'm going to make a very simple web page that's
在 index.html 中，我将创建一个非常简单的网页，它

2240
01:49:10,730 --> 01:49:13,550
just going to check if the user is logged in or not
只是检查用户是否已登录

2241
01:49:13,550 --> 01:49:16,170
and explain as much if they are.
如果已登录，就说明一下。

2242
01:49:16,170 --> 01:49:20,240
So, in the body block of index.html, which I prepared in advance,
因此，在 index.html 的 body 部分，我已经提前准备好了

2243
01:49:20,240 --> 01:49:21,350
I'm going to do this.
我要做这个。

2244
01:49:21,350 --> 01:49:24,740
I'm going to use Jinja, not to have a loop or a placeholder,
我将使用 Jinja，不是为了循环或占位符，

2245
01:49:24,740 --> 01:49:27,200
but an actual conditional like this.
而是一个真正的条件语句，像这样。

2246
01:49:27,200 --> 01:49:34,340
If the user is logged in with a name, then go ahead and output inside of--
如果用户使用用户名登录，则继续在内部输出 -

2247
01:49:34,340 --> 01:49:35,993
and let me do this else here.
并让我在这里做 else 部分。

2248
01:49:35,993 --> 01:49:37,910
And, actually, let me proactively do this just
而且，实际上，让我主动地这样做，

2249
01:49:37,910 --> 01:49:39,410
so you can see the structure, endif.
这样你就能看到 endif 的结构了。

2250
01:49:39,410 --> 01:49:43,340
So I've got the beginnings of an if else block in Jinja.
所以我在 Jinja 中创建了一个 if else 块的开头部分。

2251
01:49:43,340 --> 01:49:46,670
If there's a name variable in this template, say this,
如果此模板中存在 name 变量，就说

2252
01:49:46,670 --> 01:49:50,810
You are logged in as name period.
你已以 name 登录。

2253
01:49:50,810 --> 01:49:53,060
And then let's give the human a link--
然后，让我们给用户一个链接 -

2254
01:49:53,060 --> 01:49:54,500
actually, nope, let's do this.
实际上，不，让我们这样做。

2255
01:49:54,500 --> 01:49:58,020
Else, if you are not logged in, you are not logged in.
否则，如果你没有登录，你就没有登录。

2256
01:49:58,020 --> 01:50:00,860
So super simple English text that's just going to tell us,
所以这只是一个非常简单的英文文本，它只是告诉我们，

2257
01:50:00,860 --> 01:50:02,570
is the user logged in with a name?
用户是否已使用用户名登录？

2258
01:50:02,570 --> 01:50:03,560
Or are they not?
还是没有？

2259
01:50:03,560 --> 01:50:05,602
And I'm not even going to bother with a password.
我甚至不会考虑密码。

2260
01:50:05,602 --> 01:50:08,270
We're going to keep it simple with just a name to demonstrate.
为了演示，我们将只使用用户名来简化操作。

2261
01:50:08,270 --> 01:50:11,870
All right, so now what am I going to do in my controller,
好了，现在我要在我的控制器中做什么，

2262
01:50:11,870 --> 01:50:13,790
that is to say, app.py?
也就是说，在 app.py 中？

2263
01:50:13,790 --> 01:50:16,050
Let's go ahead and do this.
让我们继续执行这个操作。

2264
01:50:16,050 --> 01:50:23,810
Let's go ahead and create an app.py called login.
让我们创建一个名为 login 的 app.py 文件。

2265
01:50:23,810 --> 01:50:26,990
So I have a route that just handles logins for the user.
所以，我有一个路由，它只处理用户的登录。

2266
01:50:26,990 --> 01:50:30,290
And I'm going to go ahead and do this.
我要继续做这个。

2267
01:50:30,290 --> 01:50:34,100
Initially, I'm going to define a function called login.
最初，我将定义一个名为 login 的函数。

2268
01:50:34,100 --> 01:50:40,220
And I'm going to have it return render template of login.html.
我将让它返回 login.html 的渲染模板。

2269
01:50:40,220 --> 01:50:42,740
So this is going to be a login form by default.
所以这将成为默认的登录表单。

2270
01:50:42,740 --> 01:50:43,890
Well, let's create that.
好吧，让我们创建它。

2271
01:50:43,890 --> 01:50:46,230
Let me go into my templates directory.
让我进入我的模板目录。

2272
01:50:46,230 --> 01:50:51,950
I'm going to go ahead and create a new file called login.html.
我要创建一个名为 login.html 的新文件。

2273
01:50:51,950 --> 01:50:54,830
And, in login.html, I'm going to borrow some of this
在 login.html 中，我将借用一些来自

2274
01:50:54,830 --> 01:50:56,510
HTML-- this template from before.
HTML 的 - 之前这个模板。

2275
01:50:56,510 --> 01:51:00,500
In login.html, I'm going to just have a very simple form for logging
在 login.html 中，我将只创建一个非常简单的登录表单，

2276
01:51:00,500 --> 01:51:03,560
in, again, no password per se, just a user's name.
再次强调，没有密码，只有用户名。

2277
01:51:03,560 --> 01:51:05,600
So let's keep it simple as follows.
所以让我们像下面这样简化它。

2278
01:51:05,600 --> 01:51:09,620
form action equals, quote, unquote, /login.
form action 等于，引号，引号，/login。

2279
01:51:09,620 --> 01:51:12,140
The method for privacy's sake will be post.
为了隐私，方法将是 post。

2280
01:51:12,140 --> 01:51:16,190
Inside of this form, let's just ask the user for an input with autocomplete
在这个表单中，让我们只要求用户输入一个带自动完成功能的输入框，

2281
01:51:16,190 --> 01:51:19,820
off by default and autofocus on.
默认情况下关闭，自动聚焦开启。

2282
01:51:19,820 --> 01:51:22,520
And the name of this field will be name for the human name.
这个字段的名称将是 name，用于表示用户名。

2283
01:51:22,520 --> 01:51:26,030
The placeholder text, as before, will be, quote, unquote, "Name," capital N.
与之前一样，占位符文本将是，引号，引号，“Name”，大写 N。

2284
01:51:26,030 --> 01:51:28,917
And the type of this field will be the default, which is just text.
这个字段的类型将是默认值，也就是文本。

2285
01:51:28,917 --> 01:51:31,250
And then, lastly, let's have a button, the type of which
最后，让我们添加一个按钮，它的类型

2286
01:51:31,250 --> 01:51:33,920
is submit because its purpose in life is to submit this form.
是 submit，因为它的作用是提交这个表单。

2287
01:51:33,920 --> 01:51:36,170
And, inside of that button, we'll see the words login.
并且，在这个按钮里面，我们会看到“登录”这两个字。

2288
01:51:36,170 --> 01:51:38,750
So very similar to greet, very similar to register.
所以它非常类似于greet，也非常类似于register。

2289
01:51:38,750 --> 01:51:41,300
But we're now just implementing a login form.
但我们现在只是在实现一个登录表单。

2290
01:51:41,300 --> 01:51:43,850
OK, now let's go back to app.py.
好了，现在让我们回到app.py。

2291
01:51:43,850 --> 01:51:47,460
The only thing login does right now is display this form.
login目前唯一做的就是显示这个表单。

2292
01:51:47,460 --> 01:51:50,040
But let's actually handle the user's logging in.
但让我们真正处理用户的登录。

2293
01:51:50,040 --> 01:51:51,350
So I'm going to do this.
所以我将要这样做。

2294
01:51:51,350 --> 01:51:55,610
If the request.method equals, quote, unquote, "POST"
如果request.method等于“POST”，

2295
01:51:55,610 --> 01:52:00,080
and, therefore, the form was logically submitted, let's do this.
这意味着表单在逻辑上被提交了，让我们做这个。

2296
01:52:00,080 --> 01:52:02,910
Let's use this session variable.
让我们使用这个session变量。

2297
01:52:02,910 --> 01:52:06,140
So this session variable that I imported globally here
所以我在全局范围内导入的这个session变量

2298
01:52:06,140 --> 01:52:08,210
is essentially a dictionary.
本质上是一个字典。

2299
01:52:08,210 --> 01:52:10,730
It's an empty dictionary with two columns
它是一个空的字典，有两列

2300
01:52:10,730 --> 01:52:13,050
ready to receive keys and values.
准备接收键值对。

2301
01:52:13,050 --> 01:52:16,663
So if I want to put in someone's name from this login form,
所以如果我想从这个登录表单中输入一个人的姓名，

2302
01:52:16,663 --> 01:52:18,080
I can just tuck it in the session.
我就可以把它塞到session里。

2303
01:52:18,080 --> 01:52:23,330
And it's similar in spirit to this thing that we did last time for froshims,
它在精神上类似于我们上次为froshims所做的事情，

2304
01:52:23,330 --> 01:52:25,340
giving myself a global dictionary.
给自己一个全局字典。

2305
01:52:25,340 --> 01:52:28,310
But the problem with that was that, as soon as the server quits,
但问题是，一旦服务器停止，

2306
01:52:28,310 --> 01:52:30,260
all of the memory contents are lost.
所有内存内容都会丢失。

2307
01:52:30,260 --> 01:52:31,760
And it was also global.
它也是全局的。

2308
01:52:31,760 --> 01:52:35,510
So no matter whether it was me or Carter or Yulia visiting the same URL,
所以无论是我还是Carter还是Yulia访问同一个URL，

2309
01:52:35,510 --> 01:52:38,150
there was no distinction among users.
用户之间没有区别。

2310
01:52:38,150 --> 01:52:40,400
All of us were treated as the same user.
我们都被当作同一个用户对待。

2311
01:52:40,400 --> 01:52:46,160
But what's brilliant about this session variable is that flask, because it
但这个session变量的妙处在于，flask因为它

2312
01:52:46,160 --> 01:52:49,430
knows about HTTP and Set-Cookie and cookie,
知道HTTP和Set-Cookie以及cookie，

2313
01:52:49,430 --> 01:52:53,060
it creates the illusion that whether you, the programmer,
它会产生一种错觉，无论是你，程序员，

2314
01:52:53,060 --> 01:52:57,560
have one user or a million users, the contents of session
有一个用户还是一百万个用户，session的内容

2315
01:52:57,560 --> 01:53:01,820
are guaranteed to always be unique for me or for Carter or Yulia
都保证对我，Carter或者Yulia来说都是独一无二的

2316
01:53:01,820 --> 01:53:06,140
or whatever human is visiting your code at that moment in time.
或者任何正在访问你的代码的人，在那个特定时间点。

2317
01:53:06,140 --> 01:53:10,430
You have the illusion that everyone has their own session object or dictionary
你会有这样的错觉，每个人都有自己的session对象或字典

2318
01:53:10,430 --> 01:53:12,680
or, really, everyone has their own shopping cart
或者，更确切地说，每个人都有自己的购物车

2319
01:53:12,680 --> 01:53:15,530
just like you would expect on an amazon.com.
就像你在亚马逊网站上所期望的那样。

2320
01:53:15,530 --> 01:53:18,470
So let's use this session object like a dictionary.
所以让我们像使用字典一样使用这个session对象。

2321
01:53:18,470 --> 01:53:23,150
Let's do this, let's remember the user's name from the form by going in session,
让我们这样做，让我们通过访问session来记住表单中的用户名，

2322
01:53:23,150 --> 01:53:30,260
quote, unquote, "name" and set the value of that key equal to request.form.get
“name”，并将该键的值设置为request.form.get

2323
01:53:30,260 --> 01:53:31,070
name.
name。

2324
01:53:31,070 --> 01:53:36,080
So whatever's in the form, let's plop it into this global session dictionary
所以表单中有什么，我们就把它放到这个全局的session字典中

2325
01:53:36,080 --> 01:53:37,020
to remember the user.
以记住用户。

2326
01:53:37,020 --> 01:53:37,783
And you know what?
你知道吗？

2327
01:53:37,783 --> 01:53:39,700
Just for user interfaces' sake, let's do this,
为了用户界面的缘故，让我们这样做，

2328
01:53:39,700 --> 01:53:44,160
let's return a redirect, a 302 or whatever, to slash.
让我们返回一个重定向，一个302或其他，到斜杠。

2329
01:53:44,160 --> 01:53:47,910
Let's just redirect the user back to the home page to see if they are, in fact,
让我们将用户重定向回主页，看看他们是否真的

2330
01:53:47,910 --> 01:53:49,540
logged in at that point.
在那个时候登录了。

2331
01:53:49,540 --> 01:53:53,250
So I think, at this point, that's the entirety of my login route.
所以我想，在这一点上，这就是我的登录路由的全部内容。

2332
01:53:53,250 --> 01:53:57,390
If the user has submitted their name via POST, store their name in the session,
如果用户通过POST提交了他们的姓名，将他们的姓名存储在session中，

2333
01:53:57,390 --> 01:53:59,760
and then redirect the user back to the home page.
然后将用户重定向回主页。

2334
01:53:59,760 --> 01:54:02,670
The home page meanwhile looks again like this.
与此同时，首页看起来是这样的。

2335
01:54:02,670 --> 01:54:07,083
If there is a name in this template, we're going to see that person's name.
如果模板中有一个名字，我们将会看到这个人的名字。

2336
01:54:07,083 --> 01:54:09,250
Else, we're going to see that they're not logged in.
否则，我们会看到他们没有登录。

2337
01:54:09,250 --> 01:54:10,620
So how do we get at that name?
那么我们如何获取这个名字呢？

2338
01:54:10,620 --> 01:54:11,790
Back to app.py.
回到 app.py 文件。

2339
01:54:11,790 --> 01:54:13,620
Let's just assemble these building blocks.
我们只需要将这些构建块组合在一起。

2340
01:54:13,620 --> 01:54:16,980
In my index route, I'm going to do this.
在我的索引路由中，我会这样做。

2341
01:54:16,980 --> 01:54:22,020
name equals session.get, quote, unquote, name.
name 等于 session.get、引号、引号、name。

2342
01:54:22,020 --> 01:54:26,490
So you can treat session similar to request.args, similar to request.form.
因此你可以像对待 request.args 和 request.form 一样对待 session。

2343
01:54:26,490 --> 01:54:28,620
But it's a more permanent thing.
但它更持久。

2344
01:54:28,620 --> 01:54:31,345
At least so long as it's the same human logged in,
至少只要是同一个用户登录，

2345
01:54:31,345 --> 01:54:33,720
I'm going to get my name or Carter's name or Yulia's name
我会得到我的名字，或者 Carter 的名字，或者 Yulia 的名字，

2346
01:54:33,720 --> 01:54:38,013
depending on whose browser is visiting my URL at this moment in time.
取决于此时此刻哪个浏览器的访问我的 URL。

2347
01:54:38,013 --> 01:54:39,930
All right, so let's cross my fingers because I
好吧，让我们祈祷一下，因为我

2348
01:54:39,930 --> 01:54:41,650
wrote a lot of this on the fly.
很多代码都是即兴写的。

2349
01:54:41,650 --> 01:54:46,830
Let me open my terminal window in my login folder and do flask run.
让我在登录文件夹中打开终端窗口并执行 flask run。

2350
01:54:46,830 --> 01:54:48,960
And, OK, I screwed up already.
好吧，我已经搞砸了。

2351
01:54:48,960 --> 01:54:50,340
Session is not defined.
Session 未定义。

2352
01:54:50,340 --> 01:54:52,050
Did I mean session in lowercase?
我的意思是小写的 session 吗？

2353
01:54:52,050 --> 01:54:53,590
No, not in this case.
不，在这种情况下不是。

2354
01:54:53,590 --> 01:55:00,210
It turns out what I should have done is one more line from flask_session import
事实证明，我应该再添加一行代码：从 flask_session 导入

2355
01:55:00,210 --> 01:55:00,900
Session.
Session。

2356
01:55:00,900 --> 01:55:01,470
Why?
为什么？

2357
01:55:01,470 --> 01:55:02,850
This is another flask library.
这是另一个 Flask 库。

2358
01:55:02,850 --> 01:55:05,433
It's technically a third-party library that other smart people
从技术上来说，它是一个第三方库，由其他聪明人

2359
01:55:05,433 --> 01:55:07,390
wrote for flask users to use.
为 Flask 用户编写。

2360
01:55:07,390 --> 01:55:10,960
So I copied and pasted that line from the documentation.
所以我从文档中复制粘贴了这一行。

2361
01:55:10,960 --> 01:55:12,125
So clearly forgot about it.
所以显然忘记了它。

2362
01:55:12,125 --> 01:55:14,250
Let me get rid of this registrants dictionary which
让我删除这个 registrants 字典，它

2363
01:55:14,250 --> 01:55:15,780
has nothing to do with this example.
与这个例子无关。

2364
01:55:15,780 --> 01:55:20,070
Let me now open my terminal again and do flask run.
现在让我再次打开终端并执行 flask run。

2365
01:55:20,070 --> 01:55:21,630
OK, now we seem to be in good shape.
好的，现在我们似乎没问题了。

2366
01:55:21,630 --> 01:55:22,980
No error message is apparent.
没有明显的错误消息。

2367
01:55:22,980 --> 01:55:25,080
Let me go back to my URL and reload.
让我回到我的 URL 并重新加载。

2368
01:55:25,080 --> 01:55:26,748
And notice I am not logged in.
请注意，我没有登录。

2369
01:55:26,748 --> 01:55:29,790
Now, this is not very user friendly because the only way I know I can log
现在，这很不友好，因为我知道我唯一可以登录的方式

2370
01:55:29,790 --> 01:55:31,620
in is by going to /login.
是去 /login 页面。

2371
01:55:31,620 --> 01:55:33,210
So let's actually improve the UI.
所以让我们实际改进一下 UI。

2372
01:55:33,210 --> 01:55:37,970
In index.html, if you are not logged in, let's do this.
在 index.html 文件中，如果你没有登录，让我们这样做。

2373
01:55:37,970 --> 01:55:41,390
a href equals /login.
a 标签的 href 属性等于 /login。

2374
01:55:41,390 --> 01:55:43,080
And let's give them a link to log in.
让我们给他们一个登录链接。

2375
01:55:43,080 --> 01:55:44,330
And, otherwise, you know what?
否则，你知道吗？

2376
01:55:44,330 --> 01:55:45,290
Let's do this.
让我们这样做。

2377
01:55:45,290 --> 01:55:49,760
a href equals, quote, unquote, /logout even though it doesn't exist yet if we
a 标签的 href 属性等于、引号、引号、/logout，即使它还不存在，如果我们

2378
01:55:49,760 --> 01:55:52,640
want to facilitate the user logging out.
想要帮助用户退出登录。

2379
01:55:52,640 --> 01:55:55,550
But I think this will be a nicer UI because if I reload now,
但我认为这会是一个更友好的 UI，因为如果我现在重新加载，

2380
01:55:55,550 --> 01:55:57,080
I'm told that I'm not logged in.
我会被告知我没有登录。

2381
01:55:57,080 --> 01:55:59,690
But there's my new login link shown conditionally.
但是我的新登录链接会根据条件显示。

2382
01:55:59,690 --> 01:56:00,560
Well, let's do this.
好吧，让我们这样做。

2383
01:56:00,560 --> 01:56:02,887
If I click on this, it's super small.
如果我点击它，它太小了。

2384
01:56:02,887 --> 01:56:04,970
But, in the bottom left-hand corner of my browser,
但是，在我的浏览器左下角，

2385
01:56:04,970 --> 01:56:06,860
I'm seeing the /login route.
我看到了 /login 路由。

2386
01:56:06,860 --> 01:56:11,030
If I click on that there is that login form, no password, super simple,
如果我点击它，就会出现登录表单，没有密码，非常简单，

2387
01:56:11,030 --> 01:56:11,940
just a name.
只有一个用户名。

2388
01:56:11,940 --> 01:56:16,550
I'll type in D-A-V-I-D. And now, notice, if I Zoom in here,
我将输入 D-A-V-I-D。现在，请注意，如果我在这里放大，

2389
01:56:16,550 --> 01:56:19,080
I'm indeed currently at the /login route.
我确实当前位于 /login 路由。

2390
01:56:19,080 --> 01:56:21,560
But, when I log in, I'm going to be--
但是，当我登录时，我将要--

2391
01:56:21,560 --> 01:56:22,400
oh, damn it.
哦，该死。

2392
01:56:22,400 --> 01:56:23,960
I did make a mistake.
我确实犯了一个错误。

2393
01:56:23,960 --> 01:56:25,332
405 method not allowed.
405 方法不允许。

2394
01:56:25,332 --> 01:56:26,540
I think we fixed this before.
我认为我们之前已经修复了这个问题。

2395
01:56:26,540 --> 01:56:28,010
I can go back into app.py.
我可以回到 app.py 中。

2396
01:56:28,010 --> 01:56:31,790
Which line number do I need to fix?
我需要修复哪一行？

2397
01:56:31,790 --> 01:56:35,150
Method was not supported for which route?
哪个路由不支持该方法？

2398
01:56:35,150 --> 01:56:36,500
So, yeah, line 16.
所以，是的，第 16 行。

2399
01:56:36,500 --> 01:56:39,350
So I think I need methods equals both of them.
所以我认为我需要 methods 等于它们两者。

2400
01:56:39,350 --> 01:56:41,730
So GET so I can display the form.
所以 GET，这样我就可以显示表单。

2401
01:56:41,730 --> 01:56:44,175
And POST so I can process the form.
以及 POST，这样我就可以处理表单。

2402
01:56:44,175 --> 01:56:45,050
Let's try this again.
让我们再试一次。

2403
01:56:45,050 --> 01:56:46,520
I'm just going to go back.
我只要返回。

2404
01:56:46,520 --> 01:56:47,990
And I'm going to click--
我将点击 --

2405
01:56:47,990 --> 01:56:49,730
type David and click Log In.
输入 David 并点击登录。

2406
01:56:49,730 --> 01:56:51,740
And I'll zoom in on the URL.
我将放大 URL。

2407
01:56:51,740 --> 01:56:55,220
Log In, ah, you are logged in as David.
登录，啊，您已以 David 的身份登录。

2408
01:56:55,220 --> 01:56:56,850
Now I can log out.
现在我可以注销了。

2409
01:56:56,850 --> 01:56:57,950
And, indeed, if I log out.
而且，确实，如果我注销。

2410
01:56:57,950 --> 01:56:59,158
This one's not going to work.
这个不会起作用。

2411
01:56:59,158 --> 01:57:03,030
I think I'm going to get a 404 not found, but that's fixable too.
我认为我将得到 404 未找到，但这也是可以修复的。

2412
01:57:03,030 --> 01:57:04,700
So let me go back into VS Code.
所以让我回到 VS Code 中。

2413
01:57:04,700 --> 01:57:06,660
Let me go down to the bottom of the file.
让我向下滚动到文件底部。

2414
01:57:06,660 --> 01:57:09,980
And let's add another route /logout.
让我们添加另一个路由 /logout。

2415
01:57:09,980 --> 01:57:12,620
Just GET is fine because I'm not posting anything to it.
只需要 GET 就可以了，因为我不会向它发送任何 POST 请求。

2416
01:57:12,620 --> 01:57:15,698
I'll define a function called logout just to match the name of the route.
我将定义一个名为 logout 的函数，以便与路由名称匹配。

2417
01:57:15,698 --> 01:57:18,240
And you wouldn't know this without reading the documentation,
而且如果不阅读文档，您将不知道这一点，

2418
01:57:18,240 --> 01:57:19,940
but if you want to clear the session and forget
但是，如果您想清除会话并忘记

2419
01:57:19,940 --> 01:57:22,430
the user's name, forget the items in their shopping cart,
用户名，忘记他们购物车中的商品，

2420
01:57:22,430 --> 01:57:24,103
you can do session.clear.
您可以执行 session.clear。

2421
01:57:24,103 --> 01:57:26,270
And that will just clear the contents of the session
这将清除会话的内容

2422
01:57:26,270 --> 01:57:28,760
wherever the server is storing them.
无论服务器将它们存储在哪里。

2423
01:57:28,760 --> 01:57:31,670
And then I can just return a redirect.
然后我只需要返回一个重定向。

2424
01:57:31,670 --> 01:57:34,610
redirect to, for instance, slash.
重定向到，例如，斜杠。

2425
01:57:34,610 --> 01:57:35,910
So let's see this in action.
让我们看看它的实际效果。

2426
01:57:35,910 --> 01:57:37,800
Let me go back to the browser and hit back.
让我回到浏览器并点击后退。

2427
01:57:37,800 --> 01:57:39,000
I'm logged in as David.
我已以 David 的身份登录。

2428
01:57:39,000 --> 01:57:41,940
But now, when I click Log out, I'm going to quickly go to--
但是现在，当我点击注销时，我将快速转到 --

2429
01:57:41,940 --> 01:57:43,890
and I'll show you in the inspector.
我将在检查器中向您展示。

2430
01:57:43,890 --> 01:57:46,560
Inspect, Network tab.
检查，网络选项卡。

2431
01:57:46,560 --> 01:57:48,150
Let's click on Log out.
让我们点击注销。

2432
01:57:48,150 --> 01:57:50,980
I indeed end up at logout first.
我确实首先到达了注销页面。

2433
01:57:50,980 --> 01:57:54,510
But then I'm redirected to this long URL, which is unique to my codespace.
但随后我被重定向到这个很长的 URL，它是我的代码空间独有的。

2434
01:57:54,510 --> 01:58:00,270
But the first logout URL redirects me with a 302 until I see a 200.
但第一个注销URL会以302重定向我，直到我看到200。

2435
01:58:00,270 --> 01:58:02,770
And I'm back at the home screen.
然后我回到了主屏幕。

2436
01:58:02,770 --> 01:58:05,940
So, even though that was a bunch of steps for me to do,
所以，即使我做了一大堆步骤，

2437
01:58:05,940 --> 01:58:11,530
that is how every website implements the notion of logins and also shopping
这就是每个网站实现登录和购物概念的方式。

2438
01:58:11,530 --> 01:58:12,030
carts.
购物车。

2439
01:58:12,030 --> 01:58:15,570
Now, you might add some fanciness with usernames and passwords
现在，你可能会添加一些花哨的东西，比如用户名和密码

2440
01:58:15,570 --> 01:58:18,060
and the like, maybe two-factor authentication and the like.
以及类似的东西，比如双重身份验证等等。

2441
01:58:18,060 --> 01:58:21,300
But it all boils down to storing stuff in the session
但归根结底，都是将东西存储在会话中

2442
01:58:21,300 --> 01:58:26,700
and using those cookie headers in order to keep track of who is who.
并使用这些cookie头来跟踪谁是谁。

2443
01:58:26,700 --> 01:58:30,135
Any questions on these techniques thus far?
到目前为止，对这些技术有任何疑问吗？

2444
01:58:33,080 --> 01:58:33,580
No?
没有？

2445
01:58:33,580 --> 01:58:36,820
All right, how about an actual Amazon, if a simplistic one?
好吧，一个真正的亚马逊，如果它很简单的话？

2446
01:58:36,820 --> 01:58:37,460
Let me do this.
让我来做这个。

2447
01:58:37,460 --> 01:58:39,230
Let me go back to VS Code here.
让我回到这里的VS Code。

2448
01:58:39,230 --> 01:58:41,620
Let me close these tabs, and let me open up an example
让我关闭这些选项卡，让我打开一个示例

2449
01:58:41,620 --> 01:58:46,510
that I wrote in advance, this one in my src9 directory's store folder,
我之前写过，这个在src9目录的store文件夹里，

2450
01:58:46,510 --> 01:58:49,270
so the beginnings of an electronic commerce store online.
所以，这是在线电子商务商店的雏形。

2451
01:58:49,270 --> 01:58:53,230
Let me just dive in blindly and do flask run for this one.
让我直接跳进去，为这个执行flask run。

2452
01:58:53,230 --> 01:58:56,380
And let me go to my browser tab and reload because I'm
让我去浏览器选项卡并重新加载，因为我

2453
01:58:56,380 --> 01:58:57,760
going to see my new app now.
现在要看到我的新应用。

2454
01:58:57,760 --> 01:58:59,560
And it's super simple, also ugly.
它超级简单，也很丑。

2455
01:58:59,560 --> 01:59:01,450
There's no CSS or fanciness there.
那里没有CSS或花哨的东西。

2456
01:59:01,450 --> 01:59:02,770
But it's just HTML.
但它只是HTML。

2457
01:59:02,770 --> 01:59:05,950
And this is the earliest version, if you will, of Amazon 1.0
如果你愿意，这是亚马逊1.0的早期版本

2458
01:59:05,950 --> 01:59:09,770
where they just sold books, and only these five books, for instance.
他们只卖书，比如只有这五本书。

2459
01:59:09,770 --> 01:59:11,110
So what's going on here?
那么，这里发生了什么？

2460
01:59:11,110 --> 01:59:14,080
Well, here is how using all of today's primitives,
好吧，这是使用今天所有的基本元件的方法，

2461
01:59:14,080 --> 01:59:16,010
you can start to infer how websites work.
你可以开始推断网站是如何工作的。

2462
01:59:16,010 --> 01:59:17,410
So let me View page source.
所以让我查看页面源代码。

2463
01:59:17,410 --> 01:59:21,130
And, even though the UI is not very pretty, let's see what's inside here.
而且，即使UI不是很漂亮，让我们看看这里面有什么。

2464
01:59:21,130 --> 01:59:24,490
There's an h1 tag for books, just like the title of the page.
有一个关于书籍的h1标签，就像页面的标题一样。

2465
01:59:24,490 --> 01:59:26,860
There's a whole bunch of h2s, each one of which
有一堆h2，每一个

2466
01:59:26,860 --> 01:59:28,780
represents apparently the title of a book.
显然代表了一本书的标题。

2467
01:59:28,780 --> 01:59:31,540
And below every title is a unique form.
在每个标题下面都是一个唯一的表单。

2468
01:59:31,540 --> 01:59:34,970
Every form, though, has an action of /cart.
但是，每个表单都有一个/cart的操作。

2469
01:59:34,970 --> 01:59:37,983
And every one submits via post to that cart.
并且每个表单都通过post提交到那个购物车。

2470
01:59:37,983 --> 01:59:38,900
But notice this trick.
但注意这个技巧。

2471
01:59:38,900 --> 01:59:43,460
Just like the deregistration for froshims, every one of these forms
就像froshims的注销一样，这些表单中的每一个

2472
01:59:43,460 --> 01:59:48,380
has a unique ID that's hidden, but the value for this one is 1.
都有一个隐藏的唯一ID，但这个的value是1。

2473
01:59:48,380 --> 01:59:50,030
The value for this one is 2.
这个的value是2。

2474
01:59:50,030 --> 01:59:51,620
The value for this one is 3.
这个的value是3。

2475
01:59:51,620 --> 01:59:54,620
So even though for froshims, we used it to deregister people
所以即使对于froshims，我们也用它来注销人们

2476
01:59:54,620 --> 01:59:59,030
to opt out of the froshims, here, you're using it to effectively add items
选择退出froshims，在这里，你用它来有效地添加项目

2477
01:59:59,030 --> 01:59:59,990
to your cart.
到你的购物车。

2478
01:59:59,990 --> 02:00:00,650
Why?
为什么？

2479
02:00:00,650 --> 02:00:03,080
Well, where is this data coming from?
好吧，这些数据从哪里来？

2480
02:00:03,080 --> 02:00:04,250
Let's poke around further.
让我们进一步看看。

2481
02:00:04,250 --> 02:00:06,590
I'm going to open another terminal window in VS Code.
我要在VS Code中打开另一个终端窗口。

2482
02:00:06,590 --> 02:00:07,460
I'll make it bigger.
我会把它放大。

2483
02:00:07,460 --> 02:00:09,830
I'm going to go into src9 and store.
我要进入src9和store。

2484
02:00:09,830 --> 02:00:15,110
And if I type ls, you'll see app.py, requirements.txt, templates,
如果我输入 ls，你会看到 app.py、requirements.txt、templates，

2485
02:00:15,110 --> 02:00:16,700
all of which I predicted would exist.
这些都是我预测会存在的。

2486
02:00:16,700 --> 02:00:19,860
There's a temporary folder called flask_session.
这里有一个名为 flask_session 的临时文件夹。

2487
02:00:19,860 --> 02:00:22,550
This is where, surprise, surprise, your sessions
这里就是，不出所料，你的会话

2488
02:00:22,550 --> 02:00:25,080
are temporarily stored on the server.
临时存储在服务器上的地方。

2489
02:00:25,080 --> 02:00:28,280
So even if the computer quits or reboots, the files are still there.
所以即使电脑关闭或重启，文件仍然存在。

2490
02:00:28,280 --> 02:00:31,610
The shopping carts are still there, but you shouldn't need to go in there.
购物车仍然存在，但你不应该需要进入那里。

2491
02:00:31,610 --> 02:00:34,527
And definitely don't change things in there because things will break.
而且绝对不要更改里面的东西，因为会出错。

2492
02:00:34,527 --> 02:00:37,460
But notice store.db, which came with my folder today.
但请注意 store.db，它今天随我的文件夹一起提供。

2493
02:00:37,460 --> 02:00:39,956
Let me run sqlite3 of store.db.
让我运行 store.db 的 sqlite3。

2494
02:00:39,956 --> 02:00:42,230
.schema to see what's going on in there.
.schema 查看里面发生了什么。

2495
02:00:42,230 --> 02:00:44,660
It's a super simple database table called books
这是一个非常简单的名为 books 的数据库表

2496
02:00:44,660 --> 02:00:46,610
with an ID column and a title column.
它有一个 ID 列和一个标题列。

2497
02:00:46,610 --> 02:00:47,420
And that's it.
就是这样。

2498
02:00:47,420 --> 02:00:48,500
Let's see what's inside.
让我们看看里面有什么。

2499
02:00:48,500 --> 02:00:53,520
SELECT * FROM book; Not surprisingly, there are the five books.
SELECT * FROM book；不出所料，有五本书。

2500
02:00:53,520 --> 02:00:56,570
So, again, you see how we're stitching these technologies together
所以，再次，你看到我们是如何将这些技术缝合在一起的

2501
02:00:56,570 --> 02:00:58,350
using these basic building blocks.
使用这些基本构件。

2502
02:00:58,350 --> 02:01:01,190
So let's look now-- let me quit out of SQLite.
所以让我们现在看看-- 让我退出 SQLite。

2503
02:01:01,190 --> 02:01:05,060
Let me shrink my terminal window and open up app.py.
让我缩小我的终端窗口并打开 app.py。

2504
02:01:05,060 --> 02:01:06,540
And there's some comments in here.
这里有一些注释。

2505
02:01:06,540 --> 02:01:09,260
But, for the most part, it's the same as before.
但总的来说，它与之前相同。

2506
02:01:09,260 --> 02:01:11,570
I'm importing some of the session stuff, so I can keep
我正在导入一些会话内容，这样我就可以继续

2507
02:01:11,570 --> 02:01:13,640
track of whose shopping cart is whose.
跟踪谁的购物车是谁的。

2508
02:01:13,640 --> 02:01:17,210
I'm opening, though, in this version, the database called store.db.
但是，在这个版本中，我正在打开名为 store.db 的数据库。

2509
02:01:17,210 --> 02:01:20,210
I'm doing that same stuff, copy-paste with the session just to make sure
我在做同样的事情，复制粘贴会话只是为了确保

2510
02:01:20,210 --> 02:01:21,240
that it works.
它起作用。

2511
02:01:21,240 --> 02:01:23,150
And then, down here, this is where things
然后，这里，就是事情

2512
02:01:23,150 --> 02:01:27,260
get really kind of interesting and, again, representative of web
变得真正有趣，并且再次，代表了 web

2513
02:01:27,260 --> 02:01:28,250
apps everywhere.
应用程序随处可见。

2514
02:01:28,250 --> 02:01:32,660
My /route, that is, my index, has this line of code first,
我的 /route，也就是我的索引，首先有这一行代码，

2515
02:01:32,660 --> 02:01:36,440
a book's variable that gets the return value of the CS50 function--
一个名为 books 的变量，它获取 CS50 函数的返回值--

2516
02:01:36,440 --> 02:01:38,450
CS50 execute functions.
CS50 执行函数。

2517
02:01:38,450 --> 02:01:41,570
SELECT * FROM books return value.
SELECT * FROM books 返回值。

2518
02:01:41,570 --> 02:01:42,830
What does that return?
它返回什么？

2519
02:01:42,830 --> 02:01:45,650
Well, recall that, when using the CS50 library and you're
好吧，回想一下，当使用 CS50 库并且你正在

2520
02:01:45,650 --> 02:01:49,160
using the SQL function, this execute function within SQL,
使用 SQL 函数时，这个在 SQL 中的 execute 函数，

2521
02:01:49,160 --> 02:01:55,910
you're getting back, from db.execute typically, a list of dictionaries.
你通常从 db.execute 中返回一个字典列表。

2522
02:01:55,910 --> 02:01:59,510
And the keys of those dictionaries represent the columns
而这些字典的键代表列

2523
02:01:59,510 --> 02:02:00,870
from the database table.
来自数据库表。

2524
02:02:00,870 --> 02:02:04,670
So here is a Python list per the square brackets.
所以这里有一个 Python 列表，根据方括号。

2525
02:02:04,670 --> 02:02:09,920
Every element in this list is a dictionary as per the curly braces,
此列表中的每个元素都是一个字典，根据花括号，

2526
02:02:09,920 --> 02:02:12,320
not to be confused with Jinja's curly braces today
不要与今天的 Jinja 的花括号混淆

2527
02:02:12,320 --> 02:02:14,270
and that's in the HTML files.
那在 HTML 文件中。

2528
02:02:14,270 --> 02:02:15,440
Here's one key.
这里是一个键。

2529
02:02:15,440 --> 02:02:18,540
Here's another, value and value, respectively.
这里还有另一个，分别是值和值。

2530
02:02:18,540 --> 02:02:21,320
So, again, db.execute, when using SELECT,
所以，再次，db.execute，当使用 SELECT 时，

2531
02:02:21,320 --> 02:02:23,330
returns just a list of dictionaries.
只返回一个字典列表。

2532
02:02:23,330 --> 02:02:25,320
It's as simple as that.
就这么简单。

2533
02:02:25,320 --> 02:02:31,580
So if I go back to VS Code, I have a string of SQL inside of my argument
所以如果我回到 VS Code，我的参数里包含了一串 SQL 语句

2534
02:02:31,580 --> 02:02:32,627
to this Python function.
传给了这个 Python 函数

2535
02:02:32,627 --> 02:02:34,460
That gives me a variable called books, which
这样我得到一个名为 books 的变量，它

2536
02:02:34,460 --> 02:02:36,420
is a list of all of the books in the database.
是一个包含数据库中所有书籍的列表

2537
02:02:36,420 --> 02:02:39,530
So I can certainly pass that in as an argument
所以我可以把它作为参数传递

2538
02:02:39,530 --> 02:02:42,835
to render template so that, when books.html is rendered,
给 render template 函数，这样当 books.html 被渲染时

2539
02:02:42,835 --> 02:02:44,210
it has access to all those books.
它就能访问所有这些书籍

2540
02:02:44,210 --> 02:02:45,090
So let me do that.
让我来做吧

2541
02:02:45,090 --> 02:02:48,830
Let me go into templates books.html.
让我进入 templates 文件夹下的 books.html 文件

2542
02:02:48,830 --> 02:02:53,570
And, perhaps not surprisingly, here's that same boilerplate as before.
不出所料，这里和之前一样是相同的模板代码

2543
02:02:53,570 --> 02:02:54,930
We extend the layout.
我们扩展了布局

2544
02:02:54,930 --> 02:02:56,870
Here's my body block.
这是我的 body 代码块

2545
02:02:56,870 --> 02:03:00,360
Here's that h1 tag that just says Books at the top of the page.
这是一个 h1 标签，在页面顶部显示 “Books”

2546
02:03:00,360 --> 02:03:03,470
And here is a Jinja for loop in the template that
这里是一个模板中的 Jinja 循环，它

2547
02:03:03,470 --> 02:03:07,430
is going to output, for every book, an h2, which is smaller but still bold
将输出每本书对应的 h2 标签，字体比 h1 小，但仍然是粗体

2548
02:03:07,430 --> 02:03:08,270
for the title.
用于显示书名

2549
02:03:08,270 --> 02:03:13,280
And then inside of that-- or below that is a form that's identical for every
然后在它里面或者下面是一个表单，每个表单都一样

2550
02:03:13,280 --> 02:03:14,900
book except--
除了

2551
02:03:14,900 --> 02:03:18,860
notice that I'm very cleverly outputting a unique value
注意我非常巧妙地输出了一个唯一的值

2552
02:03:18,860 --> 02:03:20,780
for every one of those forms.
对于每个表单

2553
02:03:20,780 --> 02:03:23,390
Just relying on those primary keys back and forth, back
只是依靠这些主键来回传递

2554
02:03:23,390 --> 02:03:26,340
and forth to implement this notion of adding.
来回传递来实现添加的功能

2555
02:03:26,340 --> 02:03:29,390
And so what is the /cart method?
那么/cart 方法是什么？

2556
02:03:29,390 --> 02:03:30,710
Let's follow these breadcrumbs.
让我们跟随这些线索

2557
02:03:30,710 --> 02:03:32,360
And I'm doing this deliberately live.
我故意这样做，而且是实时演示

2558
02:03:32,360 --> 02:03:34,360
If you were to receive or inherit code like this
如果你收到或继承了这样的代码

2559
02:03:34,360 --> 02:03:36,880
from a colleague, a friend, a class, you really
来自同事、朋友或课程，你真的

2560
02:03:36,880 --> 02:03:40,555
just follow these breadcrumbs to wrap your mind around what's going on.
只需要跟随这些线索，就能理解代码的功能

2561
02:03:40,555 --> 02:03:42,430
And, honestly, start with the files that feel
诚实地说，从看起来最简单的文件开始

2562
02:03:42,430 --> 02:03:46,730
the simplest like I did, like index.html, start with the entry point.
比如我做的 index.html，从入口文件开始

2563
02:03:46,730 --> 02:03:48,700
So let's see the cart route.
让我们看看 cart 路由

2564
02:03:48,700 --> 02:03:49,900
It's a little longer.
它有点长

2565
02:03:49,900 --> 02:03:51,560
But let's walk through it step by step.
但让我们一步一步地看

2566
02:03:51,560 --> 02:03:54,160
So the cart route supports both GET and POST.
所以 cart 路由支持 GET 和 POST 请求

2567
02:03:54,160 --> 02:03:57,910
It looks like, with these lines, which I haven't had occasion to use yet,
看起来，这些代码行，我还没用过

2568
02:03:57,910 --> 02:03:58,930
I'm just checking.
我只是检查一下

2569
02:03:58,930 --> 02:04:04,720
If there is no cart in the session, create a cart that's an empty list.
如果 session 中没有购物车，就创建一个空的购物车列表

2570
02:04:04,720 --> 02:04:06,730
And I'm doing this logically in this program
我在程序中这样做是有逻辑的

2571
02:04:06,730 --> 02:04:11,230
because I want to make sure that the cart always exists even if it's empty.
因为我想确保购物车始终存在，即使它是空的

2572
02:04:11,230 --> 02:04:14,110
Even if it's empty initially, that's what that line of code
即使它最初是空的，这就是这行代码

2573
02:04:14,110 --> 02:04:15,040
is essentially doing.
做的事情

2574
02:04:15,040 --> 02:04:16,760
So we can put things in it.
这样我们就可以往里面放东西了

2575
02:04:16,760 --> 02:04:21,940
So if we have submitted something to this cart and thus the method is POST,
所以如果我们向购物车提交了一些东西，那么方法就是 POST

2576
02:04:21,940 --> 02:04:26,050
let's go ahead and grab the ID of the book from request.form.
让我们从 request.form 中获取书籍的 ID

2577
02:04:26,050 --> 02:04:31,210
Let's go ahead and make sure that that ID is actually valid,
让我们确保这个 ID 确实是有效的

2578
02:04:31,210 --> 02:04:33,710
and it's actually a number, so it doesn't evaluate to false.
并且它确实是一个数字，所以不会被判断为 false

2579
02:04:33,710 --> 02:04:35,710
And if so, do this.
如果是，就做下面的操作

2580
02:04:35,710 --> 02:04:40,210
Go into the sessions cart, which is initially an empty list.
进入 session 里的购物车，它最初是一个空列表

2581
02:04:40,210 --> 02:04:43,390
And, just like we saw in week six, append an item to the list.
就像我们在第六周看到的，将一个条目追加到列表中

2582
02:04:43,390 --> 02:04:44,650
Append, append, append.
追加、追加、追加。

2583
02:04:44,650 --> 02:04:46,780
So we just have a list of book IDs.
所以我们现在只有一系列书籍ID。

2584
02:04:46,780 --> 02:04:49,960
And then, when you are done with that, redirect to the cart route.
然后，当你完成这些操作后，重定向到购物车页面。

2585
02:04:49,960 --> 02:04:52,180
Well, that's a little weird and almost recursive
嗯，这有点奇怪，而且几乎是递归的

2586
02:04:52,180 --> 02:04:55,510
because the cart route that we're in is redirecting to itself.
因为我们所在的购物车页面正在重定向到它自己。

2587
02:04:55,510 --> 02:04:59,090
But redirects are always get requests when done like this.
但是，当以这种方式执行重定向时，它始终是GET请求。

2588
02:04:59,090 --> 02:05:02,290
So even though we ended up here via a POST,
所以即使我们通过POST请求到达这里，

2589
02:05:02,290 --> 02:05:06,310
this redirect is going to send me back via a GET, to the same route.
这个重定向将通过GET请求把我送回同一个页面。

2590
02:05:06,310 --> 02:05:09,730
And that is why now, outside of the conditional, these final two lines
所以现在，在条件语句之外，最后两行

2591
02:05:09,730 --> 02:05:10,420
apply.
生效。

2592
02:05:10,420 --> 02:05:12,283
Here is a books variable.
这里有一个books变量。

2593
02:05:12,283 --> 02:05:14,950
I don't want to get all of the books because I'm not showing you
我不想获取所有书籍，因为我不会展示给你

2594
02:05:14,950 --> 02:05:16,780
the catalog now of amazon.com.
现在亚马逊网站的商品目录。

2595
02:05:16,780 --> 02:05:18,460
I'm showing you your shopping cart.
我正在展示你的购物车。

2596
02:05:18,460 --> 02:05:20,030
And how do I do this?
我该怎么做呢？

2597
02:05:20,030 --> 02:05:27,700
I'm SELECTing * FROM books WHERE the id of the book is IN this list of ids.
我从books表中选择所有行，其中书籍id位于该id列表中。

2598
02:05:27,700 --> 02:05:29,530
And you haven't seen this yet most likely.
而且你很可能还没有见过这个。

2599
02:05:29,530 --> 02:05:33,400
But, in the CS50 library, if you use parentheses and a question mark,
但是，在CS50库中，如果你使用括号和问号，

2600
02:05:33,400 --> 02:05:38,350
so placeholder as always, you can then plug a list into that question mark,
所以像往常一样占位符，然后你可以将列表插入问号中，

2601
02:05:38,350 --> 02:05:41,530
and the library will separate them all via commas.
库将用逗号将它们全部分隔开。

2602
02:05:41,530 --> 02:05:43,690
You might have for a past problem set manually.
对于之前的习题，你可能手动做过。

2603
02:05:43,690 --> 02:05:45,400
We will generate the commas for you.
我们将为你生成逗号。

2604
02:05:45,400 --> 02:05:47,260
So everything is nicely escaped.
所以一切都很好地转义了。

2605
02:05:47,260 --> 02:05:50,990
And then we're just rendering a template cart.html, passing in those books.
然后我们只是渲染一个模板cart.html，并将这些书籍传递进去。

2606
02:05:50,990 --> 02:05:52,060
So what's cart.html?
那么cart.html是什么呢？

2607
02:05:52,060 --> 02:05:53,800
That's the last breadcrumb to follow.
这是最后要跟踪的线索。

2608
02:05:53,800 --> 02:05:59,170
cart.html, and really nothing going on that's that interesting here.
cart.html，这里实际上没有什么有趣的事情。

2609
02:05:59,170 --> 02:06:00,880
There's an h1 tag at the top.
顶部有一个h1标签。

2610
02:06:00,880 --> 02:06:04,240
There's an ordered list, which is a numbered list just because.
这里有一个有序列表，只是一个编号列表。

2611
02:06:04,240 --> 02:06:09,190
And then there's this Jinja loop that's outputting a list item or li element
然后这里有一个Jinja循环，它输出一个列表项或li元素

2612
02:06:09,190 --> 02:06:13,670
for every book showing its title.
用于显示每本书的标题。

2613
02:06:13,670 --> 02:06:17,350
So if I go back to the store here and actually start
所以如果我回到商店，开始

2614
02:06:17,350 --> 02:06:20,448
adding things to the cart, there, I've added that to the cart.
添加东西到购物车，我已经添加了它。

2615
02:06:20,448 --> 02:06:21,490
All right, just one book.
好的，只有一本书。

2616
02:06:21,490 --> 02:06:23,890
Let's jump to the last one, so the Hitchhiker's Guide to the Galaxy.
让我们跳到最后一本书，银河系漫游指南。

2617
02:06:23,890 --> 02:06:24,973
How about Mostly Harmless?
那基本上无害呢？

2618
02:06:24,973 --> 02:06:25,630
Click that.
点击它。

2619
02:06:25,630 --> 02:06:27,640
Now there's two items in the shopping cart.
现在购物车里有2件商品了。

2620
02:06:27,640 --> 02:06:28,510
Let me go back.
让我回去。

2621
02:06:28,510 --> 02:06:32,200
There's now three items in the shopping cart and so forth.
现在购物车里有3件商品了，以此类推。

2622
02:06:32,200 --> 02:06:35,300
But if I were to make this URL public-- it's currently private by default.
但是如果我要公开这个URL--它目前默认是私有的。

2623
02:06:35,300 --> 02:06:37,930
So not everyone on the internet can visit it at the same time.
所以不是每个人都能同时访问它。

2624
02:06:37,930 --> 02:06:40,030
If I were to make this public and any one of you
如果我要公开这个，而你们中的任何一个人

2625
02:06:40,030 --> 02:06:42,010
were to open it on your phone or laptop, you
在你的手机或笔记本电脑上打开它，你

2626
02:06:42,010 --> 02:06:46,030
would see an empty cart because you would have a different handstamp,
会看到一个空购物车，因为你会有一个不同的手印，

2627
02:06:46,030 --> 02:06:47,230
a different cookie.
一个不同的cookie。

2628
02:06:47,230 --> 02:06:50,440
But the server would be keeping track of all of our shopping carts
但是服务器会跟踪我们所有的购物车

2629
02:06:50,440 --> 02:06:55,930
in, if you will, that flask session folder, just all sort of
在，如果你愿意，那个flask session文件夹中，就是各种各样的

2630
02:06:55,930 --> 02:06:58,460
happens automatically.
自动发生。

2631
02:06:58,460 --> 02:06:59,540
Phew, OK.
呼，好的。

2632
02:06:59,540 --> 02:07:04,160
So that then is how amazon.com is implemented.
这就是 Amazon.com 的实现方式。

2633
02:07:04,160 --> 02:07:05,870
Questions?
有问题吗？

2634
02:07:05,870 --> 02:07:07,043
Yeah.
是的。

2635
02:07:07,043 --> 02:07:08,210
AUDIENCE: Or is the client--
观众：还是客户——

2636
02:07:08,210 --> 02:07:12,170
so let's say if you open up this application.
比如，你打开这个应用程序。

2637
02:07:12,170 --> 02:07:15,898
How do the server know that this is to be a new session now?
服务器如何知道这现在是一个新会话？

2638
02:07:15,898 --> 02:07:20,868
[INAUDIBLE] and someone who starts up a new session.
[听不清]，以及启动新会话的人。

2639
02:07:20,868 --> 02:07:25,300
How does the browser [INAUDIBLE] when someone [INAUDIBLE] that is
浏览器如何[听不清]，当有人[听不清]，那是

2640
02:07:25,300 --> 02:07:26,500
like a new session?
像一个新会话？

2641
02:07:26,500 --> 02:07:27,350
DAVID J. MALAN: A really good question.
大卫·马兰：一个非常好的问题。

2642
02:07:27,350 --> 02:07:28,267
How does the browser--
浏览器如何——

2643
02:07:28,267 --> 02:07:31,270
how does the server to give you a brand-new session the first time you
服务器如何才能在你第一次访问网站时给你一个全新的会话？

2644
02:07:31,270 --> 02:07:32,290
visit a website?
访问网站？

2645
02:07:32,290 --> 02:07:35,380
When you visit something.com for the first time,
当你第一次访问 something.com 时，

2646
02:07:35,380 --> 02:07:37,750
your browser will not send a cookie header.
你的浏览器不会发送 cookie 头。

2647
02:07:37,750 --> 02:07:39,990
There will be no cookie colon session equals value.
不会有 cookie 冒号会话等于值。

2648
02:07:39,990 --> 02:07:42,490
It's just going to be blank, it's going to be my showing you
它将是空白的，它将是我向你展示

2649
02:07:42,490 --> 02:07:44,023
my other hand that has no ink on it.
我的另一只手上没有墨水。

2650
02:07:44,023 --> 02:07:46,690
Then the server will know, well, if you didn't send me a cookie,
然后服务器就会知道，嗯，如果你没有给我发送 cookie，

2651
02:07:46,690 --> 02:07:50,590
I'm going to set one for you by stamping your hand with the set cookie header.
我将使用 set cookie 头为你在你的手上盖章，来为你设置一个。

2652
02:07:50,590 --> 02:07:53,980
It's just going to generate typically a really big random number that's
它通常会生成一个非常大的随机数，它是

2653
02:07:53,980 --> 02:07:58,520
different for you, for me, for you to keep track of us individually.
对你、对我、对你是不同的，以便分别跟踪我们。

2654
02:07:58,520 --> 02:07:59,260
So that's all.
就是这样。

2655
02:07:59,260 --> 02:08:03,520
It would just happen by default. And Flask makes all of that
它会自动发生。Flask 使所有这一切

2656
02:08:03,520 --> 02:08:07,940
happen because we have not only imported these lines at the top.
发生，因为我们不仅在顶部导入了这些行。

2657
02:08:07,940 --> 02:08:11,005
We have also used these configuration lines too
我们也使用过这些配置行

2658
02:08:11,005 --> 02:08:13,935
to ensure that the server does exactly what I just described.
以确保服务器完全按照我刚才描述的方式运行。

2659
02:08:13,935 --> 02:08:16,060
If you had to do all of that manually, honestly, it
如果你必须手动完成所有这些工作，说实话，它

2660
02:08:16,060 --> 02:08:18,518
would be so annoying to make web applications because you'd
会让创建网络应用程序变得非常烦人，因为你得

2661
02:08:18,518 --> 02:08:20,210
do copy-paste all of the time.
一直进行复制粘贴。

2662
02:08:20,210 --> 02:08:23,230
This is still some copy-paste, but it's way less than implementing
这仍然有一些复制粘贴，但这远远少于实现

2663
02:08:23,230 --> 02:08:26,310
all of this cookie stuff on your own.
你自己所有的 cookie 相关的东西。

2664
02:08:26,310 --> 02:08:28,970
All right, how about a final set of examples
好的，我们来看最后一组示例

2665
02:08:28,970 --> 02:08:32,360
that allow us to escalate quickly to a larger data
使我们能够快速升级到更大的数据

2666
02:08:32,360 --> 02:08:37,610
set and make this more like an actual amazon.com or maybe an actual imdb.com.
集，并使它更像一个真正的 Amazon.com，或者可能是一个真正的 IMDb.com。

2667
02:08:37,610 --> 02:08:40,820
And we'll do this by way of a tour of some pre-written examples
我们将通过参观一些预先编写好的示例来做到这一点

2668
02:08:40,820 --> 02:08:43,170
rather than do all of these here from scratch.
而不是从头开始在这里做所有这些。

2669
02:08:43,170 --> 02:08:46,880
So I'm going to go into my terminal window.
所以我要进入我的终端窗口。

2670
02:08:46,880 --> 02:08:50,060
I'm going to hit Control-c to kill the previous version of the store.
我将按下 Ctrl-c 来杀死商店的先前版本。

2671
02:08:50,060 --> 02:08:55,130
And I'm going to go into shows version 0 initially, which has our old friend
我将最初进入 shows 版本 0，它包含我们老朋友

2672
02:08:55,130 --> 02:09:00,920
shows.db from our SQL lecture, which has all of the latest TV shows from IMDb
来自 SQL 讲座的 shows.db，它包含了来自 IMDb 的所有最新电视剧

2673
02:09:00,920 --> 02:09:03,020
using the same schema as then.
使用与当时相同的模式。

2674
02:09:03,020 --> 02:09:04,700
And there's an app.py.
还有一个 app.py。

2675
02:09:04,700 --> 02:09:06,080
There's a requirements.txt.
还有一个 requirements.txt。

2676
02:09:06,080 --> 02:09:08,120
And there's a templates folder just as predicted
还有一个 templates 文件夹，正如预期的那样

2677
02:09:08,120 --> 02:09:09,560
because we're still using Flask.
因为我们仍然使用 Flask。

2678
02:09:09,560 --> 02:09:11,690
So let's go ahead and take a look at what's
所以，让我们继续看看是什么

2679
02:09:11,690 --> 02:09:16,280
going on inside of this file app.py as our entry point.
这个文件app.py里面正在发生的事情，作为我们的入口点。

2680
02:09:16,280 --> 02:09:19,130
All right, so I see some pretty familiar imports now.
好了，现在我看到了一些非常熟悉的导入。

2681
02:09:19,130 --> 02:09:24,420
I see shows.db using the SQL library, so nothing too interesting there.
我看到shows.db使用SQL库，所以这里没什么太有趣的东西。

2682
02:09:24,420 --> 02:09:26,460
The index route is super simple.
索引路由超级简单。

2683
02:09:26,460 --> 02:09:29,330
It's just rendering index.html.
它只是渲染index.html。

2684
02:09:29,330 --> 02:09:30,770
And then there's a search route.
然后还有一个搜索路由。

2685
02:09:30,770 --> 02:09:33,770
So this is kind of an amalgam of google.com and imdb.com.
所以这有点像google.com和imdb.com的混合体。

2686
02:09:33,770 --> 02:09:35,960
I want to implement this relatively simple search
我想实现这个相对简单的搜索

2687
02:09:35,960 --> 02:09:38,790
website for IMDb, just a search box.
IMDb 网站，只是一个搜索框。

2688
02:09:38,790 --> 02:09:41,960
Well, we can kind of preemptively infer how this is going to work.
好吧，我们可以先发制人地推断一下这是如何工作的。

2689
02:09:41,960 --> 02:09:46,400
A shows variable is being set to the return value of db.execute,
一个shows变量被设置为db.execute的返回值，

2690
02:09:46,400 --> 02:09:50,000
where I'm executing SELECT * FROM shows WHERE the title of the show
我在执行SELECT * FROM shows WHERE the title of the show

2691
02:09:50,000 --> 02:09:52,370
equals this question mark.
等于这个问号。

2692
02:09:52,370 --> 02:09:53,540
And what am I plugging in?
我该插入什么呢？

2693
02:09:53,540 --> 02:09:56,570
Well, just like Google, I'm plugging in the value of the q attribute
好吧，就像谷歌一样，我插入了q属性的值

2694
02:09:56,570 --> 02:09:58,250
from the URL apparently.
显然来自URL。

2695
02:09:58,250 --> 02:10:00,920
Then I'm rendering a template called search.html.
然后我渲染一个名为search.html的模板。

2696
02:10:00,920 --> 02:10:05,130
And I'm passing in those shows as a list of Python dictionaries.
我将这些shows作为Python字典列表传递进去。

2697
02:10:05,130 --> 02:10:06,290
So that's it.
就是这样。

2698
02:10:06,290 --> 02:10:09,680
It's only-- that's the entirety of the back-end logic here.
这只是——这里的所有后端逻辑。

2699
02:10:09,680 --> 02:10:10,730
It's a search engine.
这是一个搜索引擎。

2700
02:10:10,730 --> 02:10:12,600
So what might I want to do next?
那么接下来我想做什么呢？

2701
02:10:12,600 --> 02:10:14,037
Well, my mind goes to index.html.
好吧，我的脑海里浮现了index.html。

2702
02:10:14,037 --> 02:10:15,870
Let's just see what the template looks like.
我们看看这个模板长什么样。

2703
02:10:15,870 --> 02:10:19,220
So I can wrap my mind around index.html.
这样我就可以理解index.html。

2704
02:10:19,220 --> 02:10:20,700
OK, it's pretty darn simple.
好吧，它非常简单。

2705
02:10:20,700 --> 02:10:23,710
It's just a form that has an action of /search,
它只是一个有一个/search操作的表单，

2706
02:10:23,710 --> 02:10:25,550
which aligns with the route we just saw.
这与我们刚才看到的路由相一致。

2707
02:10:25,550 --> 02:10:26,450
Method is get.
方法是get。

2708
02:10:26,450 --> 02:10:30,620
It's got an autocompleting input called q, as expected,
它有一个名为q的自动完成输入，正如预期的那样，

2709
02:10:30,620 --> 02:10:32,090
and a button called Search.
还有一个名为Search的按钮。

2710
02:10:32,090 --> 02:10:35,480
So not really that stimulating there versus past examples we've done.
所以，与我们过去做的例子相比，这里并不那么令人兴奋。

2711
02:10:35,480 --> 02:10:39,180
Let me go into search.html, which is the other template in here.
让我进入search.html，这是这里另一个模板。

2712
02:10:39,180 --> 02:10:43,760
So let me open my terminal and do code of templates search.html.
所以让我打开我的终端，并执行templates search.html的代码。

2713
02:10:43,760 --> 02:10:44,900
Close the terminal.
关闭终端。

2714
02:10:44,900 --> 02:10:47,030
OK, this is kind of like the bookstore too.
好吧，这有点像书店。

2715
02:10:47,030 --> 02:10:49,910
It's just iterating over the shows, outputting list item, list item,
它只是遍历shows，输出列表项，列表项，

2716
02:10:49,910 --> 02:10:50,480
list item.
列表项。

2717
02:10:50,480 --> 02:10:52,850
But I'm using an unordered list instead of ordered.
但我使用的是无序列表而不是有序列表。

2718
02:10:52,850 --> 02:10:56,420
So there's not that much to this application to enabling search.
所以，这个应用程序启用搜索并不需要太多内容。

2719
02:10:56,420 --> 02:11:00,530
But recall that, two weeks ago, when we introduced HTML and CSS and JavaScript,
但请回想一下，两周前，当我们引入HTML、CSS和JavaScript时，

2720
02:11:00,530 --> 02:11:03,710
we completely punted to the actual google.com.
我们完全转向了真正的google.com。

2721
02:11:03,710 --> 02:11:07,460
Today we are, if you will, google.com or imdb.com.
今天我们是，如果你愿意，google.com或imdb.com。

2722
02:11:07,460 --> 02:11:12,080
So let's go into the terminal window, do flask run.
所以，让我们进入终端窗口，执行flask run。

2723
02:11:12,080 --> 02:11:14,220
I'll go back into my browser and reload.
我将返回到我的浏览器并重新加载。

2724
02:11:14,220 --> 02:11:15,650
So we no longer see the store.
所以我们不再看到商店了。

2725
02:11:15,650 --> 02:11:17,240
We now see IMDb.
我们现在看到IMDb。

2726
02:11:17,240 --> 02:11:19,160
And it's a pretty simple search box.
它是一个非常简单的搜索框。

2727
02:11:19,160 --> 02:11:23,840
Let me search for the office as in the past, click Search.
让我像以前一样搜索office，点击搜索。

2728
02:11:23,840 --> 02:11:25,340
And notice two things.
请注意两件事。

2729
02:11:25,340 --> 02:11:30,290
At the top of the URL is ?q=the+office.
URL 首部是 ?q=the+office。

2730
02:11:30,290 --> 02:11:34,370
The plus is a way of encoding spaces in URLs so that it's just one long string,
加号是用来对 URL 中的空格进行编码的一种方法，这样它就只是一串长字符串，

2731
02:11:34,370 --> 02:11:35,383
but that's conventional.
但这是一种惯例。

2732
02:11:35,383 --> 02:11:36,800
And then there's a lot of offices.
然后就出现很多个办公室。

2733
02:11:36,800 --> 02:11:37,730
But why is this?
为什么会出现这种情况？

2734
02:11:37,730 --> 02:11:39,530
Well, there's the American one, the UK one.
嗯，有一个美国版，还有一个英国版。

2735
02:11:39,530 --> 02:11:42,240
There's some prior ones that weren't nearly as popular as either.
还有一些早期的版本，它们远没有这两个版本受欢迎。

2736
02:11:42,240 --> 02:11:44,810
So there's a bunch of offices in there.
所以里面有很多个办公室。

2737
02:11:44,810 --> 02:11:47,390
But we could probably--
但我们可能可以——

2738
02:11:47,390 --> 02:11:49,040
we can tie our ideas together here.
将我们的想法联系在一起。

2739
02:11:49,040 --> 02:11:50,450
Let me open another terminal.
让我打开另一个终端。

2740
02:11:50,450 --> 02:11:51,470
Make it bigger.
放大它。

2741
02:11:51,470 --> 02:11:54,350
Go into src9 shows0.
进入 src9 shows0。

2742
02:11:54,350 --> 02:11:58,580
sqlite3 of shows.db .schema.
shows.db 的 sqlite3 .schema。

2743
02:11:58,580 --> 02:12:02,150
Oh, yeah, there's a lot of data in this database.
哦，是的，这个数据库里有大量的数据。

2744
02:12:02,150 --> 02:12:04,820
Let's do .schema show specifically.
让我们 specifically 做 .schema show。

2745
02:12:04,820 --> 02:12:06,830
OK, so we have the year of every show.
好的，所以我们有每个节目的年份。

2746
02:12:06,830 --> 02:12:10,520
So this just means I can play around now with the intersection of SQL and Python
所以这意味着我现在可以玩玩 SQL 和 Python 的交集了

2747
02:12:10,520 --> 02:12:11,100
as follows.
如下所示。

2748
02:12:11,100 --> 02:12:16,010
Let me go back to how about search.html.
让我回到 search.html。

2749
02:12:16,010 --> 02:12:18,980
And, instead of just showing the title, why don't I
还有，与其只显示标题，我为什么不

2750
02:12:18,980 --> 02:12:24,010
do something like curly curly brace show, quote, unquote, year.
做一些类似于花括号、show、引号、引号、年份这样的操作。

2751
02:12:24,010 --> 02:12:26,080
Curly curly brace because why?
为什么用花括号？

2752
02:12:26,080 --> 02:12:30,140
Well, every element in this list is a dictionary.
嗯，这个列表中的每个元素都是一个字典。

2753
02:12:30,140 --> 02:12:32,540
So I have access to all of those SQL columns.
所以我可以访问所有这些 SQL 列。

2754
02:12:32,540 --> 02:12:33,590
So let me reload.
所以让我重新加载。

2755
02:12:33,590 --> 02:12:35,950
And now you see, oh, that's why there's so many offices.
现在你看到了，哦，这就是为什么有这么多办公室。

2756
02:12:35,950 --> 02:12:37,460
They're each from different years.
它们分别来自不同的年份。

2757
02:12:37,460 --> 02:12:41,050
So every piece of data you have access in SQL you have access to in Python you
所以你在 SQL 中可以访问的每条数据，你也可以在 Python 中访问，你现在可以通过

2758
02:12:41,050 --> 02:12:43,150
now have access to in HTML by just knowing
了解如何将这些想法拼凑起来

2759
02:12:43,150 --> 02:12:45,100
how to stitch these ideas together.
来访问 HTML 中的数据。

2760
02:12:45,100 --> 02:12:47,890
All right, so what's not so good about this?
好的，那么这样做的不好之处是什么？

2761
02:12:47,890 --> 02:12:54,400
Well, if I go back to the search box and I search for just office, Enter,
嗯，如果我回到搜索框，只搜索 office，然后回车，

2762
02:12:54,400 --> 02:12:59,980
there's apparently no show called literally office, at least lowercase o.
显然没有一个节目叫 office，至少小写 o 不是。

2763
02:12:59,980 --> 02:13:03,340
Let me try a little more specific, Office, as someone might type.
让我尝试更具体一点，Office，就像有人可能会输入的那样。

2764
02:13:03,340 --> 02:13:08,080
OK, so there's one version of Office, but not The Office from 2013.
好的，所以有一个版本的 Office，但不是 2013 年的 The Office。

2765
02:13:08,080 --> 02:13:10,870
But what if I want to have more of a wild card search?
但是如果我想进行更多通配符搜索呢？

2766
02:13:10,870 --> 02:13:12,920
Well, we can borrow these ideas too.
好吧，我们也可以借用这些想法。

2767
02:13:12,920 --> 02:13:17,020
So let me go back into VS Code here in my app.py.
所以让我回到 VS Code 中的 app.py。

2768
02:13:17,020 --> 02:13:21,640
And I think here, instead of using equal, what was the keyword?
我认为这里，而不是使用等号，关键词是什么？

2769
02:13:21,640 --> 02:13:24,650
Yeah, so we can do like, for instance.
是的，所以我们可以像这样，例如。

2770
02:13:24,650 --> 02:13:26,870
But this we have to be a little careful of.
但我们必须小心一点。

2771
02:13:26,870 --> 02:13:29,690
We don't want to resort to a Python f-string
我们不想诉诸于 Python f-string

2772
02:13:29,690 --> 02:13:33,630
where we plug in values with percent signs and the like.
在那里我们用百分号等符号插入值。

2773
02:13:33,630 --> 02:13:36,530
So this is a little bit tricky, but it's worth
所以这有点棘手，但值得

2774
02:13:36,530 --> 02:13:39,800
knowing that if you want to do wildcard searches safely
知道如果你想安全地进行通配符搜索

2775
02:13:39,800 --> 02:13:41,940
we still should distrust the user's input.
我们仍然应该不信任用户的输入。

2776
02:13:41,940 --> 02:13:43,940
So what I'm going to do is this even though it's
所以我要这样做，尽管它

2777
02:13:43,940 --> 02:13:45,410
going to look a little cryptic.
看起来有点神秘。

2778
02:13:45,410 --> 02:13:47,240
I'm going to just do a question mark.
我将只做一个问号。

2779
02:13:47,240 --> 02:13:51,435
But, instead of passing in request.args.get of q,
但是，与其直接传入 request.args.get 的 q，

2780
02:13:51,435 --> 02:13:54,560
first, let's tuck this in a variable so the code is a little more readable.
我们先把它塞到一个变量里，这样代码的可读性会更高。

2781
02:13:54,560 --> 02:13:58,130
q equals that even though that's not changing anything fundamentally.
q 等于它，虽然这在本质上并没有改变任何东西。

2782
02:13:58,130 --> 02:13:59,450
Let's do this.
我们试试看。

2783
02:13:59,450 --> 02:14:03,500
Let's put my percent sign here, concatenate q with that,
我们在这里放一个百分号，将 q 与它连接起来，

2784
02:14:03,500 --> 02:14:08,150
and then put another percent sign here so that this whole string,
然后在这里再放一个百分号，这样整个字符串，

2785
02:14:08,150 --> 02:14:11,180
after joining and joining three things together, gets
在将三个东西连接在一起之后，就会

2786
02:14:11,180 --> 02:14:13,880
plugged into the question mark and therefore escaped.
被插入问号中，从而被转义。

2787
02:14:13,880 --> 02:14:17,090
You should not use an f-string for this thing.
你不应该为此使用 f-字符串。

2788
02:14:17,090 --> 02:14:20,535
You should always use the question mark placeholder as we keep preaching.
你应该始终使用问号占位符，就像我们一直倡导的那样。

2789
02:14:20,535 --> 02:14:23,660
All right, so now that I've done this, I think my search functionality just
好的，现在我已经做完这些了，我认为我的搜索功能就

2790
02:14:23,660 --> 02:14:24,300
got way better.
变得好多了。

2791
02:14:24,300 --> 02:14:24,800
Why?
为什么？

2792
02:14:24,800 --> 02:14:26,600
So if I go back to the form--
所以，如果我回到表单——

2793
02:14:26,600 --> 02:14:28,550
and I'll reload to clear everything.
然后我重新加载以清除所有内容。

2794
02:14:28,550 --> 02:14:29,660
I'll zoom in a little bit.
我会稍微放大一点。

2795
02:14:29,660 --> 02:14:33,560
Let's type in just office in lowercase with no the.
让我们只输入小写的 office，没有 the。

2796
02:14:33,560 --> 02:14:39,560
And I think I should get now every TV show that has office, O-F-F-I-C-E,
我认为我现在应该得到所有包含 office，O-F-F-I-C-E 的电视剧，

2797
02:14:39,560 --> 02:14:41,900
in it somewhere even if it's officer.
即使是 officer，它也应该包含在其中。

2798
02:14:41,900 --> 02:14:43,640
So that might not be quite what we want.
所以，这可能不是我们真正想要的。

2799
02:14:43,640 --> 02:14:46,340
But there's indeed a much broader match here.
但确实这里匹配范围更广。

2800
02:14:46,340 --> 02:14:48,260
So more like the imdb.com.
所以更像是 imdb.com。

2801
02:14:48,260 --> 02:14:49,790
But now it's a design decision.
但这现在是一个设计决策。

2802
02:14:49,790 --> 02:14:52,250
Do you want your-- do you want to be really nitpicky
你想要你的——你想要变得非常吹毛求疵吗？

2803
02:14:52,250 --> 02:14:54,950
and require users to type in The Office?
并要求用户输入 The Office？

2804
02:14:54,950 --> 02:14:56,390
Do you want it to be capitalized?
你想要它被大写吗？

2805
02:14:56,390 --> 02:14:59,870
This now becomes more of a user interface or design decision, not so
这现在更多地变成了一个用户界面或设计决策，而不是

2806
02:14:59,870 --> 02:15:01,250
much code.
太多代码。

2807
02:15:01,250 --> 02:15:03,530
All right, well, let's make one tweak here
好的，我们在这里做一个小小的调整，

2808
02:15:03,530 --> 02:15:06,860
that's representative all the more of today's modern apps.
它更能代表当今的现代应用程序。

2809
02:15:06,860 --> 02:15:11,540
It turns out that this approach of generating
事实证明，这种方法，即在用户提交输入或访问新 URL 时

2810
02:15:11,540 --> 02:15:15,950
new HTML every time a user submits input or visits a new URL
每次生成新的 HTML，

2811
02:15:15,950 --> 02:15:22,280
is increasingly dated whereby every URL is unique, as opposed to apps
越来越过时了，因为每个 URL 都是唯一的，而不是应用程序

2812
02:15:22,280 --> 02:15:23,850
being much more interactive.
更加交互。

2813
02:15:23,850 --> 02:15:27,770
So it turns out, there's this technique in general,
所以事实证明，一般来说，

2814
02:15:27,770 --> 02:15:31,010
in the world of the web, where you use something
在网络世界中，你使用某些东西，

2815
02:15:31,010 --> 02:15:34,880
called AJAX, which used to stand for Asynchronous JavaScript And XML.
叫做 AJAX，它曾经代表异步 JavaScript 和 XML。

2816
02:15:34,880 --> 02:15:39,890
Nowadays, it just refers to using JavaScript
现在，它只是指使用 JavaScript

2817
02:15:39,890 --> 02:15:44,240
to get more data from the server so the user's URL doesn't even change,
从服务器获取更多数据，这样用户的 URL 甚至不会改变，

2818
02:15:44,240 --> 02:15:47,540
and the whole browser screen doesn't flash as though the whole page is
整个浏览器屏幕不会像整个页面一样闪烁。

2819
02:15:47,540 --> 02:15:48,560
being reloaded.
正在重新加载。

2820
02:15:48,560 --> 02:15:50,720
So this is going to look a little more cryptic.
所以这看起来会更神秘一点。

2821
02:15:50,720 --> 02:15:55,820
But let me go ahead and show you an alternative
但我还是继续向你展示一个替代方案，

2822
02:15:55,820 --> 02:15:57,980
to this relatively easy approach.
替代这种相对简单的方案。

2823
02:15:57,980 --> 02:16:00,175
A lot of today might be feeling like a lot.
今天很多东西可能让你感觉很多。

2824
02:16:00,175 --> 02:16:02,300
It's about to feel more like a lot but not in a way
它即将让你感觉更多，但不是以一种

2825
02:16:02,300 --> 02:16:05,690
that you need to replicate, just to give you a taste of what more modern web
你需要复制的方式，只是让你体验一下更加现代的网络

2826
02:16:05,690 --> 02:16:06,620
apps are doing.
应用程序在做什么。

2827
02:16:06,620 --> 02:16:08,510
I'm going to close these two tabs.
我将关闭这两个选项卡。

2828
02:16:08,510 --> 02:16:10,542
I'm going to go ahead and exit out of SQLite.
我将继续退出 SQLite。

2829
02:16:10,542 --> 02:16:12,500
I'm going to kill my previous version of Flask.
我将关闭我之前版本的 Flask。

2830
02:16:12,500 --> 02:16:15,500
And I'm going to go into shows version 2 now.
现在我将进入 shows 版本 2。

2831
02:16:15,500 --> 02:16:19,220
And, in shows2, I'm going to do flask run.
在 shows2 中，我将运行 flask。

2832
02:16:19,220 --> 02:16:20,563
So the app is running.
所以应用程序正在运行。

2833
02:16:20,563 --> 02:16:22,730
I'm going to go back to my URL here and just reload.
我将回到我的 URL 并重新加载。

2834
02:16:22,730 --> 02:16:25,550
And notice I've gotten rid of the Search button altogether,
请注意，我已经完全去掉了搜索按钮，

2835
02:16:25,550 --> 02:16:27,000
minor aesthetic detail.
一个小小的美学细节。

2836
02:16:27,000 --> 02:16:33,469
But what I like about this now is that if I search for O-F-F-I-C-E,
但现在我喜欢的是，如果我搜索 O-F-F-I-C-E，

2837
02:16:33,469 --> 02:16:35,719
you're seeing the beginnings of autocomplete,
你会看到自动完成的开始，

2838
02:16:35,719 --> 02:16:37,250
which is kind of everywhere.
这几乎无处不在。

2839
02:16:37,250 --> 02:16:41,132
But you can't implement autocomplete if you have to reload the whole page,
但是，如果你必须重新加载整个页面，你无法实现自动完成，

2840
02:16:41,132 --> 02:16:42,049
reload the whole page.
重新加载整个页面。

2841
02:16:42,049 --> 02:16:42,230
Why?
为什么？

2842
02:16:42,230 --> 02:16:43,938
If nothing else, the user's going to be--
如果不是别的，用户将要——

2843
02:16:43,938 --> 02:16:47,010
see a big flash of white as the whole page redraws itself,
看到整个页面重新绘制时出现的白光闪现，

2844
02:16:47,010 --> 02:16:48,500
which is not what we're used to.
这不是我们习惯的。

2845
02:16:48,500 --> 02:16:53,420
If I start over, O-F-F, notice the URL is not changing, nor is the whole page
如果我重新开始，O-F-F，请注意 URL 并没有改变，整个页面也没有

2846
02:16:53,420 --> 02:16:54,139
flickering.
闪烁。

2847
02:16:54,139 --> 02:16:56,370
Just the URL is getting shorter, shorter, shorter.
只是 URL 越来越短，越来越短，越来越短。

2848
02:16:56,370 --> 02:16:58,700
And if I really go shorter, there it is.
如果我再缩短一点，它就在那里。

2849
02:16:58,700 --> 02:17:02,370
Officer, now I have only this many bullets on the screen.
警官，现在我屏幕上只有这么多子弹。

2850
02:17:02,370 --> 02:17:04,040
There's no more below the break.
断行下方没有更多。

2851
02:17:04,040 --> 02:17:06,030
So how can I do this?
那么我该怎么做呢？

2852
02:17:06,030 --> 02:17:08,090
Well, let's try to infer a little bit here
好吧，让我们在这里尝试推断一下

2853
02:17:08,090 --> 02:17:10,969
and be demonstrative of how you can infer
并演示如何推断

2854
02:17:10,969 --> 02:17:13,080
how a third-party websites are working.
第三方网站是如何工作的。

2855
02:17:13,080 --> 02:17:16,398
If you want to-- if you want to mimic their behavior
如果你想——如果你想模仿他们的行为

2856
02:17:16,398 --> 02:17:18,690
or just learn better how they work-- so let me do this.
或者只是更好地了解它们是如何工作的——所以让我这样做。

2857
02:17:18,690 --> 02:17:20,780
Let me open up developer tools.
让我打开开发者工具。

2858
02:17:20,780 --> 02:17:22,639
Let me open the Network tab.
让我打开网络选项卡。

2859
02:17:22,639 --> 02:17:26,600
And let me search for O. And watch what happens in my Network tab
让我搜索 O。观察我的网络选项卡中发生了什么

2860
02:17:26,600 --> 02:17:29,389
even though the URL of the page is not changing.
即使页面 URL 没有改变。

2861
02:17:29,389 --> 02:17:36,620
O. Apparently, an HTTP request was sent from my browser to this URL,
O。显然，我的浏览器向这个 URL 发送了一个 HTTP 请求，

2862
02:17:36,620 --> 02:17:41,570
which is essentially representing /search?q=O.
它本质上代表 /search?q=O。

2863
02:17:41,570 --> 02:17:44,430
Notice that the response was 200.
请注意，响应为 200。

2864
02:17:44,430 --> 02:17:46,100
And what is in that response?
那么响应中是什么呢？

2865
02:17:46,100 --> 02:17:47,600
Well, let me click on that row.
好吧，让我点击那一行。

2866
02:17:47,600 --> 02:17:50,360
Let me click on response.
让我点击响应。

2867
02:17:50,360 --> 02:17:53,209
And, very interestingly, notice what came back.
非常有趣的是，请注意返回的内容。

2868
02:17:53,209 --> 02:17:54,559
It's not a whole web page.
它不是一个完整的网页。

2869
02:17:54,559 --> 02:17:58,610
It's just a bunch of li elements, which you can kind of infer
它只是一堆 li 元素，你可以推断出来

2870
02:17:58,610 --> 02:18:02,490
are probably the ones that are getting snuck into the page dynamically.
它们可能是动态添加到页面中的元素。

2871
02:18:02,490 --> 02:18:04,620
So if I go back to the top, there's no ul here.
所以如果我回到顶部，这里没有 ul。

2872
02:18:04,620 --> 02:18:05,905
It's just a bunch of lis.
它只是一堆 lis。

2873
02:18:05,905 --> 02:18:07,280
And watch what happens this time.
看看这次发生了什么。

2874
02:18:07,280 --> 02:18:10,010
Let me close that panel.
让我关闭那个面板。

2875
02:18:10,010 --> 02:18:12,559
Let me search for O-F without even hitting Enter.
让我搜索 O-F，甚至不用按回车键。

2876
02:18:12,559 --> 02:18:15,090
Here we go, O-F. Now there's a second request.
好了，O-F。现在有第二个请求了。

2877
02:18:15,090 --> 02:18:15,590
And
并且

2878
02:18:15,590 --> 02:18:17,990
If I zoom in, there it is, q=OF.
如果我放大，它就在那里，q=OF。

2879
02:18:17,990 --> 02:18:20,990
If I click on that and zoom out, you'll see a whole bunch of lis.
如果我点击它并缩小，你会看到一大堆li。

2880
02:18:20,990 --> 02:18:24,990
But let me claim there's fewer of them now because fewer strings match O-F.
但我想说，现在它们的数量减少了，因为与O-F匹配的字符串减少了。

2881
02:18:24,990 --> 02:18:29,549
And if I finally type in office, let alone the office,
而且如果我最终输入office，更不用说office，

2882
02:18:29,549 --> 02:18:32,129
notice now, at the very bottom of this, every time you're
请注意，现在，在最底部，每次你

2883
02:18:32,129 --> 02:18:35,520
doing an autocomplete, it's sending an HTTP request, HTTP request,
进行自动完成功能时，它会发送一个HTTP请求，HTTP请求，

2884
02:18:35,520 --> 02:18:36,299
HTTP request.
HTTP请求。

2885
02:18:36,299 --> 02:18:38,160
Back in my day, you'd have to click Submit.
在我那个年代，你必须点击提交。

2886
02:18:38,160 --> 02:18:41,250
The whole page would reload, and you'd see the list again and again.
整个页面都会重新加载，你会一遍又一遍地看到列表。

2887
02:18:41,250 --> 02:18:42,363
This is more modern.
这更现代。

2888
02:18:42,363 --> 02:18:44,280
And this is an example indeed of what's called
这确实是一个被称为

2889
02:18:44,280 --> 02:18:47,850
AJAX, Asynchronous JavaScript that's getting you more data
AJAX（异步JavaScript），它会为你获取更多数据

2890
02:18:47,850 --> 02:18:50,670
and slipping it into your existing web page.
并将它插入你现有的网页中。

2891
02:18:50,670 --> 02:18:51,930
So how does this work?
那么，这是如何工作的呢？

2892
02:18:51,930 --> 02:18:54,010
Let me go to VS Code here.
让我到这里的VS Code。

2893
02:18:54,010 --> 02:18:56,129
Let me open up a new terminal.
让我打开一个新的终端。

2894
02:18:56,129 --> 02:19:01,379
Let me go into src9 shows2.
让我进入src9 shows2。

2895
02:19:01,379 --> 02:19:05,129
And let me open up, for instance, the index
让我打开，比如，index

2896
02:19:05,129 --> 02:19:07,379
template, which is the entry point.
模板，它是入口点。

2897
02:19:07,379 --> 02:19:09,270
Everything at the top is sort of boring.
顶部的一切都相当无聊。

2898
02:19:09,270 --> 02:19:10,750
Here's the head of the page.
这是页面的头部。

2899
02:19:10,750 --> 02:19:11,458
Here's the input.
这是输入。

2900
02:19:11,458 --> 02:19:14,000
I didn't even bother with the whole form because I'm not even
我甚至没有费心处理整个表单，因为我甚至没有

2901
02:19:14,000 --> 02:19:15,000
submitting a whole form.
提交整个表单。

2902
02:19:15,000 --> 02:19:17,740
So I don't need an action or a method or anything like that.
所以我不需要动作或方法或任何类似的东西。

2903
02:19:17,740 --> 02:19:20,250
I'm just using it as a dumb input box only.
我只是把它用作一个简单的输入框而已。

2904
02:19:20,250 --> 02:19:24,990
But notice that it is indeed an input of type search.
但是请注意，它确实是一个类型为搜索的输入。

2905
02:19:24,990 --> 02:19:28,660
Here, now, is an empty ul, initially.
这里，现在，最初是一个空的ul。

2906
02:19:28,660 --> 02:19:32,639
So this is why, when you visit the page, you see a text box but no bullets
所以这就是为什么当你访问页面时，你会看到一个文本框，但没有项目符号

2907
02:19:32,639 --> 02:19:33,968
because the list is empty.
因为列表是空的。

2908
02:19:33,968 --> 02:19:35,010
And, in fact, watch this.
事实上，看看这个。

2909
02:19:35,010 --> 02:19:40,500
If I click on elements in the Developer Tools, click on body, expand the body,
如果我在开发者工具中点击元素，点击body，展开body，

2910
02:19:40,500 --> 02:19:41,549
there is the ul.
那里就是ul。

2911
02:19:41,549 --> 02:19:44,010
If I zoom in, there's nothing inside of it yet.
如果我放大，里面还没有任何东西。

2912
02:19:44,010 --> 02:19:45,330
That's why we see no bullets.
这就是为什么我们没有看到项目符号。

2913
02:19:45,330 --> 02:19:48,597
But if I go back to the template, here's some JavaScript code,
但如果我回到模板，这里有一些JavaScript代码，

2914
02:19:48,597 --> 02:19:50,430
which we haven't spent much time on, but you
我们没有花太多时间在上面，但你可以

2915
02:19:50,430 --> 02:19:53,370
can start to wrap your mind around this line by line as follows.
逐行开始理解这句话，如下所示。

2916
02:19:53,370 --> 02:19:55,410
Give me a variable called input.
给我一个名为input的变量。

2917
02:19:55,410 --> 02:20:00,990
Set it equal to the element from the DOM, the tree in the computer's
将其设置为DOM中的元素，也就是计算机内存中的树，

2918
02:20:00,990 --> 02:20:05,250
memory for the input element, so that rectangle from our pictures
用于输入元素的内存，也就是我们上周图片中的那个矩形

2919
02:20:05,250 --> 02:20:06,240
from last week.
来自上周。

2920
02:20:06,240 --> 02:20:10,590
Then listen to that input for the input event.
然后监听该输入的输入事件。

2921
02:20:10,590 --> 02:20:15,420
I showed briefly last week a list of like dragging and clicking and mouse up
上周我简单地展示了一个拖动、点击、鼠标弹起

2922
02:20:15,420 --> 02:20:17,430
and mouse down and key up and key down.
以及鼠标按下、键盘弹起和键盘按下。

2923
02:20:17,430 --> 02:20:20,400
And input just means generally inputting into a text box.
而输入只是意味着一般地输入到一个文本框中。

2924
02:20:20,400 --> 02:20:21,720
Here, I'm calling a function.
在这里，我正在调用一个函数。

2925
02:20:21,720 --> 02:20:24,693
It's an asynchronous function in the sense that there--
这是一个异步函数，因为

2926
02:20:24,693 --> 02:20:26,360
it's going to get back to me eventually.
它最终会回复我。

2927
02:20:26,360 --> 02:20:28,700
If the server is slow, it might take a moment or two.
如果服务器速度很慢，可能需要一两分钟。

2928
02:20:28,700 --> 02:20:32,270
But, inside of this function, give me a variable called response.
但是，在这个函数里面，给我一个叫做 response 的变量。

2929
02:20:32,270 --> 02:20:41,750
Go ahead and fetch the URL whose path or route is /search?q= and then
然后，获取路径或者路由是/search?q=的URL

2930
02:20:41,750 --> 02:20:46,100
concatenate onto that whatever the user's input that is the value of that
将用户输入的值连接到上面。

2931
02:20:46,100 --> 02:20:46,940
input.
输入框。

2932
02:20:46,940 --> 02:20:52,520
Then create a variable called shows, go into that response from the server,
然后创建一个叫做shows的变量，进入服务器返回的 response

2933
02:20:52,520 --> 02:20:54,363
and get its text value.
并获取它的文本值。

2934
02:20:54,363 --> 02:20:56,280
So we're not going to spend much time on this.
我们不会花太多时间在上面。

2935
02:20:56,280 --> 02:20:58,970
But fetch is a function that comes with browsers today
但是，fetch 是现在浏览器自带的函数

2936
02:20:58,970 --> 02:21:02,360
in JavaScript that lets you make an HTTP request.
在 JavaScript 中，它允许你发送 HTTP 请求。

2937
02:21:02,360 --> 02:21:04,130
Fetch more content from the server.
从服务器获取更多内容。

2938
02:21:04,130 --> 02:21:08,420
And you essentially pass it in the URL that you want to fetch or get.
你需要将你想要获取的URL传递给它。

2939
02:21:08,420 --> 02:21:11,720
This function here response.text just grabs the text
这个函数 response.text 只是获取文本

2940
02:21:11,720 --> 02:21:16,460
from that response, which means if I go to the Network tab and I type in O
从返回的 response 中，这意味着如果我去网络标签并输入 O

2941
02:21:16,460 --> 02:21:21,260
as before and I click this, response.text is all of this stuff
就像之前一样，点击它，response.text 就是所有这些东西

2942
02:21:21,260 --> 02:21:22,950
that we manually looked at earlier.
我们之前手动查看过的东西。

2943
02:21:22,950 --> 02:21:26,033
So you're just getting all of the text that came back from the server that
所以你只是获取从服务器返回的所有文本，

2944
02:21:26,033 --> 02:21:27,600
happened to be lis.
碰巧是 lis。

2945
02:21:27,600 --> 02:21:33,150
Lastly, go into the document, the DOM, select the ul element,
最后，进入文档，DOM，选择 ul 元素，

2946
02:21:33,150 --> 02:21:40,980
go into its inner HTML, and change the inner HTML to be that text, aka shows.
进入它的内部 HTML，并将内部 HTML 更改为文本，也就是 shows。

2947
02:21:40,980 --> 02:21:43,950
And so what's happening here-- and watch this now when I-- let's
所以这里发生了什么-- 现在看着我-- 让我们

2948
02:21:43,950 --> 02:21:45,430
reload the page.
重新加载页面。

2949
02:21:45,430 --> 02:21:47,970
Let me show you the Elements tab.
让我给你看元素标签。

2950
02:21:47,970 --> 02:21:51,092
Let me highlight and zoom in on the ul element.
让我突出显示并放大 ul 元素。

2951
02:21:51,092 --> 02:21:53,550
In the bottom of the screen, nothing's there yet but watch.
在屏幕底部，还没有任何东西，但看着。

2952
02:21:53,550 --> 02:21:57,360
As soon as I type O, and I get back all of those lis,
当我输入 O 时，我将返回所有这些 lis，

2953
02:21:57,360 --> 02:22:02,790
and they get crammed into the inner HTML of the ul, watch the ul as I type O,
并将它们塞入 ul 的内部 HTML 中，当我在输入 O 时，注意 ul，

2954
02:22:02,790 --> 02:22:04,560
there's now more stuff there.
现在那里有更多的东西。

2955
02:22:04,560 --> 02:22:08,340
And, indeed, if I expand it, there are all of the lis.
事实上，如果我展开它，那里有所有 lis。

2956
02:22:08,340 --> 02:22:11,440
That is the inner HTML that just got automatically populated.
这就是刚刚自动填充的内部 HTML。

2957
02:22:11,440 --> 02:22:16,810
And if I type in more, officer, notice that if I scroll down,
如果我输入更多，警官，注意，如果我向下滚动，

2958
02:22:16,810 --> 02:22:18,490
there's only so many of them.
只有这么多。

2959
02:22:18,490 --> 02:22:22,020
And if I just type in nonsense, notice it's back to 0
如果我只是输入胡说八道，注意它又回到了 0

2960
02:22:22,020 --> 02:22:25,390
because there's no text coming back from the server.
因为没有文本从服务器返回。

2961
02:22:25,390 --> 02:22:28,320
This then is an example of the beginning of an API.
然后这是一个 API 起始的例子。

2962
02:22:28,320 --> 02:22:31,510
And I've used this term over time, but an API is an Application Programming
我已经用了很长时间这个词了，但是 API 是应用程序编程

2963
02:22:31,510 --> 02:22:32,010
Interface.
接口。

2964
02:22:32,010 --> 02:22:35,280
And it's a standardized way, generally, of getting data
它通常是一种标准化的方法，用于从

2965
02:22:35,280 --> 02:22:39,070
from someone else's server or service into your application.
其他人服务器或服务获取数据到你的应用程序中。

2966
02:22:39,070 --> 02:22:42,300
Now, in this contrived scenario, I am both the web developer,
现在，在这个人为编造的场景中，我就是网页开发者，

2967
02:22:42,300 --> 02:22:44,430
and I'm the author of the API.
我也是 API 的作者。

2968
02:22:44,430 --> 02:22:48,540
But they're implementing-- they're being implemented in the same application.
但是它们正在实现-- 它们正在同一个应用程序中实现。

2969
02:22:48,540 --> 02:22:52,530
But you could imagine, actually, querying amazon.com for actual books
但你可以想象，实际上，查询 amazon.com 以获取实际的书籍

2970
02:22:52,530 --> 02:22:55,740
and actual prices and actual photographs thereof
以及实际价格和实际照片

2971
02:22:55,740 --> 02:22:57,850
from their servers instead of your own.
从它们的服务器，而不是你自己的服务器。

2972
02:22:57,850 --> 02:23:00,420
And so they might very well send to your server
所以他们很可能会发送到你的服务器

2973
02:23:00,420 --> 02:23:05,010
those kinds of responses by just sending you a whole bunch of text that, again,
这些响应类型只是向你发送一堆文本，再次强调，

2974
02:23:05,010 --> 02:23:07,090
might just look like all of these lis.
可能看起来像是所有这些列表标签。

2975
02:23:07,090 --> 02:23:10,920
But the lis is a sloppy way of sending information.
但列表标签是一种发送信息很糟糕的方式。

2976
02:23:10,920 --> 02:23:15,120
Nowadays, it's not common to use HTML, nor something called XML
如今，使用 HTML 或者 XML 发送数据已不再常见，

2977
02:23:15,120 --> 02:23:16,680
to send back your data.
用来发送回你的数据。

2978
02:23:16,680 --> 02:23:19,920
Rather, it's more common to get back something
相反，更常见的是收到一些

2979
02:23:19,920 --> 02:23:23,230
called JSON, JavaScript Object Notation.
被称为 JSON，即 JavaScript 对象表示法。

2980
02:23:23,230 --> 02:23:26,440
And odds are, for your final project, if you do anything with an API,
而且很有可能，在你最后的项目中，如果你使用了 API，

2981
02:23:26,440 --> 02:23:28,270
you'll encounter this in the real world.
你将在现实世界中遇到这种情况。

2982
02:23:28,270 --> 02:23:34,780
And JSON looks very, very similar to what a dictionary and a list
JSON 看起来非常非常像 Python 中的字典和列表

2983
02:23:34,780 --> 02:23:36,070
looks like in Python.
的样子。

2984
02:23:36,070 --> 02:23:38,320
The syntax is almost the same as you've seen.
语法几乎与你之前见过的相同。

2985
02:23:38,320 --> 02:23:41,470
However, in the world of JSON, JavaScript Object Notation,
然而，在 JSON 的世界中，即 JavaScript 对象表示法中，

2986
02:23:41,470 --> 02:23:44,920
you have to use double quotes around your strings.
你必须在字符串周围使用双引号。

2987
02:23:44,920 --> 02:23:46,840
You cannot use single quotes.
你不能使用单引号。

2988
02:23:46,840 --> 02:23:48,920
And, generally, it might look like this.
而且，通常情况下，它可能看起来像这样。

2989
02:23:48,920 --> 02:23:52,690
So here, for instance, is a response from a more modern version
所以，例如，这是一个来自更现代版本的响应

2990
02:23:52,690 --> 02:23:57,250
of a server that's not sending back li tags and a messy bunch of HTML.
服务器，它没有发送回列表标签和一堆混乱的 HTML 代码。

2991
02:23:57,250 --> 02:23:59,950
It's sending back something that's more machine readable.
它发送回一些更适合机器读取的东西。

2992
02:23:59,950 --> 02:24:04,822
So this text, ugly as it is, is much easier for a JSON parser, a function
所以这个文本，虽然看起来很丑，但对于 JSON 解析器，一个函数来说，

2993
02:24:04,822 --> 02:24:06,280
to read, because it's all standard.
更容易读取，因为它都是标准化的。

2994
02:24:06,280 --> 02:24:09,260
It's all square brackets, curly braces, quotes, colons, and all of that.
它都是方括号、花括号、引号、冒号等等。

2995
02:24:09,260 --> 02:24:11,427
And, even though it looks like a mess on the screen,
而且，即使它在屏幕上看起来很乱，

2996
02:24:11,427 --> 02:24:14,380
it's very standardized, unlike li tags which
它非常标准化，不像列表标签，谁知道在美观上会返回什么？

2997
02:24:14,380 --> 02:24:17,320
who knows what might come back in those aesthetically?
由于有如此多的 HTML 标签，更不用说 CSS 了。

2998
02:24:17,320 --> 02:24:20,080
Since there's so many HTML tags, not to mention CSS.
所以让我们在这里做一些修改。

2999
02:24:20,080 --> 02:24:22,100
So let's make a change here.
让我回到 VS Code 这里。

3000
02:24:22,100 --> 02:24:24,470
Let me go back to VS Code here.
让我关闭这个标签并退出这个版本的应用程序。

3001
02:24:24,470 --> 02:24:29,260
Let me close this tab and quit out of this version of my application.
让我通过进入 shows 版本 3 来展示 shows 的最后一个版本。

3002
02:24:29,260 --> 02:24:34,120
And let me show one final version of shows by going into shows version 3.
在这个版本中，我要这样做。

3003
02:24:34,120 --> 02:24:38,000
And, in this version, I'm going to go ahead and do this.
我要打开 app.py。

3004
02:24:38,000 --> 02:24:41,050
I'm going to open up app.py.
在 app.py 中，我要从 Flask 框架导入另一个函数

3005
02:24:41,050 --> 02:24:43,930
And, in app.py, I'm going to import one more function
名为 jsonify，它不一定是

3006
02:24:43,930 --> 02:24:47,950
from the flask framework called jsonify, which is not necessarily
一个技术术语。

3007
02:24:47,950 --> 02:24:48,770
a technical term.
它只是意味着将某些东西转换成 JSON。

3008
02:24:48,770 --> 02:24:50,980
It just means turn something into JSON.
这是什么意思呢？

3009
02:24:50,980 --> 02:24:52,340
So what does that mean?
注意，这里有一个看起来像这样的搜索路由。

3010
02:24:52,340 --> 02:24:57,105
Well, notice that, down here, I have a search route that looks like this.
但在我们查看它之前，它将以这个扰流器结束，

3011
02:24:57,105 --> 02:24:59,980
But, before we look at that, which is going to end with this spoiler,
就像 jsonify 一样，让我实际做一下。

3012
02:24:59,980 --> 02:25:02,330
like jsonify, let me actually do this.
让我从 shows 版本 2 中打开

3013
02:25:02,330 --> 02:25:05,740
Let me open up also from shows version 2,
之前的版本，它看起来像这样。

3014
02:25:05,740 --> 02:25:09,700
the previous version of this, which looked like this here.
这是 app -

3015
02:25:09,700 --> 02:25:10,990
This was the app--
之前示例中的搜索路由。

3016
02:25:10,990 --> 02:25:13,210
the search route from the previous example.
这就是我获得 q 的方式。

3017
02:25:13,210 --> 02:25:14,740
Here's how I got q.
这就是我使用通配符对用户输入进行转义的方式。

3018
02:25:14,740 --> 02:25:19,300
Here's how again I did the escaping of the user's input with the wildcard.
但请注意，我还做了这件事。

3019
02:25:19,300 --> 02:25:20,830
But notice that I also did this.


3020
02:25:20,830 --> 02:25:25,080
If the user got back no results, then I just gave it an empty list instead.
如果用户没有得到任何结果，我就直接给它一个空列表。

3021
02:25:25,080 --> 02:25:29,580
But let me show you two from last time. search.html looked like this.
但让我展示一下上次的两个。search.html 看起来像这样。

3022
02:25:29,580 --> 02:25:32,280
And shows2 in templates, shows.html--
以及模板中的 shows2，shows.html--

3023
02:25:32,280 --> 02:25:34,320
whoops.
哎呦。

3024
02:25:34,320 --> 02:25:39,510
search.html, what you'll see here is the very simple template
search.html，在这里你会看到非常简单的模板

3025
02:25:39,510 --> 02:25:43,230
that generated all of that text, all of those lis just again
它生成了所有这些文字，所有这些列表，再次

3026
02:25:43,230 --> 02:25:44,240
and again and again.
一次又一次。

3027
02:25:44,240 --> 02:25:45,990
So we're going to get rid of that template
所以我们要摆脱这个模板

3028
02:25:45,990 --> 02:25:48,280
in this third and final version here.
在这个第三个也是最后一个版本中。

3029
02:25:48,280 --> 02:25:52,380
So if I go into shows3, notice I'm doing the same code as before.
所以，如果我进入 shows3，请注意，我正在使用与之前相同的代码。

3030
02:25:52,380 --> 02:25:57,150
I'm building up a Python list of shows that results from that SQL query.
我正在构建一个 Python 列表，其中包含来自 SQL 查询的结果。

3031
02:25:57,150 --> 02:25:59,640
But, instead of passing it into any template,
但是，我没有把它传递给任何模板，

3032
02:25:59,640 --> 02:26:02,670
I'm just jsonifying that text.
我只是将文本转换成 JSON 格式。

3033
02:26:02,670 --> 02:26:04,620
What that means is that what I'm essentially
这意味着我本质上

3034
02:26:04,620 --> 02:26:06,720
going to send from the server to the browser
将要从服务器发送到浏览器

3035
02:26:06,720 --> 02:26:10,300
is literally something that looks like this here on the screen.
实际上就是屏幕上显示的这种内容。

3036
02:26:10,300 --> 02:26:16,350
So if I go back to VS Code here and run flask run in this final version,
所以，如果我回到这里的 VS Code 并在这个最终版本中运行 flask run，

3037
02:26:16,350 --> 02:26:18,922
and I go over to my other tab here and reload,
然后我转到另一个选项卡并重新加载，

3038
02:26:18,922 --> 02:26:20,380
I have the same response as before.
我得到的是与之前相同的响应。

3039
02:26:20,380 --> 02:26:22,088
And it's actually going to work the same.
实际上它将以相同的方式工作。

3040
02:26:22,088 --> 02:26:23,920
Office is going to still work the same.
“办公室”仍然可以正常工作。

3041
02:26:23,920 --> 02:26:30,040
But if I undo that and go to inspect and go to my Network tab here
但是，如果我撤销操作，然后去检查，并进入我的网络选项卡，

3042
02:26:30,040 --> 02:26:33,520
and now search for O, same paradigm as before.
现在搜索 O，与之前一样。

3043
02:26:33,520 --> 02:26:36,830
There /search?q=o, let's click on that.
那里 /search?q=o，点击它。

3044
02:26:36,830 --> 02:26:39,640
But notice-- and let me make this even bigger on the screen--
但是请注意，让我在屏幕上放大它，

3045
02:26:39,640 --> 02:26:45,430
this, even though it looks more verbose and it is, it's way more standardized.
虽然它看起来更详细，实际上也是，但它更标准化。

3046
02:26:45,430 --> 02:26:49,300
And this is the, quote, unquote, "right way" to send data over the internet
这是在互联网上发送数据的“正确方式”，

3047
02:26:49,300 --> 02:26:53,300
when you want two pieces of software to generate and consume it respectively.
当你想要两个软件分别生成和使用它时。

3048
02:26:53,300 --> 02:26:56,040
Here, now, we have not only just the titles of the shows,
现在，我们不仅拥有节目的标题，

3049
02:26:56,040 --> 02:26:58,540
but I've even been generous and sent the number of episodes,
而且我还慷慨地发送了剧集数量，

3050
02:26:58,540 --> 02:27:00,730
the unique ID, the title, the year, I've essentially
唯一 ID，标题，年份，我基本上

3051
02:27:00,730 --> 02:27:05,350
sent the entire SQL database in a standard, portable, textual format
以标准、可移植的文本格式发送了整个 SQL 数据库

3052
02:27:05,350 --> 02:27:07,190
that my code can now use.
我的代码现在可以使用它。

3053
02:27:07,190 --> 02:27:10,450
So, when you think about most any modern application, we come back to Gmail.
因此，当你想到大多数现代应用程序时，我们回到 Gmail。

3054
02:27:10,450 --> 02:27:14,020
When you access something like Gmail in your browser
当你使用浏览器访问 Gmail 时

3055
02:27:14,020 --> 02:27:17,620
and you are waiting and waiting and waiting in a new email comes in,
你一直在等待，直到新邮件到来，

3056
02:27:17,620 --> 02:27:18,490
what has happened?
发生了什么？

3057
02:27:18,490 --> 02:27:20,770
Tonight, for instance, open up the Inspector.
例如，今晚打开检查器。

3058
02:27:20,770 --> 02:27:21,850
Watch the Network tab.
查看网络选项卡。

3059
02:27:21,850 --> 02:27:24,150
And, odds are, every few seconds, every few minutes,
而且，很有可能，每隔几秒钟，每隔几分钟，

3060
02:27:24,150 --> 02:27:28,100
you'll see some kind of response coming from the server, maybe JSON, maybe
你会看到来自服务器的某种响应，可能是 JSON，可能是

3061
02:27:28,100 --> 02:27:29,940
some other format, containing your email,
其他格式，包含你的电子邮件，

3062
02:27:29,940 --> 02:27:32,120
including at least its subject line because that's
至少包括它的主题行，因为那是

3063
02:27:32,120 --> 02:27:34,940
what's adding more and more HTML to the browser.
不断向浏览器添加更多 HTML 的原因。

3064
02:27:34,940 --> 02:27:37,550
Indeed, if you open up the Elements tab and just watch it
实际上，如果你打开元素选项卡，然后一直观察，

3065
02:27:37,550 --> 02:27:40,580
in the most watching-paint-dry kind of situation,
就像看油漆干一样，

3066
02:27:40,580 --> 02:27:44,990
you'll see probably more and more emails appear in the underlying DOM
你会看到越来越多电子邮件出现在底层的 DOM（文档对象模型）中

3067
02:27:44,990 --> 02:27:47,400
or document object model inside of the browser.
或者说浏览器内部的文档对象模型。

3068
02:27:47,400 --> 02:27:49,730
So I can't stress enough that, even though we've
我再怎么强调也不为过，尽管我们已经

3069
02:27:49,730 --> 02:27:53,330
spent just a few weeks on SQL and the HTML, CSS, and JavaScript
只花了几个星期学习 SQL、HTML、CSS 和 JavaScript

3070
02:27:53,330 --> 02:27:57,200
and now Flask together, that is how the web works.
以及现在一起学习 Flask，但这正是网页的工作原理。

3071
02:27:57,200 --> 02:27:59,840
That is how all of today's modern apps work and, hopefully,
这就是今天所有现代应用程序的工作方式，希望

3072
02:27:59,840 --> 02:28:01,310
you too with your final projects.
你们的最终项目也能做到。

3073
02:28:01,310 --> 02:28:02,250
That's it for today.
今天就到这里了。

3074
02:28:02,250 --> 02:28:04,850
We will see you one last time next week for the end of CS50.
下周我们将最后一次见面，庆祝 CS50 的结束。

3075
02:28:04,850 --> 02:28:06,950
[APPLAUSE]
[鼓掌]

3076
02:28:08,450 --> 02:28:11,800
[MUSIC PLAYING]
[音乐播放]
