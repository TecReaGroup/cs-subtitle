1
00:00:00,000 --> 00:00:03,486
[MUSIC PLAYING]
[音乐播放]

2
00:01:30,636 --> 00:01:34,620
[AUDIENCE EXCLAIMING]
[观众惊呼]

3
00:01:34,620 --> 00:01:38,106
[APPLAUSE]
[掌声]

4
00:01:42,588 --> 00:01:44,170
SPOT: Hello, world.
SPOT：你好，世界。

5
00:01:44,170 --> 00:01:47,860
This is CS50, Harvard University's introduction
这是 CS50，哈佛大学的介绍

6
00:01:47,860 --> 00:01:50,740
to the intellectual enterprises of computer science
到计算机科学的智力事业

7
00:01:50,740 --> 00:01:53,080
and the art of programming.
以及编程的艺术。

8
00:01:53,080 --> 00:01:54,190
Woof, woof.
汪汪。

9
00:01:54,190 --> 00:01:57,613
[LAUGHTER]
[笑声]

10
00:02:08,870 --> 00:02:10,857
I'm sorry, Dave.
对不起，戴夫。

11
00:02:10,857 --> 00:02:12,440
[PINK, "WHAT ABOUT US"] What about us?
[粉红乐队，"我们呢" ] 我们呢？

12
00:02:15,350 --> 00:02:16,310
What about us?
我们呢？

13
00:02:16,310 --> 00:02:17,534
La-da-da-da-da-da-da.
啦哒哒哒哒哒哒哒。

14
00:02:17,534 --> 00:02:18,965
La-da-da-da-da-da-da.
啦哒哒哒哒哒哒哒。

15
00:02:18,965 --> 00:02:21,827
We are searchlights.
我们是探照灯。

16
00:02:21,827 --> 00:02:23,750
We can see in the dark.
我们能在黑暗中看到。

17
00:02:27,020 --> 00:02:31,280
We are rockets pointed up at the stars.
我们是对着星星发射的火箭。

18
00:02:34,710 --> 00:02:38,610
We are billions of beautiful hearts.
我们是数十亿颗美丽的心。

19
00:02:41,977 --> 00:02:46,750
And you sold us down the river too far.
而你把我们卖得太远了。

20
00:02:49,570 --> 00:02:51,920
What about us?
我们呢？

21
00:02:51,920 --> 00:02:57,270
What about all the times you said you had the answers?
你那些说过你拥有答案的时候呢？

22
00:02:57,270 --> 00:02:59,270
What about us?
我们呢？

23
00:02:59,270 --> 00:03:05,270
What about all the broken happy ever-afters?
那些破灭的童话故事呢？

24
00:03:05,270 --> 00:03:06,770
What about us?
我们呢？

25
00:03:06,770 --> 00:03:12,770
What about all the plans that ended in disaster?
那些以灾难告终的计划呢？

26
00:03:12,770 --> 00:03:14,980
What about love?
爱情呢？

27
00:03:14,980 --> 00:03:16,149
What about trust?
信任呢？

28
00:03:16,149 --> 00:03:18,145
What about us?
我们呢？

29
00:03:21,139 --> 00:03:24,632
La-da-da-da-da-da-da.
啦哒哒哒哒哒哒哒。

30
00:03:24,632 --> 00:03:28,624
La-da-da-da-da-da-da.
啦哒哒哒哒哒哒哒。

31
00:03:28,624 --> 00:03:30,121
La-da-da-da-da-da-da.
啦哒哒哒哒哒哒哒。

32
00:03:33,115 --> 00:03:34,612
La-da-da-da-da-da-da.
啦哒哒哒哒哒哒哒。

33
00:03:55,107 --> 00:03:56,190
DAVID J. MALAN: All right.
大卫·马兰：好的。

34
00:03:56,190 --> 00:03:56,840
So--
所以--

35
00:03:56,840 --> 00:04:00,340
[APPLAUSE, CHEERING]
[掌声，欢呼]

36
00:04:02,660 --> 00:04:05,480
This is CS50, Harvard University's introduction
这是 CS50，哈佛大学的介绍

37
00:04:05,480 --> 00:04:07,790
to the intellectual enterprises of computer science
到计算机科学的智力事业

38
00:04:07,790 --> 00:04:09,200
and the art of programming.
以及编程的艺术。

39
00:04:09,200 --> 00:04:11,090
And this is Spot.
这是 Spot。

40
00:04:11,090 --> 00:04:13,370
And our thanks to our friends at 3D Cowboys
感谢我们 3D 牛仔的朋友们

41
00:04:13,370 --> 00:04:15,080
for bringing him by class today.
今天让他来上课。

42
00:04:15,080 --> 00:04:18,524
Perhaps a round of applause for our special Professor [INAUDIBLE]..
也许我们应该为我们特殊的教授[听不清]鼓掌。

43
00:04:18,524 --> 00:04:21,860
[APPLAUSE]
[掌声]

44
00:04:21,860 --> 00:04:22,820
My name is David Malan.
我叫大卫·马兰。

45
00:04:22,820 --> 00:04:26,270
And I actually took this class, CS50, myself, some years ago.
我几年前确实自己上过这门课，CS50。

46
00:04:26,270 --> 00:04:27,500
But I almost didn't.
但我差点没上。

47
00:04:27,500 --> 00:04:30,590
And I didn't because when I got to campus, as a first-year,
我之所以没有上，是因为当我作为大一新生来到校园时，

48
00:04:30,590 --> 00:04:33,350
I really gravitated toward things already familiar, things
我真的很倾向于那些我已经熟悉的事物，那些

49
00:04:33,350 --> 00:04:35,450
with which I was already comfortable, specifically, government.
我感到舒适的事物，特别是政治。

50
00:04:35,450 --> 00:04:38,700
And I came in here thinking I was going to major or concentrate in government.
我来到这里时认为我将会主修或专注于政治。

51
00:04:38,700 --> 00:04:41,840
And it was only once I got to sophomore year, fall semester,
直到我升入大二，秋季学期，

52
00:04:41,840 --> 00:04:44,300
that some friends of mine were coming to this class called
我的一些朋友才开始上这门叫做

53
00:04:44,300 --> 00:04:48,290
CS50 that was very much to beware at the time, in that it
CS50 的课，当时这门课令人望而生畏，因为它

54
00:04:48,290 --> 00:04:50,870
was an unfamiliar field to so many of us, myself included.
对我们很多人来说都是一个陌生的领域，包括我自己。

55
00:04:50,870 --> 00:04:54,320
But I got up the nerve to go over the threshold, sit in on the first class,
但我鼓起勇气走过门槛，坐在第一堂课上，

56
00:04:54,320 --> 00:04:56,280
just shop it, so to speak.
算是试听一下吧。

57
00:04:56,280 --> 00:04:57,570
And I was hooked.
我就迷上了。

58
00:04:57,570 --> 00:05:00,470
I found that homework was, for the first time, fun.
我发现作业第一次变得有趣了。

59
00:05:00,470 --> 00:05:03,783
And this was after having enrolled only because the professor let
而这仅仅是因为教授允许我

60
00:05:03,783 --> 00:05:06,200
me enroll pass/fail or [INAUDIBLE] because I didn't really
我以 pass/fail 或者[听不清]的方式报名，因为我真的

61
00:05:06,200 --> 00:05:07,283
think I could even cut it.
不认为自己能应付得了。

62
00:05:07,283 --> 00:05:10,020
But fast forward to five Mondays later in the semester,
但快进到学期后的五个星期一，

63
00:05:10,020 --> 00:05:12,020
I actually switched to a letter grade, deciding,
我实际上改成了字母成绩，决定，

64
00:05:12,020 --> 00:05:14,240
wow, this is actually something for me.
哇，这实际上对我来说很合适。

65
00:05:14,240 --> 00:05:17,480
And I say this because computer science, what
我说这话是因为计算机科学，我

66
00:05:17,480 --> 00:05:19,640
I didn't realize about it at the time, really
当时并没有意识到它，实际上

67
00:05:19,640 --> 00:05:23,680
is this very general purpose way of thinking and way of solving problems.
是一种非常通用的思维方式和解决问题的方式。

68
00:05:23,680 --> 00:05:26,490
And even if this is the only CS class you ever take,
即使这是你唯一上过的 CS 课程，

69
00:05:26,490 --> 00:05:29,940
even if this is the only formal training you have in programming
即使这是你唯一接受的编程方面的正规培训，

70
00:05:29,940 --> 00:05:32,550
as a practical skill, it's just so darn applicable
作为一项实用技能，它真的非常适用

71
00:05:32,550 --> 00:05:35,670
to so many other fields-- the arts, humanities, social sciences,
于很多其他领域——艺术、人文、社会科学，

72
00:05:35,670 --> 00:05:39,660
natural sciences, and beyond, and certainly within the STEM fields,
自然科学，以及其他领域，当然也包括 STEM 领域，

73
00:05:39,660 --> 00:05:40,530
themselves.
本身。

74
00:05:40,530 --> 00:05:43,810
That said, it's going to often feel a little something like this.
也就是说，它经常会让你感觉有点像这样。

75
00:05:43,810 --> 00:05:47,310
This is from our friends at MIT, down the road, which is one of their hacks
这是来自我们麻省理工学院的朋友，就在附近，这是他们其中一个黑客

76
00:05:47,310 --> 00:05:51,300
whereby they connected a fire hydrant to a drinking fountain,
他们将一个消防栓连接到一个饮水机上，

77
00:05:51,300 --> 00:05:54,960
with a little sign up there that says, "GETTING AN EDUCATION FROM MIT IS LIKE
上面有一个小牌子写着，“在麻省理工学院接受教育就像

78
00:05:54,960 --> 00:05:57,480
DRINKING FROM A FIRE HOSE," which is to say that it's
从消防水带喝水”，也就是说，它

79
00:05:57,480 --> 00:05:59,310
going to feel, quite often, in this class,
经常会在本课程中感受到，

80
00:05:59,310 --> 00:06:01,260
too, that there's just a lot of information.
同样，这里有大量的资讯。

81
00:06:01,260 --> 00:06:03,960
And you can't possibly absorb it all, but realize
你不可能全部吸收，但是你要明白

82
00:06:03,960 --> 00:06:06,750
that's to be expected, especially in an introductory class.
这是可以预期的，特别是在入门课程中。

83
00:06:06,750 --> 00:06:11,520
The whole point is for so much of it to feel new, but with practice, with time,
重点是让其中的很多内容对你来说都是新的，但随着练习，随着时间的推移，

84
00:06:11,520 --> 00:06:14,390
with years, even, looking back, will you get all the more
甚至几年后，回顾往昔，你会越来越

85
00:06:14,390 --> 00:06:15,640
comfortable with the material.
对这些内容感到熟悉。

86
00:06:15,640 --> 00:06:18,340
But you're not meant to feel comfortable along the way.
但在学习过程中，你并不一定要感到舒适。

87
00:06:18,340 --> 00:06:20,340
And so let me encourage you, invite you, expect
因此，我想鼓励你，邀请你，期待

88
00:06:20,340 --> 00:06:23,580
you to get comfortable feeling uncomfortable along the way,
你在学习过程中能习惯感到不舒服，

89
00:06:23,580 --> 00:06:27,390
whether you have or have not prior computer science or programming
无论你之前是否学习过计算机科学或编程

90
00:06:27,390 --> 00:06:28,080
experience.
经验。

91
00:06:28,080 --> 00:06:32,130
Now, back in my day, the class' syllabus was a little bit different.
在我那个时代，课程大纲有点不同。

92
00:06:32,130 --> 00:06:35,438
And, really, when I and all of my classmates exited the class,
事实上，当我和其他同学从课堂上离开时，

93
00:06:35,438 --> 00:06:37,230
we would say to friends that we learned how
我们会告诉朋友，我们学会了如何

94
00:06:37,230 --> 00:06:40,860
to program in C, which is a language that we, ourselves, will still
用 C 语言编程，这是一种我们自己仍然会

95
00:06:40,860 --> 00:06:41,860
learn in this class.
在本课程中学习的语言。

96
00:06:41,860 --> 00:06:44,040
But that was it for languages.
但这只是关于语言的。

97
00:06:44,040 --> 00:06:46,950
But nowadays, as you'll see, we'll explore not just
但现在，正如你将看到的那样，我们将探索的不只是

98
00:06:46,950 --> 00:06:49,560
this older language called C, but a more modern language
这种叫做 C 的古老语言，而是一种更现代的语言

99
00:06:49,560 --> 00:06:53,580
called Python that's very much in vogue for data science, and web applications,
叫做 Python，它在数据科学和 Web 应用程序中非常流行，

100
00:06:53,580 --> 00:06:54,460
and much more.
等等。

101
00:06:54,460 --> 00:06:56,293
But we'll also introduce you, along the way,
但我们也会在学习过程中向你介绍

102
00:06:56,293 --> 00:07:01,020
to another language called S-Q-L or SQL, which is specifically for databases.
另一种叫做 S-Q-L 或 SQL 的语言，它专门用于数据库。

103
00:07:01,020 --> 00:07:03,330
And SQL is a different type of programming language
而 SQL 是一种不同类型的编程语言

104
00:07:03,330 --> 00:07:06,060
that's just going to give you different ways of solving problems,
它只是会为你提供解决问题的不同方法，

105
00:07:06,060 --> 00:07:09,480
different building blocks with which to express problems you want to solve.
不同的构建块，用它们来表达你想要解决的问题。

106
00:07:09,480 --> 00:07:11,670
We'll introduce you, toward the end of the semester,
我们会在学期结束时向你介绍

107
00:07:11,670 --> 00:07:14,040
yet another language, JavaScript, often used
另一种语言，JavaScript，它经常与

108
00:07:14,040 --> 00:07:17,415
with markup languages called HTML and CSS, with which maybe you
叫做 HTML 和 CSS 的标记语言一起使用，如果你之前做过网站，你可能

109
00:07:17,415 --> 00:07:19,290
have some experience if you've made websites.
有一些经验。

110
00:07:19,290 --> 00:07:23,640
But we'll do this because so many of today's actual real-world software
但我们会这样做，因为当今许多实际的现实世界软件

111
00:07:23,640 --> 00:07:24,630
is web-based.
都是基于 Web 的。

112
00:07:24,630 --> 00:07:27,450
Or it's phone-based, mobile-based, but even then,
或者它是基于手机的，基于移动设备的，但即使是这样，

113
00:07:27,450 --> 00:07:30,000
it's using these same languages, like JavaScript.
它也使用这些相同的语言，比如 JavaScript。

114
00:07:30,000 --> 00:07:32,700
And so by the end of CS50, in particular,
因此，到 CS50 结束时，特别是

115
00:07:32,700 --> 00:07:35,820
you won't know how to program in X, or Y, or Z, per se.
你并不会知道如何用 X、Y 或 Z 等特定语言编程。

116
00:07:35,820 --> 00:07:39,150
But, period, you'll learn how to program.
但是，你会学会编程。

117
00:07:39,150 --> 00:07:41,190
And, indeed, among the goals of this class
事实上，这门课的目标之一

118
00:07:41,190 --> 00:07:45,540
is to equip you with enough of a set of concepts, enough practical skills
就是让你掌握足够多的概念，足够多的实用技能

119
00:07:45,540 --> 00:07:49,440
and experience that after CS50, again, if you never take another CS class,
和经验，这样你就可以在 CS50 结束后，再次学习，如果你再也不上任何计算机科学课程，

120
00:07:49,440 --> 00:07:51,690
you can teach yourself new languages.
你可以自学新的语言。

121
00:07:51,690 --> 00:07:52,650
And you won't feel--
你不会感到——

122
00:07:52,650 --> 00:07:55,440
you won't have been reliant on a class to, indeed,
你不会依赖一门课程来，确实，

123
00:07:55,440 --> 00:07:57,508
introduce you to each and one of those ideas.
向你介绍每一个想法。

124
00:07:57,508 --> 00:07:59,550
And what are we going to do, then, in this class?
那么，我们在这门课上要做什么呢？

125
00:07:59,550 --> 00:08:01,260
And, really, what are we going to start doing today?
而且，事实上，我们今天要开始做什么呢？

126
00:08:01,260 --> 00:08:03,402
Well, we're going to learn how to solve problems.
好吧，我们将学习如何解决问题。

127
00:08:03,402 --> 00:08:05,610
And that's really what computer science is all about.
而这正是计算机科学的本质。

128
00:08:05,610 --> 00:08:09,090
We'll, very specifically, today, knock off a few to-dos.
我们今天将非常具体地完成一些待办事项。

129
00:08:09,090 --> 00:08:12,130
We'll learn how to represent simple things, like numbers.
我们将学习如何表示简单的东西，比如数字。

130
00:08:12,130 --> 00:08:14,880
We'll learn how to represent letters of an alphabet, like English.
我们将学习如何表示字母表中的字母，例如英文。

131
00:08:14,880 --> 00:08:17,130
We'll learn how to represent colors-- red, green, blue,
我们将学习如何表示颜色——红色，绿色，蓝色，

132
00:08:17,130 --> 00:08:18,240
and everything in between.
以及介于两者之间的所有颜色。

133
00:08:18,240 --> 00:08:20,610
We'll learn how to represent, more interestingly,
更有趣的是，我们将学习如何表示

134
00:08:20,610 --> 00:08:23,430
full-fledged images that you might see on the web or your phone.
你在网络或手机上看到的完整图像。

135
00:08:23,430 --> 00:08:26,730
We'll talk about representing videos and even audio files.
我们将讨论如何表示视频，甚至音频文件。

136
00:08:26,730 --> 00:08:29,540
So, by the end of today, alone, you will exit here
所以，仅今天结束时，你将离开这里

137
00:08:29,540 --> 00:08:31,850
with a newfound mental model for how you can
带着一种全新的思维模式，了解如何

138
00:08:31,850 --> 00:08:36,140
represent all of today's media and multimedia that we take for granted
表示我们习以为常的当今所有媒体和多媒体

139
00:08:36,140 --> 00:08:37,760
and use most every day.
并且每天都在使用。

140
00:08:37,760 --> 00:08:40,370
But we'll also focus today, ultimately, on how
但我们今天最终还会专注于如何

141
00:08:40,370 --> 00:08:43,520
to write algorithms, like step-by-step instructions for solving
编写算法，就像解决问题的分步指令一样

142
00:08:43,520 --> 00:08:47,375
some problem, specifically, implementing algorithms with code.
一些问题，具体来说，是用代码实现算法。

143
00:08:47,375 --> 00:08:48,500
And that's what we'll find.
这就是我们要找到的。

144
00:08:48,500 --> 00:08:50,417
An algorithm is just something you can express
算法只是你可以用英语或任何人类语言表达的东西，但代码是对它的翻译

145
00:08:50,417 --> 00:08:54,350
in English or any human language, but code is a translation of that
但代码是对它的翻译

146
00:08:54,350 --> 00:08:57,260
to, presumably, the 0's and 1's that you've probably heard
到，据推测，是 0 和 1，你可能已经听说过

147
00:08:57,260 --> 00:08:59,840
is all that computers ultimately speak.
是计算机最终使用的语言。

148
00:08:59,840 --> 00:09:02,030
And if you're feeling like that's a lot for today,
如果你觉得今天要学的东西很多，

149
00:09:02,030 --> 00:09:04,488
if you're feeling like that's a lot for the whole semester,
如果你觉得整个学期要学的东西很多，

150
00:09:04,488 --> 00:09:07,190
realize and take comfort in knowing that -thirds of you
请意识到并安心地知道，你们中三分之二的人

151
00:09:07,190 --> 00:09:09,720
have never taken a CS course before.
以前从未上过 CS 课程。

152
00:09:09,720 --> 00:09:12,140
So even if you think, like I did all those years ago,
所以，即使你像我几年前一样认为，

153
00:09:12,140 --> 00:09:15,047
that, surely, my friends, the kids I didn't even in the class,
肯定的，我的朋友，那些甚至不在课堂上的孩子，

154
00:09:15,047 --> 00:09:16,880
must know more than I, have been programming
一定比我懂得更多，并且一直在编程

155
00:09:16,880 --> 00:09:18,500
since they were six years old.
从他们六岁起。

156
00:09:18,500 --> 00:09:19,880
That's just not the case.
情况并非如此。

157
00:09:19,880 --> 00:09:21,260
You're in very much good company.
你与很多优秀的人为伴。

158
00:09:21,260 --> 00:09:24,003
And within the class will you find different tracks,
在课堂上，你会发现不同的学习路线，

159
00:09:24,003 --> 00:09:26,420
by way of the homework assignments, called "problem sets,"
通过课后作业，称为“问题集”，

160
00:09:26,420 --> 00:09:28,003
by way of the sections or recitations.
通过课节或课外辅导。

161
00:09:28,003 --> 00:09:29,962
There will be different tracks for those of you
对于你们中的人，会有不同的学习路线，

162
00:09:29,962 --> 00:09:32,610
less comfortable, more comfortable, somewhere in between.
那些不太舒服的，更舒服的，以及介于两者之间的。

163
00:09:32,610 --> 00:09:34,940
And if you really don't know why you are here today,
如果你真的不知道今天来这里的原因，

164
00:09:34,940 --> 00:09:37,970
we'll even have sections for those least comfortable, where you just
我们甚至会为那些最不适应的人设立课程，在那里你只需要

165
00:09:37,970 --> 00:09:41,690
don't necessarily feel ready to dive into CS or maybe STEM, more generally.
不一定觉得自己准备好深入学习 CS 或更普遍的 STEM 领域。

166
00:09:41,690 --> 00:09:44,840
But we'll get you there by way of the course's support structure.
但通过本课程的支持体系，我们会帮助你达到目标。

167
00:09:44,840 --> 00:09:47,780
And it's very much grounded in this mindset.
这很大程度上基于这种思维方式。

168
00:09:47,780 --> 00:09:50,150
What ultimately matters in this class is not so much
在本课程中，最终重要的是，并非你相对于你的同学身处何处，

169
00:09:50,150 --> 00:09:52,025
where you end up relative to your classmates,
而是你相对于你自己而言，从哪里开始。

170
00:09:52,025 --> 00:09:55,040
but where you end up relative to yourself, when you began.
所以，无论你之前是否有编程或 CSS 经验，

171
00:09:55,040 --> 00:09:58,323
So whether you have or have not prior programming or CSS experience,
在评估时，在

172
00:09:58,323 --> 00:10:00,740
it's not going to matter when it comes to evaluation, when
得到结果时，无论是一份成绩，还是一个合格的标记，或者类似的东西，

173
00:10:00,740 --> 00:10:04,320
it comes to the output, be it a grade, or a satisfactory mark, or the like.
这将取决于，实际上，你今天身处何处，

174
00:10:04,320 --> 00:10:06,860
It's going to depend on, really, where you are today,
在这个我们称为第零周的阶段，以及学期结束时，当你

175
00:10:06,860 --> 00:10:11,960
in this, what we call week zero, versus the very end of the semester, when
用软件创造了你自己伟大作品的时候。

176
00:10:11,960 --> 00:10:15,050
you will have built something grand, of your very own, in software.
但 CS50 也以其社区和文化为特征，这一点相当独特。

177
00:10:15,050 --> 00:10:17,270
But CS50 is also characterized, fairly uniquely,
在学习过程中，你会发现你的学习体验

178
00:10:17,270 --> 00:10:19,147
by its community, its culture.
充斥着许多社交和学术活动。

179
00:10:19,147 --> 00:10:21,230
And along the way, you'll see that your experience
CS50 午餐，几乎每周五，我们都会在附近的一家名为 Changsho 的餐馆聚餐

180
00:10:21,230 --> 00:10:24,680
is punctuated by a lot of social and academic events alike.
一起吃中国午餐。

181
00:10:24,680 --> 00:10:27,890
CS50 lunches, most every Friday, we'll gather at a nearby restaurant
尽可能多的想要参加的人都可以加入我们，坐下来，与我随意聊天，

182
00:10:27,890 --> 00:10:30,280
called Changsho where we'll have Chinese lunch together.
还有课程的教学人员、我们的朋友、来自业界的校友。

183
00:10:30,280 --> 00:10:32,030
And as many of you as might want to attend
CS50 解谜日，本周末即将到来，这是一个机会，

184
00:10:32,030 --> 00:10:34,988
that week will be able to join us, sit down, and chat casually with me,
让我们能够

185
00:10:34,988 --> 00:10:39,680
the course's teaching staff, friends of ours, alumni from industry, as well.
一起玩游戏、一起学习、一起竞争。

186
00:10:39,680 --> 00:10:42,630
CS50 Puzzle Day, coming up this weekend, will be an opportunity,
我们还有一些其他活动，比如

187
00:10:42,630 --> 00:10:46,160
for us to, more formally, gather as a class and play some games, learn together, compete.
CS50 Hackathon，我们将举办黑客马拉松，

188
00:10:46,160 --> 00:10:48,940
We have other events, too, like
持续 24 小时，

189
00:10:48,940 --> 00:10:52,090
CS50 Hackathon, where we'll have a hackathon, a 24-hour period
旨在让你有机会尝试并构建

190
00:10:52,090 --> 00:10:55,600
where you can try and build some software, some creative project, something that
一些软件，一些创意项目，一些能够

191
00:10:55,600 --> 00:10:58,090
maybe pushes your boundaries.
挑战你的极限。

192
00:10:58,090 --> 00:11:00,540
And if that's not enough,
如果你觉得这还不够，

193
00:11:00,540 --> 00:11:02,810
there are even things called "club meetings"
还有叫做“俱乐部会议”的东西，

194
00:11:02,810 --> 00:11:05,820
where we have clubs for just about any interest, coding related or not.
我们为几乎所有兴趣爱好设立了俱乐部，无论与编码相关与否。

195
00:11:05,820 --> 00:11:08,760
There are clubs for games, for cooking, for filmmaking, for photography,
我们有游戏俱乐部、烹饪俱乐部、电影制作俱乐部、摄影俱乐部，

196
00:11:08,760 --> 00:11:11,620
for just about anything you might imagine.
几乎所有你能想象到的。

197
00:11:11,620 --> 00:11:13,500
So, as you can see,
所以，正如你所见，

198
00:11:13,500 --> 00:11:15,540
CS50 is a lot more than just a class.
CS50 不仅仅是一门课程。

199
00:11:15,540 --> 00:11:17,440
It's a community.
它是一个社区。

200
00:11:17,440 --> 00:11:19,610
It's a family.
它是一个家庭。

201
00:11:19,610 --> 00:11:21,950
And so,
所以，

202
00:11:21,950 --> 00:11:25,420
I'm gonna give you a quick little orientation.
我将给你一个快速的小介绍。

203
00:11:25,420 --> 00:11:28,070
To get started, you're gonna want to sign up for a course site.
首先，你需要注册一个课程网站。

204
00:11:28,070 --> 00:11:30,520
So, it's a course website that is a hub,
这是一个课程网站，是一个中心，

205
00:11:30,520 --> 00:11:34,090
where we'll post all the lecture notes, the problem sets, the forums, the like.
我们将在这里发布所有讲义、习题集、论坛等等。

206
00:11:34,090 --> 00:11:37,000
So, to register, you're gonna want to go to CS50.harvard.edu,
所以，要注册，你需要访问 CS50.harvard.edu，

207
00:11:37,000 --> 00:11:39,040
CS50.harvard.edu,
CS50.harvard.edu，

208
00:11:39,040 --> 00:11:41,850
and you'll be able to sign up for the course with just an email address.
只需要一个电子邮件地址，你就可以注册这门课程。

209
00:11:41,850 --> 00:11:44,730
Now, if you're already a Harvard student,
现在，如果你已经是哈佛大学的学生，

210
00:11:44,730 --> 00:11:46,550
that's great.
那太好了。

211
00:11:46,550 --> 00:11:48,830
You can sign up using your Harvard ID.
你可以使用你的哈佛 ID 注册。

212
00:11:48,830 --> 00:11:51,190
Otherwise, just an email address will do.
否则，只需要一个电子邮件地址就可以了。

213
00:11:51,190 --> 00:11:54,380
And then you're gonna want to download and install a program called "VS Code,"
然后你需要下载并安装一个名为“VS Code”的程序，

214
00:11:54,380 --> 00:11:56,950
Visual Studio Code.
Visual Studio Code。

215
00:11:56,950 --> 00:11:59,700
That's also a free program.
这也是一个免费程序。

216
00:11:59,700 --> 00:12:02,300
It's the main program you'll be using to write code in this class.
它是你在这门课上用来编写代码的主要程序。

217
00:12:02,300 --> 00:12:04,310
Now, I know some of you might be thinking,
我知道你们中的一些人可能在想，

218
00:12:04,310 --> 00:12:07,650
"I've never programmed before.
“我以前从未编程过。

219
00:12:07,650 --> 00:12:10,150
I've never touched a computer, never even seen one,
我从未触碰过电脑，从未见过它，

220
00:12:10,150 --> 00:12:12,170
what am I gonna do?"
我要怎么办？”

221
00:12:12,170 --> 00:12:13,560
Don't worry.
不用担心。

222
00:12:13,560 --> 00:12:15,980
The course's designed for you too.
本课程也是为你而设计的。

223
00:12:15,980 --> 00:12:18,170
You will come up to speed by the end of the semester.
你会在本学期结束之前达到预期水平。

224
00:12:18,170 --> 00:12:20,140
So, let's get started.
所以，让我们开始吧。

225
00:12:20,140 --> 00:12:22,460
I'm gonna turn off the lights
我要把灯关掉

226
00:12:22,460 --> 00:12:24,430
so that we can all focus
这样我们才能集中注意力

227
00:12:24,430 --> 00:12:27,480
and I'm gonna start with a demo.
我会从演示开始。

228
00:12:27,480 --> 00:12:29,110
Here we go.
我们开始了。

229
00:12:29,110 --> 00:12:30,630
Okay.
好的。

230
00:12:30,630 --> 00:12:32,690
So,
所以，

231
00:12:32,690 --> 00:12:36,290
it's just a way for us to introduce the course and our first lecture.
这只是一个介绍课程和我们第一堂课的方法。

232
00:12:36,290 --> 00:12:38,830
So, what I want you to do is,
所以，我希望你做的是，

233
00:12:38,830 --> 00:12:40,850
we're gonna start with a simple demo.
我们会从一个简单的演示开始。

234
00:12:40,850 --> 00:12:44,040
So, I'm gonna run a little program called "Hello"
所以，我将运行一个小程序，名为“Hello”

235
00:12:44,040 --> 00:12:46,800
and it's gonna ask you to enter your name.
它会要求你输入你的名字。

236
00:12:46,800 --> 00:12:48,660
So, it's gonna say,
所以，它会说，

237
00:12:48,660 --> 00:12:52,600
"What's your name?" And you just type your name and hit enter.
“你的名字是什么？”你只需要输入你的名字，然后按回车键。

238
00:12:52,600 --> 00:12:55,410
And what it's gonna do is,
它将做的是，

239
00:12:55,410 --> 00:12:57,990
it's gonna give you a little personalized output.
它将给你一个个性化的输出结果。

240
00:12:57,990 --> 00:12:59,750
So,
所以，

241
00:12:59,750 --> 00:13:02,170
"Hello, [Your Name], nice to meet you."
“你好，[你的名字]，很高兴认识你。”

242
00:13:02,170 --> 00:13:04,430
All right.
好的。

243
00:13:04,430 --> 00:13:06,590
So, let's try that.
所以，让我们试一下。

244
00:13:06,590 --> 00:13:08,290
Here we go.
我们开始了。

245
00:13:08,290 --> 00:13:10,600
So, it's gonna ask me for my name.
所以，它会询问我的名字。

246
00:13:10,600 --> 00:13:12,830
It's gonna say,
它会说，

247
00:13:12,830 --> 00:13:16,360
"What's your name?" And I type in "David," and hit enter.
“你的名字是什么？”我输入“David”，然后按回车键。

248
00:13:16,360 --> 00:13:19,200
And it's gonna say,
它会说，

249
00:13:19,200 --> 00:13:20,920
"Hello, David,"
“你好，David，”

250
00:13:20,920 --> 00:13:23,970
"nice to meet you." And I can run it again,
“很高兴认识你。”我可以再次运行它，

251
00:13:23,970 --> 00:13:27,730
and it'll ask me for my name again, and I'll type in "David," and it'll say,
它会再次询问我的名字，我将输入“David”，它会说，

252
00:13:27,730 --> 00:13:31,370
"Hello, David, nice to meet you." And I can run it as many times as I want.
“你好，David，很高兴认识你。”我可以根据需要运行它任意多次。

253
00:13:31,370 --> 00:13:33,360
And I can even do something like this.
我甚至可以这样做。

254
00:13:33,360 --> 00:13:35,560
"What's your name?"
“你的名字是什么？”

255
00:13:35,560 --> 00:13:38,100
And I can type in,
我输入，

256
00:13:38,100 --> 00:13:41,870
let's say, "CS50." And it'll say, "Hello, CS50, nice to meet you."
比如，“CS50”。它会说，“你好，CS50，很高兴认识你。”

257
00:13:41,870 --> 00:13:43,870
So,
所以，

258
00:13:43,870 --> 00:13:46,080
this is just a simple, very, very simple demo.
这只是一个简单，非常非常简单的演示。

259
00:13:46,080 --> 00:13:48,270
But even this
但即使是它

260
00:13:48,270 --> 00:13:51,870
illustrates the basic idea of a program, which is that you can
也体现了程序的基本思想，那就是你可以

261
00:13:51,870 --> 00:13:54,650
take some input from the user,
从用户那里获取一些输入，

262
00:13:54,650 --> 00:13:57,990
process it in some way, and then give back some output.
以某种方式处理它，然后给出一些输出结果。

263
00:13:57,990 --> 00:14:00,720
And that's what all programs do at their core.
这就是所有程序的核心功能。

264
00:14:00,720 --> 00:14:02,840
So, in the case of this simple program,
所以，在这个简单的程序中，

265
00:14:02,840 --> 00:14:05,720
we took your name as input,
我们将你的名字作为输入，

266
00:14:05,720 --> 00:14:08,800
and then we processed it by putting it into a sentence,
然后我们通过将其放入一个句子中来处理它，

267
00:14:08,800 --> 00:14:11,240
and then we gave you back that sentence as output.
然后我们将这个句子作为输出反馈给你。

268
00:14:11,240 --> 00:14:14,030
So, this is just a taste of what we'll be doing in this class.
所以，这只是我们在这门课上会做的事情的一个小小的预兆。

269
00:14:14,030 --> 00:14:16,320
We'll be writing programs that are much more complex
我们将编写更复杂的程序

270
00:14:16,320 --> 00:14:19,100
and that do much more interesting things,
并且做一些更有趣的事情，

271
00:14:19,100 --> 00:14:21,800
but the basic idea is the same.
但基本思想是一样的。

272
00:14:21,800 --> 00:14:23,950
It's all about taking input,
这都是关于接收输入，

273
00:14:23,950 --> 00:14:26,360
processing it,
处理它，

274
00:14:26,360 --> 00:14:29,770
and giving back output.
并反馈输出结果。

275
00:14:29,770 --> 00:14:32,180
And so,
所以，

276
00:14:32,180 --> 00:14:34,950
we'll get to writing programs that,
我们将编写一些程序，

277
00:14:34,950 --> 00:14:38,520
for example, can recognize your face,
例如，可以识别你的面部，

278
00:14:38,520 --> 00:14:41,570
that can translate languages,
可以翻译语言，

279
00:14:41,570 --> 00:14:45,210
that can even play games with you.
甚至可以和你玩游戏。

280
00:14:45,210 --> 00:14:47,630
But to get there,
但要达到这个目标，

281
00:14:47,630 --> 00:14:50,020
we have to start somewhere.
我们必须从某个地方开始。

282
00:14:50,020 --> 00:14:52,490
And so,
所以，

283
00:14:52,490 --> 00:14:55,130
we'll start with the basics,
我们将从基础开始，

284
00:14:55,130 --> 00:14:57,630
with the fundamentals.
从基本原理开始。

285
00:14:57,630 --> 00:15:00,320
And we'll build up to those more complex programs.
然后我们将逐渐构建那些

187
00:10:42,630 --> 00:10:46,740
even if you have no prior CS experience, just to solve problems,
即使您没有任何计算机科学的先前经验，只要为了解决问题，

188
00:10:46,740 --> 00:10:49,790
not jigsaw puzzles, but puzzles in the logical sense.
不是拼图，而是逻辑上的谜题。

189
00:10:49,790 --> 00:10:52,490
We'll hand you a packet of puzzles--
我们会给你一包谜题——

190
00:10:52,490 --> 00:10:54,230
logic problems, or riddles, or the like--
逻辑问题，或谜语，或类似的东西——

191
00:10:54,230 --> 00:10:56,087
that you, as teams, can solve together.
你可以作为团队一起解决。

192
00:10:56,087 --> 00:10:57,920
And at the very end, we'll walk you through.
最后，我们会带你走一遍。

193
00:10:57,920 --> 00:11:01,350
And along the way, there'll be not only these puzzles, but pizza, and prizes,
一路上，不仅有这些谜题，还有披萨，还有奖品，

194
00:11:01,350 --> 00:11:02,960
and so much more, as well.
还有更多的东西。

195
00:11:02,960 --> 00:11:06,350
Towards the end of the semester, we'll have a CS50 Hackathon whereby
在学期结束的时候，我们将举行 CS50 黑客马拉松，

196
00:11:06,350 --> 00:11:09,830
we'll get together around 7:00 PM, at the start of reading period,
我们将在大约下午7点，阅读期开始的时候聚在一起，

197
00:11:09,830 --> 00:11:12,740
and we'll finish up around 7:00 AM the next morning.
我们将在第二天早上7点左右结束。

198
00:11:12,740 --> 00:11:15,080
And it will be this opportunity to really bond
这将是一个真正地团结的机会

199
00:11:15,080 --> 00:11:18,140
with your classmates, your project partners, if you work in a team,
与你的同学，你的项目合作伙伴，如果你在一个团队工作，

200
00:11:18,140 --> 00:11:20,510
on your very own final project, which is meant
在你自己的最终项目上，这是为了

201
00:11:20,510 --> 00:11:23,750
to be a capstone of the course, something you build, yourselves,
成为这门课程的顶峰，你自己建造的东西，

202
00:11:23,750 --> 00:11:25,760
that we don't hand you a specification for.
我们没有给你一个规范。

203
00:11:25,760 --> 00:11:29,090
But it's your final offboarding, so that when you exit CS50,
但这是你最后的离职培训，所以当你退出 CS50 时，

204
00:11:29,090 --> 00:11:31,340
you don't need CS50 anymore.
你不再需要 CS50 了。

205
00:11:31,340 --> 00:11:32,100
You don't need me.
你不需要我。

206
00:11:32,100 --> 00:11:33,058
You don't need your TF.
你不需要你的助教。

207
00:11:33,058 --> 00:11:35,910
You can actually write code and solve problems on your own.
你实际上可以自己编写代码和解决问题。

208
00:11:35,910 --> 00:11:39,740
So this picture here is one of our past photos from earlier in the evening.
所以，这张照片是我们晚上早些时候的照片之一。

209
00:11:39,740 --> 00:11:42,590
Things get a little quieter as we then, around 5:00 AM,
当我们在凌晨5点左右的时候，事情变得安静了一些，

210
00:11:42,590 --> 00:11:46,340
drive anyone who's still awake and energetic to a nearby IHOP
把任何仍然清醒和精力充沛的人开车到附近的 IHOP

211
00:11:46,340 --> 00:11:48,140
for pancakes, around then.
吃煎饼，大约那个时候。

212
00:11:48,140 --> 00:11:51,710
But here is how most of the evenings tend to end for at least some
但这里是如何大多数的晚上往往结束至少一些

213
00:11:51,710 --> 00:11:53,000
of your classmates prior.
你的同学以前。

214
00:11:53,000 --> 00:11:55,670
But at the very end of the class is the so-called CS50 Fair,
但在课程的最后，是所谓的 CS50 博览会，

215
00:11:55,670 --> 00:11:59,670
an exhibition of all of your final projects for friends, faculty,
你所有最终项目的展览，面向朋友，教职工，

216
00:11:59,670 --> 00:12:01,610
students, and staff across campus, whereby
学生，以及校园里的工作人员，

217
00:12:01,610 --> 00:12:03,440
you'll be invited to a space like this.
你将被邀请到这样的空间。

218
00:12:03,440 --> 00:12:04,220
Bring your laptop.
带上你的笔记本电脑。

219
00:12:04,220 --> 00:12:06,920
Bring your phone, whatever it is you have built and created.
带上你的手机，无论你建造和创造了什么。

220
00:12:06,920 --> 00:12:09,260
And we'll just show it off for a bit of the afternoon,
然后我们只是在下午展示一下，

221
00:12:09,260 --> 00:12:11,870
complete with music, and friends from industry,
加上音乐，以及来自行业的朋友，

222
00:12:11,870 --> 00:12:16,000
and candy, and all what makes gathering together at term's end fond.
以及糖果，以及所有让学期结束的聚会变得美好的东西。

223
00:12:16,000 --> 00:12:17,750
And you'll wear, ultimately, very proudly,
最后，你会非常自豪地穿上，

224
00:12:17,750 --> 00:12:21,770
we hope, your very own "I took CS50," stating, very matter of factly,
我们希望，你自己的“我学过 CS50”，非常直白地说，

225
00:12:21,770 --> 00:12:25,790
what I did some years ago; that, indeed, this was a course I, myself, took.
我几年前做过的事情；的确，这是我自己上过的一门课。

226
00:12:25,790 --> 00:12:29,120
So, today, let's focus, then, on computer science, like what is it.
所以，今天，让我们把注意力集中在计算机科学上，比如它是什么。

227
00:12:29,120 --> 00:12:31,790
Well, it's really the study of information.
嗯，这实际上是信息的研究。

228
00:12:31,790 --> 00:12:34,910
But, really, it's, more specifically, about solving problems,
但是，实际上，更具体地说，是关于解决问题，

229
00:12:34,910 --> 00:12:38,360
using certain ideas and techniques, all of which you'll exit the course with.
使用某些想法和技巧，你将在完成这门课后掌握所有这些。

230
00:12:38,360 --> 00:12:43,378
So, as such, problem solving is a goal that we'll
因此，解决问题是我们会

231
00:12:43,378 --> 00:12:45,920
approach by way of something called "computational thinking."
通过一种叫做“计算思维”的方式来解决。

232
00:12:45,920 --> 00:12:49,760
So computational thinking, you can oversimplistically think about it
所以计算思维，你可以过分简单地把它想象成

233
00:12:49,760 --> 00:12:51,500
as thinking like a computer.
像电脑一样思考。

234
00:12:51,500 --> 00:12:55,410
But it's really the application of ideas that we'll dive into today
但实际上，这是我们将今天深入研究的想法的应用，

235
00:12:55,410 --> 00:12:57,380
and we'll finish some weeks from now, that you
我们将在几周后结束，你

236
00:12:57,380 --> 00:13:01,880
can apply to problems from this field or most any other, but in a computational,
可以应用于这个领域或大多数其他领域的问题，但以计算的方式，

237
00:13:01,880 --> 00:13:04,770
that is, a very methodical, very careful way.
也就是说，一种非常有条理，非常谨慎的方式。

238
00:13:04,770 --> 00:13:07,520
And that's what CS really did for me and does for a lot of people.
这就是 CS 真的为我做了，也为许多人做了的事情。

239
00:13:07,520 --> 00:13:09,740
It helps clean up your thought processes.
它有助于理清你的思维过程。

240
00:13:09,740 --> 00:13:12,560
Even if you go off into the real world and do nothing in tech,
即使你走进了现实世界，在科技领域什么也不做，

241
00:13:12,560 --> 00:13:14,840
you have an ability, after classes like this,
经过像这样的课程之后，你具备了一种能力，

242
00:13:14,840 --> 00:13:18,020
to express yourself a little more correctly, more
更准确地表达自己，更

243
00:13:18,020 --> 00:13:20,660
precisely and, generally, having better command
精确地，总的来说，拥有更好的命令

244
00:13:20,660 --> 00:13:22,980
of your own ideas and your language.
用你自己的想法和语言。

245
00:13:22,980 --> 00:13:24,410
So what's problem solving?
那么，什么是解决问题呢？

246
00:13:24,410 --> 00:13:25,790
Let me propose that this is it.
我想说，这就是它。

247
00:13:25,790 --> 00:13:29,270
This is as simple as we can make today's goals and the semester's goals.
这就是我们今天和本学期目标的最简化形式。

248
00:13:29,270 --> 00:13:30,960
Problems to be solved look like this.
待解决的问题是这样的。

249
00:13:30,960 --> 00:13:32,960
You've got some input, the problem to be solved.
你需要一些输入，也就是要解决的问题。

250
00:13:32,960 --> 00:13:35,750
You've got a goal being the output, like the solution there, too.
你有一个目标作为输出，比如那里的解决方案。

251
00:13:35,750 --> 00:13:38,000
And then somewhere in the middle is the secret sauce,
然后在中间某个地方是秘诀，

252
00:13:38,000 --> 00:13:40,375
where we'll spend the next several weeks figuring out how
我们将用接下来的几周时间弄清楚如何

253
00:13:40,375 --> 00:13:42,350
we can convert these inputs to outputs.
将这些输入转换为输出。

254
00:13:42,350 --> 00:13:44,870
But before we can do that, we all just have
但在我们开始之前，我们都需要

255
00:13:44,870 --> 00:13:48,260
to agree on how to represent these inputs and outputs,
就如何表示这些输入和输出达成一致，

256
00:13:48,260 --> 00:13:51,260
whether it's with English or, really, any type of language.
无论是用英语还是任何类型的语言。

257
00:13:51,260 --> 00:13:54,290
But, as I spoiled earlier, you probably came in here already
但是，正如我之前所透露的，你可能已经带着

258
00:13:54,290 --> 00:13:56,900
with a general sense that, yeah, computers somehow
一种普遍的认知走进了这里，没错，计算机以某种方式

259
00:13:56,900 --> 00:14:00,823
only speak or know 0's and 1's, the so-called binary system.
只说或知道 0 和 1，也就是所谓的二进制系统。

260
00:14:00,823 --> 00:14:02,990
But that's just one way of representing information.
但这只是表示信息的一种方式。

261
00:14:02,990 --> 00:14:05,150
Even simpler than binary is unary.
比二进制更简单的就是一元。

262
00:14:05,150 --> 00:14:10,670
So if you've ever, at this age or any prior age, counted on your fingers,
所以如果你曾经，在这个年龄或更早的年龄，用手指计数，

263
00:14:10,670 --> 00:14:14,480
this is unary notation, whereby each of your digits, your fingers
这就是一元记数法，其中你的每个数字，你的手指

264
00:14:14,480 --> 00:14:17,000
literally represent some piece of information;
字面意思上代表了一些信息；

265
00:14:17,000 --> 00:14:19,760
taking attendance, like 1, 2, 3, 4, 5.
点名，比如 1、2、3、4、5。

266
00:14:19,760 --> 00:14:25,800
But on your one human hand, how high can you count in this unary notation?
但是，用你的一只手，你能用这种一元记数法数到多高呢？

267
00:14:25,800 --> 00:14:26,505
AUDIENCE: Five.
观众：五。

268
00:14:26,505 --> 00:14:27,130
AUDIENCE: Five.
观众：五。

269
00:14:27,130 --> 00:14:29,550
DAVID J. MALAN: Five, I'm hearing five.
大卫·J·马兰：五，我听到的是五。

270
00:14:29,550 --> 00:14:31,890
Six, I heard one six.
六，我听到一个六。

271
00:14:31,890 --> 00:14:35,610
But I'm going to go further and say the answer, if you're clever about it,
但我要更进一步说，如果你足够聪明，答案实际上是——

272
00:14:35,610 --> 00:14:36,500
is actually--
实际上——

273
00:14:36,500 --> 00:14:37,132
AUDIENCE: 40?
观众：40？

274
00:14:37,132 --> 00:14:38,340
DAVID J. MALAN: Not quite 40.
大卫·J·马兰：还没到 40。

275
00:14:38,340 --> 00:14:39,660
You overbid, but--
你出价过高了，但是——

276
00:14:39,660 --> 00:14:40,500
AUDIENCE: 31.
观众：31。

277
00:14:40,500 --> 00:14:43,885
DAVID J. MALAN: 31 is as high as I can actually count.
大卫·J·马兰：31 是我能数到的最大数字。

278
00:14:43,885 --> 00:14:46,260
And that's because if I actually-- and if you're thinking
这是因为如果我实际上—— 如果你在想

279
00:14:46,260 --> 00:14:49,530
this is weirdly painful now, it will be, but this
现在这有点奇怪地让人痛苦，但它确实如此，但这是

280
00:14:49,530 --> 00:14:51,600
is my hand representing the number 0.
我的手代表数字 0。

281
00:14:51,600 --> 00:14:55,980
Normally, in unary, this is 1, 2, 3, 4, 5, of course, obviously.
通常，在一元记数法中，这是 1、2、3、4、5，当然，很明显。

282
00:14:55,980 --> 00:14:58,290
But what if I take into account the order in which I'm
但如果我考虑一下我

283
00:14:58,290 --> 00:14:59,590
putting my fingers up and down?
上下举起手指的顺序呢？

284
00:14:59,590 --> 00:15:00,840
So maybe this is still 0.
所以也许这仍然是 0。

285
00:15:00,840 --> 00:15:02,490
Maybe this is still 1.
也许这仍然是 1。

286
00:15:02,490 --> 00:15:07,410
But maybe this is now 2, where it's just the single second finger up,
但也许现在是 2，只是第二根手指单独伸起来，

287
00:15:07,410 --> 00:15:08,940
not two of them, total.
而不是两根手指都伸起来。

288
00:15:08,940 --> 00:15:10,860
Maybe this is now 3.
也许现在是 3。

289
00:15:10,860 --> 00:15:14,730
Maybe this is now-- often offensive, with just the middle finger up.
也许现在是—— 经常让人反感，只伸出中指。

290
00:15:14,730 --> 00:15:17,250
This is now [LAUGHS] 5.
现在是 [笑声] 5。

291
00:15:17,250 --> 00:15:19,260
This is now 6.
现在是 6。

292
00:15:19,260 --> 00:15:21,160
This is now 7.
现在是 7。

293
00:15:21,160 --> 00:15:24,010
And my hand just hurts too much if I try to count higher than seven.
如果我尝试数到七以上，我的手就太痛了。

294
00:15:24,010 --> 00:15:27,640
But, theoretically, because each of my fingers can be down or up
但是，理论上，因为我的每根手指可以伸起来或放下去

295
00:15:27,640 --> 00:15:32,230
and I've got five of them, that's actually 32 possible permutations,
而我有五根手指，所以实际上有 32 种可能的排列组合，

296
00:15:32,230 --> 00:15:32,890
up and down.
上下伸起来。

297
00:15:32,890 --> 00:15:33,640
But wait a minute.
等等。

298
00:15:33,640 --> 00:15:36,130
We said, 31, but if you start at 0.
我们说的是 31，但如果你从 0 开始。

299
00:15:36,130 --> 00:15:38,735
You have to subtract 1 from the biggest possible value.
你必须从最大的可能值中减去 1。

300
00:15:38,735 --> 00:15:41,860
So this is to say you and I have been using unary because it's just simple,
所以，也就是说，你和我一直在使用一元记数法，因为它很简单，

301
00:15:41,860 --> 00:15:43,100
and it gets the job done.
而且它可以完成工作。

302
00:15:43,100 --> 00:15:46,750
But if we just think about representation a little more cleverly,
但如果我们更巧妙地思考一下表示方式，

303
00:15:46,750 --> 00:15:50,410
we can do exactly what computers do, using not what mathematicians call
我们就可以做计算机做的事情了，使用的不像数学家所说的

304
00:15:50,410 --> 00:15:54,460
"base-1," where the finger is either there or it's not, but base-2.
“一进制”，手指要么在那里，要么不在那里，而是二进制。

305
00:15:54,460 --> 00:15:58,390
And in base-2, we just need two digits at our disposal.
在二进制中，我们只需要两个数字。

306
00:15:58,390 --> 00:16:02,720
And we could call these digits 1 and 2, A and B, black or white.
我们可以把这些数字称为 1 和 2、A 和 B、黑或白。

307
00:16:02,720 --> 00:16:06,370
We just need two words to describe two pieces of information.
我们只需要两个词来描述两条信息。

308
00:16:06,370 --> 00:16:07,600
Computers keep it simple.
计算机保持简单。

309
00:16:07,600 --> 00:16:10,960
And just like we humans start counting 0, 1, 2, 3 on up,
就像我们人类从 0, 1, 2, 3 开始计数一样，

310
00:16:10,960 --> 00:16:14,230
computers use 0 and 1, and that's it.
计算机使用 0 和 1，仅此而已。

311
00:16:14,230 --> 00:16:15,710
But that's by convention.
但这只是约定俗成。

312
00:16:15,710 --> 00:16:16,940
But why do they do that?
但为什么他们这样做呢？

313
00:16:16,940 --> 00:16:21,930
Well, it turns out, when you use base-2, otherwise known as binary, well,
事实证明，当你使用二进制（也称为二进制）时，

314
00:16:21,930 --> 00:16:24,030
it just maps really readily to the real world.
它很容易映射到现实世界。

315
00:16:24,030 --> 00:16:25,947
Because, at the end of the day, what do we all
因为，归根结底，我们所有人

316
00:16:25,947 --> 00:16:28,740
do, if you've got a laptop, or a phone, or any device?
都做什么，如果你有笔记本电脑、手机或任何设备？

317
00:16:28,740 --> 00:16:32,310
You plug it into the wall because it needs electricity at some point.
你把它插到墙上，因为它在某个时候需要电。

318
00:16:32,310 --> 00:16:35,820
And what if you have electricity or not?
如果有或没有电会怎么样？

319
00:16:35,820 --> 00:16:38,190
Well, there's your two possible values.
那么，这就是你的两个可能值。

320
00:16:38,190 --> 00:16:39,910
Either it's there, or it's not.
要么它在那里，要么它不在那里。

321
00:16:39,910 --> 00:16:42,000
And because computers are electrical devices,
而且因为计算机是电子设备，

322
00:16:42,000 --> 00:16:43,675
this is why binary is just useful.
这就是二进制如此实用的原因。

323
00:16:43,675 --> 00:16:44,550
It's nice and simple.
它简单明了。

324
00:16:44,550 --> 00:16:46,920
Either electricity is there, or it's not.
要么有电，要么没有电。

325
00:16:46,920 --> 00:16:48,810
So when you plug this device in and you've
所以当你把这个设备插上，并且你

326
00:16:48,810 --> 00:16:51,060
got all these electrons or whatever flowing, maybe
有所有这些电子或任何流动的东西，也许

327
00:16:51,060 --> 00:16:53,250
if we just hang on to some of that electricity,
如果我们只是保存一些电能，

328
00:16:53,250 --> 00:16:55,230
we can represent what we'll call a 1.
我们可以用 1 来表示。

329
00:16:55,230 --> 00:16:58,470
And maybe if we let it dissipate or go away, that's a 0.
也许如果我们让它消散或消失，那就是 0。

330
00:16:58,470 --> 00:17:02,760
So on and off maps very readily to this idea of just 0's and 1's.
所以开和关很容易映射到这种只有 0 和 1 的想法。

331
00:17:02,760 --> 00:17:06,750
And if you've ever thought of this, now, as binary digits--
如果你曾经想到过，现在，作为二进制数字 -

332
00:17:06,750 --> 00:17:10,380
"bi" implying 2, 0 and 1-- well, if you've ever heard this term now,
“bi” 表示 2，0 和 1 - 如果你曾经听说过这个词，现在，

333
00:17:10,380 --> 00:17:12,690
"bit," it just means binary digit.
“bit”，它仅仅意味着二进制数字。

334
00:17:12,690 --> 00:17:14,688
A single bit is just a 0 or 1.
一个单独的位只是一个 0 或 1。

335
00:17:14,688 --> 00:17:16,980
But we could have called these things anything we want.
但我们本来可以随便给这些东西命名。

336
00:17:16,980 --> 00:17:20,069
Now how does this map to be clear to the real world?
现在这如何映射到现实世界中才能变得清晰？

337
00:17:20,069 --> 00:17:23,470
Well, we can't see the tiny little switches inside of our Macs,
好吧，我们无法看到我们 Mac 内部那些微小的开关，

338
00:17:23,470 --> 00:17:26,140
PCs, and our phones that are actually turning the electricity on
PC 和手机，它们实际上是打开电源

339
00:17:26,140 --> 00:17:28,480
or off, storing electricity or not.
还是关闭，存储或不存储电能。

340
00:17:28,480 --> 00:17:29,920
But they're called transistors.
但它们被称为晶体管。

341
00:17:29,920 --> 00:17:32,470
They've got millions of them in today's hardware.
在今天的硬件中，它们有数百万个。

342
00:17:32,470 --> 00:17:35,317
And they're just on or off, like a switch or a light bulb.
它们只是开或关，就像开关或灯泡一样。

343
00:17:35,317 --> 00:17:37,150
So, for instance, if there's no electricity,
例如，如果没有电，

344
00:17:37,150 --> 00:17:40,690
the switch is off, we would call this, by convention, a 0.
开关关闭，按照惯例，我们将其称为 0。

345
00:17:40,690 --> 00:17:45,160
If, though, you throw the switch and it actually turns on, we would call this--
但是，如果你按下开关，它实际上打开了，我们会称之为 -

346
00:17:45,160 --> 00:17:45,940
AUDIENCE: On.
观众：开。

347
00:17:45,940 --> 00:17:47,607
DAVID J. MALAN: --an "on," exactly, a 1.
戴维·J·马兰：- 一个“开”，没错，一个 1。

348
00:17:47,607 --> 00:17:48,690
We could have reversed it.
我们本可以颠倒过来。

349
00:17:48,690 --> 00:17:51,160
But this is just the way the world decided to standardize.
但这仅仅是世界决定标准化的方式。

350
00:17:51,160 --> 00:17:51,910
And that's it.
就是这样。

351
00:17:51,910 --> 00:17:55,780
So you've either got something on or off, a 1 or a 0.
所以，要么打开，要么关闭，要么是 1，要么是 0。

352
00:17:55,780 --> 00:18:00,020
And this, then, is this thing we know now as a binary digit or a bit.
然后，这就是我们现在所知的二进制数字或位。

353
00:18:00,020 --> 00:18:04,490
So once we've got these values, what about how--
所以，一旦我们有了这些值，那么如何 -

354
00:18:04,490 --> 00:18:07,090
how can we go about, perhaps, representing things?
我们如何才能做到，也许，表示事物？

355
00:18:07,090 --> 00:18:08,060
Well, you know what?
好吧，你知道吗？

356
00:18:08,060 --> 00:18:10,352
It turns out we've got a lot of light bulbs right here.
事实证明，我们这里有很多灯泡。

357
00:18:10,352 --> 00:18:11,260
Let me grab-- thanks.
让我拿一下 - 谢谢。

358
00:18:11,260 --> 00:18:12,010
Excuse me, spot.
打扰一下，这个地方。

359
00:18:12,010 --> 00:18:16,540
Let me grab the little music stand here.
让我拿一下这里的小型乐谱架。

360
00:18:16,540 --> 00:18:18,610
Let me borrow a couple of these bulbs and see
让我借几个这些灯泡，看看

361
00:18:18,610 --> 00:18:22,310
if we can't make clearer than my hand, alone, what's going on here.
是否能比我的手更清楚地解释这里发生了什么。

362
00:18:22,310 --> 00:18:24,970
So I'm going to go ahead and grab two of these.
所以我要去拿两个。

363
00:18:24,970 --> 00:18:26,670
And I'll just put them here.
我把它放在这里。

364
00:18:26,670 --> 00:18:28,420
And I can turn these things on or off now.
现在我可以打开或关闭这些东西。

365
00:18:28,420 --> 00:18:32,560
So if I've got two bits, two switches, two transistors, if you will, well,
所以如果我有两个位，两个开关，两个晶体管，如果你愿意，那么，

366
00:18:32,560 --> 00:18:38,660
if I go ahead and turn on this one, I'm representing what number in binary,
如果我继续打开这个，我用二进制表示的是什么数字，

367
00:18:38,660 --> 00:18:39,160
perhaps?
也许？

368
00:18:39,160 --> 00:18:39,880
AUDIENCE: 1.
观众：1。

369
00:18:39,880 --> 00:18:41,200
DAVID J. MALAN: So just 1.
戴维·J·马兰：所以是 1。

370
00:18:41,200 --> 00:18:45,130
Now, if I'm using unary, I would turn this one on and be done with it.
现在，如果我使用一元制，我会打开这个灯，就完成了。

371
00:18:45,130 --> 00:18:46,980
And that's 2, but not in binary.
那就是2，但不是二进制。

372
00:18:46,980 --> 00:18:51,350
Binary, it's the permutations, which ones are on and off, that matters.
二进制，重要的是排列组合，哪些灯是开着，哪些灯是关着。

373
00:18:51,350 --> 00:18:53,790
So what, now, am I representing here, perhaps?
那么，我现在可能在这里表示什么呢？

374
00:18:53,790 --> 00:18:54,370
AUDIENCE: 2.
观众：2。

375
00:18:54,370 --> 00:18:55,120
DAVID J. MALAN: 2.
戴维·J·马兰：2。

376
00:18:55,120 --> 00:18:58,210
So this is when I put my single pointer finger up.
所以这是我举起一根食指的时候。

377
00:18:58,210 --> 00:19:00,430
But then when I did this, in my human hand,
但当我用我的手这样做的时候，

378
00:19:00,430 --> 00:19:03,310
this was like representing the number 3.
这就像代表数字3。

379
00:19:03,310 --> 00:19:06,640
How do I represent the number 4.
我怎样才能表示数字4呢？

380
00:19:06,640 --> 00:19:11,000
Yeah, I need another light bulb, so I need more hardware, so to speak.
是的，我需要另一个灯泡，也就是说我需要更多的硬件。

381
00:19:11,000 --> 00:19:13,000
So if I turn--
所以如果我打开--

382
00:19:13,000 --> 00:19:19,180
if I leave this one-- if I turn this one on, this one off, this one off,
如果我保留这个-- 如果我打开这个，关闭这个，关闭这个，

383
00:19:19,180 --> 00:19:21,380
now I have the number 4.
现在我得到了数字4。

384
00:19:21,380 --> 00:19:24,593
And someone tell me, saying the words "on"
有人告诉我，说“开”

385
00:19:24,593 --> 00:19:26,510
and "on" and "on," or "on," or "off," or "on,"
和“开”和“开”，或者“开”，或者“关”，或者“开”，

386
00:19:26,510 --> 00:19:28,850
using combinations of "on," "off" and-- "on"
使用“开”，“关”和“开”的组合

387
00:19:28,850 --> 00:19:32,832
and "off," how do I represent 5, from your left to your right?
和“关”，我如何从左到右表示5？

388
00:19:32,832 --> 00:19:33,665
How about over here?
这边怎么样？

389
00:19:33,665 --> 00:19:34,880
AUDIENCE: On, off, on.
观众：开，关，开。

390
00:19:34,880 --> 00:19:36,620
DAVID J. MALAN: "On, off, on," I heard.
戴维·J·马兰：我听到了“开，关，开”。

391
00:19:36,620 --> 00:19:38,480
And that's exactly right.
完全正确。

392
00:19:38,480 --> 00:19:41,085
And how do I represent, maybe, 6?
我如何表示，也许是6？

393
00:19:41,085 --> 00:19:41,585
Over here?
这边呢？

394
00:19:41,585 --> 00:19:43,010
AUDIENCE: Off, on, on.
观众：关，开，开。

395
00:19:43,010 --> 00:19:45,080
DAVID J. MALAN: Off, on, on, not quite.
戴维·J·马兰：关，开，开，不太对。

396
00:19:45,080 --> 00:19:45,995
From left to right?
从左到右？

397
00:19:45,995 --> 00:19:47,390
AUDIENCE: Off-- the other way.
观众：关-- 另一种方式。

398
00:19:47,390 --> 00:19:47,620
DAVID J. MALAN: The--
戴维·J·马兰：那--

399
00:19:47,620 --> 00:19:49,290
[LAUGHS] OK, so from right to left.
[笑] 好吧，从右到左。

400
00:19:49,290 --> 00:19:50,960
So I think we leave this one on.
我认为我们应该保留这个灯开着。

401
00:19:50,960 --> 00:19:58,760
This one, I'm going to claim, represents, now, 6 and 7.
我想说，这个现在代表了6和7。

402
00:19:58,760 --> 00:19:59,570
AUDIENCE: On, off.
观众：开，关。

403
00:19:59,570 --> 00:20:02,300
DAVID J. MALAN: I'm just going to-- it's actually going to be "on, on, on."
戴维·J·马兰：我只是-- 实际上应该是“开，开，开”。

404
00:20:02,300 --> 00:20:04,737
Now, if you're wondering, where are these people coming up
现在，如果你想知道，这些组合是怎么来的

405
00:20:04,737 --> 00:20:07,070
with these combinations, there's actually a system here.
这些组合其实是有规律的。

406
00:20:07,070 --> 00:20:09,770
It's actually hard for me to do it backwards.
对我来说，反过来做其实很难。

407
00:20:09,770 --> 00:20:14,202
But it turns out there's actually a system that's not all that unfamiliar.
但事实证明，其实有一个我们并不陌生的系统。

408
00:20:14,202 --> 00:20:15,410
In fact, let me propose this.
事实上，让我提出这个建议。

409
00:20:15,410 --> 00:20:18,770
Let me propose that we consider what you and I all
我想建议我们考虑一下你和我都

410
00:20:18,770 --> 00:20:23,100
learned in grade school, which was something like the base-10 system, 10
在小学学过的东西，比如十进制系统，10

411
00:20:23,100 --> 00:20:25,770
meaning that you use 10 different digits, not two, 10.
意思是使用10个不同的数字，不是两个，而是10个。

412
00:20:25,770 --> 00:20:30,300
So 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, that's the base-10 system, otherwise known
所以0, 1, 2, 3, 4, 5, 6, 7, 8, 9，那就是十进制系统，也叫

413
00:20:30,300 --> 00:20:32,370
as decimal, "dec" implying 10.
十进制， “dec” 代表 10。

414
00:20:32,370 --> 00:20:34,140
So that's what you and I use every day.
所以这就是我们每天使用的东西。

415
00:20:34,140 --> 00:20:37,140
Well, let's think about how we represent numbers in decimal,
好吧，让我们思考一下我们如何在十进制中表示数字，

416
00:20:37,140 --> 00:20:38,430
in the normal human way.
用正常的人类方式。

417
00:20:38,430 --> 00:20:39,520
Well, here is a number.
好吧，这是一个数字。

418
00:20:39,520 --> 00:20:41,380
It's what number, of course?
当然，它是什么数字？

419
00:20:41,380 --> 00:20:42,180
AUDIENCE: 123.
观众：123。

420
00:20:42,180 --> 00:20:43,542
DAVID J. MALAN: 123.
戴维·J·马兰：123。

421
00:20:43,542 --> 00:20:45,750
So we all just have an intuition for that, obviously.
所以我们对此都有直觉，很明显。

422
00:20:45,750 --> 00:20:48,420
But it's not necessarily 123.
但它不一定是123。

423
00:20:48,420 --> 00:20:51,640
You're just assigning meaning to the positions of these digits.
你只是在给这些数字的位置赋予意义。

424
00:20:51,640 --> 00:20:54,030
This is really the pattern 1-2-3.
这实际上是1-2-3的模式。

425
00:20:54,030 --> 00:20:57,390
But you immediately jump, mathematically, to 123, but why?
但你在数学上立即跳到123，为什么呢？

426
00:20:57,390 --> 00:21:00,390
Well, odds are, in grade school, you learned that the rightmost digit is
好吧，很有可能，你在小学的时候学到的是最右边的数字是

427
00:21:00,390 --> 00:21:02,160
the ones place or the ones column.
个位数或个位数列。

428
00:21:02,160 --> 00:21:04,800
This is the tens place or the tens column.
这是十位数或十位数列。

429
00:21:04,800 --> 00:21:06,490
This is the hundreds place.
这是百位数。

430
00:21:06,490 --> 00:21:08,230
And so why is this relevant?
那么，这有什么意义呢？

431
00:21:08,230 --> 00:21:11,190
Well, this is like doing 100 times 1 plus 10 times
好吧，这就像做100乘以1再加上10乘以

432
00:21:11,190 --> 00:21:16,410
2 plus 1 times 3 or, if we multiply that out, 100 plus 20 plus 3,
2再加上1乘以3，或者，如果我们把它们乘出来，就是100加20加3，

433
00:21:16,410 --> 00:21:21,240
ergo, the number, now, that we just take for granted is 123.
因此，现在我们理所当然认为的数字是123。

434
00:21:21,240 --> 00:21:24,240
But that's in base-10, the so-called decimal system,
但那是十进制，即所谓的十进制系统，

435
00:21:24,240 --> 00:21:27,930
whereby each of these digits is in a different column.
其中每个数字都位于不同的列中。

436
00:21:27,930 --> 00:21:31,080
And those columns are, again, ones place, tens, hundreds.
这些列又是各位、十位、百位。

437
00:21:31,080 --> 00:21:33,790
If we keep going, thousand, ten thousand, and so forth.
如果我们继续下去，千位、万位等等。

438
00:21:33,790 --> 00:21:35,040
But where did these come from?
但这些是从哪里来的？

439
00:21:35,040 --> 00:21:35,957
Well, here's the base.
这是基数。

440
00:21:35,957 --> 00:21:37,770
If you remember exponents and all of that,
如果你还记得指数等等，

441
00:21:37,770 --> 00:21:41,910
this is just 10 to the 0, 10 to the 1, 10 to the 2, ad infinitum.
这仅仅是 10 的 0 次方、10 的 1 次方、10 的 2 次方，无限地。

442
00:21:41,910 --> 00:21:46,860
And so, now, what if we just changed the base from 10, 0 through 9,
所以，现在，如果我们只是将基数从 10，即 0 到 9，

443
00:21:46,860 --> 00:21:48,480
to just two digits, 0 and 1?
改为只有两个数字，0 和 1？

444
00:21:48,480 --> 00:21:50,610
Well, now the math is fundamentally the same.
现在，数学本质上是一样的。

445
00:21:50,610 --> 00:21:52,880
But it's 2 to the 0, 2 to the 1, 2 to the 2,
但它是 2 的 0 次方、2 的 1 次方、2 的 2 次方，

446
00:21:52,880 --> 00:21:57,030
which gives us the ones place, twos place, and fours place.
这给了我们各位、二位和四位。

447
00:21:57,030 --> 00:21:58,410
Now, why is this relevant?
现在，这为什么重要呢？

448
00:21:58,410 --> 00:22:02,790
If you've got three light bulbs or three bits that are off, off, off,
如果你有三个灯泡或三个位是关的，关的，关的，

449
00:22:02,790 --> 00:22:03,930
what have I done?
我做了什么？

450
00:22:03,930 --> 00:22:07,710
4 times 0 plus 2 times 0 plus 1 times 0 is, obviously, the number
4 乘以 0 加 2 乘以 0 加 1 乘以 0，显然，这个数字

451
00:22:07,710 --> 00:22:09,990
you and I know, in decimal, as 0.
你我用十进制表示为 0。

452
00:22:09,990 --> 00:22:12,630
This, though, represents the number you and I know as--
不过，这代表了我们所知道的数字——

453
00:22:12,630 --> 00:22:13,230
AUDIENCE: 1
观众：1

454
00:22:13,230 --> 00:22:14,605
DAVID J. MALAN: This represents--
大卫·J·马兰：这代表——

455
00:22:14,605 --> 00:22:15,195
AUDIENCE: 2.
观众：2。

456
00:22:15,195 --> 00:22:17,910
DAVID J. MALAN: --3, 4.
大卫·J·马兰：——3，4。

457
00:22:17,910 --> 00:22:21,540
And just to be clear, this is why, when I grabbed the additional light bulb,
说清楚点，这就是为什么当我拿起额外的灯泡时，

458
00:22:21,540 --> 00:22:25,170
we claimed that this now was 4.
我们声称现在是 4。

459
00:22:25,170 --> 00:22:29,430
Because we had "on, off, off," "on, off, off."
因为我们有“开，关，关”，“开，关，关”。

460
00:22:29,430 --> 00:22:30,960
This now is 5.
现在是 5。

461
00:22:30,960 --> 00:22:32,190
This now is 6.
现在是 6。

462
00:22:32,190 --> 00:22:33,240
This now is 7.
现在是 7。

463
00:22:33,240 --> 00:22:36,480
And if I wanted to count higher, what would the pattern of 0's and 1's be
如果我想数到更大的数字，0 和 1 的模式是什么

464
00:22:36,480 --> 00:22:37,478
for the number 8?
对于数字 8？

465
00:22:37,478 --> 00:22:38,942
AUDIENCE: 1, 0--
观众：1，0——

466
00:22:38,942 --> 00:22:40,410
DAVID J. MALAN: 1, 0, 0, 0.
大卫·J·马兰：1，0，0，0。

467
00:22:40,410 --> 00:22:42,330
So we just need more hardware, more bits.
所以我们只需要更多的硬件，更多的位。

468
00:22:42,330 --> 00:22:45,630
So it wasn't arbitrary, even if it was non-obvious,
所以这并不随意，即使它并不明显，

469
00:22:45,630 --> 00:22:49,660
what I was actually doing with turning these light bulbs on and off.
我实际上在做的是开灯泡和关灯泡。

470
00:22:49,660 --> 00:22:53,730
Now, it turns out here we are talking about how to represent information,
现在，事实证明，我们在这里谈论如何表示信息，

471
00:22:53,730 --> 00:22:59,490
like numbers, but we could also use bits, 0's and 1's, light bulbs
比如数字，但我们也可以用位，0 和 1，灯泡

472
00:22:59,490 --> 00:23:01,590
to represent instructions, as well.
来表示指令。

473
00:23:01,590 --> 00:23:04,050
Because, at the end of the day, that's all computers do.
因为，归根结底，计算机做的就是这些。

474
00:23:04,050 --> 00:23:07,950
They process data, information of some sort, whether it's files,
它们处理数据，某种信息，无论是文件，

475
00:23:07,950 --> 00:23:10,290
or numbers, or images, or videos, or the like.
还是数字，还是图像，还是视频，或者类似的东西。

476
00:23:10,290 --> 00:23:13,290
And you do things with those files.
你用这些文件做一些事情。

477
00:23:13,290 --> 00:23:13,985
You open them.
你打开它们。

478
00:23:13,985 --> 00:23:14,610
You print them.
你打印它们。

479
00:23:14,610 --> 00:23:15,610
You edit them and the like.
你编辑它们等等。

480
00:23:15,610 --> 00:23:18,720
So there's this notion of instructions, what the computer can actually do.
所以，有一种指令的概念，即计算机实际上可以做什么。

481
00:23:18,720 --> 00:23:22,470
And I bet we could come up with some pattern of 0's and 1's
我敢打赌，我们可以想出一个 0 和 1 的模式

482
00:23:22,470 --> 00:23:26,970
or, equivalently, light bulbs that tell even Spot what to do.
或者，等效地，灯泡，甚至告诉 Spot 该做什么。

483
00:23:26,970 --> 00:23:30,785
Maybe, go up, or down, or left, or right.
也许，向上，向下，向左，向右。

484
00:23:30,785 --> 00:23:33,660
And it could certainly do this autonomously by using various sensors.
它当然可以通过使用各种传感器自动完成这些操作。

485
00:23:33,660 --> 00:23:35,077
We need to keep things safe today.
今天我们需要确保安全。

486
00:23:35,077 --> 00:23:38,248
We're using Wi-Fi in sending Spot these very instructions.
我们使用 Wi-Fi 向 Spot 发送这些指令。

487
00:23:38,248 --> 00:23:41,040
But what's happening, wirelessly, with our friend Andrew, here, is,
但无线发生的事情是，我们朋友安德鲁在这里，

488
00:23:41,040 --> 00:23:45,330
essentially, he's sending Spot instructions just encoded, wirelessly,
本质上，他正在无线地向 Spot 发送指令，只是编码了，

489
00:23:45,330 --> 00:23:47,610
somehow, as patterns of 0's and 1's.
以某种方式，作为 0 和 1 的模式。

490
00:23:47,610 --> 00:23:51,390
And the folks at Boston Dynamics, who built this robot, programmed
而波士顿动力公司的员工，他们制造了这个机器人，编程了

491
00:23:51,390 --> 00:23:54,330
Spot to recognize certain patterns as meaning "up,"
Spot 来识别某些模式，表示“向上”，

492
00:23:54,330 --> 00:23:57,030
a certain pattern as meaning "down," "left," "right,"
某个模式表示“向下”，“向左”，“向右”，

493
00:23:57,030 --> 00:23:58,505
and any number of other things.
以及任何其他数量的事情。

494
00:23:58,505 --> 00:24:00,630
So, in fact, Spot, come on over here, if you could.
所以，实际上，Spot，如果你能过来的话。

495
00:24:00,630 --> 00:24:01,830
Come on, Spot.
来吧，Spot。

496
00:24:01,830 --> 00:24:03,510
[FOOTSTEPS]
[脚步声]

497
00:24:03,510 --> 00:24:05,640
OK.
好的。

498
00:24:05,640 --> 00:24:08,400
So Spot, for instance, may very well have a pattern
所以 Spot，例如，可能很可能有一个模式

499
00:24:08,400 --> 00:24:11,190
of 0's and 1's that represents shake.
0和1的组合代表摇动。

500
00:24:11,190 --> 00:24:12,720
Shake, Spot.
摇动，斑点。

501
00:24:12,720 --> 00:24:16,330
So he could do that and any number of other movements, as well.
因此，它可以执行此动作，以及其他任何动作。

502
00:24:16,330 --> 00:24:19,680
And maybe, especially with sensors here and also a little human help over here,
也许，特别是在这里有传感器，以及这边的一点人工帮助，

503
00:24:19,680 --> 00:24:22,540
for today, what if we went ahead and did something-- maybe
今天，如果我们继续做些事情，也许

504
00:24:22,540 --> 00:24:23,870
ask Spot some questions?
问问斑点一些问题？

505
00:24:23,870 --> 00:24:25,660
So let's go ahead, and we'll start simple.
让我们继续，从简单的开始。

506
00:24:25,660 --> 00:24:31,150
Spot, here we have some bits, "off, off, on."
斑点，这里我们有一些比特，“关，关，开”。

507
00:24:31,150 --> 00:24:34,030
Spot, what [LAUGHS]-- OK.
斑点，这[笑]—— 好。

508
00:24:34,030 --> 00:24:41,260
Spot, what is this representing, "off, off, on"?
斑点，这代表什么，“关，关，开”？

509
00:24:41,260 --> 00:24:43,710
[SPOT TAPS STAGE]
[斑点敲击舞台]

510
00:24:43,710 --> 00:24:44,970
Correct?
正确吗？

511
00:24:44,970 --> 00:24:45,900
I think so.
我想是的。

512
00:24:45,900 --> 00:24:46,900
Very horse-like, OK.
非常像马，好的。

513
00:24:46,900 --> 00:24:47,400
Thank you.
谢谢。

514
00:24:47,400 --> 00:24:49,400
All right, so a round of applause for Spot here.
好了，所以来为斑点鼓掌。

515
00:24:49,400 --> 00:24:50,310
[APPLAUSE]
[鼓掌]

516
00:24:50,310 --> 00:24:51,450
All right.
好的。

517
00:24:51,450 --> 00:24:54,400
So, Spot, what if we [LAUGHS] turn--
所以，斑点，如果我们[笑]转——

518
00:24:54,400 --> 00:24:54,900
OK.
好的。

519
00:24:54,900 --> 00:24:56,160
We'll turn that one off here.
我们将把那个关掉。

520
00:24:56,160 --> 00:24:57,535
How about if we turn this one on?
如果我们把这个打开呢？

521
00:24:57,535 --> 00:24:59,280
So it's "off, on, off."
所以是“关，开，关”。

522
00:24:59,280 --> 00:25:02,470
Spot, what's this number?
斑点，这个数字是什么？

523
00:25:02,470 --> 00:25:04,310
[SPOT TAPPING STAGE]
[斑点敲击舞台]

524
00:25:04,310 --> 00:25:05,570
Is that correct?
正确吗？

525
00:25:05,570 --> 00:25:06,150
Nice.
不错。

526
00:25:06,150 --> 00:25:06,650
OK.
好的。

527
00:25:06,650 --> 00:25:07,655
[APPLAUSE]
[鼓掌]

528
00:25:07,655 --> 00:25:09,620
[LAUGHS] How about one final flourish?
[笑] 最后一个花招怎么样？

529
00:25:09,620 --> 00:25:12,440
How about, Spot, instead of "off, on, off,"
斑点，除了“关，开，关”，

530
00:25:12,440 --> 00:25:16,280
let's go ahead and do "off, on, on"?
我们继续做“关，开，开”？

531
00:25:16,280 --> 00:25:20,810
So think, in your mind's eye, what the answer should be.
所以，在你脑海里思考一下答案应该是多少。

532
00:25:20,810 --> 00:25:24,104
All right, Spot, "off, on, on."
好的，斑点，“关，开，开”。

533
00:25:24,104 --> 00:25:27,420
[SPOT LANDING ON THE STAGE]
[斑点落到舞台上]

534
00:25:27,920 --> 00:25:28,460
OK.
好的。

535
00:25:28,460 --> 00:25:30,830
And a round of applause for, Spot, as well.
为斑点也鼓掌。

536
00:25:30,830 --> 00:25:31,816
[LAUGHS]
[笑]

537
00:25:31,816 --> 00:25:33,790
[APPLAUSE]
[鼓掌]

538
00:25:33,790 --> 00:25:36,450
So this is to say, no matter how--
所以，这就是说，无论今天多么——

539
00:25:36,450 --> 00:25:37,140
thank you, Spot.
谢谢，斑点。

540
00:25:37,140 --> 00:25:40,620
No matter how fancy today's hardware or software is,
无论今天的硬件或软件多么花哨，

541
00:25:40,620 --> 00:25:42,720
it really just boils down to representing
它实际上只是归结为表示

542
00:25:42,720 --> 00:25:44,838
information and instructions.
信息和指令。

543
00:25:44,838 --> 00:25:47,130
And computers, and phones, and the like really are just
而电脑、手机等实际上只是

544
00:25:47,130 --> 00:25:51,460
operating on those same pieces of information,
操作这些相同的信息，

545
00:25:51,460 --> 00:25:55,240
whether implemented in 0's and 1's or with, really, anything else.
无论是用 0 和 1 实现，还是用其他任何东西。

546
00:25:55,240 --> 00:25:55,740
All right.
好的。

547
00:25:55,740 --> 00:25:59,880
So, where can we take this, once we have this agreed-upon system
所以，有了这种约定俗成的系统，我们能把它带到哪里？

548
00:25:59,880 --> 00:26:03,030
for representing [LAUGHS] information?
用来表示[笑]信息？

549
00:26:03,030 --> 00:26:06,960
Well, it turns out that using three bits, three 0's and 1's, at a time,
结果发现，一次使用三个比特，三个 0 和 1，

550
00:26:06,960 --> 00:26:08,700
isn't actually all that useful.
实际上并没有那么有用。

551
00:26:08,700 --> 00:26:12,240
And you and I, even in conversation, don't often say the word "bit."
你我，即使在交谈中，也不经常说“比特”这个词。

552
00:26:12,240 --> 00:26:13,500
We say the word "byte."
我们说“字节”这个词。

553
00:26:13,500 --> 00:26:15,280
And what is a byte, if familiar?
如果熟悉，什么是字节？

554
00:26:15,280 --> 00:26:15,780
Yeah?
是吧？

555
00:26:15,780 --> 00:26:16,750
AUDIENCE: It's eight bits.
观众：是八个比特。

556
00:26:16,750 --> 00:26:18,417
DAVID J. MALAN: So it's just eight bits.
DAVID J. MALAN：所以它只是八个比特。

557
00:26:18,417 --> 00:26:20,200
It's just a more useful unit of measure.
它只是个更实用的单位。

558
00:26:20,200 --> 00:26:22,715
And it happens to be a power of 2, 2 to the third,
它恰好是 2 的幂，2 的三次方，

559
00:26:22,715 --> 00:26:24,340
which just makes math work out cleanly.
这使得数学运算更简洁。

560
00:26:24,340 --> 00:26:27,610
But it's just a convention, to have more interesting units of measure
但这只是一个约定，为了拥有比单个比特更有趣的计量单位

561
00:26:27,610 --> 00:26:28,540
than individual bits.
而不是单个比特。

562
00:26:28,540 --> 00:26:30,350
So a byte is eight bits.
所以一个字节是八个比特。

563
00:26:30,350 --> 00:26:34,690
So, for instance, this represents, using eight bits, eight light bulbs,
例如，这个用八个比特，八个灯泡，

564
00:26:34,690 --> 00:26:36,460
the number you and I know is 0.
代表你我所知的数字 0。

565
00:26:36,460 --> 00:26:40,960
And this byte of all 1 bits--
而这个全是 1 的字节——

566
00:26:40,960 --> 00:26:46,040
now you've got to do some quick math-- represents what number, instead?
现在你需要进行一些简单的计算——它代表什么数字？

567
00:26:46,040 --> 00:26:48,657
So it's all 1's; eight of them, total.
所以都是 1；总共八个。

568
00:26:48,657 --> 00:26:49,990
How about over here, on the end?
这边怎么样，在最后？

569
00:26:49,990 --> 00:26:51,050
AUDIENCE: 255.
观众：255。

570
00:26:51,050 --> 00:26:52,992
DAVID J. MALAN: So it's, indeed, 255.
DAVID J. MALAN：所以确实是 255。

571
00:26:52,992 --> 00:26:54,700
Now, that's not the kind of math that you
现在，这不是你所知道的数学，

572
00:26:54,700 --> 00:26:57,310
need to do in your head for a class like this, but you could.
你需要在脑子里计算，不过你可以做到的。

573
00:26:57,310 --> 00:27:04,690
This is the ones place, twos, fours, eight, 16, 32, 64, 128.
这是个位数、两位数、四位数、八位数、十六位数、三十二位数、六十四位数、一百二十八位数。

574
00:27:04,690 --> 00:27:08,800
And because they're all 1, you just have to add up all of those columns' values.
因为它们都是 1，你只需要把所有这些列的值加起来。

575
00:27:08,800 --> 00:27:10,570
And you get 255.
然后你就得到 255。

576
00:27:10,570 --> 00:27:13,690
But a little mental trick, too, is that, if you've got eight bits
不过还有一个小的技巧是，如果你有八位

577
00:27:13,690 --> 00:27:17,270
and each of them can be two possible values, 0 or 1,
并且每个位可以是两种可能的取值，0 或 1，

578
00:27:17,270 --> 00:27:21,740
that's like 2 possibilities here times 2 times 2 times 2 times 2, eight times.
就好像这里有 2 种可能性乘以 2 乘以 2 乘以 2 乘以 2，八次。

579
00:27:21,740 --> 00:27:25,310
So that's 2 to the eighth, so that is maybe a little easier to do.
所以就是 2 的 8 次方，这样可能更容易计算。

580
00:27:25,310 --> 00:27:26,720
That's 256.
那就是 256。

581
00:27:26,720 --> 00:27:29,780
Or easier, in the sense that you get used to seeing these numbers in CS.
或者说更简单，因为在计算机科学中你会习惯看到这些数字。

582
00:27:29,780 --> 00:27:31,220
That's 256.
那就是 256。

583
00:27:31,220 --> 00:27:32,030
But wait a minute.
等等。

584
00:27:32,030 --> 00:27:35,300
How do I reconcile this with your 255?
我怎么把这和你说的 255 联系起来？

585
00:27:35,300 --> 00:27:36,650
Because you start at 0.
因为你是从 0 开始的。

586
00:27:36,650 --> 00:27:41,120
So you lose one on the high end because we started counting and representing
所以你在高位失去一个，因为我们从 0 开始计数和表示

587
00:27:41,120 --> 00:27:42,830
the number, like 0.
数字，比如 0。

588
00:27:42,830 --> 00:27:43,760
All right.
好的。

589
00:27:43,760 --> 00:27:47,570
Questions on how we've represented just numbers or, for instance,
对于我们如何表示数字，或者例如，

590
00:27:47,570 --> 00:27:51,600
instructions to Spot, thus far?
迄今为止对 Spot 的指令，有什么问题吗？

591
00:27:51,600 --> 00:27:57,410
Any questions on binary, unary, or the like?
关于二进制、一元或类似的东西，还有什么问题吗？

592
00:27:57,410 --> 00:27:58,010
No?
没有？

593
00:27:58,010 --> 00:28:01,137
All right, so seeing none, let's let things escalate a bit.
好的，既然没有问题，让我们稍微提升一下难度。

594
00:28:01,137 --> 00:28:03,470
So how do you represent letters because, obviously, this
那么如何表示字母，因为很明显，这个

595
00:28:03,470 --> 00:28:05,262
makes our devices more useful, whether it's
让我们的设备更加有用，无论是

596
00:28:05,262 --> 00:28:07,020
in English or any other human language.
英语还是其他任何人类语言。

597
00:28:07,020 --> 00:28:10,740
How could we go about representing the letter A, for instance?
例如，我们如何表示字母 A？

598
00:28:10,740 --> 00:28:13,370
If, at the end of the day, all our computers,
如果说到底，我们所有的计算机，

599
00:28:13,370 --> 00:28:17,390
all our phones have access to is electricity; or, equivalently,
我们所有的手机所能使用的只有电力；或者说等价地，

600
00:28:17,390 --> 00:28:20,570
switches; or, metaphorically, tiny little light bulbs
开关；或者说，比喻来说，里面的小灯泡

601
00:28:20,570 --> 00:28:23,750
inside of them that can be on and off-- that's it.
可以开和关，就这些。

602
00:28:23,750 --> 00:28:26,990
There's no more building blocks to give you.
没有其他构建模块了。

603
00:28:26,990 --> 00:28:30,530
How could we represent something like the letter A?
我们该如何表示字母 A？

604
00:28:30,530 --> 00:28:32,000
Yeah, how about here?
是的，这里呢？

605
00:28:32,000 --> 00:28:32,812
Yeah?
是吧？

606
00:28:32,812 --> 00:28:34,312
AUDIENCE: You could assign a number.
观众：你可以分配一个数字。

607
00:28:34,312 --> 00:28:35,343
DAVID J. MALAN: Perfect.
大卫·J·马兰：完美。

608
00:28:35,343 --> 00:28:37,260
So we could just assign every letter a number.
所以我们可以给每个字母分配一个数字。

609
00:28:37,260 --> 00:28:38,677
And we could do this super simply.
我们也可以非常简单地做到。

610
00:28:38,677 --> 00:28:42,660
Maybe 0 is A, and 1 is B. Or maybe 1 is A,
也许 0 是 A，1 是 B。或者也许 1 是 A，

611
00:28:42,660 --> 00:28:46,110
and 2 is B. It doesn't really matter, so long as we all agree and we all
2 是 B。这并不重要，只要我们都同意，我们都

612
00:28:46,110 --> 00:28:48,660
use the same types of computers, in some sense, ultimately.
使用相同类型的计算机，从某种意义上来说，最终。

613
00:28:48,660 --> 00:28:51,730
Well, for various reasons, the humans that designed this system,
嗯，由于种种原因，设计这个系统的人，

614
00:28:51,730 --> 00:28:53,160
they went with the number 65.
他们选择了数字 65。

615
00:28:53,160 --> 00:28:57,540
So, nowadays, anytime your computer is showing you the capital letter
所以，现在，每当你的计算机显示给你大写字母

616
00:28:57,540 --> 00:29:00,690
A on the screen, underneath the hood, so to speak,
A 在屏幕上，在引擎盖下面，可以这么说，

617
00:29:00,690 --> 00:29:06,780
it's actually storing a pattern of 0's and 1's that represents the number 65.
它实际上存储着一组 0 和 1 的模式，代表数字 65。

618
00:29:06,780 --> 00:29:09,930
And it tends to use seven bits or, typically, eight bits, total,
它倾向于使用七位，或者通常是八位，总共，

619
00:29:09,930 --> 00:29:12,790
even if it doesn't need all of those bits in total.
即使它不需要所有这些位。

620
00:29:12,790 --> 00:29:14,980
So how do we get there?
那么我们如何得到它？

621
00:29:14,980 --> 00:29:17,490
Well, here, for instance, is that same pattern.
嗯，这里，例如，是相同的模式。

622
00:29:17,490 --> 00:29:19,980
Here is that pattern of bits that represents 65.
这里就是代表数字 65 的位模式。

623
00:29:19,980 --> 00:29:20,520
And why?
为什么？

624
00:29:20,520 --> 00:29:22,200
Well, quick check here.
嗯，这里快速检查一下。

625
00:29:22,200 --> 00:29:29,160
This is the ones place, twos, fours, eights, 16, 32, 64's place.
这是个位数、两位数、四位数、八位数、十六位数、三十二位数、六十四位数。

626
00:29:29,160 --> 00:29:32,640
OK, so 64 plus 1 gives me 65.
好的，所以 64 加 1 等于 65。

627
00:29:32,640 --> 00:29:36,830
So that is to say here's how a computer, using some light switches, so to speak,
也就是说，计算机使用一些开关，可以这么说，

628
00:29:36,830 --> 00:29:38,620
would represent the number 65.
会表示数字 65。

629
00:29:38,620 --> 00:29:41,540
And our Macs, our PCs, our phones just all know this.
我们的 Mac、PC、手机都知道这一点。

630
00:29:41,540 --> 00:29:44,410
So whenever they see that in their memory, so to speak,
所以，每当它们在内存中看到它，可以这么说，

631
00:29:44,410 --> 00:29:47,560
they show a capital letter A on the screen.
它们就在屏幕上显示一个大写字母 A。

632
00:29:47,560 --> 00:29:48,520
So that's it.
就是这样。

633
00:29:48,520 --> 00:29:51,250
That's the system known as ASCII, the American Standard
这就是我们所说的 ASCII，美国标准

634
00:29:51,250 --> 00:29:52,840
Code for Information Interchange.
信息交换码。

635
00:29:52,840 --> 00:29:57,340
And the A is actually operative there because we're only talking, thus far,
而 A 实际上起作用，因为到目前为止，我们只谈论

636
00:29:57,340 --> 00:29:59,500
about English letters in our alphabet.
我们字母表中的英文字母。

637
00:29:59,500 --> 00:30:02,530
And, in fact, I claimed, a moment ago, that we only use
事实上，我刚才声称，我们只使用

638
00:30:02,530 --> 00:30:06,250
seven, maybe eight bits to represent letters of an alphabet.
七位，或者八位来表示字母。

639
00:30:06,250 --> 00:30:08,410
So, just to come back to you, if I may, how many
所以，如果可以，我再问你一次，我们能用

640
00:30:08,410 --> 00:30:10,900
possible letters of the alphabet could-- how
多少个字母来表示？

641
00:30:10,900 --> 00:30:14,350
many possible letters of any alphabet could we represent with eight bits?
用八位来表示任何字母表中的字母，我们能表示多少个字母？

642
00:30:14,350 --> 00:30:15,310
AUDIENCE: 256.
观众：256。

643
00:30:15,310 --> 00:30:18,400
DAVID J. MALAN: 256, the numbers 0 through 255.
大卫·马兰：256，从 0 到 255。

644
00:30:18,400 --> 00:30:20,650
Now, that's more than enough for English because we've
现在，这对于英语来说已经足够多了，因为我们有

645
00:30:20,650 --> 00:30:23,498
got A through Z, uppercase, lowercase, a bunch of numbers,
从 A 到 Z，大写，小写，还有很多数字，

646
00:30:23,498 --> 00:30:24,790
a bunch of punctuation symbols.
还有很多标点符号。

647
00:30:24,790 --> 00:30:28,660
But in a lot of languages, with accented characters, a lot of Asian characters,
但在很多语言中，带重音的字符，还有很多亚洲字符，

648
00:30:28,660 --> 00:30:32,230
this is not nearly enough memory or bits with which
这远远不够表示这些值。

649
00:30:32,230 --> 00:30:34,717
to represent all of those possible values.
所以我们需要比 ASCII 更高级，

650
00:30:34,717 --> 00:30:36,550
So we need to do a little better than ASCII,
但我们可以建立在他们几十年前的基础之上。

651
00:30:36,550 --> 00:30:39,200
but we can build on top of what they did years ago.
这是一个 ASCII 码表。

652
00:30:39,200 --> 00:30:41,080
So here is a chart of ASCII codes.
它只是一堆表格，显示了字母和数字之间的映射。

653
00:30:41,080 --> 00:30:44,270
It's just a bunch of columns showing us the mapping between letters
例如，这里是大写字母 A，65；大写字母 B，66；

654
00:30:44,270 --> 00:30:44,770
and numbers.
大写字母 C，67；以此类推。

655
00:30:44,770 --> 00:30:49,420
So, for instance, up here is the capital letter A, 65; capital B, 66;
72 是 H，73 是 I，等等。

656
00:30:49,420 --> 00:30:52,060
capital C, 67; dot, dot, dot.
这里有一些奇怪的东西，比如特殊符号，

657
00:30:52,060 --> 00:30:56,333
72 is H. 73 is I and so forth.
我们以后会学到。

658
00:30:56,333 --> 00:30:58,750
There's some weird things over here, like special symbols,
但每一个英文字母都对应一个数字，就像你提议的那样，

659
00:30:58,750 --> 00:31:00,125
that we'll learn about over time.
包括大写和小写。

660
00:31:00,125 --> 00:31:02,230
But there's a mapping between every English letter
例如，如果我们现在只突出显示其中的几个

661
00:31:02,230 --> 00:31:04,810
of the alphabet and some number, just as you'd propose,
我说我刚收到一条短信或一封电子邮件，

662
00:31:04,810 --> 00:31:06,710
both for uppercase and lowercase.
从底层来说，如果我有能力

663
00:31:06,710 --> 00:31:10,580
So, for instance, if we highlight just a few of these for now
查看哪些开关是开着的，哪些开关是关着的，我收到了这条消息。

664
00:31:10,580 --> 00:31:14,998
and I say that I've just received a text message or an email that,
首先，这不是 CS 的内容，但它很有趣。

665
00:31:14,998 --> 00:31:17,290
underneath the hood, so to speak, if I have the ability
有人知道，如果这是二进制模式，比如个位、两位、四位，这代表什么十进制数吗？

666
00:31:17,290 --> 00:31:22,930
to look at what switches are on and off, I received this message here.
观众：72？

667
00:31:22,930 --> 00:31:26,020
Well, first-- and this is not what CS is about, but just fun fact.
大卫·马兰：72 是正确的。

668
00:31:26,020 --> 00:31:29,470
Does anyone know what number this would represent in decimal,
再说一次，从智力上讲，这不是很有趣，

669
00:31:29,470 --> 00:31:34,565
if this is the binary pattern, like ones place, twos place?
这不是我们作为计算机科学家整天做的事情。

670
00:31:34,565 --> 00:31:35,420
AUDIENCE: 72?
但它遵循了相同的模式，

671
00:31:35,420 --> 00:31:37,080
DAVID J. MALAN: 72 is correct.
它看起来很神秘，但从概念上讲，

672
00:31:37,080 --> 00:31:39,600
And again, not, intellectually, all that interesting
从智力上讲，它最终与我们之前做的一样。

673
00:31:39,600 --> 00:31:41,780
and this is not the kind of math that we spend all day as CS--
所以，我剧透一下接下来的计算。

674
00:31:41,780 --> 00:31:42,905
a computer scientist doing.
它是 72，73，33。

675
00:31:42,905 --> 00:31:45,380
But it's just following the same darn pattern, which
现在，有人还记得我们刚刚拼出的信息吗？

676
00:31:45,380 --> 00:31:47,780
is to say it might look cryptic, but, conceptually,
观众：Hi。

677
00:31:47,780 --> 00:31:50,542
intellectually, it ultimately is exactly as we did before.
观众：Hi。

678
00:31:50,542 --> 00:31:52,250
So, yes, I'll spoil the rest of the math.
大卫·马兰：是的，事实上，它是“Hi！”

679
00:31:52,250 --> 00:31:54,860
It's 72, 73, 33.
不过，没有人真的很兴奋地说出来。

680
00:31:54,860 --> 00:31:58,370
Now, anyone remember, in your mind's eye, what message we just spelled?
你们注意到 33 是什么了吗？

681
00:31:58,370 --> 00:31:59,180
AUDIENCE: Hi.
观众：感叹号。

682
00:31:59,180 --> 00:31:59,810
AUDIENCE: Hi.
大卫·马兰：好的，很多人都注意到了。

683
00:31:59,810 --> 00:32:01,520
DAVID J. MALAN: Yeah, so it is, in fact, "Hi!"
是的，它是一个感叹号。

684
00:32:01,520 --> 00:32:03,270
Though, no one really said that excitedly.
确实，它在这里很明显。

685
00:32:03,270 --> 00:32:04,580
What's the 33, if you noticed?
33 是感叹号。

686
00:32:04,580 --> 00:32:05,600
AUDIENCE: Exclamation point.
这只是你最终可能会理解的事情。

687
00:32:05,600 --> 00:32:06,770
DAVID J. MALAN: OK, so a lot of people noticed.
但通常情况下，如果你记得大写字母 A 是 65，

688
00:32:06,770 --> 00:32:08,630
Yes, it's an exclamation point.
你至少可以算出这 25 个问题的答案，

689
00:32:08,630 --> 00:32:11,300
And that's, indeed, noticeable right here.
因为它们都是连续的。

690
00:32:11,300 --> 00:32:13,063
33 is the exclamation point.


691
00:32:13,063 --> 00:32:15,480
And that's just something, eventually, that might sink in.


692
00:32:15,480 --> 00:32:18,350
But, for the most part, if you remember capital A is 65,


693
00:32:18,350 --> 00:32:22,100
you can figure out at least 25 other answers to these kinds of questions


694
00:32:22,100 --> 00:32:24,060
because they're all contiguous like that.


695
00:32:24,060 --> 00:32:25,740
So there's the exclamation point.
所以就有感叹号了。

696
00:32:25,740 --> 00:32:30,350
But at the end of the day, we might just have this mapping known as ASCII.
但最终，我们可能只拥有这种被称为ASCII的映射。

697
00:32:30,350 --> 00:32:33,000
And it's how our phones, and computers, and devices, more
而且这就是我们的手机、电脑和设备，更多的

698
00:32:33,000 --> 00:32:35,310
generally, actually store information.
通常来说，实际存储信息的方式。

699
00:32:35,310 --> 00:32:37,050
So we thought we'd make--
所以我们想做…

700
00:32:37,050 --> 00:32:38,970
maybe take a little pressure off of me here.
也许可以减轻一下我的压力。

701
00:32:38,970 --> 00:32:41,550
And could we maybe flip things around?
我们是否可以换个思路？

702
00:32:41,550 --> 00:32:44,160
How about we try applying this newfound knowledge--
我们试试应用一下这个新发现的知识…

703
00:32:44,160 --> 00:32:48,430
if it's, indeed, new to you-- with seven volunteers, seven bits, if we could?
如果你真的以前没见过的话，我们用七个志愿者，七个位，行吗？

704
00:32:48,430 --> 00:32:48,930
OK.
好的。

705
00:32:48,930 --> 00:32:49,847
I saw your hand first.
我看到你最先举手了。

706
00:32:49,847 --> 00:32:50,640
Come on down.
请过来。

707
00:32:50,640 --> 00:32:52,650
Maybe your hand, there.
也许你，过来。

708
00:32:52,650 --> 00:32:54,870
OK, three, come on down over here.
好，三号，请到这边来。

709
00:32:54,870 --> 00:32:56,940
How about four and five?
四号和五号呢？

710
00:32:56,940 --> 00:32:57,810
Yep, come on down.
好的，请过来。

711
00:32:57,810 --> 00:32:59,018
Yep, in the black shirt, yep.
好的，穿黑色衬衫的，是的。

712
00:32:59,018 --> 00:33:00,393
How about let me go farther back?
要不我往后退一点？

713
00:33:00,393 --> 00:33:01,890
How about in the green, over there?
穿绿色的，那个，可以吗？

714
00:33:01,890 --> 00:33:03,460
And how about you, seven, over here?
还有七号，你到这边来。

715
00:33:03,460 --> 00:33:03,960
All right.
好的。

716
00:33:03,960 --> 00:33:04,650
Come on down.
请过来。

717
00:33:04,650 --> 00:33:05,790
[CHATTER]
[聊天声]

718
00:33:05,790 --> 00:33:08,400
Come on down.
请过来。

719
00:33:08,400 --> 00:33:10,600
So a round of applause for our brave volunteers.
让我们为我们勇敢的志愿者鼓掌。

720
00:33:10,600 --> 00:33:12,740
[APPLAUSE]
[掌声]

721
00:33:12,740 --> 00:33:13,850
All right.
好的。

722
00:33:13,850 --> 00:33:17,060
So if you'd like to stand, roughly, side by side, here in the middle
所以如果你愿意，就站在这里，大致并排站着，在舞台中央

723
00:33:17,060 --> 00:33:17,830
of the stage.
的中间。

724
00:33:20,430 --> 00:33:22,530
First of all, thank you.
首先，谢谢你们。

725
00:33:22,530 --> 00:33:23,030
Let's see.
让我们看看。

726
00:33:23,030 --> 00:33:25,250
1, 2, 3, 4, 5, 6, 7, perfect.
1、2、3、4、5、6、7，完美。

727
00:33:25,250 --> 00:33:25,880
OK.
好的。

728
00:33:25,880 --> 00:33:29,900
And let's go all the way over to this place, here.
然后我们走到这里。

729
00:33:29,900 --> 00:33:32,600
If you would like to introduce yourself to the class.
如果你愿意的话，自我介绍一下。

730
00:33:32,600 --> 00:33:34,418
RACHEL RICHEY: I'm Rachel Richey.
瑞秋·瑞奇：我是瑞秋·瑞奇。

731
00:33:34,418 --> 00:33:35,210
DAVID J. MALAN: OK.
大卫·J·马兰：好的。

732
00:33:35,210 --> 00:33:36,128
And what year?
你是哪一届的？

733
00:33:36,128 --> 00:33:36,920
Anything about you?
关于你的任何信息吗？

734
00:33:36,920 --> 00:33:38,915
RACHEL RICHEY: Oh, first year, concentrating in CS.
瑞秋·瑞奇：哦，大一，主修计算机科学。

735
00:33:38,915 --> 00:33:39,707
DAVID J. MALAN: OK.
大卫·J·马兰：好的。

736
00:33:39,707 --> 00:33:40,670
Welcome to the stage.
欢迎来到舞台。

737
00:33:40,670 --> 00:33:41,210
Next.
下一个。

738
00:33:41,210 --> 00:33:42,080
SPEAKER: Hi.
演讲者：你好。

739
00:33:42,080 --> 00:33:46,190
I'm [? Kang. ?] Also a first-year concentrating in CS.
我是[？康？]，也是大一，主修计算机科学。

740
00:33:46,190 --> 00:33:47,390
SPEAKER: Hello.
演讲者：你好。

741
00:33:47,390 --> 00:33:52,665
My name is [? Lam. ?] I'm a [INAUDIBLE] student from education department.
我叫[？蓝？]，我是教育学院的一名[听不清]学生。

742
00:33:52,665 --> 00:33:53,540
DAVID J. MALAN: Nice.
大卫·J·马兰：不错。

743
00:33:53,540 --> 00:33:53,810
OK.
好的。

744
00:33:53,810 --> 00:33:54,368
Next.
下一个。

745
00:33:54,368 --> 00:33:55,160
JORDAN MITTLER: Hi.
乔丹·米特勒：你好。

746
00:33:55,160 --> 00:33:59,120
I'm Jordan Mittler, concentrating in economics and maybe some CS.
我是乔丹·米特勒，主修经济学，可能还会学一点计算机科学。

747
00:33:59,120 --> 00:34:00,110
SPEAKER: So, hi.
演讲者：所以，你好。

748
00:34:00,110 --> 00:34:02,645
I'm [? Natalia. ?] First year, and I want to do CS.
我是[？娜塔莉亚？]，大一，我想学计算机科学。

749
00:34:02,645 --> 00:34:03,435
SPEAKER: Hi.
演讲者：你好。

750
00:34:03,435 --> 00:34:05,810
I'm [? Khadija. ?] I'm a first-year, and I want to do CS.
我是[？卡蒂娅？]，大一，我想学计算机科学。

751
00:34:05,810 --> 00:34:07,080
DAVID J. MALAN: [LAUGHS].
大卫·J·马兰：[笑]。

752
00:34:07,080 --> 00:34:08,030
SPEAKER: Hello.
演讲者：你好。

753
00:34:08,030 --> 00:34:11,418
I'm [? Caleb. ?] And, once again, first year, concentrating in CS.
我是[？凯勒布？]，再说一次，大一，主修计算机科学。

754
00:34:11,418 --> 00:34:12,210
DAVID J. MALAN: OK.
大卫·J·马兰：好的。

755
00:34:12,210 --> 00:34:12,710
Wonderful.
太棒了。

756
00:34:12,710 --> 00:34:13,770
A pattern, yes.
一个模式，没错。

757
00:34:13,770 --> 00:34:14,340
Thank you.
谢谢。

758
00:34:14,340 --> 00:34:14,880
Thank you.
谢谢。

759
00:34:14,880 --> 00:34:15,969
[APPLAUSE]
[掌声]

760
00:34:15,969 --> 00:34:20,010
So, if you haven't guessed already, each of these volunteers
所以，如果你还没有猜到的话，这些志愿者中的每一位

761
00:34:20,010 --> 00:34:23,429
is going to represent a bit, from left to right, or right to left,
将代表一个位，从左到右，或者从右到左，

762
00:34:23,429 --> 00:34:24,010
in this case.
在本例中。

763
00:34:24,010 --> 00:34:24,750
So let's see.
所以让我们看看。

764
00:34:24,750 --> 00:34:27,719
If you want to represent-- how about the twos place?
如果你想代表… 二位的？

765
00:34:27,719 --> 00:34:37,350
How about the fours place, the eighths place, 16ths place, 32's, 64, and 128?
四位的呢？八位的呢？十六位的呢？三十二位的呢？六十四位的呢？还有128位的呢？

766
00:34:37,350 --> 00:34:39,060
Although, wait a-- I think I screwed up.
不过，等等… 我想我弄错了。

767
00:34:39,060 --> 00:34:40,889
We needed one-- eighth volunteer.
我们需要一位… 第八个志愿者。

768
00:34:40,889 --> 00:34:42,974
I think you know-- well, I think--
我想你可能知道… 我想…

769
00:34:42,974 --> 00:34:45,330
[CLEARS THROAT] Spot?
[清清嗓子] 哪个位置？

770
00:34:45,330 --> 00:34:46,108
OK.
好的。

771
00:34:46,108 --> 00:34:46,650
Come on over.
请过来。

772
00:34:46,650 --> 00:34:49,567
If you guys could step forward a little bit, and then scooch this way,
如果大家能向前走一点，然后往这边挪一挪，

773
00:34:49,567 --> 00:34:51,090
just to give Spot some room.
给 Spot 留点空间。

774
00:34:51,090 --> 00:34:52,650
[FOOTSTEPS]


775
00:34:52,650 --> 00:34:55,239
So Spot will represent the ones place.
所以 Spot 将代表个位数。

776
00:34:55,239 --> 00:34:58,440
Now, what our volunteers have on the back of their sheets of paper
现在，我们的志愿者在他们纸张的背面

777
00:34:58,440 --> 00:34:59,670
are little instructions.
有一些小指示。

778
00:34:59,670 --> 00:35:05,460
We're going to spell out a three-letter word in English by using three bytes,
我们将使用三个字节拼出一个英文的三个字母的单词，

779
00:35:05,460 --> 00:35:08,170
from left to right, because now we have eight volunteers.
从左到右，因为我们现在有八个志愿者。

780
00:35:08,170 --> 00:35:10,503
I'm going to propose that you raise your hand, if you're
我建议，如果你

781
00:35:10,503 --> 00:35:12,185
supposed to represent a 1.
应该代表 1。

782
00:35:12,185 --> 00:35:14,310
Or you just stand there, without raising your hand,
或者你只是站在那里，不举手，

783
00:35:14,310 --> 00:35:15,780
if you're meant to represent a 0.
如果你要代表 0。

784
00:35:15,780 --> 00:35:18,450
And what we'll have the audience do is do the quick math
我们将让观众做快速计算

785
00:35:18,450 --> 00:35:22,170
to figure out-- one, two, three-- each letter, what number is it.
来算出——一、二、三——每个字母，它是什么数字。

786
00:35:22,170 --> 00:35:23,430
What letter is it?
它是什么字母？

787
00:35:23,430 --> 00:35:26,370
And we'll see what word that we have finally spelled.
我们将看到我们最终拼出的单词是什么。

788
00:35:26,370 --> 00:35:26,880
All right.
好的。

789
00:35:26,880 --> 00:35:28,410
So, in round one--
所以，在第一轮——

790
00:35:28,410 --> 00:35:31,410
you have instructions on your back of your sheet that will tell you to--
在你的纸张的背面有指示告诉你——

791
00:35:31,410 --> 00:35:32,580
what your number is.
你的数字是什么。

792
00:35:32,580 --> 00:35:33,660
If you're 0, stand there.
如果你代表 0，就站在那里。

793
00:35:33,660 --> 00:35:35,010
If you're a 1, raise your hand.
如果你代表 1，就举手。

794
00:35:37,700 --> 00:35:40,060
[PAPER RUSTLING]


795
00:35:40,060 --> 00:35:43,420
What number do these guys seem to be representing?
这些家伙似乎代表了什么数字？

796
00:35:43,420 --> 00:35:44,560
AUDIENCE: 68.
观众：68。

797
00:35:44,560 --> 00:35:46,360
DAVID J. MALAN: 66, I think.
大卫·J·马兰：我认为是 66。

798
00:35:46,360 --> 00:35:49,495
64 plus 2, so 66, which is the letter--
64 加 2，所以是 66，它是字母——

799
00:35:49,495 --> 00:35:50,260
AUDIENCE: B.
观众：B。

800
00:35:50,260 --> 00:35:52,930
DAVID J. MALAN: OK, so, B. OK, so, B. All right.
大卫·J·马兰：好的，所以是 B。好的，所以是 B。好的。

801
00:35:52,930 --> 00:35:54,470
Hands down.
放下手。

802
00:35:54,470 --> 00:35:57,565
Second letter is going to be spelled how?
第二个字母将如何拼写？

803
00:36:01,160 --> 00:36:02,202
[SPOT LANDS ON THE STAGE]


804
00:36:02,202 --> 00:36:02,827
AUDIENCE: Whoa.
观众：哇。

805
00:36:02,827 --> 00:36:03,530
AUDIENCE: Whoa.
观众：哇。

806
00:36:03,530 --> 00:36:04,829
AUDIENCE: Whoa.
观众：哇。

807
00:36:04,829 --> 00:36:07,570
DAVID J. MALAN: [LAUGHS] All right.
大卫·J·马兰：[笑] 好的。

808
00:36:07,570 --> 00:36:09,670
What are we spelling now?
我们现在拼什么？

809
00:36:09,670 --> 00:36:11,635
[INDISTINCT CHATTER]


810
00:36:11,635 --> 00:36:15,580
I think-- psst, yep, OK.
我认为——嘘，是的，好的。

811
00:36:15,580 --> 00:36:17,081
Yeah, I think you're one.
是的，我认为你代表 1。

812
00:36:17,081 --> 00:36:19,490
[LAUGHTER]


813
00:36:19,490 --> 00:36:20,980
OK.
好的。

814
00:36:20,980 --> 00:36:23,430
Now what number are we spelling?
现在我们拼的是什么数字？

815
00:36:23,430 --> 00:36:24,370
AUDIENCE: 79
观众：79

816
00:36:24,370 --> 00:36:26,770
DAVID J. MALAN: 79, I heard, which is the letter?
大卫·J·马兰：我听到是 79，它是哪个字母？

817
00:36:26,770 --> 00:36:27,383
AUDIENCE: O.
观众：O。

818
00:36:27,383 --> 00:36:28,300
DAVID J. MALAN: O. OK.
大卫·J·马兰：O。好的。

819
00:36:28,300 --> 00:36:29,320
So hands down.
所以放下手。

820
00:36:29,320 --> 00:36:30,100
Thank you, Spot.
谢谢，Spot。

821
00:36:30,100 --> 00:36:31,460
One final flourish.
最后再来个华丽的结束。

822
00:36:31,460 --> 00:36:33,250
So we've spelled B-O--
所以我们已经拼出了 B-O——

823
00:36:33,250 --> 00:36:34,855
third letter, go ahead.
第三个字母，继续。

824
00:36:37,942 --> 00:36:40,230
[SPOT LANDS ON THE STAGE]


825
00:36:40,230 --> 00:36:42,885
What number, now, is this?
现在，这个数字是多少？

826
00:36:42,885 --> 00:36:43,815
AUDIENCE: 87.
观众：87。

827
00:36:43,815 --> 00:36:44,460
AUDIENCE: 87.
观众：87。

828
00:36:44,460 --> 00:36:45,460
DAVID J. MALAN: I heard it here, 80--
大卫·J·马兰：我听到的是 80——

829
00:36:45,460 --> 00:36:46,320
AUDIENCE: Seven.
观众：七。

830
00:36:46,320 --> 00:36:46,875
DAVID J. MALAN: --seven, which is?
大卫·J·马兰：——七，它是哪个？

831
00:36:46,875 --> 00:36:47,505
AUDIENCE: W.
观众：W。

832
00:36:47,505 --> 00:36:49,620
DAVID J. MALAN: W, which, of course, spells "bow."
大卫·J·马兰：W，当然，拼出来就是 "bow"。

833
00:36:49,620 --> 00:36:53,437
So if our volunteers could take a bow, Spot included.
所以如果我们的志愿者能鞠躬，包括 Spot。

834
00:36:53,437 --> 00:36:56,636
[APPLAUSE]


835
00:36:58,010 --> 00:37:01,540
So this will make more sense in week one,
所以这将在第一周更有意义，

836
00:37:01,540 --> 00:37:04,750
when we have an assignment involving a certain someone from the Nintendo
当我们有一项作业涉及到任天堂世界中的某个人时，

837
00:37:04,750 --> 00:37:04,900
World.
世界。

838
00:37:04,900 --> 00:37:06,760
But we have a lovely parting gift for each of you.
但我们给你们每个人准备了一份可爱的临别礼物。

839
00:37:06,760 --> 00:37:07,510
SPEAKER: Thank you.
说话者：谢谢。

840
00:37:07,510 --> 00:37:07,630
[LAUGHS]


841
00:37:07,630 --> 00:37:08,180
DAVID J. MALAN: Thank you for volunteering.
大卫·J·马兰：谢谢你的参与。

842
00:37:08,180 --> 00:37:08,980
SPEAKER: Thanks.
说话者：谢谢。

843
00:37:08,980 --> 00:37:11,897
DAVID J. MALAN: You might need to share it with the folks next to you.
大卫·J·马兰：你可能需要和旁边的人分享一下。

844
00:37:11,897 --> 00:37:15,106
[CHATTER]


845
00:37:18,600 --> 00:37:19,470
Oop, here we go.
哎哟，开始了。

846
00:37:19,470 --> 00:37:19,970
There we go.
开始了。

847
00:37:19,970 --> 00:37:20,360
Thank you--
谢谢——

848
00:37:20,360 --> 00:37:21,080
SPEAKER: Thank you.
说话者：谢谢。

849
00:37:21,080 --> 00:37:21,380
RACHEL RICHEY: Thank you.
瑞秋·里奇：谢谢。

850
00:37:21,380 --> 00:37:21,560
DAVID J. MALAN: --so much.
大卫·马兰：——非常感谢。

851
00:37:21,560 --> 00:37:23,250
One more round of applause, if we could, for our volunteers.
如果可以的话，让我们再为我们的志愿者鼓掌一次。

852
00:37:23,250 --> 00:37:23,810
Thank you.
谢谢。

853
00:37:23,810 --> 00:37:24,734
[APPLAUSE]
[掌声]

854
00:37:24,734 --> 00:37:26,120
Did you lose something?
你丢东西了吗？

855
00:37:26,120 --> 00:37:27,490
OK.
好的。

856
00:37:27,490 --> 00:37:28,030
All right.
好吧。

857
00:37:28,030 --> 00:37:31,190
So, [LAUGHS] Spot's had it.
所以，[笑声]斯波特已经受不了了。

858
00:37:31,190 --> 00:37:34,060
So let's see, then, if we've solved, now,
那么，让我们看看，现在我们是否已经解决了，

859
00:37:34,060 --> 00:37:36,640
the problem of representing English letters of the alphabet,
表示英语字母的问题，

860
00:37:36,640 --> 00:37:39,850
being able to spell out words like "bow," B-O-W. What if we actually do
能够拼出像“bow”这样的单词，B-O-W。如果我们实际上有

861
00:37:39,850 --> 00:37:41,210
have accented characters?
带重音的字符？

862
00:37:41,210 --> 00:37:43,883
What if we do have other glyphs that we want to represent?
如果我们确实有一些我们想表示的其他字形呢？

863
00:37:43,883 --> 00:37:47,050
Well, here, of course, is a standard US English keyboard, which a lot of you
当然，这里有一个标准的美国英语键盘，你们很多人

864
00:37:47,050 --> 00:37:47,650
might have.
可能会有。

865
00:37:47,650 --> 00:37:50,260
But there's also characters that you can type much more
但也有你更容易输入的字符，

866
00:37:50,260 --> 00:37:52,930
easily if you have a foreign keyboard, relative to the US,
如果你有一个外国键盘，相对于美国来说，

867
00:37:52,930 --> 00:37:55,780
or with certain keystrokes on your own Mac, PC, and phone.
或者用你自己的Mac、PC和手机上的某些按键组合。

868
00:37:55,780 --> 00:37:59,230
But, nowadays, too, there's this menu that, probably, you've
但现在，还有这个菜单，你可能

869
00:37:59,230 --> 00:38:03,400
used in the past hour or two to actually send some emoji.
在过去一两个小时里用过它来发送一些表情符号。

870
00:38:03,400 --> 00:38:06,040
An emoji, even though they look like pictures
表情符号，虽然它们看起来像图片，

871
00:38:06,040 --> 00:38:08,080
and they actually are pictures on the screen,
而且它们实际上是屏幕上的图片，

872
00:38:08,080 --> 00:38:13,120
they're, technically, just characters, characters of an emoji alphabet
从技术上来说，它们只是字符，表情符号字母表中的字符，

873
00:38:13,120 --> 00:38:16,330
that happened to use a certain pattern of 0's and 1's to represent
它碰巧使用了一种特定的 0 和 1 模式来表示

874
00:38:16,330 --> 00:38:19,880
each of these faces, each of these people, and places, and things.
每张脸，每个人，每个地方，每件事物。

875
00:38:19,880 --> 00:38:22,540
And it turns out that one of the reasons that we have just
事实证明，我们现在有这么多[笑声]字符的原因之一是，

876
00:38:22,540 --> 00:38:29,240
so many [LAUGHS] such characters nowadays is because we now
现在我们使用 Unicode 而不是 ASCII。

877
00:38:29,240 --> 00:38:31,370
use Unicode instead of ASCII.
我们现在使用 Unicode 而不是 ASCII。

878
00:38:31,370 --> 00:38:34,370
So Unicode is a superset, so to speak, of ASCII,
所以，可以这么说，Unicode 是 ASCII 的超集，

879
00:38:34,370 --> 00:38:38,030
which is to say that we, humans, realized, some time ago, that just
也就是说，我们人类在一段时间前意识到，仅仅

880
00:38:38,030 --> 00:38:40,370
using eight bits to represent letters of the alphabet
使用八位来表示字母

881
00:38:40,370 --> 00:38:43,070
certainly isn't very good when we want to represent
当我们想要表示

882
00:38:43,070 --> 00:38:44,960
other, non-English languages.
其他非英语语言时，显然不太好。

883
00:38:44,960 --> 00:38:47,240
So Unicode doesn't just use eight bits.
所以 Unicode 不仅仅使用八位。

884
00:38:47,240 --> 00:38:52,520
It sometimes uses 16 bits per character, sometimes 24 bits per character,
它有时使用每个字符 16 位，有时使用每个字符 24 位，

885
00:38:52,520 --> 00:38:55,610
and sometimes even 32 bits per character.
有时甚至使用每个字符 32 位。

886
00:38:55,610 --> 00:38:56,690
Now, why those numbers?
现在，为什么是那些数字？

887
00:38:56,690 --> 00:39:00,680
That's just one byte, two bytes, three bytes, or four bytes.
那只是一个字节、两个字节、三个字节或四个字节。

888
00:39:00,680 --> 00:39:02,132
And that gives us--
那给我们——

889
00:39:02,132 --> 00:39:02,840
does anyone know?
有人知道吗？

890
00:39:02,840 --> 00:39:06,380
That gives us the ability to represent as many as 4
这给了我们表示多达 4

891
00:39:06,380 --> 00:39:08,630
billion possible characters.
十亿个可能的字符的能力。

892
00:39:08,630 --> 00:39:12,150
Because if the longest one is 32 bits, that's 2 to the 32,
因为如果最长的一个有 32 位，那就是 2 的 32 次方，

893
00:39:12,150 --> 00:39:15,090
which, if you do out the math, trust me, is roughly 4 billion.
如果你把数学算出来，相信我，大约是 40 亿。

894
00:39:15,090 --> 00:39:16,430
So that's a lot of characters.
所以，那可是很多字符。

895
00:39:16,430 --> 00:39:19,040
And we've got a lot of room, then, for these emoji.
然后，我们就有很多空间容纳这些表情符号了。

896
00:39:19,040 --> 00:39:22,130
But it's not just about having fun, pictorially, on the screen.
但这不仅仅是关于在屏幕上以图片形式玩乐。

897
00:39:22,130 --> 00:39:27,830
Unicode's mission really is to represent and to preserve all human languages
Unicode 的使命实际上是表示和保留所有人类语言，

898
00:39:27,830 --> 00:39:31,530
digitally, both past, present, and future.
以数字方式，包括过去、现在和未来。

899
00:39:31,530 --> 00:39:35,420
So it is really about capturing the entirety of human knowledge,
所以，这实际上是关于捕捉人类知识的全部内容，

900
00:39:35,420 --> 00:39:37,430
as we've expressed it in language, but also
正如我们在语言中表达的那样，而且也是

901
00:39:37,430 --> 00:39:42,020
giving this newfound ability that's been used centuries ago, too-- in writings,
赋予这种全新的能力，这种能力在几个世纪前也被使用过——在写作中，

902
00:39:42,020 --> 00:39:44,300
on walls, and the like-- pictograms via which
在墙壁上等等——象形文字，通过它

903
00:39:44,300 --> 00:39:46,640
we can still communicate, even independently
我们仍然可以交流，即使独立于

904
00:39:46,640 --> 00:39:48,030
of our own human language.
我们自己的语言。

905
00:39:48,030 --> 00:39:51,320
So we'll reduce it, today, to just patterns of 0's and 1's, but
所以，今天我们将把它简化为 0 和 1 的模式，但是

906
00:39:51,320 --> 00:39:56,190
the problem being solved is much greater and well-beyond CS, itself, there.
正在解决的问题要大得多，远远超出了 CS 本身。

907
00:39:56,190 --> 00:39:58,610
So here is a pattern of 0's and 1's using
所以，这里有一个使用

908
00:39:58,610 --> 00:40:04,310
Unicode, so more than eight bits, that represents a very popular emoji, which
Unicode 的 0 和 1 模式，所以超过八位，它表示一个非常流行的表情符号，它

909
00:40:04,310 --> 00:40:06,090
might be a bit of a hint.
可能有点提示。

910
00:40:06,090 --> 00:40:08,870
This is the most popular emoji, as of last year, at least,
至少在去年，这是最受欢迎的表情符号。

911
00:40:08,870 --> 00:40:10,330
statistically, internationally.
从统计数据来看，在国际上也是如此。

912
00:40:10,330 --> 00:40:13,078
[INTERPOSING VOICES]
[声音交叠]

913
00:40:13,078 --> 00:40:14,370
DAVID J. MALAN: Does this help?
大卫·马兰：这有帮助吗？

914
00:40:14,370 --> 00:40:16,520
It's, roughly, this number here.
它大约是这里这个数字。

915
00:40:16,520 --> 00:40:17,240
No?
没有？

916
00:40:17,240 --> 00:40:19,080
It's this one here.
是这里这个。

917
00:40:19,080 --> 00:40:23,360
So this is the most popular emoji, by most measures, as of last year.
所以，根据大多数指标来看，这是去年最受欢迎的表情符号。

918
00:40:23,360 --> 00:40:25,170
But it doesn't always look like this.
但它并不总是这个样子。

919
00:40:25,170 --> 00:40:28,190
Those of you who have a Mac or an iPhone recognize this symbol, perhaps,
你们中拥有 Mac 或 iPhone 的人可能认得这个符号。

920
00:40:28,190 --> 00:40:28,690
immediately.
立刻。

921
00:40:28,690 --> 00:40:31,100
Those of you with Android devices or other platforms
那些使用 Android 设备或其他平台的人

922
00:40:31,100 --> 00:40:35,310
might notice that it's the same idea, but it's a little bit different.
可能注意到它表达的是相同的意思，但略有不同。

923
00:40:35,310 --> 00:40:38,660
And this is because, too, emojis, at the end of the day,
而这也是因为，归根结底，表情符号

924
00:40:38,660 --> 00:40:41,420
just represent character, but those characters can be drawn,
只是代表字符，但这些字符可以被绘制，

925
00:40:41,420 --> 00:40:43,070
can be painted in different ways.
可以用不同的方式描绘。

926
00:40:43,070 --> 00:40:46,130
And reasonable people will interpret differently
而合理的人会对

927
00:40:46,130 --> 00:40:49,880
this emoji, whose official name is "face with tears of joy."
这个表情符号有不同的解读，它的正式名称是“喜极而泣”。

928
00:40:49,880 --> 00:40:52,130
And, indeed, Google interprets it a little differently
事实上，谷歌对它的解读与

929
00:40:52,130 --> 00:40:55,813
from Apple, versus Microsoft, versus Meta, versus other companies, as well.
苹果、微软、Meta 以及其他公司略有不同。

930
00:40:55,813 --> 00:40:57,980
So you can almost think of those different companies
所以，你可以把这些不同的公司

931
00:40:57,980 --> 00:41:00,230
as having different fonts for emoji.
看作是为表情符号提供了不同的字体。

932
00:41:00,230 --> 00:41:04,160
And that really starts to connect things to the world of text and characters.
这确实开始将表情符号与文本和字符的世界联系起来。

933
00:41:04,160 --> 00:41:05,720
So, just so you've seen it.
所以，你已经看到了。

934
00:41:05,720 --> 00:41:07,110
More on this, another time.
我们下次再详细谈谈。

935
00:41:07,110 --> 00:41:10,980
It turns out that emoji and, really, characters, in general,
事实证明，表情符号，以及更普遍地讲，字符，

936
00:41:10,980 --> 00:41:13,430
we don't use binary 0's and 1's to represent them
我们并不使用二进制的 0 和 1 来表示它们，

937
00:41:13,430 --> 00:41:15,740
because no one, myself included, is going to recognize what's what.
因为没有人，包括我自己，能够识别出它们各自代表什么。

938
00:41:15,740 --> 00:41:16,520
It's just too much math.
因为数学运算太复杂了。

939
00:41:16,520 --> 00:41:17,480
It's not interesting.
这也没有什么趣味性。

940
00:41:17,480 --> 00:41:19,880
And even decimal numbers-- that was 4 billion or some--
即使是十进制数字——那是 40 亿或某个

941
00:41:19,880 --> 00:41:22,260
I don't remember which number is which.
我记不清哪个数字代表哪个符号了。

942
00:41:22,260 --> 00:41:24,410
So we represent things a little more compactly.
因此，我们采用了一种更紧凑的表示方式。

943
00:41:24,410 --> 00:41:26,510
And this, too, admittedly, still looks cryptic,
诚然，这种方式看起来仍然很神秘，

944
00:41:26,510 --> 00:41:30,770
but this is a Unicode code point that uses another system, mathematically,
但这是一个 Unicode 代码点，它在数学上采用了另一种系统，

945
00:41:30,770 --> 00:41:33,470
called base-16 or hexadecimal.
被称为 16 进制或十六进制。

946
00:41:33,470 --> 00:41:34,670
More on that, another time.
我们下次再详细谈谈。

947
00:41:34,670 --> 00:41:38,090
But it's just a way of representing numbers even more succinctly,
但它只是以一种更简洁的方式来表示数字，

948
00:41:38,090 --> 00:41:41,270
writing less on the screen, because you're using not just 0
在屏幕上写入更少的字符，因为你不仅使用 0

949
00:41:41,270 --> 00:41:42,590
through 9, as in decimal.
到 9，像十进制那样。

950
00:41:42,590 --> 00:41:46,010
But you're using A through F, as well, so a few letters
而且你也会使用 A 到 F，所以英语字母表中的一些字母

951
00:41:46,010 --> 00:41:47,670
of the English alphabet come into play.
也发挥了作用。

952
00:41:47,670 --> 00:41:49,700
But, for now, that's just a little easier
但就目前而言，这只是一点点更容易

953
00:41:49,700 --> 00:41:53,750
to remember, too, for people who care, that that is the number that
记住，对于那些关心的人来说，那就是代表

954
00:41:53,750 --> 00:41:55,880
represents "face with tears of joy."
“喜极而泣”的数字。

955
00:41:55,880 --> 00:41:58,010
But what if we want a customized emoji?
但如果我们想要一个自定义的表情符号呢？

956
00:41:58,010 --> 00:41:59,780
And this, increasingly, is the case.
而这种情况正在越来越普遍。

957
00:41:59,780 --> 00:42:01,910
Here, for instance, are the five skin tones
例如，这里有五种肤色，

958
00:42:01,910 --> 00:42:04,760
that phones, and laptops, and desktops, nowadays, support.
如今的手机、笔记本电脑和台式电脑都支持这些肤色。

959
00:42:04,760 --> 00:42:07,802
It's based on something called the "Fitzpatrick scale," which essentially
它基于一种叫做“菲茨帕特里克量表”的东西，它本质上

960
00:42:07,802 --> 00:42:10,460
categorizes human skin tone into six or, in this case, five
将人类肤色分为六类，或者在这种情况下是五类，

961
00:42:10,460 --> 00:42:12,560
different categories, from lighter to darker.
不同的类别，从浅色到深色。

962
00:42:12,560 --> 00:42:17,480
But this suggests that, wow, if we want to represent people
但这表明，哇，如果我们想要用

963
00:42:17,480 --> 00:42:22,040
with five different skin tones, like this, that could significantly
五种不同的肤色来代表人，像这样，这可能会显著地

964
00:42:22,040 --> 00:42:25,130
increase how many unique patterns of 0's and 1's we
增加我们需要的 0 和 1 的独特组合的数量，

965
00:42:25,130 --> 00:42:26,890
need for every possible face.
以用于每张可能的图像。

966
00:42:26,890 --> 00:42:29,540
But if we think about it from an engineering perspective,
但如果我们从工程的角度来看，

967
00:42:29,540 --> 00:42:33,068
we can actually just think of skin tone as modifying some default
我们实际上可以认为肤色只是修改了某些默认的

968
00:42:33,068 --> 00:42:34,360
color, for better or for worse.
颜色，无论好坏。

969
00:42:34,360 --> 00:42:37,450
And yellow is the de facto default, Simpson style.
黄色是事实上的默认颜色，就像辛普森一家那样。

970
00:42:37,450 --> 00:42:41,350
But to modify it to look more genuinely human-like, from lighter to darker,
但为了使其看起来更像人类，从浅色到深色，

971
00:42:41,350 --> 00:42:43,990
well, maybe we just use the same pattern of bits
好吧，也许我们只需要使用相同的比特模式

972
00:42:43,990 --> 00:42:47,720
to represent a human thumb, for instance, thumbs up or thumbs down.
来表示一个人的拇指，例如，竖起大拇指或竖起大拇指。

973
00:42:47,720 --> 00:42:51,210
And we just, then, modify that character to be displayed with a different skin
然后，我们只需要修改那个字符，让它以不同的皮肤显示

974
00:42:51,210 --> 00:42:51,710
tone.
色调。

975
00:42:51,710 --> 00:42:53,950
So, for instance, here, then, is the "thumbs up"
例如，这里就是“竖起大拇指”

976
00:42:53,950 --> 00:42:55,750
that you might use on various platforms.
你可能在各种平台上使用。

977
00:42:55,750 --> 00:42:59,200
And let me just stipulate that this is the Unicode code point.
让我先说明一下，这是 Unicode 代码点。

978
00:42:59,200 --> 00:43:01,870
That is the number that Macs, PCs, and phones
它是 Mac、PC 和手机使用的数字

979
00:43:01,870 --> 00:43:05,960
use underneath the hood to represent the default yellow "thumbs up."
在幕后用于表示默认的黄色“竖起大拇指”。

980
00:43:05,960 --> 00:43:08,770
But if you want to give it a medium skin tone,
但如果你想给它一个中等肤色，

981
00:43:08,770 --> 00:43:12,370
you still use that same number, that same pattern of 0's and 1's,
你仍然使用相同的数字，相同的 0 和 1 模式，

982
00:43:12,370 --> 00:43:13,930
or switches, underneath the hood.
或开关，在幕后。

983
00:43:13,930 --> 00:43:17,620
But you use a few more switches that the computer or phone
但你使用了一些额外的开关，计算机或手机

984
00:43:17,620 --> 00:43:20,800
will interpret as, "Oh, you don't want to see the default in yellow
将解释为，“哦，你不希望看到默认的黄色

985
00:43:20,800 --> 00:43:23,890
because of this second number that's in the computer's memory somewhere.
因为这个第二个数字在计算机的内存中。”

986
00:43:23,890 --> 00:43:27,170
You want me to adjust it to be the medium skin tone or any
你想让我把它调整成中等肤色，或者任何

987
00:43:27,170 --> 00:43:29,010
of the other values, instead."
其他值。”

988
00:43:29,010 --> 00:43:31,580
So that's the engineering solution to this problem
所以这就是这个问题的工程解决方案

989
00:43:31,580 --> 00:43:35,078
of just trying to represent different ranges of emoji here.
只是试图在这里表示不同范围的表情符号。

990
00:43:35,078 --> 00:43:36,620
Well, what about something like this?
那么，像这样的东西怎么样？

991
00:43:36,620 --> 00:43:38,480
There's a lot more combinatorics, nowadays,
现在，你的键盘上有很多组合，

992
00:43:38,480 --> 00:43:40,522
on your keyboard for relationships, for instance.
例如，关于你的关系。

993
00:43:40,522 --> 00:43:43,620
So here is a "couple with heart" here.
所以这里有一个“带着心的情侣”。

994
00:43:43,620 --> 00:43:46,520
So the couple, here, of course, is represented with, apparently,
当然，这里的情侣用这个数字表示，

995
00:43:46,520 --> 00:43:47,600
this number here.
就是这个数字。

996
00:43:47,600 --> 00:43:48,255
But that's it.
但就是这样。

997
00:43:48,255 --> 00:43:50,630
But if you want to be more specific-- like man and woman,
但如果你想更具体一些——比如男人和女人，

998
00:43:50,630 --> 00:43:53,240
or man-man, woman-woman-- it's the same idea,
或者男人-男人，女人-女人——想法是一样的，

999
00:43:53,240 --> 00:43:56,630
but we just need to express ourselves a little-- with a little
但我们只需要稍微表达一下自己——用一点

1000
00:43:56,630 --> 00:43:57,600
more information.
更多信息。

1001
00:43:57,600 --> 00:44:00,560
So, for instance, the way the Unicode folks came up with,
例如，Unicode 人员想出的方法是，

1002
00:44:00,560 --> 00:44:03,830
years ago, to represent, for instance, a woman with a heart and a man,
几年前，用来表示，例如，一个女人带着一颗心和一个男人，

1003
00:44:03,830 --> 00:44:06,480
from left to right, would be using these values.
从左到右，将使用这些值。

1004
00:44:06,480 --> 00:44:08,900
So things just escalated quickly, but only
所以事情很快就升级了，但只是

1005
00:44:08,900 --> 00:44:12,560
in the sense that we're using more bits, more 0's and 1's, to represent,
从我们使用更多比特，更多 0 和 1 来表示的角度来看，

1006
00:44:12,560 --> 00:44:15,470
more expressively, this particular combination.
更具表现力地，这种特定的组合。

1007
00:44:15,470 --> 00:44:18,050
So this happens to be the number in Unicode
所以这个恰好是 Unicode 中的数字

1008
00:44:18,050 --> 00:44:19,790
that represents the woman at left.
它代表左边那个女人。

1009
00:44:19,790 --> 00:44:22,430
This is the number that represents the man at right.
这个数字代表右边那个男人。

1010
00:44:22,430 --> 00:44:25,160
And this is the pair of numbers that represents
而这两个数字代表

1011
00:44:25,160 --> 00:44:29,550
the heart in the middle, sometimes red, sometimes pink, displayed here as pink.
中间的心，有时是红色，有时是粉色，这里显示为粉色。

1012
00:44:29,550 --> 00:44:32,510
But if we want to change the combination, for instance, to be,
但如果我们想改变组合，例如，变成，

1013
00:44:32,510 --> 00:44:33,920
say, woman--
比如，女人——

1014
00:44:33,920 --> 00:44:36,320
if we want to change the combination to be woman-woman,
如果我们想把组合改成女人-女人，

1015
00:44:36,320 --> 00:44:39,200
notice that, now, the left and the rightmost numbers match.
注意，现在，最左边和最右边的数字匹配。

1016
00:44:39,200 --> 00:44:42,290
Or if we flip it back to man-man, it's just using different numbers
或者如果我们把它翻回男人-男人，它只是在尾部使用不同的数字

1017
00:44:42,290 --> 00:44:43,790
on the tail end again.
而已。

1018
00:44:43,790 --> 00:44:48,380
And meanwhile, if I rewind, there's these two identical values here.
同时，如果我倒带，这里有两个相同的数字。

1019
00:44:48,380 --> 00:44:51,680
These are called zero-width joiners or ZWNJ characters.
这些被称为零宽度连接符或 ZWNJ 字符。

1020
00:44:51,680 --> 00:44:55,460
It just is a special number that humans reserve to say,
它只是一个特殊的数字，人类保留它来说明，

1021
00:44:55,460 --> 00:45:00,210
glue the emoji at the left to the emoji on the right and so forth.
把左边的表情符号粘到右边的表情符号上，等等。

1022
00:45:00,210 --> 00:45:02,370
So it connects ideas in this way.
所以它以这种方式连接想法。

1023
00:45:02,370 --> 00:45:04,490
So there's actually a lot of emojis, nowadays,
所以现在实际上有很多表情符号，

1024
00:45:04,490 --> 00:45:07,370
that are a combination of different things.
是不同事物的组合。

1025
00:45:07,370 --> 00:45:09,650
"Heart on fire" is one that's, technically,
“燃烧的心”是一个从技术上来说，

1026
00:45:09,650 --> 00:45:13,190
the combination of a heart emoji, the fire emoji,
一个心形表情符号和一个火焰表情符号的组合，

1027
00:45:13,190 --> 00:45:16,110
joined together, numerically, in this way.
以这种方式在数字上连接在一起。

1028
00:45:16,110 --> 00:45:18,290
So computer scientists who come up with these things
所以想出这些东西的计算机科学家

1029
00:45:18,290 --> 00:45:21,290
are just reducing things to representations.
只是将事物简化为表示。

1030
00:45:21,290 --> 00:45:23,430
All we have at our disposal are 0's and 1's.
我们能利用的只有 0 和 1。

1031
00:45:23,430 --> 00:45:25,250
So we all just need to agree, ultimately--
所以最终我们需要达成一致——

1032
00:45:25,250 --> 00:45:28,760
whether we're Google, Microsoft, or the like-- how we're going to standardize
无论是谷歌、微软还是其他公司，我们都要想办法制定标准

1033
00:45:28,760 --> 00:45:31,030
these kinds of things as information.
将这些东西作为信息。

1034
00:45:31,030 --> 00:45:36,520
Questions, then, on how characters are represented in a computer,
那么，关于字符如何在计算机中表示，你们有什么问题吗？

1035
00:45:36,520 --> 00:45:38,260
be it English or any other language?
无论是英语还是其他语言？

1036
00:45:38,260 --> 00:45:38,760
Yeah.
是的。

1037
00:45:38,760 --> 00:45:40,630
AUDIENCE: How is the plus a number?
听众：加号怎么会是数字呢？

1038
00:45:40,630 --> 00:45:41,963
DAVID J. MALAN: How is the what?
大卫·J·马兰：你说什么？

1039
00:45:41,963 --> 00:45:43,930
AUDIENCE: The plus, the U+.
听众：加号，U+。

1040
00:45:43,930 --> 00:45:46,600
DAVID J. MALAN: Oh, the U+ is just a convention, really.
大卫·J·马兰：哦，U+只是一个约定俗成的符号而已。

1041
00:45:46,600 --> 00:45:49,820
So U+ represents a special Unicode character,
所以 U+ 代表一个特殊的 Unicode 字符，

1042
00:45:49,820 --> 00:45:51,790
which is a U with a plus in the middle.
也就是中间带加号的 U。

1043
00:45:51,790 --> 00:45:54,590
And this is just the convention for saying,
这只是一个约定俗成的符号，表示

1044
00:45:54,590 --> 00:45:58,600
hey, everyone, here comes a number that represents a Unicode code point.
嘿，大家好，接下来是一个代表 Unicode 码点的数字。

1045
00:45:58,600 --> 00:46:00,070
The U and the 1 have no-- sorry.
U 和 1 没有——抱歉。

1046
00:46:00,070 --> 00:46:02,278
The U and the plus have no mathematical significance.
U 和加号没有数学意义。

1047
00:46:02,278 --> 00:46:05,470
It's just a visual clue to folks.
它只是一个视觉提示。

1048
00:46:05,470 --> 00:46:10,460
Other questions on representing text in this way?
还有关于用这种方式表示文本的其他问题吗？

1049
00:46:10,460 --> 00:46:10,960
All right.
好的。

1050
00:46:10,960 --> 00:46:12,240
So what about colors?
那么颜色呢？

1051
00:46:12,240 --> 00:46:13,990
We've already started looking at pictures.
我们已经开始看图片了。

1052
00:46:13,990 --> 00:46:17,032
Well, how are those pictures, be it emojis or anything else, represented?
那么这些图片，无论是表情符号还是其他东西，是如何表示的呢？

1053
00:46:17,032 --> 00:46:19,870
One of the most common ways is just with RGB--
最常见的一种方式就是使用 RGB——

1054
00:46:19,870 --> 00:46:20,950
red, green, and blue.
红、绿和蓝。

1055
00:46:20,950 --> 00:46:24,700
It turns out that if we just keep track of how much red should
事实证明，如果我们只跟踪屏幕上应该显示多少红色

1056
00:46:24,700 --> 00:46:27,880
be on the screen, and how much green, and how much blue, combined together,
多少绿色，多少蓝色，然后将它们组合在一起，

1057
00:46:27,880 --> 00:46:29,890
that gives us every color of the rainbow,
就能得到彩虹中的所有颜色，

1058
00:46:29,890 --> 00:46:32,120
from white to black and everything in between.
从白色到黑色，以及所有介于两者之间的颜色。

1059
00:46:32,120 --> 00:46:35,620
So how do we represent an amount of red, and green, and blue?
那么我们如何表示红、绿和蓝的比例呢？

1060
00:46:35,620 --> 00:46:37,690
Well, frankly, just with three different numbers.
说白了，就是用三个不同的数字。

1061
00:46:37,690 --> 00:46:40,030
And this is how computers typically represent colors.
这就是计算机通常表示颜色的方式。

1062
00:46:40,030 --> 00:46:43,220
Every one of the dots on your computer screen or your phone screen
你的电脑屏幕或手机屏幕上的每个点

1063
00:46:43,220 --> 00:46:44,390
is called a pixel.
被称为像素。

1064
00:46:44,390 --> 00:46:50,130
And every single dot underneath the hood has three numbers associated with it,
每个点在内部都与三个数字相关联，

1065
00:46:50,130 --> 00:46:53,000
so three numbers, three numbers, three numbers for every little dot.
每个小点都对应三个数字，三个数字，三个数字。

1066
00:46:53,000 --> 00:46:56,420
And those three numbers, together, say how much red, green, and blue
这三个数字组合在一起表示在该位置应该显示多少红色、绿色和蓝色。

1067
00:46:56,420 --> 00:46:59,040
should the device display at that location.
应该在该位置显示多少红色、绿色和蓝色。

1068
00:46:59,040 --> 00:47:02,390
So, for instance, if you had a dot on your screen
例如，如果你屏幕上的一个点

1069
00:47:02,390 --> 00:47:07,520
that said, "use this much red, this much green this much blue," because each
表示“使用这么多红色，这么多绿色，这么多蓝色”，因为每个

1070
00:47:07,520 --> 00:47:11,820
of these numbers, I'll tell you, are one byte or eight bits,
数字，我告诉你，都是一个字节或八位，

1071
00:47:11,820 --> 00:47:15,710
which means the total possible values is 0 to 255--
这意味着可能的总值是 0 到 255——

1072
00:47:15,710 --> 00:47:19,070
let me just ballpark that the 72, it feels like a medium amount of red
让我猜一下，72 感觉像是中等程度的红色

1073
00:47:19,070 --> 00:47:21,350
because it's in between 0 and 255.
因为它介于 0 和 255 之间。

1074
00:47:21,350 --> 00:47:25,590
73 is a medium amount of green, and 33 of blue is just a little bit.
73 也是中等程度的绿色，而 33 的蓝色就少了一些。

1075
00:47:25,590 --> 00:47:29,480
So if you combine a medium amount of red, green, and a little bit of blue,
所以如果你将中等程度的红色、绿色和少量蓝色混合在一起，

1076
00:47:29,480 --> 00:47:32,840
anyone want to guess what color of the rainbow this is?
有人想猜猜这对应彩虹中的什么颜色吗？

1077
00:47:32,840 --> 00:47:33,507
AUDIENCE: Brown.
听众：棕色。

1078
00:47:33,507 --> 00:47:34,423
DAVID J. MALAN: Sorry?
大卫·J·马兰：你说什么？

1079
00:47:34,423 --> 00:47:35,190
AUDIENCE: Brown.
听众：棕色。

1080
00:47:35,190 --> 00:47:36,470
DAVID J. MALAN: Brown?
大卫·J·马兰：棕色？

1081
00:47:36,470 --> 00:47:37,228
So, close.
差不多。

1082
00:47:37,228 --> 00:47:39,020
It's a little more yellow than it is brown.
它比棕色更偏黄一些。

1083
00:47:39,020 --> 00:47:41,920
But if we combine them, it looks a little something like this.
但如果我们将它们组合在一起，看起来有点像这样。

1084
00:47:41,920 --> 00:47:43,887
This is just CS trivia, not something that even
这只是一些计算机科学的琐事，即使是我

1085
00:47:43,887 --> 00:47:46,970
I would be able to eyeball, unless I came up with that particular example.
也无法凭空想象出来，除非我想出了这个特定的例子。

1086
00:47:46,970 --> 00:47:48,607
But wait a minute.
等等。

1087
00:47:48,607 --> 00:47:49,940
We've seen these numbers before.
我们之前见过这些数字。

1088
00:47:49,940 --> 00:47:51,768
72, 73, 33 represented what--
72、73、33 代表什么——

1089
00:47:51,768 --> 00:47:52,310
AUDIENCE: Hi!
听众：嗨！

1090
00:47:52,310 --> 00:47:53,370
DAVID J. MALAN: --a few minutes ago?
大卫·J·马兰：——几分钟前？

1091
00:47:53,370 --> 00:47:55,787
So it meant "Hi!" but here I am, claiming, no, no, no, no,
所以它代表了“嗨！”，但我现在却说，不，不，不，不，

1092
00:47:55,787 --> 00:47:57,140
that means yellow.
这意味着黄色。

1093
00:47:57,140 --> 00:47:58,890
How do you reconcile this?
你如何调和这些？

1094
00:47:58,890 --> 00:48:01,550
Well, at the end of the day, this is all we have,
好吧，归根结底，这就是我们拥有的全部，

1095
00:48:01,550 --> 00:48:04,310
0's and 1's, whether you think of them as numbers,
0 和 1，无论你认为它们是数字，

1096
00:48:04,310 --> 00:48:06,620
or letters, or even colors now.
还是字母，甚至现在是颜色。

1097
00:48:06,620 --> 00:48:08,400
But it depends on the context.
但这取决于语境。

1098
00:48:08,400 --> 00:48:11,390
So if you've received a text message or an email,
所以如果你收到了短信或电子邮件，

1099
00:48:11,390 --> 00:48:13,850
odds are the pattern of 0's and 1's that the computer
计算机显示给你的 0 和 1 的模式很有可能

1100
00:48:13,850 --> 00:48:17,300
is showing you are going to be interpreted as text because that's
会被解释为文本，因为这就是

1101
00:48:17,300 --> 00:48:19,940
the whole point of a text message or an email.
短信或电子邮件的全部意义所在。

1102
00:48:19,940 --> 00:48:23,930
If, though, you opened up MacOS's or iOS's or Windows's or Android's
然而，如果你打开 macOS、iOS、Windows 或 Android 的

1103
00:48:23,930 --> 00:48:27,230
calculator app, the same pattern of 0's and 1's might
计算器应用程序，相同模式的 0 和 1 可能

1104
00:48:27,230 --> 00:48:30,650
be interpreted as numbers for some addition, or subtraction, or whatever.
会被解释为数字，用于加法、减法或其他运算。

1105
00:48:30,650 --> 00:48:33,780
If you open the same pattern of 0's and 1's in Photoshop,
如果你在 Photoshop 这样的图形程序中打开相同的 0 和 1 模式，

1106
00:48:33,780 --> 00:48:37,110
like a graphics program, they're going to be interpreted, in that context,
它们将在该上下文中被解释

1107
00:48:37,110 --> 00:48:37,950
as colors.
为颜色。

1108
00:48:37,950 --> 00:48:39,098
So context matters.
所以上下文很重要。

1109
00:48:39,098 --> 00:48:40,890
And, indeed, as soon as next week, when you
事实上，下周，当你

1110
00:48:40,890 --> 00:48:43,080
start writing code in that language called C,
开始用 C 语言编写代码时，

1111
00:48:43,080 --> 00:48:47,550
the onus will be on you, the programmer, to tell the computer, interpret
责任将落到你的肩上，作为程序员，你要告诉计算机，解释

1112
00:48:47,550 --> 00:48:52,593
the following sequence of bits as a number, or a letter, or something else.
以下位的序列为数字、字母或其他东西。

1113
00:48:52,593 --> 00:48:55,260
And you won't have to even worry about what the 0's and 1's are,
你甚至不必担心 0 和 1 是什么，

1114
00:48:55,260 --> 00:48:58,380
but you need to give the computer a hint as to what type of file
但你需要给计算机一个提示，说明你表示的是哪种类型的文件

1115
00:48:58,380 --> 00:49:00,730
or piece of data you're representing.
或数据片段。

1116
00:49:00,730 --> 00:49:01,890
So that gives us bits.
所以这就给了我们比特。

1117
00:49:01,890 --> 00:49:05,640
And you can actually see these dots, these pixels on the screen.
你实际上可以看到这些点，这些屏幕上的像素。

1118
00:49:05,640 --> 00:49:07,380
Let me zoom in, zoom in.
让我放大，放大。

1119
00:49:07,380 --> 00:49:10,470
And here we have it, just with this emoji, which, at the end of the day,
我们在这儿有它，就用这个表情符号，它归根结底

1120
00:49:10,470 --> 00:49:13,380
is a picture that someone at Apple, in this case, drew.
是一张苹果公司的人，在这种情况下，绘制的图片。

1121
00:49:13,380 --> 00:49:16,440
And you can see-- if you really zoom in, or take your phone or TV
你可以看到——如果你真的放大，或者拿着你的手机或电视

1122
00:49:16,440 --> 00:49:19,470
and really put it close to your face, you'll see all of these dots,
并真正靠近你的脸，你就会看到所有这些点，

1123
00:49:19,470 --> 00:49:20,700
depending on the hardware.
取决于硬件。

1124
00:49:20,700 --> 00:49:23,250
And each of these dots, these squares, is
而每个点，每个方块，是

1125
00:49:23,250 --> 00:49:28,350
storing 24 bits or three bytes, 24 bits, 24 bits, 24 bits.
存储 24 位或 3 个字节，24 位、24 位、24 位。

1126
00:49:28,350 --> 00:49:31,200
And that's whey, dot, dot, dot, if you've
这就是为什么，点、点、点，如果你有

1127
00:49:31,200 --> 00:49:35,730
got a photograph, for instance, that's three megabytes, which
一张照片，例如，它是 3 兆字节，这

1128
00:49:35,730 --> 00:49:42,030
is 3 million bytes, well, odds are there's 1 million pixels therein
是 300 万字节，那么，很有可能其中有 100 万像素

1129
00:49:42,030 --> 00:49:45,240
because you're using three bytes per pixel
因为你每像素使用 3 个字节

1130
00:49:45,240 --> 00:49:46,708
to represent each of those colors.
来表示每个颜色。

1131
00:49:46,708 --> 00:49:48,750
That's a bit of an oversimplification, but that's
这有点过于简化了，但这就是

1132
00:49:48,750 --> 00:49:51,840
why images and photos are getting bigger and bigger nowadays.
为什么如今图片和照片越来越大。

1133
00:49:51,840 --> 00:49:56,110
Because we're throwing even more pixels into the file.
因为我们正在往文件中添加更多像素。

1134
00:49:56,110 --> 00:49:56,610
Music--
音乐——

1135
00:49:56,610 --> 00:49:57,330
[MUSIC PLAYING]
[音乐播放]

1136
00:49:57,330 --> 00:49:59,880
--how could you represent music, digitally,
——你怎么可以用数字的方式，

1137
00:49:59,880 --> 00:50:03,920
using just 0's and 1's, or numbers, really?
只用 0 和 1，或者说，数字来表示音乐？

1138
00:50:03,920 --> 00:50:07,710
Any instinct, whether a musician or not?
无论是否音乐家，有什么想法？

1139
00:50:07,710 --> 00:50:08,743
Yeah.
是的。

1140
00:50:08,743 --> 00:50:11,060
AUDIENCE: The notes could be represented by a number.
观众：音符可以用数字来表示。

1141
00:50:11,060 --> 00:50:13,768
DAVID J. MALAN: Yeah, so we can just represent notes by a number.
大卫·J·马兰：是的，所以我们可以用数字来表示音符。

1142
00:50:13,768 --> 00:50:17,660
So A is some number, and B. And maybe sharp or flat is some other number.
所以 A 是某个数字，B 是另一个数字。也许升调或降调是其他数字。

1143
00:50:17,660 --> 00:50:21,610
But note might not be quite enough for some--
但音符可能不足以用于某些情况——

1144
00:50:21,610 --> 00:50:22,110
yeah?
是吧？

1145
00:50:22,110 --> 00:50:22,876
AUDIENCE: [INAUDIBLE].
观众：[听不清]

1146
00:50:22,876 --> 00:50:23,834
DAVID J. MALAN: Ah, OK.
大卫·J·马兰：啊，好吧。

1147
00:50:23,834 --> 00:50:26,470
So one note-- one number to represent the note, itself,
所以一个音符——一个数字来表示音符本身，

1148
00:50:26,470 --> 00:50:30,820
the sound or the pitch; one other number to represent the duration.
音调或音高；另一个数字来表示持续时间。

1149
00:50:30,820 --> 00:50:35,000
In the context of piano, how long is the human holding the key down?
在钢琴的情况下，人类按下琴键的时间有多长？

1150
00:50:35,000 --> 00:50:37,330
And maybe I can think of a third, the loudness.
也许我可以想到第三个，响度。

1151
00:50:37,330 --> 00:50:39,457
How hard has the person played that note?
这个人弹奏那个音符的力度有多大？

1152
00:50:39,457 --> 00:50:41,290
So, minimally, with three numbers, you could
所以，最少，用三个数字，你就可以

1153
00:50:41,290 --> 00:50:43,492
imagine representing music, as well.
想象一下，用它来表示音乐。

1154
00:50:43,492 --> 00:50:45,700
And, indeed, that's very well might be what computers
事实上，这很有可能就是计算机

1155
00:50:45,700 --> 00:50:47,720
are doing when you listen to sound.
在你听声音的时候所做的。

1156
00:50:47,720 --> 00:50:48,610
What about video?
视频呢？

1157
00:50:48,610 --> 00:50:51,760
How could you represent videos, as well?
你怎么用它来表示视频呢？

1158
00:50:51,760 --> 00:50:52,270
Yeah?
是吗？

1159
00:50:52,270 --> 00:50:53,460
AUDIENCE: Through many images.
观众：通过许多图像。

1160
00:50:53,460 --> 00:50:54,790
DAVID J. MALAN: Yeah, many images.
大卫·马兰：没错，许多图像。

1161
00:50:54,790 --> 00:50:57,750
So if you've ever produced a film or looked at some of the fine print,
如果你曾经制作过电影或者看过一些细节的话，

1162
00:50:57,750 --> 00:51:02,070
30 frames per second, FPS, or 29 frames per second
每秒 30 帧，FPS，或者每秒 29 帧，

1163
00:51:02,070 --> 00:51:04,560
is just how many pictures are flying across the screen.
就是屏幕上每秒播放的图片数量。

1164
00:51:04,560 --> 00:51:06,810
But that's really all a video file is on a computer,
但实际上，计算机上的视频文件就是

1165
00:51:06,810 --> 00:51:10,470
lots of pictures moving so quickly in front of us that you and I, our brains,
很多图片快速地在我们面前移动，以至于你和我的大脑

1166
00:51:10,470 --> 00:51:12,930
interpolate that as being actual motion.
将它们理解为实际的运动。

1167
00:51:12,930 --> 00:51:15,720
And, in fact, from yesteryear, motion pictures,
实际上，从过去来说，电影

1168
00:51:15,720 --> 00:51:18,570
it's like pictures that are giving the illusion of motion,
就像图片创造了运动的幻觉，

1169
00:51:18,570 --> 00:51:21,910
even though there's only 30 or so of them flying across the screen.
即使只有 30 张左右的图片在屏幕上移动。

1170
00:51:21,910 --> 00:51:24,870
So we have a way, now, to represent information, both as
所以现在我们有了一种方法来表示信息，无论是

1171
00:51:24,870 --> 00:51:29,250
input and output, whether it's numbers, letters, images, anything else.
输入还是输出，无论是数字、字母、图片，还是其他任何东西。

1172
00:51:29,250 --> 00:51:32,200
Let's now focus on what's inside of that black box,
现在让我们关注一下那个黑盒子里面是什么，

1173
00:51:32,200 --> 00:51:36,360
so to speak, wherein we have algorithms, step-by-step instructions
也就是说，在里面我们有算法，一步一步的指令

1174
00:51:36,360 --> 00:51:38,430
for solving some problem.
用来解决一些问题。

1175
00:51:38,430 --> 00:51:41,760
Now, what do I mean by "algorithms" or "step-by-step instructions"?
现在，我所说的“算法”或者“一步一步的指令”是什么意思呢？

1176
00:51:41,760 --> 00:51:44,815
Well, maybe, if we were to turn this into code--
嗯，也许，如果我们要把这些变成代码——

1177
00:51:44,815 --> 00:51:47,190
and that's how we'll connect the dots, ultimately, today.
这正是我们最终要将这些点连起来的方式。

1178
00:51:47,190 --> 00:51:51,480
Code is just the implementation, in computers, of algorithms.
代码只是在计算机中实现算法。

1179
00:51:51,480 --> 00:51:53,920
An algorithm can be something we do in the physical world.
算法可以是我们可以在现实世界中做的事情。

1180
00:51:53,920 --> 00:51:58,180
Code is how we implement that exact same idea, in the context of a computer,
代码是我们如何在计算机环境中实现相同的想法，

1181
00:51:58,180 --> 00:51:58,810
instead.
而不是。

1182
00:51:58,810 --> 00:52:02,152
And here, for instance, is a very common application inside of a computer,
例如，这里有一个计算机内部非常常见的应用，

1183
00:52:02,152 --> 00:52:02,860
for your context.
为了你的理解。

1184
00:52:02,860 --> 00:52:04,900
This is the iOS version of the icon.
这是 iOS 版本的图标。

1185
00:52:04,900 --> 00:52:06,963
And, typically, if you click on that icon,
通常，如果你点击这个图标，

1186
00:52:06,963 --> 00:52:09,130
you'll see something like all of your contacts here,
你会看到这里的所有联系人，

1187
00:52:09,130 --> 00:52:12,250
typically, alphabetical, by first name or last name.
通常按照姓氏或名字的首字母顺序排列。

1188
00:52:12,250 --> 00:52:17,103
And your phone or your computer lets you often search for someone's name
你的手机或电脑通常让你可以搜索某人的名字

1189
00:52:17,103 --> 00:52:17,770
at the very top.
在最上面。

1190
00:52:17,770 --> 00:52:20,620
And it will autocomplete, and it'll be pretty darn fast.
它会自动补全，而且速度非常快。

1191
00:52:20,620 --> 00:52:23,470
But it'll be pretty darn fast because the programmers who
但它会很快，因为实现这个应用的程序员

1192
00:52:23,470 --> 00:52:28,210
implemented that application are looking for someone quickly for you.
正在为你快速搜索某个人。

1193
00:52:28,210 --> 00:52:33,400
Now, I can do this old school style, whereby we have one of these things
现在，我可以按照老方法来做，我们有一个这样的东西

1194
00:52:33,400 --> 00:52:35,840
from yesteryear, an actual phone book.
来自过去，一本真正的电话簿。

1195
00:52:35,840 --> 00:52:39,160
So, in a physical phone book like this, you might have 1,000 pages.
所以，在一个像这样的实体电话簿中，你可能会有 1000 页。

1196
00:52:39,160 --> 00:52:42,440
And on every page are a bunch of names and a bunch of numbers.
每一页都有很多名字和很多号码。

1197
00:52:42,440 --> 00:52:45,490
And as I flip through this, I could look for someone specific.
当我翻阅这本书时，我可以寻找某个人。

1198
00:52:45,490 --> 00:52:49,010
So suppose I want to call John Harvard, who's-- the first name, of course,
假设我想给 John Harvard 打电话，他的名字是——当然，他的名字

1199
00:52:49,010 --> 00:52:52,720
starts with a J. Well, I could just turn, page by page,
以 J 开头。我可以一页一页地翻，

1200
00:52:52,720 --> 00:52:54,590
looking for John Harvard.
寻找 John Harvard。

1201
00:52:54,590 --> 00:52:57,000
And if he's not there, I keep turning and turning.
如果他不在，我就继续翻阅。

1202
00:52:57,000 --> 00:52:58,000
So this is an algorithm.
所以这就是一个算法。

1203
00:52:58,000 --> 00:53:00,790
I'm stepping through the phone book, one page at a time.
我正在一页一页地翻阅电话簿。

1204
00:53:00,790 --> 00:53:04,510
Is it correct, this algorithm, assuming I'm looking down?
这个算法正确吗，假设我正在向下看？

1205
00:53:04,510 --> 00:53:05,470
So, yeah.
所以，是的。

1206
00:53:05,470 --> 00:53:07,930
I mean, it's stupidly slow because why am
我的意思是，它非常慢，因为我为什么要

1207
00:53:07,930 --> 00:53:10,585
I wasting my time with the A's, and the B's, and the so forth?
浪费时间去看 A，B 等等？

1208
00:53:10,585 --> 00:53:12,460
I could probably take bigger bites out of it.
我可以更快地找到。

1209
00:53:12,460 --> 00:53:13,210
But it is correct.
但它是正确的。

1210
00:53:13,210 --> 00:53:16,293
And that's going to be one of the goals of writing code, is to, of course,
而编写代码的目标之一就是，当然，

1211
00:53:16,293 --> 00:53:18,100
solve the problem you care about correctly.
正确解决你关心的问题。

1212
00:53:18,100 --> 00:53:20,470
So correctness goes without saying, or else what's
所以正确性是不言而喻的，否则

1213
00:53:20,470 --> 00:53:23,080
the point of writing the code or solving-- or implementing
编写代码或解决问题的意义何在？或者实施

1214
00:53:23,080 --> 00:53:23,800
the algorithm?
算法？

1215
00:53:23,800 --> 00:53:24,040
All right.
好的。

1216
00:53:24,040 --> 00:53:25,623
Well, let me at least speed things up.
好吧，至少让我加快速度。

1217
00:53:25,623 --> 00:53:29,380
So, instead of one page at a time, so, two, four, six, eight--
所以，一次翻一页，所以，二、四、六、八……

1218
00:53:29,380 --> 00:53:33,420
no, ignore that-- 10, 12, 14, 16, and so forth.
不，忽略那个——十、十二、十四、十六，等等。

1219
00:53:33,420 --> 00:53:35,920
It's a little hard to do, physically, but it sounded faster.
从物理上来说，这有点难做，但听起来更快。

1220
00:53:35,920 --> 00:53:38,815
It was twice as fast, theoretically, but is it correct?
理论上，它快了一倍，但它正确吗？

1221
00:53:38,815 --> 00:53:39,505
AUDIENCE: No.
观众：不。

1222
00:53:39,505 --> 00:53:40,480
DAVID J. MALAN: So, no.
大卫·J·马兰：所以，不。

1223
00:53:40,480 --> 00:53:41,210
Why?
为什么？

1224
00:53:41,210 --> 00:53:41,710
Yeah?
是吗？

1225
00:53:41,710 --> 00:53:43,180
AUDIENCE: Yeah, you might [INAUDIBLE].
观众：是的，你可能会[听不清]。

1226
00:53:43,180 --> 00:53:46,263
DAVID J. MALAN: Yeah, I might miss John Harvard because, just by accident,
大卫·J·马兰：是的，我可能会错过约翰·哈佛，因为，仅仅是偶然，

1227
00:53:46,263 --> 00:53:48,490
he might get sandwiched between two pages.
他可能会被夹在两页之间。

1228
00:53:48,490 --> 00:53:52,210
But do I have to throw the algorithm out altogether?
但我必须完全抛弃这个算法吗？

1229
00:53:52,210 --> 00:53:53,260
Probably not.
可能不会。

1230
00:53:53,260 --> 00:53:56,073
Once I reach the K section, which is past the J section,
一旦我到达K部分，也就是超过J部分，

1231
00:53:56,073 --> 00:53:58,990
I could double back at least one page, at least, [PATS TELEPHONE BOOK]
我至少可以翻回一页，至少，[拍电话簿]

1232
00:53:58,990 --> 00:54:01,540
and just make sure I didn't blow past him completely.
并确保我没有完全错过他。

1233
00:54:01,540 --> 00:54:04,450
So that is twice as fast, because I'm going two pages
所以速度快了一倍，因为我一次翻两页

1234
00:54:04,450 --> 00:54:05,922
at a time, plus one extra step.
一次，加一步额外操作。

1235
00:54:05,922 --> 00:54:07,130
So it's still an improvement.
所以这仍然是一种改进。

1236
00:54:07,130 --> 00:54:08,922
So the first algorithm, worst case, if it's
所以第一个算法，最坏情况下，如果它是

1237
00:54:08,922 --> 00:54:10,900
not John, but someone whose name starts with Z,
不是约翰，而是名字以Z开头的某人，

1238
00:54:10,900 --> 00:54:12,860
that might take me a full 1,000 steps.
这可能需要我走完1000步。

1239
00:54:12,860 --> 00:54:16,210
The second algorithm is just 500 steps because I'm
第二个算法只需要500步，因为我

1240
00:54:16,210 --> 00:54:19,660
going two pages at a time plus one, in case I have to double back,
一次翻两页，加一步，以防我必须翻回去，

1241
00:54:19,660 --> 00:54:20,990
but that's in the worst case.
但那是最坏的情况下。

1242
00:54:20,990 --> 00:54:26,080
But most of us in the-- in yesteryear, and what Apple, and Google, and others
但我们大多数人在——在过去，以及苹果、谷歌和其他

1243
00:54:26,080 --> 00:54:29,440
are actually doing is, in software or here, physically,
实际上正在做的是，在软件中或在这里，在物理上，

1244
00:54:29,440 --> 00:54:31,540
we're typically going, roughly, to the middle.
我们通常会，大致地，走到中间。

1245
00:54:31,540 --> 00:54:34,360
Especially if there's no cheat sheet on the side, like A through Z,
特别是如果旁边没有备忘单，比如从A到Z，

1246
00:54:34,360 --> 00:54:36,235
I'm just going to go to, roughly, the middle.
我只是大致地走到中间。

1247
00:54:36,235 --> 00:54:38,920
And, oh, here I am, not surprisingly, in the M section.
而且，哦，我在这里，不出所料，在M部分。

1248
00:54:38,920 --> 00:54:40,360
But what do I now know.
但我现在知道什么。

1249
00:54:40,360 --> 00:54:43,660
If this is the M section, where is John Harvard?
如果这是M部分，约翰·哈佛在哪里？

1250
00:54:43,660 --> 00:54:46,130
So, clearly, to the left, alphabetically.
所以，很明显，在左边，按字母顺序排列。

1251
00:54:46,130 --> 00:54:49,660
And so here is where we can take a much bigger bite out of the problem.
所以，这里是我们能够从问题中获得更多收益的地方。

1252
00:54:49,660 --> 00:54:52,480
We can really divide and conquer this problem
我们真的可以分而治之这个问题

1253
00:54:52,480 --> 00:54:56,080
by tearing [TEARS BOOK] the problem in half, throwing half of it
通过撕开[撕书]问题的一半，扔掉一半

1254
00:54:56,080 --> 00:55:01,240
away, 500 pages away, leaving me with a smaller problem,
扔掉，500页扔掉，留下一个更小的问题，

1255
00:55:01,240 --> 00:55:04,370
half as big, that I can really just now repeat.
小一半，我可以现在重复一遍。

1256
00:55:04,370 --> 00:55:07,150
So I go, roughly, here, and now I'm in the E section.
所以我大致地走到这里，现在我在E部分。

1257
00:55:07,150 --> 00:55:09,102
So I went a little too far back.
所以我回过头走得太远了。

1258
00:55:09,102 --> 00:55:10,060
But what do I now know?
但我现在知道什么？

1259
00:55:10,060 --> 00:55:11,680
If this is the E pages, where's John?
如果这是E页，约翰在哪里？

1260
00:55:11,680 --> 00:55:12,460
AUDIENCE: To the right.
观众：在右边。

1261
00:55:12,460 --> 00:55:13,690
DAVID J. MALAN: So now he's to the right.
大卫·J·马兰：所以他现在在右边。

1262
00:55:13,690 --> 00:55:15,815
So I can-- again, hopefully, he's not on that page.
所以我可以——再一次，希望他不在那页上。

1263
00:55:15,815 --> 00:55:20,380
I can tear the problem in half again, throw that 250 pages away.
我可以再次把问题撕成两半，扔掉那250页。

1264
00:55:20,380 --> 00:55:23,530
And now I've gone from 1,000 to 500 to 250 pages.
现在我已经从1000页变到500页，再到250页。

1265
00:55:23,530 --> 00:55:26,470
Now I'm moving because the first algorithm was one page at a time,
现在我正在移动，因为第一个算法是一次翻一页，

1266
00:55:26,470 --> 00:55:27,280
second was two.
第二个是一次翻两页。

1267
00:55:27,280 --> 00:55:29,373
This is hundreds of pages at a time.
这次是一次翻几百页。

1268
00:55:29,373 --> 00:55:31,540
And if I go, roughly, again, to the middle; roughly,
如果我再次大体上走到中间；大体上，

1269
00:55:31,540 --> 00:55:33,790
to the middle; roughly, to the middle, hopefully, I'll
到中间；大体上，到中间，希望我会

1270
00:55:33,790 --> 00:55:36,350
find John Harvard on one final page.
在最后一页找到约翰·哈佛。

1271
00:55:36,350 --> 00:55:39,140
Can only do this once, but one final page.
只能做一次，但只有一页。

1272
00:55:39,140 --> 00:55:42,010
So that invites the question, I would think,
所以我想，这引发了一个问题，

1273
00:55:42,010 --> 00:55:44,680
if the phone book does have 1,000 or so pages,
如果电话簿有1000页左右，

1274
00:55:44,680 --> 00:55:50,210
how many times can I divide the problem in half to get down to one last page?
我需要将问题分成两半多少次才能得到最后的一页？

1275
00:55:50,210 --> 00:55:51,580
So it's, roughly, 10.
所以，大约是10次。

1276
00:55:51,580 --> 00:55:56,203
And the quick math is 1,000 goes to 500 to 250 to 125 to 67 something.
快速计算一下，从1000页到500页，到250页，到125页，到67页左右。

1277
00:55:56,203 --> 00:55:58,370
So we have to deal with rounding issues, eventually.
所以，我们最终必须处理四舍五入的问题。

1278
00:55:58,370 --> 00:56:01,640
But assuming we work out the math, it's, roughly, 10 page tears.
但假设我们算出结果，大约需要撕10页。

1279
00:56:01,640 --> 00:56:07,580
And that's crazy faster than 1,000 pages and still faster than 500 pages.
这比翻1000页快得多，而且也比翻500页快。

1280
00:56:07,580 --> 00:56:09,350
So it's fundamentally better.
所以，从根本上说，它更好。

1281
00:56:09,350 --> 00:56:13,792
And, indeed, if I finally get to that final page, in the software world,
实际上，如果我最终找到了最后一页，在软件世界里，

1282
00:56:13,792 --> 00:56:16,250
you'd see something like this, John Harvard and his number,
你会看到这样的东西，约翰·哈佛和他的号码，

1283
00:56:16,250 --> 00:56:17,810
which you're welcome to call or text.
你可以打电话或发短信给他。

1284
00:56:17,810 --> 00:56:22,850
But that's how we now have our answer, much like the single page there.
但这就是我们现在得到答案的方式，就像那里的一页一样。

1285
00:56:22,850 --> 00:56:27,090
But let's consider just how efficient that actually is.
但让我们考虑一下这实际上有多高效。

1286
00:56:27,090 --> 00:56:30,560
So here's a very rough, broad-- with broad strokes, a chart.
所以，这里有一个非常粗略的图表，用粗线条画的。

1287
00:56:30,560 --> 00:56:31,998
So here's an xy plot.
这是一个xy坐标图。

1288
00:56:31,998 --> 00:56:34,790
So here, on the horizontal, is going to be the size of the problem.
所以，这里，水平轴上，表示问题的规模。

1289
00:56:34,790 --> 00:56:38,360
And, by that, I mean, how many pages are we trying to go through?
也就是说，我们试图翻多少页？

1290
00:56:38,360 --> 00:56:39,890
This would be zero pages.
这表示零页。

1291
00:56:39,890 --> 00:56:41,480
This would be a lot of pages.
这表示很多页。

1292
00:56:41,480 --> 00:56:43,610
How much time does it take to solve the problem?
解决问题需要多长时间？

1293
00:56:43,610 --> 00:56:46,100
How long does it take to find John Harvard or anyone else?
找到约翰·哈佛或其他任何人需要多长时间？

1294
00:56:46,100 --> 00:56:47,540
This means no time.
这表示不需要时间。

1295
00:56:47,540 --> 00:56:48,960
This means a lot of time.
这表示需要很多时间。

1296
00:56:48,960 --> 00:56:51,110
So what's the relationship among these algorithms?
那么，这些算法之间有什么关系呢？

1297
00:56:51,110 --> 00:56:53,490
Well, the first one is actually just a straight line.
嗯，第一个实际上只是一条直线。

1298
00:56:53,490 --> 00:56:57,330
If there's n pages in the phone book, well, I
如果电话簿有n页，那么，我

1299
00:56:57,330 --> 00:57:00,060
claim that it's a one-to-one relationship.
认为这是一个一一对应关系。

1300
00:57:00,060 --> 00:57:04,290
Because if Verizon or the phone company adds another page next year,
因为如果Verizon或电话公司明年加了一页，

1301
00:57:04,290 --> 00:57:06,900
that just means I might have one more step next year,
这也意味着我明年可能需要多走一步，

1302
00:57:06,900 --> 00:57:09,990
as well, to find John Harvard or anyone else.
同样，才能找到约翰·哈佛或其他人。

1303
00:57:09,990 --> 00:57:12,930
But the second algorithm, it's also a straight line,
但第二个算法，它也是一条直线，

1304
00:57:12,930 --> 00:57:15,295
but it's lower, even though it might not look obvious.
但它更低，尽管它可能不明显。

1305
00:57:15,295 --> 00:57:16,420
And what do I mean by that?
我的意思是什么呢？

1306
00:57:16,420 --> 00:57:18,253
Well, let me just draw some temporary lines.
好吧，让我画一些临时线条。

1307
00:57:18,253 --> 00:57:20,610
If this is how many pages are in the phone book-- dot,
如果这是电话簿的页数——点，

1308
00:57:20,610 --> 00:57:24,090
dot, dot-- notice that it takes this much time, on the red line,
点，点——注意，在红线上，需要这么长时间，

1309
00:57:24,090 --> 00:57:25,360
to solve the problem.
来解决问题。

1310
00:57:25,360 --> 00:57:28,530
But if I, instead, use the second algorithm,
但如果我用第二个算法，

1311
00:57:28,530 --> 00:57:30,507
it takes me half as much time.
我只需要一半的时间。

1312
00:57:30,507 --> 00:57:32,340
So, even though they're both straight lines,
所以，尽管它们都是直线，

1313
00:57:32,340 --> 00:57:34,923
one is strictly lower than the other, which means it's faster.
但其中一个严格低于另一个，这意味着它更快。

1314
00:57:34,923 --> 00:57:35,640
It's better.
它更好。

1315
00:57:35,640 --> 00:57:38,310
But the third algorithm is a fundamentally different shape,
但第三个算法的形状完全不同，

1316
00:57:38,310 --> 00:57:40,090
and it looks a little something like this.
它看起来有点像这样。

1317
00:57:40,090 --> 00:57:42,370
And it looks like it's going to flatten, flatten, flatten out,
它看起来要变平，变平，变平，

1318
00:57:42,370 --> 00:57:43,260
but it never does.
但它永远不会变平。

1319
00:57:43,260 --> 00:57:46,170
It just rises ever so slowly.
它只是非常缓慢地上升。

1320
00:57:46,170 --> 00:57:49,290
And what this means is that if maybe Cambridge and Allston, here
这意味着，如果也许剑桥和奥尔思顿，在这里

1321
00:57:49,290 --> 00:57:53,030
in Massachusetts, merge next year, so we go from 1,000 page phone book
在马萨诸塞州，明年合并，所以我们从1000页的电话簿

1322
00:57:53,030 --> 00:57:58,100
to a 2,000 page phone book, that means, if we're here this year,
变成2000页的电话簿，这意味着，如果我们今年在这里，

1323
00:57:58,100 --> 00:57:59,660
we're over here next year.
我们明年就在这里了。

1324
00:57:59,660 --> 00:58:01,190
It's not all that much higher.
它并没有高很多。

1325
00:58:01,190 --> 00:58:04,320
But it would be much higher if we were using the first two algorithms.
但如果我们使用前两个算法，它会高很多。

1326
00:58:04,320 --> 00:58:04,820
Why?
为什么？

1327
00:58:04,820 --> 00:58:07,880
It'd be an extra 1,000 steps to find someone in that combined phone
在那个合并的电话簿里找一个人，需要多走1000步，

1328
00:58:07,880 --> 00:58:09,890
book or maybe another 500 steps.
或者可能还需要多走500步。

1329
00:58:09,890 --> 00:58:13,520
But, to be clear, if we're using my third and final algorithm,
但，说清楚，如果我们使用我的第三个也是最后一个算法，

1330
00:58:13,520 --> 00:58:15,620
how many more steps will it take me next year,
明年我需要多走多少步，

1331
00:58:15,620 --> 00:58:20,930
when Cambridge and Allston merge into one 2,000-page phone book?
当剑桥和奥尔思顿合并成一本2000页的电话簿？

1332
00:58:20,930 --> 00:58:22,800
Just one more step, no big deal.
只有一步，没什么大不了的。

1333
00:58:22,800 --> 00:58:24,400
It's one more page tear.
这又撕掉了一页。

1334
00:58:24,400 --> 00:58:26,900
And this is what we mean, ultimately, about not just writing
最终，我们想要表达的是，不仅仅是编写

1335
00:58:26,900 --> 00:58:29,720
code or implementing algorithms that are correct, but, now,
代码或实现正确的算法，而是现在，

1336
00:58:29,720 --> 00:58:33,070
that are well-designed or efficient, specifically.
设计良好或高效的算法，特别要强调这一点。

1337
00:58:33,070 --> 00:58:35,570
And this is what makes someone a better programmer, perhaps,
而这也许正是让一个人成为比其他人更优秀的程序员的原因，

1338
00:58:35,570 --> 00:58:38,237
than someone else, or a better problem-solver than someone else,
或者成为比其他人更优秀的解决问题者，

1339
00:58:38,237 --> 00:58:40,130
is acquiring, over time, these skills.
就是随着时间的推移，掌握这些技能。

1340
00:58:40,130 --> 00:58:43,280
So that, sure, you could solve the problem quickly and dirtily,
因此，当然，你可以快速且粗糙地解决问题，

1341
00:58:43,280 --> 00:58:45,560
so to speak, but if you're going to have a lot of data
可以这么说，但如果你最终要处理大量的数据，

1342
00:58:45,560 --> 00:58:49,492
eventually, be it in your phone book or maybe your Google website index,
无论是你的电话簿，还是你的谷歌网站索引，

1343
00:58:49,492 --> 00:58:51,200
if you're searching the web, you're going
如果你正在搜索网页，你将会

1344
00:58:51,200 --> 00:58:54,540
to want to try to think about how to design algorithms that look like this.
想要尝试思考如何设计类似这样的算法。

1345
00:58:54,540 --> 00:58:56,370
Mathematically, this is called a logarithm.
从数学角度来说，这叫做对数。

1346
00:58:56,370 --> 00:58:59,495
And it's log base 2 because I'm halving, halving, halving, again and again.
这是以 2 为底的对数，因为我一直在不断地对半分，对半分。

1347
00:58:59,495 --> 00:59:03,120
But, for now, just know that it's a fundamentally faster and different
但现在，你只需要知道这是一种从根本上来说更快、更不同的

1348
00:59:03,120 --> 00:59:03,820
shape.
形状。

1349
00:59:03,820 --> 00:59:06,330
So, among our goals in CS50, ultimately, is not just
因此，在 CS50 中，我们的最终目标不仅仅是

1350
00:59:06,330 --> 00:59:12,270
to write and solve problems correctly, but, ultimately, ever more efficiently,
编写代码并正确解决问题，而是最终以更高效的方式来解决问题，

1351
00:59:12,270 --> 00:59:13,600
as well.
同样。

1352
00:59:13,600 --> 00:59:20,110
Any questions, then, on these ideas of efficiency and design?
那么，关于这些效率和设计方面的想法，有什么问题吗？

1353
00:59:20,110 --> 00:59:21,480
Any questions here?
这里有什么问题吗？

1354
00:59:21,480 --> 00:59:22,080
Yeah, in back?
好的，最后面的那位同学？

1355
00:59:22,080 --> 00:59:23,480
AUDIENCE: [INAUDIBLE].
观众：[听不清]

1356
00:59:23,480 --> 00:59:24,170
DAVID J. MALAN: A good question.
大卫·马兰：好问题。

1357
00:59:24,170 --> 00:59:27,462
Just to repeat it, can a graph like this capture the accuracy of the algorithm?
我来重复一下，这样的图表可以捕捉到算法的准确性吗？

1358
00:59:27,462 --> 00:59:28,640
Short answer, no.
简单来说，不行。

1359
00:59:28,640 --> 00:59:31,460
For instance, if I drew a straight line that
例如，如果我画一条直线，

1360
00:59:31,460 --> 00:59:35,570
is super low on this graph, which would imply that the algorithm takes
在图表上非常低，这将意味着该算法需要

1361
00:59:35,570 --> 00:59:38,240
the same amount of time, no matter how many pages there are,
相同的时间，无论有多少页，

1362
00:59:38,240 --> 00:59:41,480
my algorithm might actually be to just pull a random page from the phone
我的算法实际上可能是随机从电话中取出一页，

1363
00:59:41,480 --> 00:59:43,230
book, one step, and say, here it is.
簿，一步，然后说，就是它了。

1364
00:59:43,230 --> 00:59:45,230
But that's not necessarily going to be accurate,
但这并不一定准确，

1365
00:59:45,230 --> 00:59:47,010
unless I get really, really lucky.
除非我非常非常幸运。

1366
00:59:47,010 --> 00:59:49,820
So the graph really only speaks to efficiency
因此，图表实际上只反映了效率

1367
00:59:49,820 --> 00:59:52,880
and the design of the algorithm, not the correctness of it.
以及算法的设计，而不是它的正确性。

1368
00:59:52,880 --> 00:59:57,170
To analyze the correctness, you need to use another mechanism altogether,
为了分析正确性，你需要使用完全不同的机制，

1369
00:59:57,170 --> 00:59:58,280
namely, logic.
即逻辑。

1370
00:59:58,280 --> 01:00:02,120
Other questions now, on efficiency, in this way?
现在还有其他关于效率方面的问题吗？

1371
01:00:02,120 --> 01:00:02,940
No?
没有了？

1372
01:00:02,940 --> 01:00:03,440
All right.
好的。

1373
01:00:03,440 --> 01:00:08,090
So, with that in mind, let's begin to translate this to some actual code.
因此，考虑到这一点，让我们开始将这些内容翻译成一些实际的代码。

1374
01:00:08,090 --> 01:00:11,630
And, in fact, before we look at, today, one actual programming language,
事实上，在我们今天看到一种实际的编程语言之前，

1375
01:00:11,630 --> 01:00:14,720
albeit a graphical one, let's consider something called pseudocode.
尽管它是一种图形化的语言，让我们考虑一下一种叫做伪代码的东西。

1376
01:00:14,720 --> 01:00:16,497
So pseudocode has no formal meaning.
因此，伪代码没有正式的意义。

1377
01:00:16,497 --> 01:00:19,580
Generally, you write it in English or whatever your own human language is.
通常，你用英语或你的母语来编写它。

1378
01:00:19,580 --> 01:00:25,600
But you write your thoughts down tersely, succinct, but precisely.
但你用简洁、精炼但精确的语言写下你的想法。

1379
01:00:25,600 --> 01:00:28,570
You try to really convey your thoughts, not with a wave of the hand,
你试图真正传达你的想法，而不是用挥手，

1380
01:00:28,570 --> 01:00:31,510
metaphorically, but step by step, precisely.
用比喻的方式，而是逐步地，精确地。

1381
01:00:31,510 --> 01:00:32,650
So what do I mean by this?
那么，我的意思是呢？

1382
01:00:32,650 --> 01:00:35,380
Here might be some representative pseudocode
这里可能有一些代表性的伪代码，

1383
01:00:35,380 --> 01:00:39,337
via which I describe that third and final algorithm in a way
通过它们，我以一种能够

1384
01:00:39,337 --> 01:00:41,920
that I could hand it to you and you could do the same at home.
将它交给你，你可以在家做同样的事情的方式来描述第三种也是最后一种算法。

1385
01:00:41,920 --> 01:00:45,425
Or I could hand it to someone at Google, and they could implement it in Android.
或者我可以把它交给谷歌的某个人，他们可以在 Android 上实现它。

1386
01:00:45,425 --> 01:00:48,550
Or I could hand it to someone at Apple, and they could implement it in iOS.
或者我可以把它交给苹果的某个人，他们可以在 iOS 上实现它。

1387
01:00:48,550 --> 01:00:51,280
So, step one, I claimed, was "Pick up phone book."
因此，第一步，我声称是“拿起电话簿”。

1388
01:00:51,280 --> 01:00:54,430
Step two was "Open to the middle of the phone book."
第二步是“翻到电话簿的中间”。

1389
01:00:54,430 --> 01:00:57,145
Step three, "Look at the page," as I did.
第三步，"看看那一页"，就像我做的那样。

1390
01:00:57,145 --> 01:00:59,020
And now things get a little more interesting.
现在事情变得有趣起来。

1391
01:00:59,020 --> 01:01:03,760
Step four, "If person is on page," I have to make a decision.
第四步，"如果该人在这页上"，我必须做出决定。

1392
01:01:03,760 --> 01:01:07,810
Presumably, what should I do if John Harvard is on the page I'm looking at?
据推测，如果我在看的页面上有约翰·哈佛，我应该怎么办？

1393
01:01:07,810 --> 01:01:12,050
So stop and probably make the call, or email, or whatever the goal might be.
所以，停下来，可能要打电话或发邮件，或者做任何可能的目标。

1394
01:01:12,050 --> 01:01:15,430
And so I'm going to actually indent this, visually, by a few spaces,
因此，我实际上将通过几个空格在视觉上缩进它，

1395
01:01:15,430 --> 01:01:19,900
just to make clear that you should only do line five if the answer to line four
只是为了清楚地表明，只有当第四行的答案为是时，你才应该执行第五行。

1396
01:01:19,900 --> 01:01:21,130
is yes.
是。

1397
01:01:21,130 --> 01:01:22,360
Otherwise, you don't bother.
否则，你就不要费心了。

1398
01:01:22,360 --> 01:01:26,640
The next thing I'm going to do, line six, is consider another possibility.
接下来我要做的事情，也就是第六行，是考虑另一种可能性。

1399
01:01:26,640 --> 01:01:28,980
"If the person I'm looking for is earlier
"如果我正在寻找的人在更早

1400
01:01:28,980 --> 01:01:30,805
in the book," what do I want to do?
在书中"，我想做什么？

1401
01:01:30,805 --> 01:01:31,680
Well, I could write--
好吧，我可以写——

1402
01:01:31,680 --> 01:01:33,388
I could describe this in a bunch of ways.
我可以用很多方法描述它。

1403
01:01:33,388 --> 01:01:35,190
I'm going to do this tersely, as follows.
我将简短地进行如下操作。

1404
01:01:35,190 --> 01:01:38,910
"Open to the middle of the left half of the book,
"翻开书的左边一半的中间，

1405
01:01:38,910 --> 01:01:41,610
so it's open to the middle of the left half of the book.
所以它翻开了书的左边一半的中间。

1406
01:01:41,610 --> 01:01:43,320
And then, what am I going to do?
然后，我要做什么？

1407
01:01:43,320 --> 01:01:46,630
Well, I've just divided the problem into something smaller.
好吧，我刚刚把问题分成更小的问题。

1408
01:01:46,630 --> 01:01:48,580
But it's fundamentally the same problem.
但它本质上是一样的问题。

1409
01:01:48,580 --> 01:01:51,100
It's just a fewer number of pages.
只是页数更少。

1410
01:01:51,100 --> 01:01:54,017
So I'm just going to go back to line three and do it again
所以我只是要回到第三行再做一次。

1411
01:01:54,017 --> 01:01:56,850
because the problem is just getting smaller and smaller, presumably.
因为这个问题正在变得越来越小，据推测。

1412
01:01:56,850 --> 01:01:59,520
Else, if the person I'm looking for is later in the book,
否则，如果我正在寻找的人在书的后面，

1413
01:01:59,520 --> 01:02:02,760
open to the middle of the right half of the book,
翻开书的右边一半的中间，

1414
01:02:02,760 --> 01:02:04,950
and, also, "Go back to line 3."
同时，“回到第三行。”

1415
01:02:04,950 --> 01:02:08,160
But there's a fourth possibility and its failure
但还有第四种可能性，以及它没有实现

1416
01:02:08,160 --> 01:02:11,580
to realize, sometimes, that there's other possible outcomes that
有时，会意识到可能存在其他结果，这些结果会

1417
01:02:11,580 --> 01:02:14,400
make computers crash, or spinning beach balls, or the like,
导致电脑崩溃，或出现旋转沙漏，或类似的情况，

1418
01:02:14,400 --> 01:02:17,130
if a programmer doesn't anticipate some situation.
如果程序员没有预料到某些情况。

1419
01:02:17,130 --> 01:02:20,538
What's the fourth possible situation, when looking for John Harvard?
寻找约翰·哈佛时，第四种可能的情况是什么？

1420
01:02:20,538 --> 01:02:22,080
AUDIENCE: If they're not in the book.
观众：如果他们不在书里。

1421
01:02:22,080 --> 01:02:24,205
DAVID J. MALAN: If they're not in the book, at all.
大卫·J·马兰：如果他们根本不在书里。

1422
01:02:24,205 --> 01:02:27,450
And, indeed, I might get to the very last page and John Harvard's not even
实际上，我可能翻到最后一页，约翰·哈佛甚至都不

1423
01:02:27,450 --> 01:02:28,200
on that one.
在那一页上。

1424
01:02:28,200 --> 01:02:33,450
I'd better handle that and say, else, as a catchall, just quit altogether.
我最好处理一下，并说，否则，作为一个万能的解决方案，直接退出。

1425
01:02:33,450 --> 01:02:35,610
And, truly, often, in your Macs, PCs, phones,
实际上，在你的Mac、PC、手机中，

1426
01:02:35,610 --> 01:02:38,310
when they freeze, or, again, spinning beach ball, or the like,
当它们冻结，或者再次出现旋转沙漏，或类似情况时，

1427
01:02:38,310 --> 01:02:39,660
and just weird things happen, that's just
只是奇怪的事情发生了，那是因为

1428
01:02:39,660 --> 01:02:41,220
because some human made a dumb mistake.
因为有些人犯了愚蠢的错误。

1429
01:02:41,220 --> 01:02:44,430
And they didn't realize that you could somehow get your phone or your laptop
他们没有意识到你可以以某种方式让你的手机或笔记本电脑

1430
01:02:44,430 --> 01:02:47,070
into a configuration that they didn't anticipate.
进入他们没有预料到的配置。

1431
01:02:47,070 --> 01:02:48,870
So we're going to try to handle that here.
所以我们将在這裡尝试处理这个问题。

1432
01:02:48,870 --> 01:02:50,880
Now this is just one way of writing pseudocode.
现在这只是写伪代码的一种方式。

1433
01:02:50,880 --> 01:02:52,230
There's no one way to do this.
没有一种正确的方法可以做到这一点。

1434
01:02:52,230 --> 01:02:55,500
All of us in this room could come up with slightly different pseudocode.
我们房间里的每个人都可以想出略微不同的伪代码。

1435
01:02:55,500 --> 01:02:59,190
But I think you'll find characteristic are certain building
但我认为你会发现，特征是某些构建的

1436
01:02:59,190 --> 01:03:02,130
blocks in all of our answers.
模块存在于我们所有人的答案中。

1437
01:03:02,130 --> 01:03:04,590
Here, in yellow, are what, as of today, we're
这里，用黄色标示的是，截止到今天，我们

1438
01:03:04,590 --> 01:03:07,540
going to start calling "functions," technically speaking.
开始称之为“函数”，从技术上讲。

1439
01:03:07,540 --> 01:03:10,800
These are like actions or verbs that literally, in this case, tell me
这些就像动作或动词，在这种情况下，它们实际上告诉我

1440
01:03:10,800 --> 01:03:11,700
what to do.
该怎么做。

1441
01:03:11,700 --> 01:03:15,150
Next, we're going to have these things, conditionals,
接下来，我们将拥有这些东西，条件语句，

1442
01:03:15,150 --> 01:03:20,525
forks in the road, so to speak, that take me down this path or another,
打个比方，道路的分叉，引导我走这条路或另一条路，

1443
01:03:20,525 --> 01:03:21,150
metaphorically.
比喻地说。

1444
01:03:21,150 --> 01:03:22,933
So I do this thing or something else.
所以我做这件事或做其他事情。

1445
01:03:22,933 --> 01:03:25,350
But how do I decide if I want to go this way, or this way,
但我该如何决定是否要走这条路，或走那条路，

1446
01:03:25,350 --> 01:03:26,620
or this way, or this way?
或走这条路，或走那条路？

1447
01:03:26,620 --> 01:03:27,780
I need to ask a question.
我需要问一个问题。

1448
01:03:27,780 --> 01:03:30,000
And in programming, we'll typically use what
在编程中，我们通常使用什么

1449
01:03:30,000 --> 01:03:33,240
are called Boolean expressions, named after a mathematician, Boole.
被称为布尔表达式，以数学家布尔命名。

1450
01:03:33,240 --> 01:03:36,090
And a Boolean expression is essentially just a question
布尔表达式本质上就是一个问题

1451
01:03:36,090 --> 01:03:42,300
with a yes/no answer, a true or false answer, a 1 or 0 answer.
只有两种答案：是或否，真或假，1或0。

1452
01:03:42,300 --> 01:03:45,520
It doesn't matter how you think about it, but it's got two possible answers.
无论你怎么想，它都只有两种可能的答案。

1453
01:03:45,520 --> 01:03:49,228
And so you can think of these as being expressions with question marks,
所以你可以把它们看成带问号的表达式，

1454
01:03:49,228 --> 01:03:50,520
even though I didn't draw such.
尽管我没画出来。

1455
01:03:50,520 --> 01:03:54,270
Person on page, person earlier in book, person later in book,
书页上的人物，书中前面的人物，书中后面的人物，

1456
01:03:54,270 --> 01:03:55,590
those are Boolean expressions.
这些都是布尔表达式。

1457
01:03:55,590 --> 01:04:00,400
And they tell me whether I should go down one fork in the road or another.
它们告诉我应该走哪条路。

1458
01:04:00,400 --> 01:04:03,600
And, lastly, there's this, "Go back to line 3," in two different places.
最后，还有一个“回到第3行”的指令，出现在两个不同的位置。

1459
01:04:03,600 --> 01:04:06,630
That represents what we call a "loop," some kind of cycle that's
这表示我们所说的“循环”，一种周而复始的结构，

1460
01:04:06,630 --> 01:04:08,370
doing something again and again.
一遍又一遍地执行某件事。

1461
01:04:08,370 --> 01:04:10,733
Now these are just a few building blocks here--
这里只是几个基本模块：

1462
01:04:10,733 --> 01:04:12,900
functions, conditionals, Boolean expressions, loops.
函数、条件语句、布尔表达式、循环。

1463
01:04:12,900 --> 01:04:15,210
But you'll find that they're characteristic of so
但你会发现，它们是如此的

1464
01:04:15,210 --> 01:04:18,380
many different languages, one of which we'll look at today, another of which
普遍存在于不同的语言中，我们今天将研究其中一种，另一种

1465
01:04:18,380 --> 01:04:19,380
we'll look at next week.
我们将在下周研究。

1466
01:04:19,380 --> 01:04:23,130
And those include, indeed, C, and Python, and other languages still.
这些语言包括C、Python，以及其他的语言。

1467
01:04:23,130 --> 01:04:25,350
And so this is why we focus on these basics
所以，这就是我们在这最初阶段关注这些基础知识的原因，

1468
01:04:25,350 --> 01:04:27,480
and fundamentals in these early days because we're
因为我们将在后面的学习中

1469
01:04:27,480 --> 01:04:29,080
going to see them again and again.
一遍又一遍地看到它们。

1470
01:04:29,080 --> 01:04:31,800
So even if you feel like that fire hose is hitting you sometime,
所以，即使你感觉被信息轰炸了，

1471
01:04:31,800 --> 01:04:34,320
we'll give you, today, ultimately, more visuals
我们今天会提供更多直观的素材，

1472
01:04:34,320 --> 01:04:38,730
by which you can hang onto, so as to actually write code, ultimately,
让你能够理解，最终能够编写代码，

1473
01:04:38,730 --> 01:04:41,490
in different languages and solve all sorts of problems.
用不同的语言解决各种问题。

1474
01:04:41,490 --> 01:04:46,050
Now, we'd be remiss in not bringing up what's behind characters like Spot,
现在，我们不能不谈论像Spot这样的角色背后的技术，

1475
01:04:46,050 --> 01:04:48,570
and ChatGPT, and other software, artificial intelligence.
还有ChatGPT，以及其他软件，人工智能。

1476
01:04:48,570 --> 01:04:51,430
And it turns out, to get to the point of AI,
事实证明，要达到人工智能的水平，

1477
01:04:51,430 --> 01:04:54,150
we're actually going to need more building blocks than just
我们需要的不仅仅是函数、循环和条件语句这些基本模块。

1478
01:04:54,150 --> 01:04:56,125
functions, and loops, and conditionals.
这并不像看起来那么简单。

1479
01:04:56,125 --> 01:04:57,750
It's not going to be quite that simple.
到目前为止，我们已经学了很多。

1480
01:04:57,750 --> 01:04:59,200
But this has been a lot, so far.
我们先休息5分钟。

1481
01:04:59,200 --> 01:05:01,530
Let's go ahead, here, and take a five-minute break.
休息回来后，我们将学习人工智能，

1482
01:05:01,530 --> 01:05:03,990
And when we resume, we'll take a look not only at AI,
以及一种叫做Scratch的编程语言。

1483
01:05:03,990 --> 01:05:06,630
but also a specific language called Scratch.
所以，暂时还没有蛋糕，但我们5分钟后回来。

1484
01:05:06,630 --> 01:05:09,870
So no cake, just yet, but we'll come back in five.
在我们重新开始之前，我想介绍一下我们今天的特别嘉宾，

1485
01:05:09,870 --> 01:05:14,820
Before we dive back in, I just wanted to call out a special guest
除了Spot，还有一个人从更远的地方来到这里。

1486
01:05:14,820 --> 01:05:16,980
that we have here today, beyond Spot, someone
实际上，如果你学过CS50x，也就是CS50的开放课程版本，

1487
01:05:16,980 --> 01:05:19,050
who's come from even farther away.
或者过去几年在CS50的一些在线社群中学习过，

1488
01:05:19,050 --> 01:05:22,560
And, in fact, if any of you have taken CS50x, the OpenCourseWare version
你可能得到过一位来自新西兰的人的帮助。

1489
01:05:22,560 --> 01:05:25,270
of the class, or dabbled in it over the past few years
她今天专程来到这里，与我们一起上这节课。

1490
01:05:25,270 --> 01:05:27,490
in some of CS50's online social communities,
她是CS50的Brenda Anderson。

1491
01:05:27,490 --> 01:05:29,710
you might have had your questions answered
让我们一起欢迎她。

1492
01:05:29,710 --> 01:05:31,810
by a certain human from New Zealand.
[掌声]

1493
01:05:31,810 --> 01:05:35,890
And she's come all this way, today, to spend this lecture with us.
这只是一点小小的感谢。

1494
01:05:35,890 --> 01:05:38,350
This is CS50's own Brenda Anderson.
多年来，Brenda帮助了成千上万的在线学生。

1495
01:05:38,350 --> 01:05:41,920
If you might come up for acknowledgment from all of us here.
事实上，她女儿是今年和未来CS50中“鸭子”形象的创作者。

1496
01:05:41,920 --> 01:05:45,052
[APPLAUSE]
感谢Brenda。

1497
01:05:47,440 --> 01:05:50,170
It's not much, but just a little token of our thanks.
[掌声]

1498
01:05:50,170 --> 01:05:53,830
Brenda has helped, truly, thousands of students online
好的。

1499
01:05:53,830 --> 01:05:55,370
for the past many years.
如今，很难回避人工智能的话题。

1500
01:05:55,370 --> 01:05:58,780
And, in fact, her own daughter has been the artist
我们想借此机会将一些知识点串联起来。

1501
01:05:58,780 --> 01:06:03,615
behind the duck that's about to loom large in CS50 this year and beyond.
[结束]

1502
01:06:03,615 --> 01:06:04,615
So, thank you to Brenda.
[结束]

1503
01:06:04,615 --> 01:06:07,936
[APPLAUSE]
[结束]

1504
01:06:11,410 --> 01:06:12,400
All right.
[结束]

1505
01:06:12,400 --> 01:06:16,690
So it's hard to escape a discussion of artificial intelligence, nowadays,
[结束]

1506
01:06:16,690 --> 01:06:18,790
but we thought we'd use this as an opportunity
[结束]

1507
01:06:18,790 --> 01:06:20,260
to connect some of these dots.
[结束]

1508
01:06:20,260 --> 01:06:22,460
Because, indeed, over the course of the semester,
的确，在本学期中，

1509
01:06:22,460 --> 01:06:25,990
we'll be-- not only be talking about artificial intelligence or AI,
我们不仅会讨论人工智能或 AI，

1510
01:06:25,990 --> 01:06:28,900
but really using it all the more constructively
而且真正地更具建设性地利用它

1511
01:06:28,900 --> 01:06:31,570
to help you solve problems, help you get unblocked
帮助你解决问题，帮助你突破障碍

1512
01:06:31,570 --> 01:06:35,680
when you hit a wall, cognitively or syntactically, when writing code.
当你编写代码时，在认知上或语法上遇到障碍。

1513
01:06:35,680 --> 01:06:39,430
And, indeed, it's no accident that we have this duck here,
而且，我们这里有这只鸭子，这绝非偶然，

1514
01:06:39,430 --> 01:06:42,370
looming large, which is really the embodiment of the sort of AI
它非常显眼，它实际上是你将在 CS50 中体验到的 AI 的体现，

1515
01:06:42,370 --> 01:06:45,200
that you'll experience within CS50, itself, this year.
今年的 CS50 自身就是。

1516
01:06:45,200 --> 01:06:48,220
So let's talk about the so-called chatbots that
所以让我们来谈谈那些被称为聊天机器人的东西

1517
01:06:48,220 --> 01:06:50,500
inspired some of those headlines with which we began
激发了我们开始课程时的一些头条新闻

1518
01:06:50,500 --> 01:06:52,780
class, that weren't quite on the nose.
那些并不完全切中要害。

1519
01:06:52,780 --> 01:06:54,880
So the class will still be taught by us humans,
所以这门课仍然会由我们人类教授，

1520
01:06:54,880 --> 01:06:59,170
but helped by this CS50 duck, a chatbot of sorts.
但会受到这只 CS50 鸭子的帮助，它也算是一种聊天机器人。

1521
01:06:59,170 --> 01:07:00,590
Now what do I mean by this?
我现在指的是什么？

1522
01:07:00,590 --> 01:07:04,090
Well, it turns out that, when it comes to implementing something
事实证明，当谈到实现某些东西时

1523
01:07:04,090 --> 01:07:06,730
like an artificial intelligence, we don't quite
比如人工智能，我们还没有完全

1524
01:07:06,730 --> 01:07:10,550
have all of the building blocks yet, certainly after just today's week zero,
拥有所有的构建模块，当然，仅仅经过了今天的零周之后，

1525
01:07:10,550 --> 01:07:12,000
to implement something like that.
要实现这样的东西。

1526
01:07:12,000 --> 01:07:14,960
But I think we can skate in that direction, intellectually.
但我认为我们可以在智力上向那个方向前进。

1527
01:07:14,960 --> 01:07:19,670
So, for instance, if we were to take a stab at implementing our own chatbot--
例如，如果我们要尝试实现我们自己的聊天机器人——

1528
01:07:19,670 --> 01:07:22,883
some interactive text-based program that talks to us,
一些与我们对话的交互式基于文本的程序，

1529
01:07:22,883 --> 01:07:24,800
and answers questions, and the like-- we could
并回答问题等等，我们可以

1530
01:07:24,800 --> 01:07:28,850
try borrowing some of today's ideas already, those functions, conditionals,
尝试借用一些今天的想法，比如那些函数、条件语句、

1531
01:07:28,850 --> 01:07:30,007
loops, and more.
循环等等。

1532
01:07:30,007 --> 01:07:31,590
And I could write something like this.
我可以写出类似这样的东西。

1533
01:07:31,590 --> 01:07:34,370
If I am writing code or pseudocode for a chatbot,
如果我正在为聊天机器人编写代码或伪代码，

1534
01:07:34,370 --> 01:07:37,170
I could program the chatbot to do something like this.
我可以为聊天机器人编程使其执行类似的操作。

1535
01:07:37,170 --> 01:07:39,230
If the student says, hello, to the chatbot,
如果学生对聊天机器人说“你好”，

1536
01:07:39,230 --> 01:07:41,840
then the chatbot should say, hello, back.
那么聊天机器人应该回复“你好”。

1537
01:07:41,840 --> 01:07:44,900
Else, if the student says, goodbye, well, the chatbot
否则，如果学生说“再见”，那么聊天机器人

1538
01:07:44,900 --> 01:07:46,580
should say, goodbye, back.
应该回复“再见”。

1539
01:07:46,580 --> 01:07:51,800
Else, if the student asks how you are, the chat bot should say that it's well.
否则，如果学生问“你好吗”，聊天机器人应该说它很好。

1540
01:07:51,800 --> 01:07:54,020
But things get a little harder when you start
但当你开始提问

1541
01:07:54,020 --> 01:07:57,470
asking more interesting questions, like, else,
更有趣的问题时，就会变得更难，比如，否则，

1542
01:07:57,470 --> 01:08:00,990
if the student asks why 111 in binary is 7 in decimal.
如果学生问为什么二进制的 111 等于十进制的 7。

1543
01:08:00,990 --> 01:08:03,980
Now, you could imagine that we just have a conditional,
现在，你可以想象我们只有一个条件语句，

1544
01:08:03,980 --> 01:08:08,570
with this Boolean expression, that programs the chatbot to just give you
用这个布尔表达式，来编程聊天机器人，让你得到

1545
01:08:08,570 --> 01:08:12,230
the answer and explain, in an English sentence, why that, in fact, is.
答案并用英语句子解释为什么确实是那样。

1546
01:08:12,230 --> 01:08:20,750
But what if you, the student, asks why 110 is 6 in decimal or why 010 is 2?
但如果你，学生，问为什么 110 等于十进制的 6 或为什么 010 等于 2 呢？

1547
01:08:20,750 --> 01:08:24,229
I mean, you can just imagine the explosion in the amount of code
我的意思是，你可以想象我们必须编写的代码量会爆炸性增长

1548
01:08:24,229 --> 01:08:28,370
that we would have to write to just anticipate every darn question that you
仅仅为了预测你可能会问的每一个问题而需要编写的代码量

1549
01:08:28,370 --> 01:08:31,375
might ask about today and every other class, not to mention all
可能会问关于今天和所有其他课程的问题，更不用说所有

1550
01:08:31,375 --> 01:08:32,750
of the knowledge in the universe.
宇宙中的知识了。

1551
01:08:32,750 --> 01:08:36,649
So, surely, there are other ways to implement algorithms
所以，当然，还有其他方法可以实现算法

1552
01:08:36,649 --> 01:08:39,319
that allow something like a chatbot or AI,
允许像聊天机器人或 AI 这样的东西

1553
01:08:39,319 --> 01:08:43,700
more generally, to be fed input, still, like all of the internet, all
更一般地说，被输入信息，仍然像整个互联网，所有

1554
01:08:43,700 --> 01:08:46,760
of the worldwide web, all of the pages and textual content therein,
万维网，所有网页和其中的文本内容

1555
01:08:46,760 --> 01:08:51,050
but to let it just figure out how to answer our questions based
而是让它根据这些输入

1556
01:08:51,050 --> 01:08:54,330
on those kinds of inputs, assuming the inputs, themselves, are accurate.
来想出如何回答我们的问题，假设这些输入本身是准确的。

1557
01:08:54,330 --> 01:08:56,510
So "large language models" is a term you might
所以“大型语言模型”是你可能

1558
01:08:56,510 --> 01:08:59,720
have heard bandied about over the past several months, or LLMs.
在过去几个月听到的术语，或者说是 LLMs。

1559
01:08:59,720 --> 01:09:04,729
And a large language model really is an implementation, in software,
而大型语言模型实际上是软件中的一种实现，

1560
01:09:04,729 --> 01:09:09,630
of code that actually takes, as input, lots and lots of language--
代码，它实际上以大量的语言作为输入——

1561
01:09:09,630 --> 01:09:13,310
like the text of lots and lots of web pages, dictionaries, encyclopedias,
比如大量的网页、字典、百科全书的文本

1562
01:09:13,310 --> 01:09:14,779
Wikipedias, and the like--
维基百科等等——

1563
01:09:14,779 --> 01:09:19,729
and infers, from the patterns of English words or any human language,
它从英文单词或任何人类语言的模式中推断

1564
01:09:19,729 --> 01:09:22,907
what a typical human might actually say when asked a question.
当被问到问题时，一个普通人实际上会说什么。

1565
01:09:22,907 --> 01:09:24,740
And some of these questions are easy, right?
其中一些问题很简单，对吧？

1566
01:09:24,740 --> 01:09:28,165
Probably, on the internet, alone, not to mention everyday life, if someone
可能，在互联网上，一个人，更不用说日常生活了，如果有人

1567
01:09:28,165 --> 01:09:29,540
extends their hand and says, "Hi.
伸出手说：“你好。

1568
01:09:29,540 --> 01:09:33,000
How are you," odds are, with 90% probability, you're going to say,
你好吗？”很有可能，有 90% 的概率，你会说，

1569
01:09:33,000 --> 01:09:33,500
"Good.
“很好。

1570
01:09:33,500 --> 01:09:34,000
Thanks.
谢谢。

1571
01:09:34,000 --> 01:09:34,700
How are you?"
你好吗？”

1572
01:09:34,700 --> 01:09:37,250
So I bet we could write software that just
所以，我敢打赌我们可以编写一个软件，它可以

1573
01:09:37,250 --> 01:09:41,569
infers what it should say, probabilistically, statistically, based
根据概率，统计学，基于这些模式推断它应该说什么。

1574
01:09:41,569 --> 01:09:43,069
on those kinds of patterns online.
这些在线模式。

1575
01:09:43,069 --> 01:09:45,442
And that's, indeed, where the world is starting
这确实是当今世界在最复杂的算法领域开始走向的地方，

1576
01:09:45,442 --> 01:09:47,359
to go, when it comes to the most sophisticated
你我这些人类

1577
01:09:47,359 --> 01:09:49,151
of algorithms, where you and I, the humans,
不会试图预测所有可能的输入。

1578
01:09:49,151 --> 01:09:51,979
we don't try to anticipate every possible input.
相反，我们给它一个更通用的

1579
01:09:51,979 --> 01:09:54,620
Rather, we give it a more general purpose
输入，比如所有的人类知识，理想情况下，就让它自己去弄清楚。

1580
01:09:54,620 --> 01:09:58,277
input, like all human knowledge, and ideally just let it figure things out.
现在，我们还没有达到那个程度。

1581
01:09:58,277 --> 01:09:59,610
Now, we're not quite there, yet.
而且你可能听说过这些大型语言模型会产生幻觉或错误。

1582
01:09:59,610 --> 01:10:02,000
And odds are you've heard of hallucinations or just mistakes
但它们的输入并不完美。

1583
01:10:02,000 --> 01:10:03,680
that these large language models make.
有时候会有一些随机性，因为你不想它总是说完全一样的话。

1584
01:10:03,680 --> 01:10:05,005
But their inputs are imperfect.
即使你我可能也会说，“嗯，我今天不太好”10% 的时间。

1585
01:10:05,005 --> 01:10:07,130
And sometimes there's a bit of randomness sprinkled
所以你需要以某种方式扰乱输出。

1586
01:10:07,130 --> 01:10:10,088
in because you don't want the thing to always say the exact same thing.
但在 CS50 和大型语言模型的世界里，

1587
01:10:10,088 --> 01:10:14,250
Even you and I might say, "Eh, I'm not that great today" 10% of the time.
我们确实拥有像 ChatGPT、Bing Chat 以及其他这样的工具。

1588
01:10:14,250 --> 01:10:16,730
So you need to perturb the output in some way.
我们会规定，出于 CS50 的目的，

1589
01:10:16,730 --> 01:10:20,630
But within CS50 and within this world of large language models,
我们今年的方向是，这就是课程大纲中的内容，等等。

1590
01:10:20,630 --> 01:10:24,630
we do have these tools like ChatGPT, and Bing, chat, and others.
使用除 CS50 自有工具之外的基于 AI 的软件是不允许的，会被认为是不合理的。

1591
01:10:24,630 --> 01:10:26,810
And we'll stipulate that, for CS50's purposes,
所以这里的目标不是简单地拿走

1592
01:10:26,810 --> 01:10:28,910
the direction we're going this year is that this
在我看来，这些工具是不可避免的，而且明显很有帮助

1593
01:10:28,910 --> 01:10:30,710
is what's in the syllabus, dot, dot, dot;
并且能节省时间。

1594
01:10:30,710 --> 01:10:32,840
that it will not be allowed, it will be considered
但是，我们希望对这些聊天机器人的帮助程度有一些智力上的限制。

1595
01:10:32,840 --> 01:10:37,348
not reasonable to use AI-based software, other than CS50's own.
因为你可能已经看到，如果你问它一个问题，

1596
01:10:37,348 --> 01:10:39,140
So the goal here is not to simply take away
这些聊天机器人已经很擅长不仅帮你完成当前的想法，还会

1597
01:10:39,140 --> 01:10:43,250
tools that are clearly inevitable, in my view, and clearly helpful
帮你完成第二个和第三个想法，并帮你完成作业。

1598
01:10:43,250 --> 01:10:44,720
and productivity savers.
但我认为，通过提示，我们可以引导我们自己的工具，

1599
01:10:44,720 --> 01:10:48,440
But we'd like there to be some guardrails, intellectually, on just how
作为计算机科学家，朝着一个你认为是正确平衡的方向发展，就像有一个

1600
01:10:48,440 --> 01:10:49,653
helpful these chatbots are.
全天候陪伴你的好导师，他不只是给你答案，

1601
01:10:49,653 --> 01:10:52,070
Because as you've probably seen, if you ask it a question,
而是试图引导你找到相同的答案。

1602
01:10:52,070 --> 01:10:54,560
these chatbots are already pretty good at not just helping
这样你才能从经验中有所收获，理想情况下，三个多月后，

1603
01:10:54,560 --> 01:10:56,310
you finish your current thought, but it'll
这些辅助轮也可以拆掉了。

1604
01:10:56,310 --> 01:10:59,900
hand you your second and your third thought and do the assignment for you.
你也能独立完成。

1605
01:10:59,900 --> 01:11:02,660
But I think, through prompting, so to speak,
所以，使用 CS50 自有的基于 AI 的软件是合理的，

1606
01:11:02,660 --> 01:11:04,850
we'll be able to coax some of our own tools,
它将以 CS50 鸭子的形式出现，现在已经可以使用了——

1607
01:11:04,850 --> 01:11:07,100
being computer scientists, ourself, in a direction
我们将在整个学期使用它——在 CS50.ai 上，这是一个基于网络的应用程序，

1608
01:11:07,100 --> 01:11:10,200
that you actually find to be the right balance, akin to having
它与 ChatGPT 非常相似，但它

1609
01:11:10,200 --> 01:11:14,310
a good tutor by your side 24/7, who doesn't just hand you answers,
具有 CS50 教学助教或 TF 或助教 TA 的个性，

1610
01:11:14,310 --> 01:11:16,223
but, indeed, tries to lead you to the same.
它还把自己当做一只鸭子。

1611
01:11:16,223 --> 01:11:18,390
So you actually get something out of the experience,
所以你实际上可以从体验中获得一些东西，

1612
01:11:18,390 --> 01:11:20,520
and, ideally, three-plus months from now,
而且理想情况下，三个月后，

1613
01:11:20,520 --> 01:11:22,380
those training wheels can come off, too.
那些辅助轮也可以卸掉了。

1614
01:11:22,380 --> 01:11:24,880
And you're able to still stand on your own.
你也能独立地站起来了。

1615
01:11:24,880 --> 01:11:28,770
So it will be reasonable to use CS50's own AI-based software which
所以用CS50自己的基于AI的软件是合理的，它

1616
01:11:28,770 --> 01:11:33,210
will actually take the form of a CS50 duck, which is actually available now--
实际上会以CS50鸭子的形式出现，现在已经可以使用了--

1617
01:11:33,210 --> 01:11:37,170
and we'll use it throughout the term-- at CS50.ai, a web-based application
我们将在整个学期使用它--在CS50.ai，一个基于网络的应用程序

1618
01:11:37,170 --> 01:11:39,450
that's quite similar to ChatGPT, but that
它与ChatGPT非常相似，但是

1619
01:11:39,450 --> 01:11:44,010
has the personality of a CS50 teaching fellow or TF, or teaching assistant,
拥有CS50助教或TF或助教的性格，

1620
01:11:44,010 --> 01:11:47,220
TA, that also happens to think of itself as a duck.
TA，它还认为自己是一只鸭子。

1621
01:11:47,220 --> 01:11:49,860
And for reasons we'll get to in a couple of weeks time,
出于某些原因，我们将在几周后讨论，

1622
01:11:49,860 --> 01:11:54,105
but rubber ducks, in particular, are a thing in programming.
但橡胶鸭子，尤其是在编程中，是很有意义的。

1623
01:11:54,105 --> 01:11:56,730
But more on that, before long, as you can even see from the one
但很快就会更多，甚至从我桌上的那个就能看到

1624
01:11:56,730 --> 01:11:58,350
there on my desk.
就在我的桌子上。

1625
01:11:58,350 --> 01:12:01,110
With that said, too, well, I'm going to call out CS50's own Brenda
话说回来，我要点名CS50的布伦达

1626
01:12:01,110 --> 01:12:05,485
Anderson, whose daughter, Sophie, kindly not only created
安德森，她的女儿索菲不仅很好心地创造了

1627
01:12:05,485 --> 01:12:07,860
the first incarnation, digitally, of this duck, but also,
这个鸭子的第一个数字化的化身，而且还

1628
01:12:07,860 --> 01:12:11,560
most recently, once it actually did more than quack a random number
最近，它不再只是对着问题随机嘎嘎叫几次，现在

1629
01:12:11,560 --> 01:12:13,540
of times in response to questions, has now
已经

1630
01:12:13,540 --> 01:12:15,320
been virtually brought to life, too.
被虚拟地赋予了生命。

1631
01:12:15,320 --> 01:12:18,760
So, all that and more, over the coming weeks, but you'll find, ultimately,
所以，在接下来的几周里，所有这些以及更多，你最终会发现，

1632
01:12:18,760 --> 01:12:23,590
that the goal is to really bring to life the availability of an AI-based tutor
目标是真正让基于人工智能的导师能够使用

1633
01:12:23,590 --> 01:12:26,650
that you have access to, a friend in your--
你就可以使用，一个在你身边的伙伴，

1634
01:12:26,650 --> 01:12:30,340
next to you, that will help guide you through a lot of the course's
它会帮助你度过课程中的很多挑战

1635
01:12:30,340 --> 01:12:31,660
challenges along the way.
一路上的挑战。

1636
01:12:31,660 --> 01:12:33,310
And we actually rolled it out this past summer,
事实上，我们去年夏天就推出了它，

1637
01:12:33,310 --> 01:12:35,950
already, with some of your predecessors, through the Harvard Summer School.
已经让你们的前辈们在哈佛暑期学校体验过了。

1638
01:12:35,950 --> 01:12:38,200
One student wrote, at summer's end, that this duck
一个学生在暑假结束时写道，这只鸭子

1639
01:12:38,200 --> 01:12:40,180
"felt like having a personal tutor--
“感觉就像拥有了一个私人导师——

1640
01:12:40,180 --> 01:12:44,110
I love how AI bots will answer questions without ego and without judgment
我喜欢人工智能机器人如何不带任何自负或判断地回答问题

1641
01:12:44,110 --> 01:12:47,110
generally entertaining even the stupidest of questions
通常会用有趣的方式回答，即使是最愚蠢的问题

1642
01:12:47,110 --> 01:12:49,360
without treating them like they're stupid.
而不像对待蠢问题一样。

1643
01:12:49,360 --> 01:12:53,140
It has, as one could expect, an inhuman level of patience."
正如人们所期望的那样，它有着非人的耐心。”

1644
01:12:53,140 --> 01:12:56,410
So there's actually something really there because as many teachers
所以，这确实很有用，因为像CS50里那么多的老师

1645
01:12:56,410 --> 01:12:57,520
as there are in CS50--
像CS50里那么多——

1646
01:12:57,520 --> 01:13:00,730
myself, the course's preceptors, teaching fellows, teaching assistants,
我，课程的导师，助教，教学助理，

1647
01:13:00,730 --> 01:13:03,490
and course assistants-- there's only so many of us.
还有课程助理——我们人数有限。

1648
01:13:03,490 --> 01:13:05,650
And we're only awake so many hours of the day.
而且我们每天清醒的时间也是有限的。

1649
01:13:05,650 --> 01:13:08,620
And I think you'll find, too, that we're on the cusp of something
我想你也会发现，我们正处于一个即将发生巨变的时刻，

1650
01:13:08,620 --> 01:13:11,080
pretty remarkable, in the coming years, where
在接下来的几年里，将会发生一些非常了不起的事情，

1651
01:13:11,080 --> 01:13:14,380
it's going to get a lot more enabling, now, to learn material
现在学习材料会变得容易很多，

1652
01:13:14,380 --> 01:13:18,110
not only within the confines of a class, but on your own, ultimately, as well.
不仅仅局限在课堂上，而且最终还可以自学。

1653
01:13:18,110 --> 01:13:22,270
And as one other student put it, at summer's end, with respect to the duck,
另一个学生在暑假结束时，谈到这只鸭子时说：

1654
01:13:22,270 --> 01:13:23,680
"Love love loved the duck.
“超级超级喜欢这只鸭子。

1655
01:13:23,680 --> 01:13:24,490
We're friends now."
我们现在是朋友了。”

1656
01:13:24,490 --> 01:13:25,720
So that, too, awaits.
所以，这也是值得期待的。

1657
01:13:25,720 --> 01:13:28,840
But, first, we're going to need to start with the basics.
但是，首先，我们需要从基础开始。

1658
01:13:28,840 --> 01:13:30,820
And we started today by talking about binary.
而我们今天从二进制开始讲起。

1659
01:13:30,820 --> 01:13:32,710
And darn it, here it is again.
可恶，它又出现了。

1660
01:13:32,710 --> 01:13:37,060
So we can't actually get to the point of using, or solving, or implementing AI
所以我们还不能使用、解决或实现人工智能

1661
01:13:37,060 --> 01:13:38,590
until we understand this.
直到我们理解了它。

1662
01:13:38,590 --> 01:13:42,590
And odds are most of you won't know, at a glance, what this piece of software
大多数人可能一眼就看不出这块软件

1663
01:13:42,590 --> 01:13:43,090
does.
是干什么的。

1664
01:13:43,090 --> 01:13:46,600
But these are the 0's and 1's that represent, perhaps,
但这些是代表着，也许是

1665
01:13:46,600 --> 01:13:50,650
the first program that any programmer writes, which is now a clue to some
每个程序员编写的第一个程序，现在对一些

1666
01:13:50,650 --> 01:13:52,700
of you who have dabbled in code before.
之前尝试过编程的人来说是个线索。

1667
01:13:52,700 --> 01:13:56,470
What does this pattern of 0's and 1's tell a typical computer to do?
这个0和1的模式指示普通计算机做什么？

1668
01:13:56,470 --> 01:13:57,348
Might someone guess?
有人能猜猜吗？

1669
01:13:57,348 --> 01:13:58,390
AUDIENCE: "Hello, world."
观众：“Hello, world.”

1670
01:13:58,390 --> 01:14:00,760
DAVID J. MALAN: It's going to have it say, "hello, world,"
大卫·J·马兰：它会显示 “Hello, world，”

1671
01:14:00,760 --> 01:14:02,927
which is one of the very first programmer-- programs
这是大多数程序员编写的第一个程序。

1672
01:14:02,927 --> 01:14:04,420
that most any programmer writes.
大多数程序员都会编写这个程序。

1673
01:14:04,420 --> 01:14:06,790
Should you be able to recognize these 0's and 1's?
你应该能识别出这些0和1吗？

1674
01:14:06,790 --> 01:14:08,260
Do I recognize these 0's and 1's?
我能识别出这些0和1吗？

1675
01:14:08,260 --> 01:14:09,040
No, not at all.
不，一点也认不出来。

1676
01:14:09,040 --> 01:14:11,120
I just happen to know that they are the same.
我只是碰巧知道它们是一样的。

1677
01:14:11,120 --> 01:14:12,700
And that was a leading question.
而且这是一个诱导性问题。

1678
01:14:12,700 --> 01:14:17,050
But they are representing data and instructions, ultimately,
但它们最终代表着数据和指令，

1679
01:14:17,050 --> 01:14:22,360
data like H-E-L-L-O, comma, W-O-R-L-D and an instruction like,
数据像 H-E-L-L-O，逗号，W-O-R-L-D 以及像 "打印该数据到屏幕上" 这样的指令

1680
01:14:22,360 --> 01:14:24,910
"Print that data to the screen."
"打印该数据到屏幕上"

1681
01:14:24,910 --> 01:14:26,920
As for what these patterns of 0's and 1's are,
至于这些 0 和 1 的模式是什么，

1682
01:14:26,920 --> 01:14:30,250
this is not something that a computer scientist or programmer worries about.
这不是计算机科学家或程序员所担心的问题。

1683
01:14:30,250 --> 01:14:34,240
We just stipulate that, OK, someone, somewhere knows how to do this.
我们只是规定，好吧，某个地方的某个人知道如何做到这一点。

1684
01:14:34,240 --> 01:14:36,400
And it's probably someone like Intel, who makes
这很可能就是像英特尔这样的公司，他们生产

1685
01:14:36,400 --> 01:14:37,960
the hardware inside of the computers.
计算机里面的硬件。

1686
01:14:37,960 --> 01:14:41,470
But you and I, starting now, already, in week zero,
但你和我，从现在开始，已经在第零周，

1687
01:14:41,470 --> 01:14:44,950
can start to view binary more abstractly.
可以开始更抽象地看待二进制。

1688
01:14:44,950 --> 01:14:46,660
We don't care about the 0's and 1's.
我们不在乎 0 和 1。

1689
01:14:46,660 --> 01:14:49,090
We only care that you can use 0's and 1's
我们只关心你可以用 0 和 1

1690
01:14:49,090 --> 01:14:52,420
to represent more useful quantities, like numbers,
来表示更有用的量，比如数字，

1691
01:14:52,420 --> 01:14:54,260
and letters, colors, and more.
字母、颜色等等。

1692
01:14:54,260 --> 01:14:57,040
So this, next week, is going to be the code we actually
所以，下周，这将是我们实际编写的代码。

1693
01:14:57,040 --> 01:14:58,330
start writing at a keyboard.
开始用键盘打出来。

1694
01:14:58,330 --> 01:15:01,538
And this is that language called C. It's the same language I, myself, learned
这就是叫做 C 的语言。这正是我自己多年前学习的语言，当时学习 CS50 时，我们只学了 C 语言。

1695
01:15:01,538 --> 01:15:05,140
years ago, when taking CS50, when all we learned at the time was C.
多年前，学习 CS50 的时候，我们只学了 C 语言。

1696
01:15:05,140 --> 01:15:07,770
But this, too, has some crypticness to it.
但这也有点难懂。

1697
01:15:07,770 --> 01:15:11,020
And if you've never programmed before, you can probably wrap your mind around,
如果你以前从未编程过，你可能可以理解，

1698
01:15:11,020 --> 01:15:14,190
OK, I'm guessing the "printf" prints out the "hello, world."
好吧，我猜 "printf" 打印出 "hello, world"。

1699
01:15:14,190 --> 01:15:16,920
But what's with the semicolon, the quotes, the backslash,
但是分号、引号、反斜杠

1700
01:15:16,920 --> 01:15:21,030
and the curly braces, the #include, and all of this stupid syntax?
以及花括号、#include 和所有这些愚蠢的语法是什么？

1701
01:15:21,030 --> 01:15:23,970
A lot of this, in the beginning of any class, is really a distraction.
在任何课程的开始，很多东西都是真正的干扰。

1702
01:15:23,970 --> 01:15:25,890
It is not intellectually interesting.
它在智力上并不有趣。

1703
01:15:25,890 --> 01:15:29,230
But it's the stupid kind of stuff that's going to trip you up quite often.
但这些愚蠢的东西会经常让你绊倒。

1704
01:15:29,230 --> 01:15:31,500
And so, today, what we'll do is focus not
所以，今天，我们要专注的不是

1705
01:15:31,500 --> 01:15:35,100
on syntax, characters on the keyboard, but ideas
语法，键盘上的字符，而是想法

1706
01:15:35,100 --> 01:15:37,170
because what really matters in this program
因为在这个程序中真正重要的是

1707
01:15:37,170 --> 01:15:40,900
is that "printf" is a function here for our purposes.
"printf" 是一个函数。

1708
01:15:40,900 --> 01:15:43,980
And that function is to display information on the screen.
它的功能是在屏幕上显示信息。

1709
01:15:43,980 --> 01:15:46,860
Everything else, as we'll soon see, has value
其他所有东西，很快你就会发现，都有价值

1710
01:15:46,860 --> 01:15:50,435
and will be understood by you, before long, but for now, it's a distraction.
你很快就会理解，但现在，它只是一个干扰。

1711
01:15:50,435 --> 01:15:52,200
Let's focus on those building blocks.
让我们专注于这些构建块。

1712
01:15:52,200 --> 01:15:54,940
When it comes time to write code, though, for the curious,
但是，当需要编写代码时，对于好奇的人来说，

1713
01:15:54,940 --> 01:15:56,815
especially if you've programmed before, we'll
特别是如果你之前做过编程，我们会

1714
01:15:56,815 --> 01:15:58,890
use a very popular free and open-source tool
使用一个非常流行的免费开源工具

1715
01:15:58,890 --> 01:16:01,260
called Visual Studio Code, or VS Code.
叫做 Visual Studio Code，或者 VS Code。

1716
01:16:01,260 --> 01:16:06,000
We'll use a cloud-based version of it that we pre-install everything
我们会使用它的云端版本，我们预先安装了所有你

1717
01:16:06,000 --> 01:16:08,070
you need in the cloud for you so you don't
在云端所需的一切，这样你就不会

1718
01:16:08,070 --> 01:16:10,980
have to deal with headaches like getting your Mac or PC to work.
要处理像让你的 Mac 或 PC 工作这样的麻烦事。

1719
01:16:10,980 --> 01:16:13,920
You'll use instead this URL, cs50.dev, but more
你将使用这个 URL，cs50.dev，但更多

1720
01:16:13,920 --> 01:16:15,870
on that in next week, week one.
关于下周，第一周的内容。

1721
01:16:15,870 --> 01:16:19,650
For now, we'll use another cloud-based editor called Scratch.
现在，我们将使用另一个叫做 Scratch 的云端编辑器。

1722
01:16:19,650 --> 01:16:21,960
And odds are some number of you use this probably
你们中有些人可能使用过它

1723
01:16:21,960 --> 01:16:23,970
as early as like middle school or the like.
早在中学的时候，或者类似的时候。

1724
01:16:23,970 --> 01:16:27,300
And that was fine to create your own animations, games,
这很好，用来创建你自己的动画、游戏，

1725
01:16:27,300 --> 01:16:28,650
interactive art, or the like.
互动艺术，或者类似的东西。

1726
01:16:28,650 --> 01:16:30,600
But we'll use it today for just a bit.
但我们今天只会用它一小会儿。

1727
01:16:30,600 --> 01:16:32,670
And we'll use it in the course's first homework,
我们会在课程的第一个作业中使用它，

1728
01:16:32,670 --> 01:16:36,870
AKA problem set 0, to explore now some of these same ideas.
也就是问题集 0，来探索现在这些相同的想法。

1729
01:16:36,870 --> 01:16:39,720
And among the goals today for the remainder of today
今天，对于今天剩下的时间，我们的目标之一

1730
01:16:39,720 --> 01:16:42,920
is not to focus so much on Scratch and the particulars
不是要过分关注 Scratch 和细节

1731
01:16:42,920 --> 01:16:44,670
because this is not a language that you're
因为这不是你

1732
01:16:44,670 --> 01:16:50,280
going to use often but to give you very visual representations of ideas
经常会用到的语言，而是要给你提供非常直观的概念的表示

1733
01:16:50,280 --> 01:16:53,790
so that when things do escalate next week to C, to the more cryptic,
这样，在下周，当事情升级到 C，也就是更加隐晦的语言时，

1734
01:16:53,790 --> 01:16:57,840
it's the same ideas just typed out instead of dragged and dropped.
它表达的仍然是同样的概念，只是用打字代替了拖放操作。

1735
01:16:57,840 --> 01:16:59,460
So by that, I mean this.
我的意思是这个。

1736
01:16:59,460 --> 01:17:03,270
I'm going to go ahead and share in just a moment the user interface of Scratch.
我将在一会儿分享 Scratch 的用户界面。

1737
01:17:03,270 --> 01:17:05,370
But what's nice about Scratch is that this
但 Scratch 的优点是，这个

1738
01:17:05,370 --> 01:17:08,400
is how we're going to implement that same program today.
是我们今天将要实现相同程序的方式。

1739
01:17:08,400 --> 01:17:11,200
These are two blocks or puzzle pieces on the screen,
屏幕上这两个是块或拼图。

1740
01:17:11,200 --> 01:17:15,670
and they've been interconnected to tell the computer to say "hello, world"
它们被互连起来，告诉计算机说“hello, world”。

1741
01:17:15,670 --> 01:17:16,570
on the screen.
在屏幕上。

1742
01:17:16,570 --> 01:17:18,490
The user interface that we're about to use
我们即将使用的用户界面

1743
01:17:18,490 --> 01:17:20,652
will look generally something like this.
大体上看起来会像这样。

1744
01:17:20,652 --> 01:17:22,360
It's a web-based editor that you can also
这是一个基于 web 的编辑器，你也可以

1745
01:17:22,360 --> 01:17:24,160
download it locally to use offline.
本地下载它以便离线使用。

1746
01:17:24,160 --> 01:17:28,120
And you'll see that at the left here are a whole bunch of puzzle pieces
你会看到这里左边有很多拼图块

1747
01:17:28,120 --> 01:17:29,020
or blocks.
或积木块。

1748
01:17:29,020 --> 01:17:31,630
They're categorized by color, and the blue ones
它们按颜色分类，蓝色的那些

1749
01:17:31,630 --> 01:17:33,980
tend to relate to motion, for instance.
例如，倾向于与运动相关。

1750
01:17:33,980 --> 01:17:35,950
The purple ones represent looks.
紫色的代表外观。

1751
01:17:35,950 --> 01:17:37,750
The pink one represents sounds.
粉红色的代表声音。

1752
01:17:37,750 --> 01:17:40,180
The yellow one represents events.
黄色的代表事件。

1753
01:17:40,180 --> 01:17:41,230
More on that soon.
更多内容很快就会讲到。

1754
01:17:41,230 --> 01:17:43,270
The orange ones represent control, and then
橙色的代表控制，然后

1755
01:17:43,270 --> 01:17:46,390
there's operators, variables, my blocks, and even some extensions
还有运算符、变量、我的块，甚至一些扩展

1756
01:17:46,390 --> 01:17:47,690
we can install as well.
我们也可以安装。

1757
01:17:47,690 --> 01:17:51,820
So it just categorizes things visually and colorfully so that you
所以它只是用视觉和颜色对事物进行分类，以便你

1758
01:17:51,820 --> 01:17:53,470
can find what you're looking for.
可以找到你想要的东西。

1759
01:17:53,470 --> 01:17:56,740
But we're going to use these puzzle pieces to drag and drop them
但我们要使用这些拼图块，将它们拖放到这里。

1760
01:17:56,740 --> 01:17:58,300
onto this area here.
在这个区域。

1761
01:17:58,300 --> 01:18:02,030
And we're going to connect them when we want them to do something.
当我们想要它们做些什么的时候，我们会将它们连接起来。

1762
01:18:02,030 --> 01:18:02,890
What can they do?
它们能做什么？

1763
01:18:02,890 --> 01:18:06,010
Well, by default, Scratch comes with this cat here, otherwise known
嗯，默认情况下，Scratch 会附带这只猫，也称为

1764
01:18:06,010 --> 01:18:09,760
as a sprite, which is a character in a game or in a graphics context.
精灵，它是游戏或图形环境中的角色。

1765
01:18:09,760 --> 01:18:12,310
And this cat lives in this two-dimensional world in which
这只猫生活在这个二维世界中，

1766
01:18:12,310 --> 01:18:14,050
the cat can go up, down, left, right.
猫可以上、下、左、右移动。

1767
01:18:14,050 --> 01:18:16,330
And you can actually change the cat's costume
你实际上可以改变猫的服装，

1768
01:18:16,330 --> 01:18:18,730
to be a dog, a bird, or anything else.
可以是狗、鸟或其他任何东西。

1769
01:18:18,730 --> 01:18:23,260
It really is more of an idea than it is a specific animal in this case.
在这种情况下，它更像是一种想法，而不是一种特定的动物。

1770
01:18:23,260 --> 01:18:26,950
But the world that Scratch lives in looks a little something like this.
但 Scratch 所处的世界看起来有点像这样。

1771
01:18:26,950 --> 01:18:29,860
It's like a Cartesian plane with x-coordinates and y-coordinates.
它就像一个笛卡尔平面，有 x 坐标和 y 坐标。

1772
01:18:29,860 --> 01:18:32,050
And the numbers don't so much matter fundamentally,
而数字本身并不那么重要，

1773
01:18:32,050 --> 01:18:35,390
except that when you want the cat or any character to go up,
除非你想让猫或任何角色向上移动，

1774
01:18:35,390 --> 01:18:37,300
down, left, or right by some amount, it's
向下、向左或向右移动一定的距离，这是

1775
01:18:37,300 --> 01:18:42,985
useful to know, for instance, that 0, 0 is the middle, 0 comma 0 for x comma y.
很有用的知识，例如，0, 0 是中间，x, y 为 0, 0。

1776
01:18:42,985 --> 01:18:45,550
All the way up is a y value of 180.
一直向上是 y 值为 180。

1777
01:18:45,550 --> 01:18:47,470
All the way down is -180.
一直向下是 -180。

1778
01:18:47,470 --> 01:18:50,170
All the way to the left is -240.
一直向左是 -240。

1779
01:18:50,170 --> 01:18:52,030
All the way to the right is 240.
一直向右是 240。

1780
01:18:52,030 --> 01:18:54,655
And generally, you're not going to have to worry about numbers.
通常情况下，你不用担心数字。

1781
01:18:54,655 --> 01:18:58,030
You're going to use these relatively-- go right, go left, go up, or down.
你将使用这些相对的——向右、向左、向上或向下。

1782
01:18:58,030 --> 01:19:01,970
But that's just the world that Scratch itself lives in here.
但这只是 Scratch 本身存在于这里的环境。

1783
01:19:01,970 --> 01:19:03,730
So let's go about using Scratch here.
那么让我们开始使用 Scratch 吧。

1784
01:19:03,730 --> 01:19:06,880
I'm going to change over to my cloud-based editor
我将切换到我的基于云的编辑器

1785
01:19:06,880 --> 01:19:10,120
here, where I've gone to scratch.mit.edu.
在这里，我已经访问了 scratch.mit.edu。

1786
01:19:10,120 --> 01:19:12,520
And I've clicked Create in order to create a project.
我已经点击了“创建”来创建一个项目。

1787
01:19:12,520 --> 01:19:14,822
And that gives me this blank canvas here.
这给了我一个空白画布。

1788
01:19:14,822 --> 01:19:17,530
And I'm going to do these somewhat quickly because I kind of know
我将很快地完成这些操作，因为我已经知道

1789
01:19:17,530 --> 01:19:18,440
what I'm looking for.
我想要什么。

1790
01:19:18,440 --> 01:19:21,400
But part of the process with problem set zero is going to be clicking,
但问题集零的一部分将是点击，

1791
01:19:21,400 --> 01:19:23,410
and dragging, and sort of scrolling around
拖动，以及滚动浏览

1792
01:19:23,410 --> 01:19:25,390
to see what building blocks exist.
看看有哪些积木块。

1793
01:19:25,390 --> 01:19:29,020
But I know under Events there's this puzzle piece here
但我知道在“事件”下，这里有这个拼图块

1794
01:19:29,020 --> 01:19:30,910
when green flag clicked.
当绿色旗帜被点击时。

1795
01:19:30,910 --> 01:19:32,110
Why is that germane?
为什么这很重要？

1796
01:19:32,110 --> 01:19:35,720
Well, if I zoom out, and go back to Scratch's world at the right here,
嗯，如果我缩小，回到这里右边 Scratch 的世界，

1797
01:19:35,720 --> 01:19:37,720
notice that above Scratch's world there's
注意在 Scratch 世界的上方

1798
01:19:37,720 --> 01:19:40,870
a green flag, which is going to mean go, and a red stop sign, which,
有一个绿色旗帜，代表开始，和一个红色的停止标志，它

1799
01:19:40,870 --> 01:19:42,290
of course, is going to mean stop.
当然，代表停止。

1800
01:19:42,290 --> 01:19:46,780
So if I drag this puzzle piece anywhere into the middle,
所以如果我将这个拼图块拖到中间的任何位置，

1801
01:19:46,780 --> 01:19:49,180
it's just going to plop where I put it.
它就会被放置在我放置的位置。

1802
01:19:49,180 --> 01:19:53,380
But what that means semantically is when someone clicks that green flag,
但这在语义上意味着，当有人点击那个绿色旗帜时，

1803
01:19:53,380 --> 01:19:56,440
I want Scratch the cat to do this other thing.
我希望 Scratch 猫去做别的事情。

1804
01:19:56,440 --> 01:19:57,970
Well, what do I want it to do?
嗯，我想要它做什么？

1805
01:19:57,970 --> 01:19:59,560
Well, let me go under Looks.
嗯，让我到外观下。

1806
01:19:59,560 --> 01:20:04,090
And looks here in purple have some puzzle pieces like this.
外观这里，紫色区域有一些像这样的拼图块。

1807
01:20:04,090 --> 01:20:06,490
Well, I can say hello for some number of seconds,
我可以说几秒钟的 "你好"，

1808
01:20:06,490 --> 01:20:08,620
or I can just go ahead and say hello.
或者我可以直接说 "你好"。

1809
01:20:08,620 --> 01:20:09,430
So let's do that.
那就这样做吧。

1810
01:20:09,430 --> 01:20:11,650
I'm going to drag this say block.
我将拖动这个 "说" 块。

1811
01:20:11,650 --> 01:20:13,630
And notice that as soon as I get close enough,
注意，当我足够靠近时，

1812
01:20:13,630 --> 01:20:15,562
it's going to magnetically want to connect.
它就会磁性地想要连接。

1813
01:20:15,562 --> 01:20:17,770
So I can let go, and they snap together automatically
所以我可以松开，它们会自动连接在一起

1814
01:20:17,770 --> 01:20:19,103
because they're the right shape.
因为它们是正确的形状。

1815
01:20:19,103 --> 01:20:21,100
I don't have to say hello, exclamation point.
我不必说 "你好，感叹号"。

1816
01:20:21,100 --> 01:20:23,920
I can change it to the more canonical, hello comma world.
我可以把它改成更标准的 "你好，世界"。

1817
01:20:23,920 --> 01:20:26,440
So anything in this white oval is editable
所以这个白色椭圆形内的任何内容都是可编辑的

1818
01:20:26,440 --> 01:20:28,870
that you can change as just text there.
你可以直接在那里更改为文本。

1819
01:20:28,870 --> 01:20:31,960
If I now zoom out, let me go ahead and click the green flag.
如果我现在缩小，让我点击一下绿色旗帜。

1820
01:20:31,960 --> 01:20:36,556
And voila-- this should be my first program in Scratch.
瞧，这应该是我在 Scratch 中的第一个程序。

1821
01:20:36,556 --> 01:20:37,430
Hello, world.
你好，世界。

1822
01:20:37,430 --> 01:20:39,410
Without any of the distractions of syntax
没有任何语法上的干扰

1823
01:20:39,410 --> 01:20:42,420
or weird characters on the screen, it's just done what I want it to do.
或屏幕上的奇怪字符，它只是做了我想让它做的事情。

1824
01:20:42,420 --> 01:20:42,920
All right.
好的。

1825
01:20:42,920 --> 01:20:44,462
Let me go ahead and click Stop there.
让我点击一下那里的停止按钮。

1826
01:20:44,462 --> 01:20:47,240
And let me make it a little more connected
让我把它和我们迄今为止讨论的内容联系起来

1827
01:20:47,240 --> 01:20:48,750
to what we've discussed thus far.
更紧密一些。

1828
01:20:48,750 --> 01:20:51,380
So this puzzle piece here, say hello, world,
所以这个拼图块，"说你好，世界"，

1829
01:20:51,380 --> 01:20:56,370
represents what type of building block using the vocabulary of today?
用今天的词汇来说，它代表了哪种类型的构建块？

1830
01:20:56,370 --> 01:20:57,420
So it's a function.
所以它是一个函数。

1831
01:20:57,420 --> 01:21:00,048
So these purple blocks are functions, say, hello, world.
所以这些紫色的块是函数，说 "你好，世界"。

1832
01:21:00,048 --> 01:21:02,090
And let me give you another piece of terminology.
让我再给你一个术语。

1833
01:21:02,090 --> 01:21:04,910
These white ovals that take textual input--
这些接受文本输入的白色椭圆形--

1834
01:21:04,910 --> 01:21:08,210
in general, those are called parameters or arguments.
一般来说，它们被称为参数或实参。

1835
01:21:08,210 --> 01:21:11,610
And they customize the behavior of a function.
它们自定义了函数的行为。

1836
01:21:11,610 --> 01:21:14,180
So a parameter or an argument customizes,
所以参数或实参自定义，

1837
01:21:14,180 --> 01:21:17,810
modifies the default behavior of a function, like in this case, say.
修改了函数的默认行为，就像在这种情况下，"说"。

1838
01:21:17,810 --> 01:21:20,990
Similarly, in the C code from earlier that we'll see next week,
类似地，在之前我们下周将看到的 C 代码中，

1839
01:21:20,990 --> 01:21:27,350
the printf function took a quoted phrase like, hello, world, similarly as input.
printf 函数也以类似的方式接受了一个引用的短语，比如 "你好，世界"，作为输入。

1840
01:21:27,350 --> 01:21:29,970
But more on that in the future.
但以后会详细介绍。

1841
01:21:29,970 --> 01:21:32,810
So how does this connect to the mental model we presented earlier?
那么这如何与我们之前提出的心理模型联系起来呢？

1842
01:21:32,810 --> 01:21:37,140
Well, here's problem-solving as I described it earlier, inputs to outputs
嗯，这里是我之前描述的解决问题的过程，输入到输出

1843
01:21:37,140 --> 01:21:39,090
with algorithms or code in the middle.
中间有算法或代码。

1844
01:21:39,090 --> 01:21:43,710
Well, what we've got here really is an input of, hello, world, the white oval.
嗯，我们这里实际上有一个输入，"你好，世界"，那个白色椭圆形。

1845
01:21:43,710 --> 01:21:48,600
The function or algorithm that it's going into as input is the say block.
作为输入的函数或算法是 "说" 块。

1846
01:21:48,600 --> 01:21:51,960
And what is the output of using this say block, the say function?
而使用这个 "说" 块，"说" 函数的输出是什么？

1847
01:21:51,960 --> 01:21:55,650
It's the visual effect of having the cat have the little speech bubble appear
它是让猫出现一个小气泡的视觉效果

1848
01:21:55,650 --> 01:21:58,060
above its head, saying, hello, world.
在它的头上，说 "你好，世界"。

1849
01:21:58,060 --> 01:22:00,900
So everything we do, in fact, can be mapped back
所以我们所做的一切，实际上都可以映射回

1850
01:22:00,900 --> 01:22:04,590
to that very simple idea of inputs and outputs.
那个非常简单的输入和输出的概念。

1851
01:22:04,590 --> 01:22:06,840
Well, let's make it a little more interesting, though.
好吧，让我们让它更有趣一点吧。

1852
01:22:06,840 --> 01:22:09,430
It's a little boring to just say "hello, world" all the time.
一直说 "你好，世界" 有点无聊。

1853
01:22:09,430 --> 01:22:11,500
Let me go ahead and drag this away.
让我把它拖走。

1854
01:22:11,500 --> 01:22:15,180
And if you just drag it to the left and let go, it gets automatically deleted.
如果你只是把它拖到左边然后松开，它就会自动删除。

1855
01:22:15,180 --> 01:22:18,580
Let me go under Sensing in light blue here.
让我到这里的浅蓝色 "感知" 下。

1856
01:22:18,580 --> 01:22:20,850
And you'll see there's a bunch of blocks, one of which
你会看到这里有一堆积木，其中一个

1857
01:22:20,850 --> 01:22:24,180
is an ask block, an ask function, which is going to prompt
是一个询问块，一个询问函数，它将提示

1858
01:22:24,180 --> 01:22:26,170
the human, me, for some input.
人类，也就是我，输入一些内容。

1859
01:22:26,170 --> 01:22:29,700
So let me go ahead and drag that over here, and it snaps together.
所以，让我把它拖到这里，它就拼在一起了。

1860
01:22:29,700 --> 01:22:32,190
I could change the question, but I'm OK with that question.
我可以改变问题，但我对这个问题没问题。

1861
01:22:32,190 --> 01:22:33,670
We'll use what's your name.
我们将使用“你叫什么名字”。

1862
01:22:33,670 --> 01:22:36,900
But notice that this block, ask, is a little special.
但请注意，这个块，ask，有点特殊。

1863
01:22:36,900 --> 01:22:40,240
It is not just going to display like a speech bubble on the screen.
它不会像屏幕上的气泡一样显示。

1864
01:22:40,240 --> 01:22:42,510
It's actually going to return a value, and this is
它实际上将返回一个值，而这就是

1865
01:22:42,510 --> 01:22:44,250
another term of art today and onward.
当今及以后的另一个术语。

1866
01:22:44,250 --> 01:22:48,492
A return value is some value that can be handed back to you conceptually
返回值是可以在概念上传回给你的值

1867
01:22:48,492 --> 01:22:50,700
from a function so that you can do something with it.
来自函数，这样你就可以用它来做些什么。

1868
01:22:50,700 --> 01:22:55,025
It's as though the ask function asks someone for their name,
就像询问函数询问某人的名字一样，

1869
01:22:55,025 --> 01:22:57,900
writes it down on a piece of paper, and hands you the piece of paper.
写在一张纸上，然后把纸递给你。

1870
01:22:57,900 --> 01:23:00,150
You can do anything now that you want with that name.
你现在可以用那个名字做任何你想做的事情。

1871
01:23:00,150 --> 01:23:03,810
And here is how you access the name in this special block called
而你可以在这个特殊的块中访问这个名字，它叫做

1872
01:23:03,810 --> 01:23:07,330
answer, which, again, will start calling a return value.
answer，它将再次开始调用返回值。

1873
01:23:07,330 --> 01:23:10,770
So if I want to say "hello" to someone specific, I'm going to do this.
所以，如果我想对某个人说“你好”，我会这样做。

1874
01:23:10,770 --> 01:23:11,800
Let me zoom out.
让我放大一点。

1875
01:23:11,800 --> 01:23:15,510
Let me go back to Looks, and let me go back to Say.
让我回到Looks，再回到Say。

1876
01:23:15,510 --> 01:23:19,890
And I'm going to change the say block here to "hello, comma."
我将在这里把say块改成“hello，逗号”。

1877
01:23:19,890 --> 01:23:21,270
Then I'm going to zoom out.
然后，我将放大一点。

1878
01:23:21,270 --> 01:23:23,700
Well, I need two inputs, I think.
我想我需要两个输入。

1879
01:23:23,700 --> 01:23:26,640
So I'm going to grab another say block, and I'm going to put it below.
所以我将抓取另一个say块，把它放在下面。

1880
01:23:26,640 --> 01:23:29,160
And I could just type "David," but this is
我可以直接输入“David”，但这样做

1881
01:23:29,160 --> 01:23:31,660
going to defeat the whole point of asking me for the name.
就失去了询问我名字的意义。

1882
01:23:31,660 --> 01:23:32,610
And it will only work for me.
而且它只对我有效。

1883
01:23:32,610 --> 01:23:33,790
So I don't want to do that.
所以我不想要那样做。

1884
01:23:33,790 --> 01:23:38,520
So let me go back to Sensing, and notice the shape is important here.
所以，让我回到Sensing，请注意形状在这里很重要。

1885
01:23:38,520 --> 01:23:41,130
Even if it's not quite the same size, the shape matters.
即使它不是完全相同的大小，形状也很重要。

1886
01:23:41,130 --> 01:23:45,690
And I can actually drag this and change the input of this say function
我实际上可以拖动它并改变这个say函数的输入

1887
01:23:45,690 --> 01:23:48,870
to be whatever that return value is, that piece of paper
为那个返回值，那张纸

1888
01:23:48,870 --> 01:23:50,430
that has the person's name on it.
上面写着人的名字。

1889
01:23:50,430 --> 01:23:53,550
And it grows to fill, but now we have a program
它会一直填满，但现在我们有一个程序

1890
01:23:53,550 --> 01:23:57,240
that I think when I click the green flag-- watch-- is going to prompt me.
我想当我点击绿色旗帜时--看--它会提示我。

1891
01:23:57,240 --> 01:23:58,367
What's your name?
你叫什么名字？

1892
01:23:58,367 --> 01:23:59,950
And now I have room to type down here.
现在我有空间在下面输入。

1893
01:23:59,950 --> 01:24:02,370
So I'm going to type D-A-V-I-D. I'm going to hit Enter,
所以我会输入D-A-V-I-D。我会按下回车，

1894
01:24:02,370 --> 01:24:04,000
and it should say "hello, Dave."
它应该会说“hello，Dave”。

1895
01:24:04,000 --> 01:24:04,500
Wait.
等等。

1896
01:24:04,500 --> 01:24:06,110
Hmm.
嗯。

1897
01:24:06,110 --> 01:24:07,050
Huh.
嗯。

1898
01:24:07,050 --> 01:24:09,990
Maybe it was-- didn't work.
也许是--没用。

1899
01:24:09,990 --> 01:24:11,160
D-A-V-I-D. Here we go.
D-A-V-I-D。来吧。

1900
01:24:11,160 --> 01:24:12,165
Hello, David.
你好，David。

1901
01:24:12,165 --> 01:24:13,530
Hmm.
嗯。

1902
01:24:13,530 --> 01:24:19,210
It's missing the hello, but I'm quite sure we have a hello right there.
它缺少hello，但我敢肯定我们有hello。

1903
01:24:19,210 --> 01:24:22,170
So what explains this bug or mistake?
那么，是什么导致了这个错误呢？

1904
01:24:22,170 --> 01:24:23,117
Yeah.
对。

1905
01:24:23,117 --> 01:24:26,596
AUDIENCE: [INAUDIBLE].
观众：[听不清]

1906
01:24:26,596 --> 01:24:29,090
So they overlap.
所以它们重叠了。

1907
01:24:29,090 --> 01:24:30,800
DAVID J. MALAN: Exactly.
DAVID J. MALAN：没错。

1908
01:24:30,800 --> 01:24:33,710
Put another way, my Mac, my PC, it's just so darn
换句话说，我的Mac，我的PC，它太快了

1909
01:24:33,710 --> 01:24:36,320
fast that it did exactly what it was supposed to.
快到它完全按预期执行了。

1910
01:24:36,320 --> 01:24:40,580
But it said "hello, David" so fast that we didn't even see, we being the human,
但它说“hello，David”的速度太快，我们，也就是人类，

1911
01:24:40,580 --> 01:24:42,795
the slowest part of the puzzle, see the actual hello.
这道谜题中最慢的部分，甚至没有看到真正的hello。

1912
01:24:42,795 --> 01:24:45,170
So there's a few different ways to fix this, as you know.
所以，你可能知道，有几种不同的方法可以修复它。

1913
01:24:45,170 --> 01:24:48,660
We could have it say "hello" for some number of seconds.
我们可以让它说“hello”几秒钟。

1914
01:24:48,660 --> 01:24:49,910
So I could kind of do that.
所以，我可以那样做。

1915
01:24:49,910 --> 01:24:50,660
So let me do this.
所以，让我这样做。

1916
01:24:50,660 --> 01:24:53,210
I can decouple these by just dragging and letting it go
我可以通过拖动并释放它们来分离它们

1917
01:24:53,210 --> 01:24:55,220
so that they're magnetically far apart.
让它们在磁性上相距很远。

1918
01:24:55,220 --> 01:24:58,610
Let me go ahead and drag this one, say hello for two seconds.
让我把这个拖过去，说两秒钟的hello。

1919
01:24:58,610 --> 01:25:02,030
I'm going to change the grammar here to be hello comma again.
我要在这里把语法改成“hello, again”。

1920
01:25:02,030 --> 01:25:05,120
I'm going to go ahead and disconnect these two.
我要继续把这两个断开。

1921
01:25:05,120 --> 01:25:08,160
I'm going to throw away the old one that I don't want to use.
我要丢弃那个我不想要的旧的。

1922
01:25:08,160 --> 01:25:11,460
And I'm going to reconnect this so that now--
我要重新连接它，这样现在--

1923
01:25:11,460 --> 01:25:11,960
OK.
好的。

1924
01:25:11,960 --> 01:25:14,960
It's going to say hello for two seconds and then my name, hopefully.
它将先说“hello”两秒，然后是我的名字，希望可以成功。

1925
01:25:14,960 --> 01:25:17,180
So let me click Stop and Start.
所以让我点击“停止”和“开始”。

1926
01:25:17,180 --> 01:25:20,970
D-A-V-I-D. Enter.
D-A-V-I-D，回车。

1927
01:25:20,970 --> 01:25:21,540
OK.
好的。

1928
01:25:21,540 --> 01:25:25,577
So it's better, but it's kind of poorly implemented.
所以它更好，但是实现得有点糟糕。

1929
01:25:25,577 --> 01:25:26,160
Like, come on.
拜托。

1930
01:25:26,160 --> 01:25:27,785
I just wanted to say hello comma David.
我只是想说“hello, David”。

1931
01:25:27,785 --> 01:25:28,785
Why is that hard?
为什么这么难？

1932
01:25:28,785 --> 01:25:31,410
Well, maybe we can actually combine these a little differently.
嗯，也许我们可以用不同的方式将它们组合起来。

1933
01:25:31,410 --> 01:25:32,610
And let me propose this.
我来提议一下。

1934
01:25:32,610 --> 01:25:35,760
Let me actually get rid of these blocks again.
让我再次去掉这些块。

1935
01:25:35,760 --> 01:25:38,430
And let me go ahead and just say one thing.
让我继续说一件事。

1936
01:25:38,430 --> 01:25:43,650
But can I somehow combine this to say hello comma David all in one breath?
但是我能不能以某种方式将它组合起来，一口气说“hello, David”？

1937
01:25:43,650 --> 01:25:46,348
Well, it turns out if I go under Operators,
好吧，结果是，如果我进入“运算符”，

1938
01:25:46,348 --> 01:25:49,140
I know from having played with this before that there's this puzzle
我之前玩过这个，我知道这里有一个拼图

1939
01:25:49,140 --> 01:25:51,030
piece down here called join.
块叫做“join”。

1940
01:25:51,030 --> 01:25:52,463
It's an oval.
它是一个椭圆形。

1941
01:25:52,463 --> 01:25:54,630
It's a little big, but, again, it will grow to fill.
它有点大，但同样，它会长大到填满。

1942
01:25:54,630 --> 01:25:57,338
And by default, it wants to join two words, "apple" and "banana."
默认情况下，它想将两个词“apple”和“banana”连接起来。

1943
01:25:57,338 --> 01:25:59,830
But those are just placeholders.
但它们只是占位符。

1944
01:25:59,830 --> 01:26:03,990
So let me go ahead and drag this over the default hello.
所以让我继续将它拖到默认的“hello”上面。

1945
01:26:03,990 --> 01:26:08,700
Let me change "apple" to hello comma space and then banana.
让我将“apple”改为“hello, ”，然后是“banana”。

1946
01:26:08,700 --> 01:26:10,230
Let me go back to Sensing.
让我回到“感知”。

1947
01:26:10,230 --> 01:26:13,630
Let me grab answer and drag and drop that.
让我抓取“答案”，并将它拖放。

1948
01:26:13,630 --> 01:26:16,740
So now notice that I'm kind of layering my ideas.
所以现在请注意，我正在将我的想法分层。

1949
01:26:16,740 --> 01:26:20,980
And put another way, the output of this join block
换句话说，这个“join”块的输出

1950
01:26:20,980 --> 01:26:22,980
is presumably going to join two things together,
应该是将两件事连接在一起，

1951
01:26:22,980 --> 01:26:25,110
apple and banana or hello comma David.
“apple”和“banana”，或者“hello, David”。

1952
01:26:25,110 --> 01:26:29,460
And then the output of join is going to become the input to say.
然后，“join”的输出将成为“say”的输入。

1953
01:26:29,460 --> 01:26:31,900
So aesthetically, it just looks better.
所以从美学上看，它看起来更好。

1954
01:26:31,900 --> 01:26:33,790
It's still correct, but it's just better.
它仍然是正确的，但它只是更好。

1955
01:26:33,790 --> 01:26:36,840
So if I type "David," and hit Enter, hello, David.
所以，如果我输入“David”，然后按回车，就会说“hello, David”。

1956
01:26:36,840 --> 01:26:38,820
This is what a normal program would presumably
这应该是正常程序

1957
01:26:38,820 --> 01:26:42,390
do, not show you part of the phrase and then the rest of the phrase.
做的，而不是先显示部分短语，然后显示其余短语。

1958
01:26:42,390 --> 01:26:44,230
Like, it's just better in this way.
就像，用这种方式更好。

1959
01:26:44,230 --> 01:26:48,480
So let's connect this now to this same puzzle piece and this methodology.
所以现在让我们将它连接到这个相同的拼图块和这种方法。

1960
01:26:48,480 --> 01:26:50,610
So here's that same puzzle piece, ask.
所以，这是同一个拼图块，“ask”。

1961
01:26:50,610 --> 01:26:53,520
How do we fit it into this input and output flow with algorithms?
我们如何用算法将它放入这个输入和输出流中？

1962
01:26:53,520 --> 01:26:57,120
Well, the input to that puzzle piece is something like, what's your name,
好吧，那个拼图块的输入类似于“你的名字是什么”，

1963
01:26:57,120 --> 01:26:58,200
question mark.
问号。

1964
01:26:58,200 --> 01:27:01,680
Then the algorithm or the code implementation thereof
然后算法或其代码实现

1965
01:27:01,680 --> 01:27:06,240
is this ask block and wait so the human has a moment to type their response in.
是这个“ask”块和“wait”，这样人类就有时间输入他们的响应。

1966
01:27:06,240 --> 01:27:09,548
The output of that function recall is a return value.
那个函数调用的输出是一个返回值。

1967
01:27:09,548 --> 01:27:12,840
You don't see anything on the screen by default because we've not used say yet,
默认情况下，你没有看到屏幕上显示任何东西，因为我们还没有使用“say”，

1968
01:27:12,840 --> 01:27:14,860
but we get this return value.
但是我们得到了这个返回值。

1969
01:27:14,860 --> 01:27:18,120
And let me scooch everything over now so that we can now
让我现在把所有东西都移过去，这样我们现在就可以

1970
01:27:18,120 --> 01:27:20,110
join those inputs together.
将那些输入连接在一起。

1971
01:27:20,110 --> 01:27:21,610
So here's this puzzle piece.
所以，这是这个拼图块。

1972
01:27:21,610 --> 01:27:24,940
Let me go ahead and propose that the inputs now to the join block
让我继续提议，现在“join”块的输入

1973
01:27:24,940 --> 01:27:30,100
are two arguments or two parameters, so to speak, hello and answer.
是两个参数，可以这么说，“hello”和“answer”。

1974
01:27:30,100 --> 01:27:32,740
They go into that join puzzle piece, whose purpose in life
它们进入那个“join”拼图块，它的生命目标

1975
01:27:32,740 --> 01:27:36,040
is to return one joined version thereof.
是返回一个连接的版本。

1976
01:27:36,040 --> 01:27:38,470
Let me slide this all over logically now so
让我现在从逻辑上将它全部滑过去，这样

1977
01:27:38,470 --> 01:27:42,850
that now that output becomes the input to the say block
现在那个输出成为“say”块的输入，

1978
01:27:42,850 --> 01:27:46,330
and now is why the cat has the speech bubble saying all at once,
现在，这就是为什么猫的对话框里会同时说“hello, David”。

1979
01:27:46,330 --> 01:27:47,740
hello comma David.
“hello, David”。

1980
01:27:47,740 --> 01:27:51,620
So what we've done here is kind of composed the output
所以我们在这里所做的是将输出组合起来

1981
01:27:51,620 --> 01:27:54,017
and from one function into the input of another.
并将一个函数的输出作为另一个函数的输入。

1982
01:27:54,017 --> 01:27:56,350
And you can think of this in a couple of different ways,
你可以用几种不同的方式来思考这一点，

1983
01:27:56,350 --> 01:27:58,150
left to right, as I did there, or kind of
从左到右，就像我之前做的那样，或者像

1984
01:27:58,150 --> 01:28:00,740
like stacking these things on top of one another.
把这些东西堆叠在一起。

1985
01:28:00,740 --> 01:28:02,860
But at the end of the day, even as programming
但归根结底，即使编程

1986
01:28:02,860 --> 01:28:07,510
gets more and more powerful for us, it's just inputs and outputs, inputs
变得越来越强大，它也仅仅只是输入和输出，输入

1987
01:28:07,510 --> 01:28:08,320
and outputs.
和输出。

1988
01:28:08,320 --> 01:28:11,230
And thankfully, with built-in functionality from our friends
幸运的是，得益于我们来自麻省理工学院的朋友们

1989
01:28:11,230 --> 01:28:14,680
at MIT who designed Scratch, I can even do something playful like this.
设计了Scratch，我甚至可以做一些像这样有趣的事情。

1990
01:28:14,680 --> 01:28:16,990
I can go to that Extensions button at the bottom.
我可以点击底部那个“扩展”按钮。

1991
01:28:16,990 --> 01:28:20,260
And there's a lot of fancy things I can add here, like text-to-speech.
这里有很多我可以添加的有趣功能，比如文本转语音。

1992
01:28:20,260 --> 01:28:22,680
So let me go ahead and choose text-to-speech.
所以，让我来选择文本转语音功能。

1993
01:28:22,680 --> 01:28:28,050
And let me go ahead here and change the say block in purple.
让我来更改一下这个紫色“说”块。

1994
01:28:28,050 --> 01:28:30,450
Let me get rid of the say block, and let me borrow this.
让我去掉这个“说”块，并借用这个。

1995
01:28:30,450 --> 01:28:33,300
Let me get the speak block like this.
让我得到这个“说”块，就像这样。

1996
01:28:33,300 --> 01:28:35,250
And now let me drag and drop this oval.
现在让我拖放这个椭圆形。

1997
01:28:35,250 --> 01:28:36,470
It's going to grow to fill.
它会逐渐填满。

1998
01:28:36,470 --> 01:28:38,970
And I think it's just about to be a little more interesting.
我认为它马上就会变得更有趣了。

1999
01:28:38,970 --> 01:28:42,090
Let me click Play now, and hopefully this isn't too loud.
我现在点击播放，希望声音不要太大。

2000
01:28:42,090 --> 01:28:44,280
D-A-V-I-D. Enter.
D-A-V-I-D. 回车。

2001
01:28:44,280 --> 01:28:45,948
SPEAKER: Hello, David.
音箱：你好，大卫。

2002
01:28:45,948 --> 01:28:46,740
DAVID J. MALAN: OK.
大卫·J·马兰：好的。

2003
01:28:46,740 --> 01:28:47,730
[APPLAUSE]
[鼓掌]

2004
01:28:47,730 --> 01:28:50,350
Thank you.
谢谢。

2005
01:28:50,350 --> 01:28:50,980
Thank you.
谢谢。

2006
01:28:50,980 --> 01:28:51,835
That's a low bar.
这太简单了。

2007
01:28:51,835 --> 01:28:54,550
[CHUCKLES] Let me go ahead and set the voice too.
[笑声]让我来设置一下声音。

2008
01:28:54,550 --> 01:28:56,830
And you might now remember how we began class, where
你可能还记得我们上课一开始的时候，我们

2009
01:28:56,830 --> 01:28:59,080
we had a robotic, computerized voice.
用了一个机械的、电脑化的声音。

2010
01:28:59,080 --> 01:29:03,168
Well, we didn't use Scratch at the time, but we could change this in Scratch
嗯，我们当时没有使用Scratch，但我们可以在Scratch中更改这一点

2011
01:29:03,168 --> 01:29:04,460
alone to be a little different.
让它稍微有些不同。

2012
01:29:04,460 --> 01:29:05,890
So D-A-V-I-D.
所以 D-A-V-I-D。

2013
01:29:05,890 --> 01:29:07,028
SPEAKER: Hello, David.
音箱：你好，大卫。

2014
01:29:07,028 --> 01:29:07,820
DAVID J. MALAN: OK.
大卫·J·马兰：好的。

2015
01:29:07,820 --> 01:29:10,070
Little creepy, but we can play all day long with that.
有点令人毛骨悚然，但我们可以整天玩这个。

2016
01:29:10,070 --> 01:29:12,125
But the point is that these functions are just
但重点是这些函数只是

2017
01:29:12,125 --> 01:29:13,750
now doing something a little different.
现在做了一些稍微不同的事情。

2018
01:29:13,750 --> 01:29:15,792
But it's just these inputs and outputs.
但它仅仅只是这些输入和输出。

2019
01:29:15,792 --> 01:29:17,500
Well, let's make the cat more like a cat.
好吧，让我们让这只猫更像一只猫。

2020
01:29:17,500 --> 01:29:20,590
Let me go ahead and throw away all of this asking question stuff.
让我把所有这些问问题的部分都扔掉。

2021
01:29:20,590 --> 01:29:23,350
Let me go up to Sound, and let me go ahead
让我向上滑动到“声音”，然后

2022
01:29:23,350 --> 01:29:26,260
and drag the play sound meow until done.
拖放“播放声音喵”块直到完成。

2023
01:29:26,260 --> 01:29:27,910
And here too it comes with meow.
这里也带了“喵”的声音。

2024
01:29:27,910 --> 01:29:31,697
You can add your own sounds as well.
你也可以添加自己的声音。

2025
01:29:31,697 --> 01:29:34,030
But I'm just going to use the default meow and here too.
但我只会使用默认的“喵”声音，在这里也是。

2026
01:29:34,030 --> 01:29:35,447
Hopefully, this won't be too loud.
希望声音不要太大。

2027
01:29:35,447 --> 01:29:37,360
Let's make the cat meow by clicking Play.
让我们点击“播放”让这只猫叫。

2028
01:29:37,360 --> 01:29:39,530
[MEOWING]
[猫叫声]

2029
01:29:39,530 --> 01:29:40,030
OK.
好的。

2030
01:29:40,030 --> 01:29:42,200
It's a little piercing, but it's cute.
有点刺耳，但很可爱。

2031
01:29:42,200 --> 01:29:45,490
And if I want the cat to meow twice, I could just play the game twice.
如果我想让这只猫叫两次，我可以玩两次游戏。

2032
01:29:45,490 --> 01:29:48,410
[MEOWING]
[猫叫声]

2033
01:29:48,410 --> 01:29:48,910
All right.
好的。

2034
01:29:48,910 --> 01:29:52,360
But it would be nice to just get it to meow automatically two, or three,
但如果它能自动叫两声、三声，或者更多，那就太好了

2035
01:29:52,360 --> 01:29:53,240
or more times.
或者更多次。

2036
01:29:53,240 --> 01:29:54,760
So you know what I could do?
所以你知道我可以做什么吗？

2037
01:29:54,760 --> 01:29:56,820
I could just drag a second one of these.
我可以再拖放一个。

2038
01:29:56,820 --> 01:29:57,820
Actually, you know what?
实际上，你知道吗？

2039
01:29:57,820 --> 01:30:00,790
I could even just right-click or Control-click and duplicate them.
我甚至可以右键单击或按住Control键并单击以复制它们。

2040
01:30:00,790 --> 01:30:02,110
But I'll just keep dragging and dropping.
但我还是会继续拖放。

2041
01:30:02,110 --> 01:30:03,670
There's different ways to solve problems.
解决问题的方法有很多。

2042
01:30:03,670 --> 01:30:04,780
And now let me click Play.
现在让我点击播放。

2043
01:30:04,780 --> 01:30:07,370
[MEOWING]
[猫叫声]

2044
01:30:07,370 --> 01:30:07,870
OK.
好的。

2045
01:30:07,870 --> 01:30:09,940
Cat does not sound particularly happy.
这只猫听起来并不高兴。

2046
01:30:09,940 --> 01:30:12,320
So we could go under--
所以我们可以到下面去--

2047
01:30:12,320 --> 01:30:13,690
how about Control?
控制怎么样？

2048
01:30:13,690 --> 01:30:15,220
We could wait one second.
我们可以等一秒钟。

2049
01:30:15,220 --> 01:30:18,740
Now, there's no room, but it will sort of expand to give room for me.
现在，没有空间，但它会扩展以腾出空间给我。

2050
01:30:18,740 --> 01:30:19,900
So let me try this.
所以让我试试这个。

2051
01:30:19,900 --> 01:30:22,540
And now it's going to wait one second in between meows.
现在它将在每次喵叫之间等待一秒钟。

2052
01:30:22,540 --> 01:30:25,828
[MEOWING]
[喵叫声]

2053
01:30:26,820 --> 01:30:27,330
OK.
好的。

2054
01:30:27,330 --> 01:30:28,830
Let me stipulate that is correct.
让我声明这是正确的。

2055
01:30:28,830 --> 01:30:32,190
If my goal is to get the cat to meow three times, it meowed three times.
如果我的目标是让猫喵叫三次，它喵叫了三次。

2056
01:30:32,190 --> 01:30:36,640
But per our discussion earlier of algorithms and the design thereof,
但是根据我们之前关于算法及其设计的讨论，

2057
01:30:36,640 --> 01:30:38,770
this is not the best design.
这不是最好的设计。

2058
01:30:38,770 --> 01:30:39,760
[MEOWING]
[喵叫声]

2059
01:30:39,760 --> 01:30:40,260
OK?
好吗？

2060
01:30:40,260 --> 01:30:40,500
[LAUGHTER]
[笑声]

2061
01:30:40,500 --> 01:30:42,000
Thank you for playing along at home.
感谢你在家参与。

2062
01:30:42,000 --> 01:30:43,350
Yeah.
是啊。

2063
01:30:43,350 --> 01:30:47,050
In what sense is this arguably not well-designed?
从某种意义上来说，这为什么可以说是设计不好的呢？

2064
01:30:47,050 --> 01:30:47,550
Yeah.
是啊。

2065
01:30:47,550 --> 01:30:48,930
AUDIENCE: You repeated yourself.
观众：你重复了自己。

2066
01:30:48,930 --> 01:30:51,600
DAVID J. MALAN: I repeated myself, which actually in programming
大卫·马兰：我重复了自己，实际上在编程中

2067
01:30:51,600 --> 01:30:53,440
tends not to be a good thing.
往往不是一件好事。

2068
01:30:53,440 --> 01:30:54,510
Now, it was easy.
现在，这很简单。

2069
01:30:54,510 --> 01:30:57,510
I almost resorted to copy-paste, which saves me time upfront.
我几乎要使用复制粘贴，这可以节省我最初的时间。

2070
01:30:57,510 --> 01:30:59,400
But just imagine a contrived scenario.
但想象一下一个人为制造的场景。

2071
01:30:59,400 --> 01:31:02,350
Now, what if I want it to wait like two seconds in between?
现在，如果我想让它在每次喵叫之间等待两秒钟呢？

2072
01:31:02,350 --> 01:31:02,850
All right.
好吧。

2073
01:31:02,850 --> 01:31:03,940
It's not that big a deal.
这不是什么大不了的事。

2074
01:31:03,940 --> 01:31:05,640
I change it here, and I change it here.
我在这里更改，在这里更改。

2075
01:31:05,640 --> 01:31:07,913
But what if the program is meant to meow 10 times?
但如果程序要让猫喵叫10次呢？

2076
01:31:07,913 --> 01:31:10,830
Then I have to change it here, and here, and here, and here, and here.
那么我必须在这里更改，在这里更改，在这里更改，在这里更改，在这里更改。

2077
01:31:10,830 --> 01:31:12,570
And eventually I'm going to screw up.
最终我会搞砸的。

2078
01:31:12,570 --> 01:31:13,470
Humans are fallible.
人类是会犯错的。

2079
01:31:13,470 --> 01:31:14,970
I'm going to overlook one of them.
我会忽略其中一个。

2080
01:31:14,970 --> 01:31:16,260
One time, it's going to be one second.
有一次，它会是一秒钟。

2081
01:31:16,260 --> 01:31:18,910
Another is going to be two, and just stupid things will happen.
另一次将会是两秒钟，就会发生一些愚蠢的事情。

2082
01:31:18,910 --> 01:31:23,050
You're setting yourself up for failure if you design things poorly.
如果你设计的东西很糟糕，你就是在为失败埋下伏笔。

2083
01:31:23,050 --> 01:31:26,440
And so I would propose that we use another type of building block
所以，我建议我们使用另一种类型的构建块

2084
01:31:26,440 --> 01:31:27,730
to solve this instead.
来解决这个问题。

2085
01:31:27,730 --> 01:31:28,555
Yeah.
是啊。

2086
01:31:28,555 --> 01:31:28,810
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2087
01:31:28,810 --> 01:31:29,685
DAVID J. MALAN: Yeah.
大卫·马兰：是啊。

2088
01:31:29,685 --> 01:31:32,950
So we could use a loop and just write minimal code
所以我们可以使用循环，只编写最少的代码

2089
01:31:32,950 --> 01:31:35,240
but to accomplish even more functionality.
但要实现更多功能。

2090
01:31:35,240 --> 01:31:37,390
So let me throw away most of these blocks.
所以，让我扔掉大多数块。

2091
01:31:37,390 --> 01:31:40,990
And let's go and grab this repeat block, which we haven't used yet,
然后我们去抓取这个重复块，我们还没用过，

2092
01:31:40,990 --> 01:31:42,042
but it's right there.
但它就在那里。

2093
01:31:42,042 --> 01:31:43,750
And as the name suggests, this will allow
顾名思义，这将允许

2094
01:31:43,750 --> 01:31:45,850
me to repeat something some number of times.
我多次重复某件事。

2095
01:31:45,850 --> 01:31:48,280
Let me put these two puzzle pieces inside.
让我把这两块拼图放在里面。

2096
01:31:48,280 --> 01:31:49,330
It'll grow to fill.
它会长大以填满。

2097
01:31:49,330 --> 01:31:51,370
Let me reconnect it to the green flag.
让我把它重新连接到绿色旗帜上。

2098
01:31:51,370 --> 01:31:53,470
I'll change the default 10 to a 3.
我会把默认的10改为3。

2099
01:31:53,470 --> 01:31:54,265
And now--
现在--

2100
01:31:54,265 --> 01:31:57,526
[MEOWING]
[喵叫声]

2101
01:31:58,940 --> 01:32:02,290
It's just sort of better because if now you want it to meow more times,
它只是更好，因为如果你现在想要它喵叫更多次，

2102
01:32:02,290 --> 01:32:03,290
you change it one place.
你只需要更改一个地方。

2103
01:32:03,290 --> 01:32:05,623
If you want it to slow down, you change it in one place.
如果你想让它慢下来，你只需要更改一个地方。

2104
01:32:05,623 --> 01:32:07,280
There's no room for error.
没有出错的余地。

2105
01:32:07,280 --> 01:32:09,920
And that's generally a good thing.
这通常是一件好事。

2106
01:32:09,920 --> 01:32:10,670
But this is silly.
但这很荒谬。

2107
01:32:10,670 --> 01:32:12,350
Like, Scratch comes with a cat.
比如，Scratch自带一只猫。

2108
01:32:12,350 --> 01:32:15,590
Why didn't MIT give us a puzzle piece called "meow?"
为什么麻省理工学院没有给我们一块叫做“喵”的拼图呢？

2109
01:32:15,590 --> 01:32:18,460
Like, why am I implementing the idea of meowing myself?
比如，为什么是我自己来实现喵叫的想法呢？

2110
01:32:18,460 --> 01:32:19,460
Like, that took me what?
比如，那花了我多长时间？

2111
01:32:19,460 --> 01:32:21,410
1, 2, 3, 4 puzzle pieces.
1、2、3、4块拼图。

2112
01:32:21,410 --> 01:32:24,080
Why isn't there just one puzzle piece that meows for me?
为什么没有一块拼图能帮我喵叫呢？

2113
01:32:24,080 --> 01:32:28,430
This too we can do in code, be it in Scratch, or C, or other languages too.
这在代码中也可以做到，无论是Scratch、C语言还是其他语言。

2114
01:32:28,430 --> 01:32:32,660
I'm going to go down to these pink my blocks here,
我要到这些粉红色的“我的积木”块这里，

2115
01:32:32,660 --> 01:32:35,027
where I can create my own puzzle piece.
在那里我可以创建我自己的拼图块。

2116
01:32:35,027 --> 01:32:36,860
And I'm going to call this literally "meow."
我将把它命名为“喵”。

2117
01:32:36,860 --> 01:32:39,150
And I'm going to go ahead and just click OK.
我将点击确定。

2118
01:32:39,150 --> 01:32:42,242
And notice that it's given me this new type of start connector.
请注意，它给了我这种新型的起始连接器。

2119
01:32:42,242 --> 01:32:44,450
It's a start puzzle piece that nothing goes above it.
这是一个起始拼图，上面不能放任何东西。

2120
01:32:44,450 --> 01:32:46,430
But you can put anything you want below it.
但你可以在下面放置任何你想要的东西。

2121
01:32:46,430 --> 01:32:48,170
And I'm going to go ahead and cheat here.
我要在这里作弊一下。

2122
01:32:48,170 --> 01:32:51,390
I'm just going to grab my existing code, so to speak.
我将直接获取现有的代码。

2123
01:32:51,390 --> 01:32:53,810
This is code I'm writing, even though it's puzzle pieces.
这是我编写的代码，即使它是由拼图块组成的。

2124
01:32:53,810 --> 01:32:57,380
And now let me just claim, and I'll move this aside.
现在，我要声明，然后把这个移到一边。

2125
01:32:57,380 --> 01:33:00,690
Here is now an implementation of my own function,
现在，这是我自己的函数实现，

2126
01:33:00,690 --> 01:33:03,510
my own block called "meow," whose purpose in life
我自己的名为“喵”的模块，其存在的意义

2127
01:33:03,510 --> 01:33:06,180
is to meow until done and then wait one second.
就是一直喵，直到完成，然后等待一秒钟。

2128
01:33:06,180 --> 01:33:10,350
But what's powerful now is notice at top left, now that I've made the block,
但现在强大的地方是，请注意左上角，现在我已经创建了这个模块，

2129
01:33:10,350 --> 01:33:12,910
I can use it any number of times.
我可以使用它任意多次。

2130
01:33:12,910 --> 01:33:17,520
So I can grab this meow block, drag it over here, and you know what?
所以我可以抓住这个“喵”模块，把它拖到这里，你知道吗？

2131
01:33:17,520 --> 01:33:21,590
Now that "meow" exists as an idea, I can abstract that away.
现在“喵”作为一种概念存在了，我可以把它抽象出来。

2132
01:33:21,590 --> 01:33:24,090
And I'm just going to arbitrarily drag it way to the bottom.
我要随意地把它拖到最底部。

2133
01:33:24,090 --> 01:33:24,990
I'm not deleting it.
我没有删除它。

2134
01:33:24,990 --> 01:33:27,270
I'm just putting it out of sight, out of mind so
我只是把它隐藏起来，不再想它，以便

2135
01:33:27,270 --> 01:33:28,890
that we can focus now on this idea.
我们可以专注于这个概念。

2136
01:33:28,890 --> 01:33:31,410
And I claim that this implementation of meowing
我声称，这种“喵”的实现

2137
01:33:31,410 --> 01:33:35,010
is sort of better because it's more compact, it does what it says,
在某种程度上更好，因为它更简洁，它做到了它所说的，

2138
01:33:35,010 --> 01:33:38,520
and I don't care about the implementation details of "meow."
而且我不关心“喵”的具体实现细节。

2139
01:33:38,520 --> 01:33:41,640
So this idea of abstraction, something we're going to use frequently.
所以这种抽象的概念，我们会经常用到。

2140
01:33:41,640 --> 01:33:44,767
To abstract something away is to simplify.
抽象化就是简化。

2141
01:33:44,767 --> 01:33:47,100
Don't think about the underlying implementation details.
不要考虑底层的实现细节。

2142
01:33:47,100 --> 01:33:50,130
Just care about what it does or what it's called.
只要关心它做什么或者它叫什么名字。

2143
01:33:50,130 --> 01:33:52,590
Someone has to care about the implementation details,
总有人需要关心实现细节，

2144
01:33:52,590 --> 01:33:54,330
like me 30 seconds ago.
就像我30秒前一样。

2145
01:33:54,330 --> 01:33:56,430
But here on out, I don't need to care.
但从现在开始，我不需要关心了。

2146
01:33:56,430 --> 01:33:59,690
And so in fact, you and I are using the abstraction
事实上，你和我都在使用抽象

2147
01:33:59,690 --> 01:34:02,940
that is Scratch because I don't know how to put a speech bubble on the screen.
就是Scratch，因为我不知道如何在屏幕上放置一个对话框。

2148
01:34:02,940 --> 01:34:04,773
I don't know how to create that sound, meow.
我不知道如何创建那个声音，“喵”。

2149
01:34:04,773 --> 01:34:07,380
MIT did that, and they abstracted those pieces
麻省理工学院做到了，他们将这些部分抽象出来

2150
01:34:07,380 --> 01:34:10,440
of functionality away already for us by just giving us
让我们可以直接使用这些功能，通过简单地提供给我们

2151
01:34:10,440 --> 01:34:12,280
these puzzle pieces we see here.
这些我们看到的拼图块。

2152
01:34:12,280 --> 01:34:14,445
So the code will work the exact same.
所以代码将以完全相同的方式工作。

2153
01:34:14,445 --> 01:34:17,330
[MEOWING]
[喵叫声]

2154
01:34:17,330 --> 01:34:21,640
But it's sort of better designed now because now I've
但现在设计得更好了，因为现在我已经

2155
01:34:21,640 --> 01:34:23,470
abstracted away the idea of meowing.
将“喵”的概念抽象出来了。

2156
01:34:23,470 --> 01:34:25,690
But I bet I can improve this further.
但我相信我可以进一步改进。

2157
01:34:25,690 --> 01:34:28,390
Can I get rid of the repeat block altogether?
我可以完全删除“重复”模块吗？

2158
01:34:28,390 --> 01:34:31,510
And let me just tell the meow block how many times to meow.
然后我可以直接告诉“喵”模块要喵多少次。

2159
01:34:31,510 --> 01:34:35,170
Well, let me go down to the bottom and look at the implementation details.
好吧，我将移到底部查看实现细节。

2160
01:34:35,170 --> 01:34:37,270
I'm going to right-click or Control-click on this,
我将右键单击或使用Ctrl键单击它，

2161
01:34:37,270 --> 01:34:38,210
and I'm going to edit it.
然后我会编辑它。

2162
01:34:38,210 --> 01:34:39,290
So I'm going to make a change.
我要做一些改变。

2163
01:34:39,290 --> 01:34:42,290
And I didn't do this before, but I'm going to call it "meow," as before.
以前我没有这样做，但我要像以前一样把它命名为“喵”。

2164
01:34:42,290 --> 01:34:43,780
I'm going to add an input.
我要添加一个输入。

2165
01:34:43,780 --> 01:34:46,240
And just so I know what it says what it does,
为了让我知道它做什么，

2166
01:34:46,240 --> 01:34:49,000
I'm going to add the word "times" here.
我要在这里添加单词“次数”。

2167
01:34:49,000 --> 01:34:52,840
And I'm going to change this placeholder to n.
我要将这个占位符改为n。

2168
01:34:52,840 --> 01:34:54,970
n for "number" is the go-to placeholder any time
n 代表“数字”，是我们在计算机科学中谈论数字时常用的占位符。

2169
01:34:54,970 --> 01:34:57,230
we want to talk about a number in CS.
我们想要谈论计算机科学中的数字。

2170
01:34:57,230 --> 01:35:00,020
So now notice the puzzle piece looks a little different.
所以现在请注意，这个拼图块看起来有点不同。

2171
01:35:00,020 --> 01:35:02,830
It takes an argument or a parameter called
它接受一个参数，称为

2172
01:35:02,830 --> 01:35:05,680
n, which represents the number of times you want the thing to meow.
n，它代表你想让它喵的次数。

2173
01:35:05,680 --> 01:35:07,280
Now, that doesn't do that yet.
现在，它还没有这样做。

2174
01:35:07,280 --> 01:35:10,240
So let me go back to my other code.
所以，让我回到我的另一段代码。

2175
01:35:10,240 --> 01:35:13,210
Let me just decouple these temporarily.
让我暂时将它们分离。

2176
01:35:13,210 --> 01:35:17,950
I'm going to move my loop into my implementation of meowing.
我要将我的循环移动到“喵喵叫”的实现中。

2177
01:35:17,950 --> 01:35:21,950
But I don't want to hard code, that is literally write the number 3 anymore.
但我不想硬编码，也就是说不再直接写数字 3。

2178
01:35:21,950 --> 01:35:25,860
I'm going to grab this oval and put it there.
我要抓住这个椭圆形并把它放在那里。

2179
01:35:25,860 --> 01:35:27,900
So now I've generalized the function.
现在我已经将函数泛化了。

2180
01:35:27,900 --> 01:35:33,860
So now it will meow any number of times, 0 on up, by executing that loop
现在它可以通过执行循环来喵任意次数，从 0 次开始。

2181
01:35:33,860 --> 01:35:35,540
and now more powerfully.
现在更强大。

2182
01:35:35,540 --> 01:35:36,890
Out of sight, out of mind.
眼不见心不烦。

2183
01:35:36,890 --> 01:35:40,850
Notice that my code just became so darn simple.
注意我的代码变得如此简单。

2184
01:35:40,850 --> 01:35:42,650
Like, my function is called "meow."
比如，我的函数叫做“喵喵叫”。

2185
01:35:42,650 --> 01:35:44,330
It meows some number of times.
它会喵一些次数。

2186
01:35:44,330 --> 01:35:46,910
All I have to do is type a number there, and it just works.
我只需要在那里输入一个数字，它就会工作。

2187
01:35:46,910 --> 01:35:50,660
And I don't care any more about those lower-level, so to speak,
我不再关心那些更低级的，可以这么说，

2188
01:35:50,660 --> 01:35:52,230
implementation details.
实现细节。

2189
01:35:52,230 --> 01:35:53,270
So here, no surprise.
所以这里，不出所料。

2190
01:35:53,270 --> 01:35:55,985
If I type in the number 3, zoom out, and hit Play--
如果我在那里输入数字 3，缩小画面并点击播放 -

2191
01:35:55,985 --> 01:36:00,270
[MEOWING]
[喵喵叫]

2192
01:36:00,270 --> 01:36:02,500
--it still works just fine.
- 它仍然可以正常工作。

2193
01:36:02,500 --> 01:36:05,460
So any questions on what we've just done here?
那么，关于我们刚刚做的事情，有任何问题吗？

2194
01:36:05,460 --> 01:36:07,710
It's still just meowing, but that's besides the point.
它仍然只是在喵喵叫，但这并不重要。

2195
01:36:07,710 --> 01:36:11,340
It's this creation of our own functions, this modularity,
这是我们自己创建函数、模块化，

2196
01:36:11,340 --> 01:36:15,640
this abstraction that's going to be the idea that keeps coming back to us.
这种抽象，将是我们反复出现的概念。

2197
01:36:15,640 --> 01:36:16,140
No?
没有？

2198
01:36:16,140 --> 01:36:16,640
All right.
好的。

2199
01:36:16,640 --> 01:36:19,050
So let's make this a little more cat-like.
让我们让它更像猫一点。

2200
01:36:19,050 --> 01:36:20,980
Let me throw away all of this code.
让我把所有这些代码扔掉。

2201
01:36:20,980 --> 01:36:22,000
And let me go ahead--
让我先 -

2202
01:36:22,000 --> 01:36:25,000
oops-- let me throw away this code first and then the rest of this code.
糟糕 - 让我先把这段代码扔掉，然后再扔掉剩下的代码。

2203
01:36:25,000 --> 01:36:28,500
And let me go ahead and give myself another green flag block.
让我再给自己添加一个绿色旗帜块。

2204
01:36:28,500 --> 01:36:32,430
And let me go ahead, and let's create a cat that allows us to pet it
让我继续，让我们创建一个猫，让我们可以抚摸它

2205
01:36:32,430 --> 01:36:34,530
by moving my cursor over the cat.
通过将我的鼠标悬停在猫上面。

2206
01:36:34,530 --> 01:36:36,820
And maybe it likes that, so it'll meow when I do that.
也许它喜欢这样，所以我这样做的时候它会喵喵叫。

2207
01:36:36,820 --> 01:36:42,270
So let me go under Control, and let me grab this if conditional,
让我进入“控制”模块，然后抓住这个“如果”条件语句，

2208
01:36:42,270 --> 01:36:44,910
which we talked about as a building block earlier.
我们之前说过它是基础构建块。

2209
01:36:44,910 --> 01:36:47,310
Let me go to Sensing, and we haven't used this before.
让我进入“感测”模块，我们以前没有使用过它。

2210
01:36:47,310 --> 01:36:50,130
But here is a weird sort of diagonal shape
但是这里有一个奇怪的斜形

2211
01:36:50,130 --> 01:36:52,440
that says touching mouse pointer question mark.
它表示“是否触碰鼠标指针”。

2212
01:36:52,440 --> 01:36:54,027
So that's a Boolean expression.
所以这是一个布尔表达式。

2213
01:36:54,027 --> 01:36:56,610
So I'm going to drag that, and it's definitely the wrong size.
所以我将把它拖动，它的大小肯定不对。

2214
01:36:56,610 --> 01:36:59,070
But it is the right shape, so it will grow to fill.
但它的形状是正确的，所以它会自动扩展。

2215
01:36:59,070 --> 01:37:03,820
And the question I want to ask is if the cat is touching the mouse pointer,
我想问的问题是，如果猫触碰了鼠标指针，

2216
01:37:03,820 --> 01:37:05,770
then go ahead and meow happily.
就让它开心地喵喵叫。

2217
01:37:05,770 --> 01:37:08,360
So let me grab the meow sound, put it in there.
让我抓住“喵喵叫”声音，把它放在那里。

2218
01:37:08,360 --> 01:37:12,970
And so I think when I click the green flag to start the program,
所以我想，当我点击绿色旗帜启动程序，

2219
01:37:12,970 --> 01:37:19,174
and now I let the mouse pointer touch the cat, we should hear--
现在我让鼠标指针触碰猫，我们应该听到 -

2220
01:37:19,174 --> 01:37:20,110
huh.
嗯。

2221
01:37:20,110 --> 01:37:21,120
huh.
嗯。

2222
01:37:21,120 --> 01:37:23,820
Doesn't seem to be working.
好像没有起作用。

2223
01:37:23,820 --> 01:37:27,440
There's a bug or a mistake in this program too.
这个程序里也有个错误或者错误。

2224
01:37:27,440 --> 01:37:28,440
What did I do wrong?
我哪里做错了？

2225
01:37:28,440 --> 01:37:28,940
Yeah.
是的。

2226
01:37:28,940 --> 01:37:31,090
AUDIENCE: You didn't specify the sprite [INAUDIBLE]..
观众：你没有明确指定精灵[听不清]。

2227
01:37:31,090 --> 01:37:33,130
DAVID J. MALAN: I don't need to specify the sprite explicitly
大卫·J·马兰：我不需要明确指定精灵

2228
01:37:33,130 --> 01:37:35,200
because a detail I didn't discuss earlier.
因为我之前没有讨论过一个细节。

2229
01:37:35,200 --> 01:37:37,630
In the bottom right of the screen, notice
在屏幕的右下角，注意

2230
01:37:37,630 --> 01:37:39,890
that the cat is already selected.
猫已经被选中了。

2231
01:37:39,890 --> 01:37:42,100
So this code relates to that cat.
所以这段代码是针对那只猫的。

2232
01:37:42,100 --> 01:37:45,340
So your instinct is good if we had two or more sprites,
所以，如果我们有两个或更多精灵，你的直觉是对的，

2233
01:37:45,340 --> 01:37:48,045
but I just have one, so I'm covered there.
但我只有一只猫，所以这里不用担心。

2234
01:37:48,045 --> 01:37:48,670
Other thoughts.
其他想法。

2235
01:37:48,670 --> 01:37:49,602
Yeah.
是的。

2236
01:37:49,602 --> 01:37:50,870
AUDIENCE: It only checks once.
观众：它只检查一次。

2237
01:37:50,870 --> 01:37:51,980
DAVID J. MALAN: It only checks?
大卫·J·马兰：它只检查？

2238
01:37:51,980 --> 01:37:52,250
AUDIENCE: Once.
观众：一次。

2239
01:37:52,250 --> 01:37:53,125
DAVID J. MALAN: Once.
大卫·J·马兰：一次。

2240
01:37:53,125 --> 01:37:54,960
So I click the green flag.
所以，我点击绿色旗帜。

2241
01:37:54,960 --> 01:37:57,230
The computer did what I told it to do.
计算机做了我告诉它做的事。

2242
01:37:57,230 --> 01:38:00,165
The mouse pointer was not touching the cat at that moment
此时此刻，鼠标指针没有触碰猫咪

2243
01:38:00,165 --> 01:38:01,790
because it was touching the green flag.
因为它正在触碰绿色旗帜。

2244
01:38:01,790 --> 01:38:03,320
So, of course, it didn't meow.
所以，当然，它没有喵喵叫。

2245
01:38:03,320 --> 01:38:05,360
So what maybe is the fix here?
那么，这里可能有什么解决方法？

2246
01:38:05,360 --> 01:38:06,980
What puzzle piece can we add?
我们可以添加什么拼图块？

2247
01:38:06,980 --> 01:38:09,290
AUDIENCE: After the green flag is [INAUDIBLE]..
观众：在绿色旗帜[听不清]之后…

2248
01:38:09,290 --> 01:38:10,140
DAVID J. MALAN: OK.
大卫·J·马兰：好的。

2249
01:38:10,140 --> 01:38:10,640
OK.
好的。

2250
01:38:10,640 --> 01:38:12,360
Interesting solution.
有趣的解决方案。

2251
01:38:12,360 --> 01:38:17,930
So let me go ahead, and under Control let me grab a-- wait one second.
所以让我继续，在控制下，让我抓一个 - 等一下。

2252
01:38:17,930 --> 01:38:21,360
I'm going to change the 1 to 5, and now I'm going to click the green flag.
我要把 1 改成 5，现在我要点击绿色旗帜。

2253
01:38:21,360 --> 01:38:22,370
So here we go.
所以，我们开始吧。

2254
01:38:22,370 --> 01:38:28,490
1, 2, 3, 4, 5.
1, 2, 3, 4, 5。

2255
01:38:28,490 --> 01:38:29,060
Damn it.
该死。

2256
01:38:29,060 --> 01:38:29,630
[MEOWING]
[喵喵叫]

2257
01:38:29,630 --> 01:38:29,810
OK.
好的。

2258
01:38:29,810 --> 01:38:30,852
That was yours, not mine.
那是你的，不是我的。

2259
01:38:30,852 --> 01:38:32,240
[LAUGHTER]
[笑声]

2260
01:38:32,240 --> 01:38:33,915
It didn't work.
它不起作用。

2261
01:38:33,915 --> 01:38:34,790
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2262
01:38:34,790 --> 01:38:35,707
DAVID J. MALAN: Sorry?
大卫·J·马兰：抱歉？

2263
01:38:35,707 --> 01:38:36,703
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2264
01:38:36,703 --> 01:38:38,120
DAVID J. MALAN: Oh, maybe forever.
大卫·J·马兰：哦，也许永远。

2265
01:38:38,120 --> 01:38:42,230
So your approach would work, but it's very much a hack, if you will.
所以你的方法可以，但它很像一个技巧，如果你愿意。

2266
01:38:42,230 --> 01:38:46,700
Like, I would have to time it perfectly so that the mouse pointer is touching
就像，我必须完美地计时，以便鼠标指针接触

2267
01:38:46,700 --> 01:38:49,040
it, or, conversely, I have to drag it there and just
它，或者反过来，我必须把它拖到那里，然后就

2268
01:38:49,040 --> 01:38:50,540
leave it there for five seconds.
把它放在那里五秒钟。

2269
01:38:50,540 --> 01:38:53,040
And that's a little weird because you don't just touch a cat
这有点奇怪，因为你不会只是碰一只猫

2270
01:38:53,040 --> 01:38:54,960
and then five seconds later it meows at you.
然后五秒钟后它向你喵喵叫。

2271
01:38:54,960 --> 01:38:57,190
Like, presumably, we want it to be more interactive.
就像，我们可能希望它更具互动性。

2272
01:38:57,190 --> 01:38:58,660
So I like this idea of a loop.
所以我喜欢循环的想法。

2273
01:38:58,660 --> 01:38:59,160
Right?
对吧？

2274
01:38:59,160 --> 01:39:04,440
Why don't we just tell the cat to forever listen for the cursor
为什么我们不直接告诉猫咪永远监听光标

2275
01:39:04,440 --> 01:39:07,170
as by using not repeat but forever?
通过使用不是重复而是永远？

2276
01:39:07,170 --> 01:39:08,240
Let me move this in here.
让我把它移到这儿。

2277
01:39:08,240 --> 01:39:11,490
So now the cat's going to be told when the green flag is clicked just forever,
所以现在当绿色旗帜被点击时，猫咪将被告知永远，

2278
01:39:11,490 --> 01:39:13,073
if touching, if touching, if touching.
如果触碰，如果触碰，如果触碰。

2279
01:39:13,073 --> 01:39:15,270
Oh, meow when actually touched.
哦，当实际触碰时喵喵叫。

2280
01:39:15,270 --> 01:39:19,368
So now if I zoom out and hit Play, nothing's happening.
所以现在如果我缩小并点击播放，什么也不会发生。

2281
01:39:19,368 --> 01:39:21,160
I don't have to wait any number of seconds.
我不必等待任何秒数。

2282
01:39:21,160 --> 01:39:22,545
But when I do touch the cat--
但当我触碰猫咪时 -

2283
01:39:22,545 --> 01:39:23,260
[MEOWING]
[喵喵叫]

2284
01:39:23,260 --> 01:39:24,180
[APPLAUSE]
[鼓掌]

2285
01:39:24,180 --> 01:39:26,765
[CHUCKLES] Fan section here.
[轻笑] 这里的粉丝区。

2286
01:39:26,765 --> 01:39:27,265
Thank you.
谢谢。

2287
01:39:27,265 --> 01:39:27,765
[MEOWING]
[喵喵叫]

2288
01:39:27,765 --> 01:39:30,890
So now it's actually working quite well.
所以现在它实际上运行良好。

2289
01:39:30,890 --> 01:39:33,220
So there we have sort of a logical bug.
所以我们这里有点逻辑错误。

2290
01:39:33,220 --> 01:39:35,545
But it does make sense if you think about what it was
但如果你想想它是什么

2291
01:39:35,545 --> 01:39:38,020
you told the computer to actually do.
你告诉计算机实际做的事情。

2292
01:39:38,020 --> 01:39:39,915
Well, let's make things even more interesting
好吧，让我们让事情更有趣

2293
01:39:39,915 --> 01:39:41,290
by using one of these extensions.
通过使用其中一个扩展。

2294
01:39:41,290 --> 01:39:44,620
In this bottom left corner, this is how I got to text-to-speech earlier.
在这个左下角，这是我之前如何获得文本到语音的。

2295
01:39:44,620 --> 01:39:47,470
Let me go to Video Sensing over here too.
让我也去这里看看视频感应。

2296
01:39:47,470 --> 01:39:50,750
And I can actually-- there we go-- literally, the video has come on.
我实际上可以 - 瞧 - 实际上，视频已经开始了。

2297
01:39:50,750 --> 01:39:52,060
Let me go ahead and do this.
让我继续做这个。

2298
01:39:52,060 --> 01:39:55,690
Get rid of this code, and let me step out of the frame.
去掉这段代码，让我走出画面。

2299
01:39:55,690 --> 01:39:58,540
When video motion is greater than--
当视频运动大于 -

2300
01:39:58,540 --> 01:40:00,490
well, this is CS50, so let's just type in 50,
好吧，这是 CS50，所以让我们只输入 50，

2301
01:40:00,490 --> 01:40:02,150
which is just a measure of motion.
这只是一个运动的度量。

2302
01:40:02,150 --> 01:40:07,370
Let me go and play sound meow.
让我去播放声音喵喵叫。

2303
01:40:07,370 --> 01:40:07,870
OK.
好的。

2304
01:40:07,870 --> 01:40:11,720
And let me stop and restart.
让我停止并重新开始。

2305
01:40:11,720 --> 01:40:12,220
All right.
好的。

2306
01:40:12,220 --> 01:40:13,030
So there's the cat.
所以，这就是那只猫。

2307
01:40:18,270 --> 01:40:19,260
[MEOWING]
[喵喵叫]

2308
01:40:19,260 --> 01:40:20,040
OK.
好的。

2309
01:40:20,040 --> 01:40:20,880
It worked.
它奏效了。

2310
01:40:20,880 --> 01:40:24,330
The cat's a little insensitive.
这只猫有点迟钝。

2311
01:40:24,330 --> 01:40:25,190
[MEOWING]
[喵喵叫]

2312
01:40:25,190 --> 01:40:25,720
There we go.
我们去。

2313
01:40:25,720 --> 01:40:26,720
Actually, you know what?
实际上，你知道吗？

2314
01:40:26,720 --> 01:40:30,300
Maybe it's just-- let me put-- let's change it.
也许是，让我放一下，让我们改变它。

2315
01:40:30,300 --> 01:40:31,130
20.
20.

2316
01:40:31,130 --> 01:40:31,940
Oh, my God.
哦，我的天哪。

2317
01:40:31,940 --> 01:40:33,480
Oh, that's OK.
哦，没事。

2318
01:40:33,480 --> 01:40:33,980
[MEOWING]
[喵喵叫]

2319
01:40:33,980 --> 01:40:34,790
There we go.
好了。

2320
01:40:34,790 --> 01:40:35,690
All right.
好的。

2321
01:40:35,690 --> 01:40:36,420
There we go.
好了。

2322
01:40:36,420 --> 01:40:40,038
So now it's a little more sensitive to the petting by using the camera.
所以现在通过使用摄像头，它对抚摸更敏感了。

2323
01:40:40,038 --> 01:40:41,580
Now, this is kind of a weird example.
现在，这是一个有点奇怪的例子。

2324
01:40:41,580 --> 01:40:43,160
And if I just start moving around crazily, like,
如果我开始疯狂地四处移动，就像，

2325
01:40:43,160 --> 01:40:45,320
it's just going to meow incessantly, which was what was happening--
它就会不停地喵喵叫，这就是之前发生的事情。

2326
01:40:45,320 --> 01:40:46,430
[MEOWING]
[喵喵叫]

2327
01:40:46,430 --> 01:40:48,222
Stop.
停。

2328
01:40:48,222 --> 01:40:49,020
[LAUGHTER]
[笑声]

2329
01:40:49,020 --> 01:40:49,520
OK.
好的。

2330
01:40:49,520 --> 01:40:51,800
When in doubt, this is when you reload the page.
有疑问时，这就是你重新加载页面的时机。

2331
01:40:51,800 --> 01:40:53,010
[LAUGHTER]
[笑声]

2332
01:40:53,010 --> 01:40:53,510
All right.
好的。

2333
01:40:53,510 --> 01:40:55,730
So now we're back to where we wanted to be.
所以现在我们回到了我们想要的地方。

2334
01:40:55,730 --> 01:40:58,220
But where can we now use these kinds of building blocks?
但是现在我们可以在哪里使用这些积木？

2335
01:40:58,220 --> 01:41:00,540
Like, we were doing such tiny little programs.
比如，我们正在做非常小的程序。

2336
01:41:00,540 --> 01:41:04,220
But even that we could turn into a whole game, I bet.
但我敢打赌，即使那样我们也能把它变成一个完整的游戏。

2337
01:41:04,220 --> 01:41:07,700
Could we get like one volunteer to come on up?
我们能找一位志愿者上来吗？

2338
01:41:07,700 --> 01:41:08,810
One volunteer?
一位志愿者？

2339
01:41:08,810 --> 01:41:10,170
Everyone's looking down.
大家都在低头看。

2340
01:41:10,170 --> 01:41:10,670
OK.
好的。

2341
01:41:10,670 --> 01:41:11,180
On the end here.
这边。

2342
01:41:11,180 --> 01:41:11,722
Come on down.
下来吧。

2343
01:41:11,722 --> 01:41:12,290
Yeah.
好。

2344
01:41:12,290 --> 01:41:12,790
All right.
好的。

2345
01:41:12,790 --> 01:41:14,930
Round of applause for our one brave volunteer here.
让我们为我们这位勇敢的志愿者鼓掌。

2346
01:41:14,930 --> 01:41:18,150
[APPLAUSE]
[掌声]

2347
01:41:18,650 --> 01:41:19,400
All right.
好的。

2348
01:41:19,400 --> 01:41:22,020
These Super Mario cookies are on the line for you,
这些超级玛丽饼干就等着你，

2349
01:41:22,020 --> 01:41:23,160
depending on how this goes.
取决于事情进展如何。

2350
01:41:23,160 --> 01:41:24,827
So I'm going to have you come over here.
所以我让你过来这里。

2351
01:41:24,827 --> 01:41:28,940
And in advance on Scratch's website, we have some pre-made games,
在 Scratch 网站上，我们提前准备了一些游戏，

2352
01:41:28,940 --> 01:41:32,930
one of them written by one of your predecessors, a former student,
其中一个是由你的前辈，一位前学生写的，

2353
01:41:32,930 --> 01:41:36,050
that they implemented this sort of "Whac-A-Mole" game.
他们实现了一种类似“打地鼠”的游戏。

2354
01:41:36,050 --> 01:41:39,290
So what you're about to see is the camera turn on on you.
所以你即将看到摄像头对着你打开。

2355
01:41:39,290 --> 01:41:43,160
And you're going to see four moles above, below, left, and right.
你会看到四个地鼠，分别在上方，下方，左方和右方。

2356
01:41:43,160 --> 01:41:44,720
And using only your head--
只需使用你的头。

2357
01:41:44,720 --> 01:41:47,930
up, down, left, right-- the goal is to whack a mole
上下左右，目标是打地鼠

2358
01:41:47,930 --> 01:41:51,860
to get a point every time your head touches one of these sprites.
每次你的头碰到这些精灵，你就能获得一分。

2359
01:41:51,860 --> 01:41:54,740
So you're about to see things get very interesting very quickly.
所以你将看到事情很快就会变得非常有趣。

2360
01:41:54,740 --> 01:41:57,050
But using these building blocks, just those simple
但使用这些积木，仅仅是那些简单的

2361
01:41:57,050 --> 01:42:01,350
blocks but have four sprites, not four cats but four moles in this case.
积木，但有四个精灵，不是四只猫，而是四个地鼠。

2362
01:42:01,350 --> 01:42:03,955
We can actually turn these into actual games.
我们实际上可以把这些变成真正的游戏。

2363
01:42:03,955 --> 01:42:04,580
[MUSIC PLAYING]
[音乐播放]

2364
01:42:04,580 --> 01:42:06,950
So here we go.
好了，开始吧。

2365
01:42:06,950 --> 01:42:08,360
Click Beginner.
点击初学者。

2366
01:42:08,360 --> 01:42:08,900
OK.
好的。

2367
01:42:08,900 --> 01:42:10,858
And we just need you to center your head first.
我们只需要你先把头放在正中间。

2368
01:42:10,858 --> 01:42:13,808
[MUSIC PLAYING]
[音乐播放]

2369
01:42:20,152 --> 01:42:23,080
[INDISTINCT CHATTER]
[模糊的聊天声]

2370
01:42:24,056 --> 01:42:25,032
[CHUCKLES]
[轻笑]

2371
01:42:25,032 --> 01:42:28,448
[MUSIC PLAYING]
[音乐播放]

2372
01:42:30,920 --> 01:42:31,820
Nice.
不错。

2373
01:42:31,820 --> 01:42:32,630
Ten seconds.
十秒。

2374
01:42:32,630 --> 01:42:36,004
[MUSIC PLAYING]
[音乐播放]

2375
01:42:39,390 --> 01:42:40,470
Nice.
不错。

2376
01:42:40,470 --> 01:42:42,486
Two seconds.
两秒。

2377
01:42:42,486 --> 01:42:43,290
AUDIENCE: [LAUGHS]
观众：[笑声]

2378
01:42:43,290 --> 01:42:43,770
DAVID J. MALAN: All right.
大卫·马兰：好的。

2379
01:42:43,770 --> 01:42:44,610
A round of applause.
让我们鼓掌。

2380
01:42:44,610 --> 01:42:45,906
[APPLAUSE]
[掌声]

2381
01:42:45,906 --> 01:42:48,100
Thank you.
谢谢。

2382
01:42:48,100 --> 01:42:50,380
You want to introduce yourself?
你想介绍一下自己吗？

2383
01:42:50,380 --> 01:42:51,380
AUDIENCE: Hi, everybody.
观众：大家好。

2384
01:42:51,380 --> 01:42:53,890
My name is [? Vanilla. ?] I'm a first year,
我的名字是[？香草。？]我是一年级，

2385
01:42:53,890 --> 01:42:56,955
and I'm going to be majoring in computer science and economics.
我将主修计算机科学和经济学。

2386
01:42:56,955 --> 01:42:58,330
DAVID J. MALAN: Nice to meet you.
大卫·马兰：很高兴认识你。

2387
01:42:58,330 --> 01:42:58,830
Here we go.
好了。

2388
01:42:58,830 --> 01:42:59,435
Thank you.
谢谢。

2389
01:42:59,435 --> 01:43:00,560
AUDIENCE: Nice to meet you.
观众：很高兴认识你。

2390
01:43:00,560 --> 01:43:01,393
[APPLAUSE, CHEERING]
[掌声，欢呼声]

2391
01:43:01,393 --> 01:43:04,210
DAVID J. MALAN: So we won't look at the code for that actual game.
大卫·J·马兰：所以我们不会去看那个实际游戏的代码。

2392
01:43:04,210 --> 01:43:05,740
It was written by one of your predecessors.
它是由你们的前辈之一编写的。

2393
01:43:05,740 --> 01:43:07,573
And you can see it online if you're curious.
如果你好奇的话，你可以在网上看到它。

2394
01:43:07,573 --> 01:43:10,780
But you can think about now with our functions, conditionals,
但是现在你可以想想，有了我们的函数、条件语句，

2395
01:43:10,780 --> 01:43:15,010
Boolean expressions, loops how you could kind of compose that kind of program.
布尔表达式、循环，你如何才能编写那种程序。

2396
01:43:15,010 --> 01:43:17,770
So odds are there was a loop that was just constantly listening
所以很有可能有一个循环，它一直在监听

2397
01:43:17,770 --> 01:43:19,690
for that kind of connectivity, or it was one
那种连接，或者它是一个

2398
01:43:19,690 --> 01:43:22,900
of those extensions that was waiting for motion to go
那些等待运动的扩展之一

2399
01:43:22,900 --> 01:43:24,180
touch one of those sprites.
接触那些精灵之一。

2400
01:43:24,180 --> 01:43:25,930
Notice that there's these numbers up here.
注意上面有这些数字。

2401
01:43:25,930 --> 01:43:27,040
And we haven't talked about this yet.
我们还没谈过这个。

2402
01:43:27,040 --> 01:43:30,040
But just like in math, where you can have variables x, y, and z,
但就像数学中，你可以有变量x、y和z一样，

2403
01:43:30,040 --> 01:43:33,220
in programming, you can create variables using other puzzle pieces
在编程中，你可以使用其他拼图块创建变量

2404
01:43:33,220 --> 01:43:36,460
in Scratch that just keep track of how many seconds are left,
在Scratch中，这些拼图块只跟踪剩余多少秒，

2405
01:43:36,460 --> 01:43:40,310
that keeps track of how many times her head hit one of the moles.
它跟踪她的头击中地鼠的次数。

2406
01:43:40,310 --> 01:43:43,760
And so you can implement the mechanics of games using very simple building
因此，你可以使用非常简单的构建块来实现游戏的机制

2407
01:43:43,760 --> 01:43:44,260
blocks.
块。

2408
01:43:44,260 --> 01:43:46,240
But how do you go about building something
但是，你如何才能构建一些

2409
01:43:46,240 --> 01:43:48,600
that's more interesting and interactive like that?
更有趣、更具互动性的东西？

2410
01:43:48,600 --> 01:43:50,760
Let me go ahead and bring up, for instance,
让我举个例子，

2411
01:43:50,760 --> 01:43:52,930
one of the very first things I wrote years ago
几年前我写的第一件事之一

2412
01:43:52,930 --> 01:43:55,430
when I was in graduate school and Scratch had just come out.
当时我在研究生院，Scratch刚问世。

2413
01:43:55,430 --> 01:43:57,380
I was taking a class at MIT's Media Lab.
我在麻省理工学院媒体实验室上了一门课。

2414
01:43:57,380 --> 01:44:01,520
And they invited us to beta test-- that is, try out the software before it then
他们邀请我们进行测试版测试，也就是在它成为世界上的一部分之前试用该软件。

2415
01:44:01,520 --> 01:44:03,140
became part of the world.
成为世界的一部分。

2416
01:44:03,140 --> 01:44:07,200
And the game I made was this one here.
我做的游戏是这个。

2417
01:44:07,200 --> 01:44:10,640
Let me find the right version of "Oscartime."
让我找到“奥斯卡时间”的正确版本。

2418
01:44:10,640 --> 01:44:15,673
So "Oscartime" is a game that took me tens of hours probably in the end.
所以“奥斯卡时间”是一个游戏，最后可能花了我几十个小时。

2419
01:44:15,673 --> 01:44:18,590
It was a little bit addictive, but let me go ahead and full-screen it.
它有点上瘾，但让我全屏显示它。

2420
01:44:18,590 --> 01:44:20,270
And I won't play the whole game.
我不会玩整个游戏。

2421
01:44:20,270 --> 01:44:23,995
But it looked a little something like this.
但它看起来有点像这样。

2422
01:44:23,995 --> 01:44:25,120
OSCAR: (SINGS) Oh, I love--
奥斯卡：（唱歌）哦，我爱——

2423
01:44:25,120 --> 01:44:28,220
DAVID J. MALAN: Where trash is falling from the sky.
大卫·J·马兰：哪里垃圾从天而降。

2424
01:44:28,220 --> 01:44:30,070
And I can click on it and drag it.
我可以点击它并拖动它。

2425
01:44:30,070 --> 01:44:33,430
And notice as I get close, the lid opens up like this.
注意，当我靠近时，盖子像这样打开。

2426
01:44:33,430 --> 01:44:37,450
And if I let it keep falling, it goes in, and Oscar gives me a point.
如果我让它继续掉下去，它就会进去，奥斯卡会给我一分。

2427
01:44:37,450 --> 01:44:39,585
And I can do this again.
我可以再做一次。

2428
01:44:39,585 --> 01:44:41,710
OSCAR: If you really want to see something trashy--
奥斯卡：如果你真的想看点垃圾——

2429
01:44:41,710 --> 01:44:41,860
DAVID J. MALAN: All right.
大卫·J·马兰：好吧。

2430
01:44:41,860 --> 01:44:42,943
Here comes something else.
来了别的。

2431
01:44:42,943 --> 01:44:44,565
OSCAR: I have here a sneaker that--
奥斯卡：我这里有一双运动鞋——

2432
01:44:44,565 --> 01:44:46,690
DAVID J. MALAN: So now there's two pieces of trash.
大卫·J·马兰：所以现在有两块垃圾。

2433
01:44:46,690 --> 01:44:49,787
OSCAR: It's all full of holes, and the laces are--
奥斯卡：它到处都是洞，鞋带——

2434
01:44:49,787 --> 01:44:52,370
DAVID J. MALAN: And it just keeps going, and going, and going.
大卫·J·马兰：它一直在不停地下去，下去，下去。

2435
01:44:52,370 --> 01:44:55,537
And if we can lower the volume for just a moment, we'll let more trash fall.
如果我们能把音量调低一下，我们会让更多的垃圾掉下来。

2436
01:44:55,537 --> 01:44:58,300
But to your comment earlier about one sprite or more
但回到你之前关于一个精灵或多个精灵的评论

2437
01:44:58,300 --> 01:45:00,040
sprites, that's what we're seeing here.
精灵，这就是我们在这里看到的。

2438
01:45:00,040 --> 01:45:03,190
Even though our examples thus far are just one cat, one or two puzzle
尽管我们到目前为止的例子只是一只猫，一个或两个拼图

2439
01:45:03,190 --> 01:45:04,660
pieces, or a few puzzle pieces.
块，或几个拼图块。

2440
01:45:04,660 --> 01:45:06,670
Here is, I claim, a sprite.
这是一个精灵。

2441
01:45:06,670 --> 01:45:08,110
Here is another sprite.
这是另一个精灵。

2442
01:45:08,110 --> 01:45:09,340
Here is another sprite.
这是另一个精灵。

2443
01:45:09,340 --> 01:45:11,950
And by toggling among them in that bottom right-hand corner,
通过在右下角切换它们，

2444
01:45:11,950 --> 01:45:15,460
I can just associate different puzzle pieces with each of these sprites.
我可以将不同的拼图块与这些精灵中的每一个关联起来。

2445
01:45:15,460 --> 01:45:17,987
Now, I didn't start off by implementing this whole game.
现在，我并没有一开始就实现整个游戏。

2446
01:45:17,987 --> 01:45:20,570
And in just a moment, if we can raise the volume a little bit,
再过一会儿，如果我们能把音量调高一点，

2447
01:45:20,570 --> 01:45:22,400
we'll see even more trash is falling.
我们会看到更多垃圾掉下来。

2448
01:45:22,400 --> 01:45:23,300
So this is what--
所以这是——

2449
01:45:23,300 --> 01:45:26,930
I hate this song now, like 10 plus hours listening to this song on loop
我现在讨厌这首歌，就像循环播放这首歌十多个小时一样。

2450
01:45:26,930 --> 01:45:28,160
just to get the timing right.
仅仅是为了让时间安排得当。

2451
01:45:28,160 --> 01:45:31,040
But it brings to life all of these different sprites.
但这赋予了所有这些不同的精灵生命。

2452
01:45:31,040 --> 01:45:34,130
And if you play it again and again, it's always a little bit different
如果你一遍又一遍地播放它，它总会有所不同

2453
01:45:34,130 --> 01:45:35,600
because I'm using some randomness.
因为我用了一些随机性。

2454
01:45:35,600 --> 01:45:38,510
So this newspaper doesn't always fall from there.
所以这份报纸并不总是从那里掉下来的。

2455
01:45:38,510 --> 01:45:39,650
Sometimes it's here.
有时它在这里。

2456
01:45:39,650 --> 01:45:40,680
Sometimes it's here.
有时它在这里。

2457
01:45:40,680 --> 01:45:42,920
And so here, again, we have mechanics of a game where
因此在这里，我们再次看到了游戏机制，即

2458
01:45:42,920 --> 01:45:45,770
things are being perturbed a little, randomized a little bit
事物会稍微受到扰动，稍微随机化

2459
01:45:45,770 --> 01:45:47,772
to keep things more interesting.
让事情更有趣。

2460
01:45:47,772 --> 01:45:48,605
And let me go ahead.
让我继续。

2461
01:45:48,605 --> 01:45:50,240
OSCAR: (SINGS) I love trash.
奥斯卡：（唱歌）我爱垃圾。

2462
01:45:50,240 --> 01:45:51,407
DAVID J. MALAN: There we go.
大卫·J·马兰：好了。

2463
01:45:51,407 --> 01:45:53,420
How. about raise a little volume?
怎么样？稍微提高一下音量？

2464
01:45:53,420 --> 01:45:54,890
One more piece of trash.
再加一个垃圾。

2465
01:45:54,890 --> 01:45:55,490
So a clock.
所以是一个时钟。

2466
01:45:55,490 --> 01:45:57,600
It just goes on forever, this kind of game.
这种游戏会永远持续下去。

2467
01:45:57,600 --> 01:45:59,010
But let's go ahead and consider.
但让我们继续考虑。

2468
01:45:59,010 --> 01:46:00,060
Let me close that.
让我关闭它。

2469
01:46:00,060 --> 01:46:01,610
Let me go ahead and consider.
让我继续考虑。

2470
01:46:01,610 --> 01:46:04,770
How I went about implementing that from the get-go.
我从一开始是如何实现它的。

2471
01:46:04,770 --> 01:46:06,920
So I will stipulate--
所以我要说明——

2472
01:46:06,920 --> 01:46:11,090
let me open a few of these versions here-- that the very first thing I did
让我在这里打开其中几个版本——我做的第一件事

2473
01:46:11,090 --> 01:46:13,070
was pretty much just implement the stage.
几乎就是实现舞台。

2474
01:46:13,070 --> 01:46:13,220
Right?
对吧？

2475
01:46:13,220 --> 01:46:15,262
I was kind of procrastinating, so I poked around.
我有点拖延，所以我四处查看。

2476
01:46:15,262 --> 01:46:18,390
I found the Sesame Street lamppost, and I dragged it into the world.
我找到了芝麻街的路灯，然后把它拖进了世界。

2477
01:46:18,390 --> 01:46:18,890
And done.
然后就完成了。

2478
01:46:18,890 --> 01:46:19,820
Version one is done.
第一个版本完成了。

2479
01:46:19,820 --> 01:46:23,510
It didn't do anything, but at least I had the world sort of laid out.
它什么也没做，但我至少把世界大致布局好了。

2480
01:46:23,510 --> 01:46:25,820
That is to say I took a baby step toward my goal.
也就是说，我朝着我的目标迈出了一小步。

2481
01:46:25,820 --> 01:46:27,528
Then I started thinking about, all right,
然后我开始思考，好吧，

2482
01:46:27,528 --> 01:46:31,620
how do I bring the trash to life, even if it doesn't do much of anything else?
我如何让垃圾活起来，即使它什么也没做？

2483
01:46:31,620 --> 01:46:34,370
And so I created another sprite by clicking the appropriate button
所以我通过点击右下角的相应按钮创建了另一个精灵

2484
01:46:34,370 --> 01:46:35,840
in that bottom right-hand corner.
在右下角。

2485
01:46:35,840 --> 01:46:38,420
And I thought about, well, what do I want this trash to do?
我思考着，嗯，我想让这个垃圾做什么？

2486
01:46:38,420 --> 01:46:40,860
I want it to just kind of fall from the sky.
我想让它从天空中掉下来。

2487
01:46:40,860 --> 01:46:44,690
And so what I did here was the following.
所以我在这里做的是以下事情。

2488
01:46:44,690 --> 01:46:48,020
If I go to this trash piece here or-- actually, sorry.
如果我去这个垃圾块这里，或者——实际上，抱歉。

2489
01:46:48,020 --> 01:46:48,780
Out of order.
顺序错了。

2490
01:46:48,780 --> 01:46:51,860
What I actually did first was I didn't even have the trash fall.
我实际上最开始没有让垃圾掉下来。

2491
01:46:51,860 --> 01:46:55,280
If I play this game, the trash just stays there in the air.
如果我玩这个游戏，垃圾就停留在空中。

2492
01:46:55,280 --> 01:46:57,480
But I can do this.
但我可以这样做。

2493
01:46:57,480 --> 01:47:01,370
I can drag it, and as before, as I touch the other sprite,
我可以拖动它，和之前一样，当我触碰另一个精灵时，

2494
01:47:01,370 --> 01:47:03,090
I get the trash can lid to go up.
我让垃圾桶盖子向上翻。

2495
01:47:03,090 --> 01:47:04,080
So how do I do that?
那我怎么做呢？

2496
01:47:04,080 --> 01:47:07,130
Well, let me click on Oscar down there, my first sprite.
好吧，让我点击下面的奥斯卡，我的第一个精灵。

2497
01:47:07,130 --> 01:47:10,580
And here are the puzzle pieces via which I implemented this idea.
这是我实现这个想法的拼图碎片。

2498
01:47:10,580 --> 01:47:13,340
I changed Oscar's costume, his appearance,
我改变了奥斯卡的服装，他的外貌，

2499
01:47:13,340 --> 01:47:17,960
to be just number one, which was one of the images I imported into the program.
仅仅是数字一，这是我导入程序的一张图片。

2500
01:47:17,960 --> 01:47:19,820
And then I forever did this.
然后我永远做这样的事情。

2501
01:47:19,820 --> 01:47:22,460
If Oscar is touching the mouse pointer, then
如果奥斯卡触碰了鼠标指针，那么

2502
01:47:22,460 --> 01:47:26,390
change Oscar's costume to number two, otherwise change it back to one.
将奥斯卡的服装改为数字二，否则恢复为数字一。

2503
01:47:26,390 --> 01:47:28,190
So it's super simple animation.
所以这是一个超级简单的动画。

2504
01:47:28,190 --> 01:47:31,970
I'm just toggling between lid up, lid down, lid up, lid down,
我只是在盖子向上、盖子向下、盖子向上、盖子向下之间切换，

2505
01:47:31,970 --> 01:47:33,710
but it kind of feels interactive.
但它感觉有点互动。

2506
01:47:33,710 --> 01:47:35,810
And if I wanted to really make this pretty,
如果我真的想让它变得漂亮，

2507
01:47:35,810 --> 01:47:40,580
I could have 30 different costumes where the lid is ever so slightly higher.
我可以有30种不同的服装，让盖子稍微高一点。

2508
01:47:40,580 --> 01:47:44,120
Then it would look even more like a movie or fluid motion.
然后它看起来会更像电影或流畅的运动。

2509
01:47:44,120 --> 01:47:46,640
But this was enough to get the job done, which
但这已经足够完成工作了，这

2510
01:47:46,640 --> 01:47:49,700
is to say I didn't try to implement all of "Oscartime" together.
也就是说，我没有尝试将所有“奥斯卡时间”都一起实现。

2511
01:47:49,700 --> 01:47:52,490
I just took a second baby step toward my goal.
我只是朝着我的目标迈出了第二小步。

2512
01:47:52,490 --> 01:47:54,950
And then my next version of "Oscartime" might
然后我的下一个“奥斯卡时间”版本可能会

2513
01:47:54,950 --> 01:47:57,675
have looked a little something like this, where now the trash--
看起来有点像这样，现在垃圾——

2514
01:47:57,675 --> 01:47:58,800
there's more going on here.
这里还有更多事情发生。

2515
01:47:58,800 --> 01:48:02,300
Let's look at two of these blocks of code.
让我们看看这两个代码块。

2516
01:48:02,300 --> 01:48:04,972
The first thing I did was I enabled drag mode to draggable,
我做的第一件事是将拖动模式设置为可拖动，

2517
01:48:04,972 --> 01:48:07,430
and I had to Google to figure this out because otherwise it
我不得不谷歌搜索来弄清楚这一点，因为否则它

2518
01:48:07,430 --> 01:48:09,890
didn't let me drag the trash while playing the game.
不让我在玩游戏时拖动垃圾。

2519
01:48:09,890 --> 01:48:12,800
But once I figured that out, I tell the trash
但一旦我弄清楚了，我告诉垃圾

2520
01:48:12,800 --> 01:48:16,700
to go to a random x-coordinate between 0 and 240
到 0 到 240 之间的随机 x 坐标

2521
01:48:16,700 --> 01:48:19,670
from left to right and then the y location 180
从左到右，然后是 y 位置 180

2522
01:48:19,670 --> 01:48:22,070
because I always want the trash falling from the sky.
因为我总是希望垃圾从天而降。

2523
01:48:22,070 --> 01:48:23,270
And then what do I do?
然后我该怎么办？

2524
01:48:23,270 --> 01:48:27,530
I told the trash to forever change its y-coordinate, its vertical coordinate,
我告诉垃圾永远改变它的 y 坐标，它的垂直坐标，

2525
01:48:27,530 --> 01:48:30,740
by negative 1, negative 1, negative 1, one pixel
每次负 1，负 1，负 1，一个像素

2526
01:48:30,740 --> 01:48:34,190
at a time, which creates the illusion of it falling from the sky.
一次一个，这创造了它从天而降的错觉。

2527
01:48:34,190 --> 01:48:36,950
But I needed to do one other thing, and let me scroll up.
但我还需要做另一件事，让我向上滚动。

2528
01:48:36,950 --> 01:48:41,360
Each of your sprites can have multiple programs, multiple scripts,
你的每个精灵都可以有多个程序，多个脚本，

2529
01:48:41,360 --> 01:48:44,070
so to speak, that are not attached to one another.
可以这么说，它们彼此之间没有关联。

2530
01:48:44,070 --> 01:48:46,050
They will happen in parallel for you.
它们会并行发生。

2531
01:48:46,050 --> 01:48:47,750
The second one is saying this.
第二个正在说这个。

2532
01:48:47,750 --> 01:48:52,850
Forever if the trash is touching Oscar, what should it do?
如果垃圾碰到奥斯卡，它应该做什么？

2533
01:48:52,850 --> 01:48:57,440
Go to a completely different x and y location at the very top.
移动到最顶部的完全不同的 x 和 y 位置。

2534
01:48:57,440 --> 01:48:57,950
Why?
为什么？

2535
01:48:57,950 --> 01:49:01,010
Well, as soon as I drag the trash over the Oscar,
好吧，一旦我将垃圾拖到奥斯卡上面，

2536
01:49:01,010 --> 01:49:03,530
I want it to disappear as though it's going into the can.
我希望它消失，好像掉进了垃圾桶里。

2537
01:49:03,530 --> 01:49:06,830
And I then want it to reappear at the top so more trash falls.
然后我希望它重新出现在顶部，这样更多的垃圾就会掉下来。

2538
01:49:06,830 --> 01:49:08,840
So I just thought about what would it mean
所以我只是考虑了一下这意味着什么

2539
01:49:08,840 --> 01:49:10,910
for the trash to go into the trash can.
对于垃圾进入垃圾桶。

2540
01:49:10,910 --> 01:49:11,870
Well, who cares?
好吧，谁在乎呢？

2541
01:49:11,870 --> 01:49:14,210
What really matters to the human user is that it just
对人类用户来说真正重要的是它只是

2542
01:49:14,210 --> 01:49:16,980
disappears and teleports elsewhere.
消失并传送到其他地方。

2543
01:49:16,980 --> 01:49:19,620
And so that's the idea I implemented here.
这就是我在此实施的想法。

2544
01:49:19,620 --> 01:49:24,960
So if you can reduce intuitive ideas to just basic building blocks like this,
因此，如果您能将直观的思想简化为像这样的基本构建块，

2545
01:49:24,960 --> 01:49:27,440
you can start to make things much more interactive.
您就可以开始使事物变得更加互动。

2546
01:49:27,440 --> 01:49:29,970
And lastly, if I look at this version here,
最后，如果我看看这里的这个版本，

2547
01:49:29,970 --> 01:49:33,050
you'll see that we've combined these.
你会看到我们已经将它们结合在一起了。

2548
01:49:33,050 --> 01:49:35,930
And so indeed, if I actually go ahead and play this now,
所以确实，如果我现在开始播放它，

2549
01:49:35,930 --> 01:49:37,790
not only is it falling.
它不仅在下落。

2550
01:49:37,790 --> 01:49:41,090
I can let it fall right on top of Oscar and watch it disappear.
我可以让它掉在奥斯卡的上面，然后看着它消失。

2551
01:49:41,090 --> 01:49:44,795
But notice Oscar doesn't pop out yet because that was the fourth version
但请注意奥斯卡还没有弹出来，因为那是第四个版本

2552
01:49:44,795 --> 01:49:45,920
and then the fifth version.
然后是第五个版本。

2553
01:49:45,920 --> 01:49:48,650
And then I added the annoying music and so forth but sort of
然后我添加了恼人的音乐等等，但有点

2554
01:49:48,650 --> 01:49:51,600
composed this program step by step by step
一步一步一步地编写了这个程序

2555
01:49:51,600 --> 01:49:53,193
so as to accomplish my larger goal.
以便实现我的更大目标。

2556
01:49:53,193 --> 01:49:55,610
And this is going to be true of all of the code you write,
这将适用于你编写的所有代码，

2557
01:49:55,610 --> 01:50:00,980
be it in Scratch, or C, or Python, or in the like, trying to come up with--
无论是在 Scratch、C、Python 还是类似的语言中，尝试想出——

2558
01:50:00,980 --> 01:50:05,360
or rather, trying to reduce your ideas, your grand vision to just baby steps,
或者说，尝试将你的想法、你的宏伟愿景缩减到只是小步骤，

2559
01:50:05,360 --> 01:50:07,670
building blocks so that you start with version one,
构建块，以便从第一个版本开始，

2560
01:50:07,670 --> 01:50:10,010
and maybe you submit version 10 or 20.
也许你会提交第 10 版或第 20 版。

2561
01:50:10,010 --> 01:50:13,190
But you don't try to implement version 10 or 20 at the get-go.
但你不会一开始就试图实现第 10 版或第 20 版。

2562
01:50:13,190 --> 01:50:15,780
You take those incremental steps.
你采取这些渐进的步骤。

2563
01:50:15,780 --> 01:50:16,280
All right.
好的。

2564
01:50:16,280 --> 01:50:17,270
How about one other?
还有别的吗？

2565
01:50:17,270 --> 01:50:19,550
Well, let me propose this.
好吧，让我提议这个。

2566
01:50:19,550 --> 01:50:23,370
Let me go ahead and open three games that represent one
让我打开三个游戏，它们代表一个

2567
01:50:23,370 --> 01:50:27,570
that your predecessors also implemented, which looks a little something
你的前辈也实施过的游戏，它看起来有点像

2568
01:50:27,570 --> 01:50:29,220
like this in version zero.
这样，在第零版。

2569
01:50:29,220 --> 01:50:32,220
Suppose I wanted to implement a game that
假设我想实现一个游戏，它

2570
01:50:32,220 --> 01:50:33,900
simply has these kinds of mechanics.
只包含这些类型的机制。

2571
01:50:33,900 --> 01:50:37,050
I'm touching my arrow keys on my keyboard-- up, down, left, and right.
我正在按键盘上的箭头键——向上、向下、向左和向右。

2572
01:50:37,050 --> 01:50:38,460
And I'm moving the Harvard logo.
我正在移动哈佛的标志。

2573
01:50:38,460 --> 01:50:39,610
Let me zoom in a bit.
让我放大一点。

2574
01:50:39,610 --> 01:50:42,210
So if I hit the up arrow, the Harvard shield goes up.
所以如果我按下向上箭头，哈佛盾牌就会上升。

2575
01:50:42,210 --> 01:50:44,760
If I hit the down arrow, the shield goes down.
如果我按下向下箭头，盾牌就会下降。

2576
01:50:44,760 --> 01:50:47,070
If I go all the way to the left, it goes left
如果我向左移动到底，它就会向左移动

2577
01:50:47,070 --> 01:50:49,548
until it hits the wall and same thing on the right.
直到它碰到墙，右边也是一样。

2578
01:50:49,548 --> 01:50:51,840
So this is like the beginnings of a game or a beginning
所以这就像一个游戏的开始，或者一个

2579
01:50:51,840 --> 01:50:53,370
of a maze, something like that.
迷宫的开始，类似这样的东西。

2580
01:50:53,370 --> 01:50:55,150
Well, how might I implement this?
那么，我该如何实现呢？

2581
01:50:55,150 --> 01:50:57,210
Well, let me look inside this one.
好吧，让我看看这个内部。

2582
01:50:57,210 --> 01:51:01,020
And there's a lot going on, but, again, I sort of took simple steps.
这里有很多事情发生，但，同样，我采取了一些简单的步骤。

2583
01:51:01,020 --> 01:51:02,730
Notice that I've got three sprites--
注意我这里有三个精灵--

2584
01:51:02,730 --> 01:51:04,920
a left wall, which is just a straight line,
左边的墙，只是一条直线，

2585
01:51:04,920 --> 01:51:07,140
the right wall, which is a straight line.
右边的墙，也是一条直线。

2586
01:51:07,140 --> 01:51:10,710
And just intuitively, why did I implement those as sprites?
直觉上，为什么我将它们实现为精灵？

2587
01:51:10,710 --> 01:51:15,240
Why do they need to exist as entities themselves?
为什么它们需要作为独立的实体存在？

2588
01:51:15,240 --> 01:51:16,230
Yeah, in front.
是的，在前面。

2589
01:51:16,230 --> 01:51:16,530
AUDIENCE: [INAUDIBLE]
观众： [听不清]

2590
01:51:16,530 --> 01:51:17,405
DAVID J. MALAN: Yeah.
大卫·J·马兰： 是的。

2591
01:51:17,405 --> 01:51:19,033
I want it to interact with the shield.
我想要它与盾牌互动。

2592
01:51:19,033 --> 01:51:21,450
So I need to be able to ask that Boolean expression, like,
所以我需要能够询问那个布尔表达式，比如，

2593
01:51:21,450 --> 01:51:24,940
not touching mouse pointer but touching shield, for instance,
没有接触鼠标指针，但接触了盾牌，例如，

2594
01:51:24,940 --> 01:51:26,560
a different type of yes/no question.
一种不同的“是/否”问题。

2595
01:51:26,560 --> 01:51:29,130
And so what is the code for the shield actually doing?
那么盾牌的代码实际上在做什么呢？

2596
01:51:29,130 --> 01:51:32,850
Well, there's a lot of duplication, and let me focus on the abstraction first.
好吧，这里有很多重复代码，让我先关注抽象部分。

2597
01:51:32,850 --> 01:51:35,680
Notice that I've got this one green flag clicked.
注意我这里有一个绿色的旗帜被点击了。

2598
01:51:35,680 --> 01:51:38,430
I want the shield to go dead center, 0 comma 0,
我想要盾牌位于正中心，0,0，

2599
01:51:38,430 --> 01:51:42,600
and then forever listen for the human's keyboard, and feel for the wall.
然后一直监听人类的键盘输入，并感知墙壁。

2600
01:51:42,600 --> 01:51:45,815
So I decided to implement my own pink puzzle pieces that
所以我决定实现我自己的粉色拼图，它们

2601
01:51:45,815 --> 01:51:47,190
implement the two separate ideas.
实现这两个独立的想法。

2602
01:51:47,190 --> 01:51:49,450
One, just listen for the keyboard-- up, down, left,
第一个，就是监听键盘输入--上，下，左，

2603
01:51:49,450 --> 01:51:50,700
right-- and then do something.
右--然后执行一些操作。

2604
01:51:50,700 --> 01:51:53,770
And then feel for walls is this idea of whenever I go up,
然后感知墙壁就是这个想法，无论何时我向上移动，

2605
01:51:53,770 --> 01:51:56,550
down, left, or right, if I touch a wall, I
向下，向左，或向右，如果我碰到了墙，我

2606
01:51:56,550 --> 01:52:00,600
need to stop doing whatever the keystrokes are telling me to do.
需要停止执行键盘输入告诉我的任何操作。

2607
01:52:00,600 --> 01:52:05,580
So now if we dive into those implementation details, listen and feel
所以现在如果我们深入那些实现细节，监听和感知

2608
01:52:05,580 --> 01:52:07,930
are abstractions, custom puzzle pieces.
都是抽象，自定义的拼图。

2609
01:52:07,930 --> 01:52:09,870
Let's look at the implementation details.
让我们看看实现细节。

2610
01:52:09,870 --> 01:52:11,220
Well, here's the keyboard.
好吧，这是键盘部分。

2611
01:52:11,220 --> 01:52:15,840
If the key arrow up is pressed, change y by 1.
如果按下向上箭头键，将 y 改变为 1。

2612
01:52:15,840 --> 01:52:19,495
If key down arrow is pressed, change y by negative 1.
如果按下向下箭头键，将 y 改变为 -1。

2613
01:52:19,495 --> 01:52:21,370
And you can probably see where this is going.
你可能已经猜到下一步要做什么了。

2614
01:52:21,370 --> 01:52:23,310
Right arrow is x by 1.
右箭头是 x 加 1。

2615
01:52:23,310 --> 01:52:25,920
Left arrow is x by negative 1, and that's
左箭头是 x 减 1，这就是

2616
01:52:25,920 --> 01:52:29,050
sort of all that's involved with up, down, left, right.
与上、下、左、右相关的全部内容。

2617
01:52:29,050 --> 01:52:30,030
But wait a minute.
等等。

2618
01:52:30,030 --> 01:52:35,910
Why is there no loop in this listen for keyboard puzzle piece?
为什么这个监听键盘的拼图中没有循环呢？

2619
01:52:35,910 --> 01:52:39,240
I needed a loop last time so it constantly works.
上一次我需要一个循环，这样它才能一直工作。

2620
01:52:39,240 --> 01:52:40,770
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2621
01:52:40,770 --> 01:52:41,770
DAVID J. MALAN: Exactly.
大卫·J·马兰： 没错。

2622
01:52:41,770 --> 01:52:44,350
I put the loop in my main part of my program
我把循环放在程序的主要部分

2623
01:52:44,350 --> 01:52:48,020
up top so something is telling me to keep listening again and again.
顶部，所以总是有东西在告诉我不断监听。

2624
01:52:48,020 --> 01:52:50,020
So it's got to be somewhere, but it doesn't have
所以它一定在某个地方，但它并不需要

2625
01:52:50,020 --> 01:52:51,760
to be in the actual implementation.
出现在实际的实现中。

2626
01:52:51,760 --> 01:52:53,950
And lastly, how about this feel for walls?
最后，这个感知墙壁的部分怎么样？

2627
01:52:53,950 --> 01:52:58,420
Well, if touching left wall, which is just another sprite, change x by 1.
好吧，如果接触到左边的墙，它只是一个精灵，将 x 改变为 1。

2628
01:52:58,420 --> 01:53:00,880
So that is to say if I'm touching the left wall,
也就是说，如果我接触到左边的墙，

2629
01:53:00,880 --> 01:53:03,465
I want to bounce it back the other direction
我想要让它弹回另一个方向

2630
01:53:03,465 --> 01:53:04,840
and same thing on the right wall.
右边的墙也是一样。

2631
01:53:04,840 --> 01:53:06,580
If I'm touching the right wall, I want to bounce it
如果我接触到右边的墙，我想要让它

2632
01:53:06,580 --> 01:53:09,670
back to the left, which effectively means that even if the human's hitting
弹回左边，这实际上意味着，即使人类按下了

2633
01:53:09,670 --> 01:53:11,680
the key, it's like fighting with this code,
按键，这就像在与这段代码抗争，

2634
01:53:11,680 --> 01:53:14,890
but it's never going to go through the wall based on that math.
但是基于这样的数学计算，它永远不可能穿墙而过。

2635
01:53:14,890 --> 01:53:16,760
It's going to stop it right there.
它会停在那里。

2636
01:53:16,760 --> 01:53:17,260
All right.
好的。

2637
01:53:17,260 --> 01:53:18,760
Let's add something else to the mix.
让我们再加入一些东西。

2638
01:53:18,760 --> 01:53:21,640
Suppose I want the game to change to be a little something like this,
假设我想让游戏变得有点像这样，

2639
01:53:21,640 --> 01:53:25,300
where Yale is some kind of block in between me and the exit.
耶鲁大学就像一个阻挡我通往出口的障碍。

2640
01:53:25,300 --> 01:53:27,140
So some dramatic race here.
这里是一场戏剧性的赛跑。

2641
01:53:27,140 --> 01:53:27,640
OK.
好的。

2642
01:53:27,640 --> 01:53:30,100
I just got by, but the Yale logo doesn't seem
我刚跑过去，但是耶鲁大学的标志似乎

2643
01:53:30,100 --> 01:53:32,200
to be doing all that much except bouncing.
除了弹跳之外并没有做太多的事情。

2644
01:53:32,200 --> 01:53:35,660
So I'm guessing there's a loop, maybe a conditional checking for those walls
所以我想这应该有一个循环，也许是一个判断这些墙的条件

2645
01:53:35,660 --> 01:53:36,160
too.
也是。

2646
01:53:36,160 --> 01:53:38,823
So let's go ahead and zoom out, see inside.
所以让我们放大，看看内部。

2647
01:53:38,823 --> 01:53:41,490
Let's not worry about Harvard because it's pretty much the same.
别担心哈佛，它基本上是一样的。

2648
01:53:41,490 --> 01:53:43,520
Let's look at the Yale puzzle pieces.
让我们看看耶鲁大学的拼图块。

2649
01:53:43,520 --> 01:53:45,710
And sure enough, go to the middle.
确实，去中间。

2650
01:53:45,710 --> 01:53:46,880
0 comma zero.
0，0。

2651
01:53:46,880 --> 01:53:50,930
Point in direction 90, so point horizontally on the grid.
指向90度方向，所以在网格上水平指向。

2652
01:53:50,930 --> 01:53:53,870
And then if touching left wall or touching right wall--
然后，如果碰到左墙或碰到右墙——

2653
01:53:53,870 --> 01:53:58,470
I'm kind of cheating this time, but cleverly, just spin around and do 180
这次我有点作弊，但很聪明，只需旋转并进行180度旋转

2654
01:53:58,470 --> 01:54:00,198
so you effectively bounce off the wall.
这样你就能有效地从墙上弹回来。

2655
01:54:00,198 --> 01:54:01,490
This just tightened up my code.
这只是优化了我的代码。

2656
01:54:01,490 --> 01:54:03,490
I don't need to do the negative 1 or the plus 1.
我不需要进行负1或加1的操作。

2657
01:54:03,490 --> 01:54:07,010
I just say bounce in this form of code, otherwise just
我只需在这种代码形式中说弹跳，否则就

2658
01:54:07,010 --> 01:54:08,420
constantly move one step.
不断地移动一步。

2659
01:54:08,420 --> 01:54:12,080
Now, if this is a game where Yale is supposed to be better and faster,
现在，如果这是一款耶鲁大学应该更快更强的游戏，

2660
01:54:12,080 --> 01:54:13,520
well, let's change the 1 to 5.
好吧，让我们把1改为5。

2661
01:54:13,520 --> 01:54:15,300
Move 5 pixels at a time.
每次移动5个像素。

2662
01:54:15,300 --> 01:54:17,610
Let's move it 10 back and forth.
让我们来回移动10个像素。

2663
01:54:17,610 --> 01:54:19,040
Let's maybe 100.
也许100个像素。

2664
01:54:19,040 --> 01:54:20,150
Uh-oh.
糟糕。

2665
01:54:20,150 --> 01:54:21,380
So what just happened?
发生了什么？

2666
01:54:21,380 --> 01:54:25,310
That is a bug, which we can avoid by just not doing that.
这是一个bug，我们可以通过不做那样来避免。

2667
01:54:25,310 --> 01:54:27,310
But why did it break out of the wall?
但为什么它会突破墙壁呢？

2668
01:54:27,310 --> 01:54:28,310
Yeah.
是啊。

2669
01:54:28,310 --> 01:54:29,600
AUDIENCE: [INAUDIBLE].
观众：[听不清]

2670
01:54:29,600 --> 01:54:30,890
At first it was [INAUDIBLE].
一开始是[听不清]。

2671
01:54:30,890 --> 01:54:31,890
DAVID J. MALAN: Exactly.
大卫·J·马兰：没错。

2672
01:54:31,890 --> 01:54:34,010
Because I'm doing 100 steps at a time, I'm
因为我每次移动100个像素，所以

2673
01:54:34,010 --> 01:54:36,200
never actually touching the other sprite because I'm
实际上从来没有触碰到另一个精灵，因为

2674
01:54:36,200 --> 01:54:38,060
sort of stepping way over it.
我是在跨过它。

2675
01:54:38,060 --> 01:54:40,610
So there's never a moment where they're actually touching.
所以它们实际上从来没有真正接触过。

2676
01:54:40,610 --> 01:54:44,630
So previously, I was just getting lucky by doing fewer steps because it's
所以之前，我仅仅因为移动的步数比较少而幸运地避免了这种情况，因为

2677
01:54:44,630 --> 01:54:46,700
gradually going over the wall, which gives me
它逐渐地越过墙，这给了我

2678
01:54:46,700 --> 01:54:48,557
just enough time to detect as much.
足够的时间来检测。

2679
01:54:48,557 --> 01:54:50,390
So I would have to kind of tinker, and he'll
所以我要进行一些调整，他也会

2680
01:54:50,390 --> 01:54:51,932
handle this a little bit differently.
以不同的方式处理这个问题。

2681
01:54:51,932 --> 01:54:53,790
So it's a bug if it's too fast.
所以，如果速度过快，就会出现bug。

2682
01:54:53,790 --> 01:54:55,730
But at least if I keep it slow and reasonable
但至少，如果我保持速度缓慢且合理，

2683
01:54:55,730 --> 01:54:59,870
the math actually does work out, so long as it starts again in the middle.
数学计算实际上是有效的，只要它从中间重新开始。

2684
01:54:59,870 --> 01:55:04,200
Well, let's do one final flourish here, whereby let's bring MIT into the mix.
好吧，让我们在这里做最后一次修饰，把麻省理工学院加入进来。

2685
01:55:04,200 --> 01:55:04,700
Right?
对吧？

2686
01:55:04,700 --> 01:55:06,770
They're super smart, so maybe they can kind of
他们非常聪明，所以也许他们可以

2687
01:55:06,770 --> 01:55:11,390
track us and follow wherever I'm going.
追踪我们，并跟随我的脚步。

2688
01:55:11,390 --> 01:55:13,140
So how might this work?
所以这要如何实现呢？

2689
01:55:13,140 --> 01:55:13,640
All right.
好的。

2690
01:55:13,640 --> 01:55:16,580
So nothing happens yet because we haven't finished composing the game.
所以现在还没有发生任何事情，因为我们还没有完成游戏的设计。

2691
01:55:16,580 --> 01:55:17,490
And notice here--
注意这里——

2692
01:55:17,490 --> 01:55:17,990
OK.
好的。

2693
01:55:17,990 --> 01:55:19,063
Now MIT is struggling.
现在麻省理工学院正在挣扎。

2694
01:55:19,063 --> 01:55:21,980
It's kind of twitching there because it's going just above, and below,
它在那里有点抽搐，因为它正在上下移动，

2695
01:55:21,980 --> 01:55:23,100
and then above, and below.
然后又上下移动。

2696
01:55:23,100 --> 01:55:24,840
So we could fix that too if we want.
所以我们也可以修复它，如果我们想要的话。

2697
01:55:24,840 --> 01:55:28,080
But that's just a function of my math, one pixel at a time.
但这仅仅是我的数学计算的结果，一次移动一个像素。

2698
01:55:28,080 --> 01:55:33,570
Let me open up this one, see inside, and click on MIT.
让我打开这个，看看内部，然后点击麻省理工学院。

2699
01:55:33,570 --> 01:55:37,110
And it doesn't take much to implement MIT, it seems.
而且似乎实现麻省理工学院并不需要太多东西。

2700
01:55:37,110 --> 01:55:43,200
So go to random position, forever point towards the Harvard logo outline,
所以随机移动，永远指向哈佛标志的轮廓，

2701
01:55:43,200 --> 01:55:46,330
AKA the shield, and then move one step.
也就是盾牌，然后移动一步。

2702
01:55:46,330 --> 01:55:50,705
So if I wanted to make MIT even smarter, even faster, what do I change here?
所以如果我想让麻省理工学院变得更聪明、更快，我应该在这里改变什么？

2703
01:55:50,705 --> 01:55:51,580
AUDIENCE: [INAUDIBLE]
观众：[听不清]

2704
01:55:51,580 --> 01:55:52,455
DAVID J. MALAN: Yeah.
大卫·马兰：对。

2705
01:55:52,455 --> 01:55:56,070
Change one step to two steps to double their speed or five steps, 10 steps,
把一步改为两步，使他们速度翻倍，或者五步、十步，

2706
01:55:56,070 --> 01:55:56,612
or 100 steps.
或者一百步。

2707
01:55:56,612 --> 01:55:58,403
And the game is going to be over like that.
这样一来，游戏就结束了。

2708
01:55:58,403 --> 01:56:00,940
But that's all it takes to now make these kinds of elements.
但这就是现在制作这些元素所需的全部。

2709
01:56:00,940 --> 01:56:03,330
So if you are a game player on your phone, or consoles,
所以如果你是在手机、游戏机上玩游戏，

2710
01:56:03,330 --> 01:56:06,120
or computer, or whatever, if you think about almost any game,
或者电脑，或者任何东西，如果你考虑几乎所有游戏，

2711
01:56:06,120 --> 01:56:08,910
you can probably now start to think about how they implemented
你可能现在就开始思考它们是如何实现的

2712
01:56:08,910 --> 01:56:12,210
those mechanics because it's just being reduced to functions, conditionals,
这些机制，因为它们只是被简化为函数、条件语句，

2713
01:56:12,210 --> 01:56:15,640
loops, variables, and the like in this case.
循环、变量等等，在本例中就是如此。

2714
01:56:15,640 --> 01:56:20,560
So let's go ahead here and have maybe one final volunteer.
所以我们来这里再找一个志愿者。

2715
01:56:20,560 --> 01:56:22,480
We've got one more bag of Oreos here.
这里还有一袋奥利奥饼干。

2716
01:56:22,480 --> 01:56:22,980
OK.
好的。

2717
01:56:22,980 --> 01:56:23,640
That was super fast.
那真的很快。

2718
01:56:23,640 --> 01:56:24,750
Do you want to come on up?
你想上来吗？

2719
01:56:24,750 --> 01:56:25,250
All right.
好的。

2720
01:56:25,250 --> 01:56:25,920
Brave volunteer.
勇敢的志愿者。

2721
01:56:25,920 --> 01:56:26,820
Come on up.
上来吧。

2722
01:56:26,820 --> 01:56:30,271
[APPLAUSE]
[掌声]

2723
01:56:31,180 --> 01:56:31,680
All right.
好的。

2724
01:56:31,680 --> 01:56:36,720
Let me find the full-fledged version of this that one of your predecessors
让我找找之前有人做的完整版。

2725
01:56:36,720 --> 01:56:37,650
made.
制作的。

2726
01:56:37,650 --> 01:56:40,490
And let me get the right one.
让我找到正确的那个。

2727
01:56:40,490 --> 01:56:40,990
OK.
好的。

2728
01:56:40,990 --> 01:56:41,740
Here we go.
我们开始了。

2729
01:56:41,740 --> 01:56:45,030
We'll see some instructions on the screen in just a moment.
过一会儿，你就会在屏幕上看到一些指令。

2730
01:56:45,030 --> 01:56:50,460
And when we hit Play, you'll see that the mechanics are all combined now
当我们点击播放时，你会看到所有的机制现在都结合在一起了

2731
01:56:50,460 --> 01:56:51,630
into one full-fledged game.
形成了一个完整的游戏。

2732
01:56:51,630 --> 01:56:54,740
But first, an introduction.
但首先，介绍一下。

2733
01:56:54,740 --> 01:56:55,890
It's on.
开始了。

2734
01:56:55,890 --> 01:56:56,750
SAM: Hi, everyone.
萨姆：大家好。

2735
01:56:56,750 --> 01:56:57,780
I'm Sam.
我是萨姆。

2736
01:56:57,780 --> 01:56:58,830
I live in [INAUDIBLE].
我住在[听不清]。

2737
01:56:58,830 --> 01:57:00,657
I'm a freshman, and I'm from Nepal.
我是一名大一新生，来自尼泊尔。

2738
01:57:00,657 --> 01:57:01,740
DAVID J. MALAN: All right.
大卫·马兰：好的。

2739
01:57:01,740 --> 01:57:02,655
Welcome to the stage.
欢迎上台。

2740
01:57:02,655 --> 01:57:03,155
[APPLAUSE]
[掌声]

2741
01:57:03,155 --> 01:57:04,287
SAM: Thank you.
萨姆：谢谢。

2742
01:57:04,287 --> 01:57:05,370
DAVID J. MALAN: All right.
大卫·马兰：好的。

2743
01:57:05,370 --> 01:57:05,980
So here we go.
我们开始了。

2744
01:57:05,980 --> 01:57:06,480
Yep.
是的。

2745
01:57:06,480 --> 01:57:08,010
Go ahead and click the green flag.
点击绿色的旗子。

2746
01:57:08,010 --> 01:57:10,435
[MUSIC PLAYING]
[音乐播放]

2747
01:57:10,435 --> 01:57:14,010
[MC HAMMER, "U CAN'T TOUCH THIS"] You can't touch this.
[MC 哈默，“你不能碰我”]你不能碰我。

2748
01:57:14,010 --> 01:57:17,982
DAVID J. MALAN: You see the grid is just bigger this time.
大卫·马兰：你看，这次的网格更大。

2749
01:57:17,982 --> 01:57:19,395
(SINGING) You can't touch this.
（演唱）你不能碰我。

2750
01:57:19,395 --> 01:57:20,270
DAVID J. MALAN: Nice.
大卫·马兰：不错。

2751
01:57:20,270 --> 01:57:22,227
Now there's that Yale element.
现在出现了耶鲁元素。

2752
01:57:22,227 --> 01:57:24,080
(SINGING) You can't touch this.
（演唱）你不能碰我。

2753
01:57:24,080 --> 01:57:27,770
My, my, my my music hits me so hard.
我的，我的，我的音乐击中了我，如此强烈。

2754
01:57:27,770 --> 01:57:29,570
Makes me say, oh, my Lord.
让我说，哦，我的上帝。

2755
01:57:29,570 --> 01:57:32,518
Thank you for blessing me with a mind to rhyme and two hyped feet.
感谢你赐予我一个充满韵律的思维和两条充满激情的双脚。

2756
01:57:32,518 --> 01:57:35,810
It feels good when you know you're down, a super dope homeboy from the Oaktown.
当你明白自己身处低谷时，感觉很好，一个来自奥克兰的超级酷的兄弟。

2757
01:57:35,810 --> 01:57:36,602
DAVID J. MALAN: OK.
大卫·马兰：好的。

2758
01:57:36,602 --> 01:57:38,810
Third Yale.
第三个耶鲁。

2759
01:57:38,810 --> 01:57:41,480
All started at slightly different positions.
所有都从略微不同的位置开始。

2760
01:57:41,480 --> 01:57:43,035
(SINGING) I told you, homeboy.
（演唱）我告诉过你，兄弟。

2761
01:57:43,035 --> 01:57:43,910
You can't touch this.
你不能碰我。

2762
01:57:43,910 --> 01:57:44,660
DAVID J. MALAN: Nice.
大卫·马兰：不错。

2763
01:57:44,660 --> 01:57:45,160
All right.
好的。

2764
01:57:45,160 --> 01:57:45,830
There's MIT.
那是麻省理工学院。

2765
01:57:45,830 --> 01:57:47,780
(SINGING) And ya know you can't touch this.
（演唱）你知道你不能碰我。

2766
01:57:47,780 --> 01:57:49,139
[CHEERING, APPLAUSE]
[欢呼声，掌声]

2767
01:57:49,139 --> 01:57:50,500
DAVID J. MALAN: Oh.
大卫·马兰：哦。

2768
01:57:50,500 --> 01:57:52,520
(SINGING) You can't touch this.
（演唱）你不能碰我。

2769
01:57:52,520 --> 01:57:53,020
Yo.
哟。

2770
01:57:53,020 --> 01:57:54,245
Let me bust the funky lyrics.
让我来唱出这些funky歌词。

2771
01:57:54,245 --> 01:57:55,495
DAVID J. MALAN: Gotta go fast.
大卫·马兰：必须快。

2772
01:57:58,000 --> 01:57:59,930
Oh.
哦。

2773
01:57:59,930 --> 01:58:00,430
No.
不。

2774
01:58:05,030 --> 01:58:07,090
Oh.
哦。

2775
01:58:07,090 --> 01:58:07,590
[CHUCKLES]
[轻笑]

2776
01:58:07,590 --> 01:58:09,465
(SINGING) Cold on a mission, so fall on back.
（唱歌）冷酷的任务，所以后退。

2777
01:58:09,465 --> 01:58:13,690
Let them know that you're too much, and this is a beat they can't touch.
让他们知道你太棒了，这是一首他们无法触及的节奏。

2778
01:58:13,690 --> 01:58:14,590
DAVID J. MALAN: Nice.
大卫·马兰：不错。

2779
01:58:14,590 --> 01:58:15,970
[EXCLAIMING]
[惊呼]

2780
01:58:15,970 --> 01:58:18,270
(SINGING) You can't touch this.
（唱歌）你无法触及这。

2781
01:58:18,270 --> 01:58:20,482
DAVID J. MALAN: No more walls but two MITs.
大卫·马兰：除了两所麻省理工学院，再无其他障碍。

2782
01:58:20,482 --> 01:58:21,690
(SINGING) Yo, sound the bell.
（唱歌）来吧，敲响钟声。

2783
01:58:21,690 --> 01:58:22,765
School's in, sucker.
上课了，小子。

2784
01:58:22,765 --> 01:58:24,015
DAVID J. MALAN: Princeton now.
大卫·马兰：现在是普林斯顿。

2785
01:58:24,015 --> 01:58:25,612
(SINGING) Give me a song or rhythm.
（唱歌）给我一首歌或一首节奏。

2786
01:58:25,612 --> 01:58:27,570
Making them sweat, that's what I'm giving them.
让他们流汗，这就是我要给予他们的。

2787
01:58:27,570 --> 01:58:31,140
Now, they know you talk about the Hammer when you're talkin'
现在，他们知道当你谈论锤子的时候，

2788
01:58:31,140 --> 01:58:32,670
'bout a show that's hyped and tight.
是在谈论一个炒作且精彩的表演。

2789
01:58:32,670 --> 01:58:36,463
Singers are sweatin', so pass them a wipe or a tape to learn.
歌手们正在流汗，所以给他们一块毛巾或一张磁带去学习。

2790
01:58:36,463 --> 01:58:38,005
DAVID J. MALAN: Second to last level.
大卫·马兰：倒数第二级。

2791
01:58:38,005 --> 01:58:39,800
(SINGING) The chart's legit.
（唱歌）排行榜是合法的。

2792
01:58:39,800 --> 01:58:41,980
Either work hard, or you might as well quit.
要么努力工作，要么干脆放弃。

2793
01:58:41,980 --> 01:58:45,540
That's word because you know you can't touch this.
这是事实，因为你知道你无法触及这。

2794
01:58:48,265 --> 01:58:49,140
You can't touch this.
你无法触及这。

2795
01:58:51,870 --> 01:58:52,600
Break it down.
分解它。

2796
01:58:52,600 --> 01:58:53,683
DAVID J. MALAN: All right.
大卫·马兰：好的。

2797
01:58:53,683 --> 01:58:54,660
Clear.
明白了。

2798
01:58:54,660 --> 01:58:55,160
There we go.
就这样。

2799
01:58:55,160 --> 01:58:55,660
Nice.
不错。

2800
01:58:55,660 --> 01:58:56,310
Oh, oh.
哦，哦。

2801
01:58:59,565 --> 01:59:00,960
Oh.
哦。

2802
01:59:00,960 --> 01:59:02,814
Few more lives.
还剩几条命。

2803
01:59:02,814 --> 01:59:05,590
Oh.
哦。

2804
01:59:05,590 --> 01:59:06,280
(SINGING) Stop.
（唱歌）停。

2805
01:59:06,280 --> 01:59:06,700
Hammer time.
锤子时间。

2806
01:59:06,700 --> 01:59:07,130
DAVID J. MALAN: Here we go.
大卫·马兰：开始了。

2807
01:59:07,130 --> 01:59:08,110
There we go.
就这样。

2808
01:59:08,110 --> 01:59:09,690
[EXCLAIMING]
[惊呼]

2809
01:59:09,690 --> 01:59:10,190
All right.
好的。

2810
01:59:10,190 --> 01:59:12,220
Couple more tries.
再试几次。

2811
01:59:12,220 --> 01:59:13,260
Yes!
是的！

2812
01:59:13,260 --> 01:59:14,345
Oh, no.
哦，不。

2813
01:59:14,345 --> 01:59:15,997
(SINGING) This is it for a winner.
（唱歌）对于赢家来说，这就是最终目标。

2814
01:59:15,997 --> 01:59:17,830
Dance to this, and you're gonna get thinner.
跳这支舞，你就会变瘦。

2815
01:59:17,830 --> 01:59:19,480
Now move, slide your rump.
现在动起来，摇摆你的屁股。

2816
01:59:19,480 --> 01:59:20,080
DAVID J. MALAN: Starts getting stressful.
大卫·马兰：开始变得有压力了。

2817
01:59:20,080 --> 01:59:22,210
(SINGING) Just for a minute, let's all do the bump.
（唱歌）只有一分钟，我们一起做一下“碰碰”。

2818
01:59:22,210 --> 01:59:23,140
Bump, bump, bump.
碰碰碰。

2819
01:59:23,140 --> 01:59:24,310
Yeah.
是啊。

2820
01:59:24,310 --> 01:59:27,020
You can't touch this.
你无法触及这。

2821
01:59:27,020 --> 01:59:27,890
Look, man.
听着，哥们。

2822
01:59:27,890 --> 01:59:29,358
You can't touch this.
你无法触及这。

2823
01:59:29,358 --> 01:59:30,650
You'll probably get hyped, boy.
你可能会变得兴奋，小子。

2824
01:59:30,650 --> 01:59:31,620
DAVID J. MALAN: One more try.
大卫·马兰：再试一次。

2825
01:59:31,620 --> 01:59:33,087
(SINGING) You can't touch this.
（唱歌）你无法触及这。

2826
01:59:33,087 --> 01:59:33,670
Ring the bell.
敲响钟声。

2827
01:59:33,670 --> 01:59:34,840
School's back in.
上课了。

2828
01:59:34,840 --> 01:59:35,140
DAVID J. MALAN: All right.
大卫·马兰：好的。

2829
01:59:35,140 --> 01:59:36,515
A round of applause, nonetheless.
无论如何，掌声响起。

2830
01:59:36,515 --> 01:59:37,420
[APPLAUSE]
[掌声]

2831
01:59:37,420 --> 01:59:38,360
Nicely done.
做得很好。

2832
01:59:38,360 --> 01:59:39,280
Thank you.
谢谢。

2833
01:59:42,500 --> 01:59:46,660
So as you might have noticed if your eyes started
所以，如果你注意到你的眼睛开始

2834
01:59:46,660 --> 01:59:48,410
to wander to the light bulbs here, there's
飘向这里的光源，这里

2835
01:59:48,410 --> 01:59:50,570
actually 64 of these light bulbs.
实际上有 64 个这样的灯泡。

2836
01:59:50,570 --> 01:59:55,062
And I'm wondering if you divide 64 by 8, that's 8 bytes of light bulbs.
我想知道，如果你把 64 除以 8，那就是 8 字节的灯泡。

2837
01:59:55,062 --> 01:59:57,020
And we now have some Unicode in our vocabulary.
我们现在在词汇表中有了 Unicode。

2838
01:59:57,020 --> 01:59:58,970
So might very well be the case that we've
所以很可能是，我们一直在

2839
01:59:58,970 --> 02:00:03,360
been spelling something out on the stage here for you all of this time.
一直在这里的舞台上拼出一个东西给你们看。

2840
02:00:03,360 --> 02:00:07,190
But before we adjourn for cake to be served in the Transept,
但在我们去横厅享用蛋糕之前，

2841
02:00:07,190 --> 02:00:11,930
allow me to introduce some of CS50's human friends,
请允许我介绍一些 CS50 的人类朋友，

2842
02:00:11,930 --> 02:00:17,210
the Harvard Krokodiloes and the Radcliffe Pitches,
哈佛鳄鱼合唱团和拉德克利夫音调合唱团，

2843
02:00:17,210 --> 02:00:23,148
to give us this exciting ending, "This is CS50."
为我们带来这个令人兴奋的结尾，“这就是 CS50”。

2844
02:00:23,148 --> 02:00:26,606
[APPLAUSE, CHEERING]
[掌声，欢呼声]

2845
02:00:36,980 --> 02:00:38,462
[HARMONICA NOTE]
[口琴声]

2846
02:00:41,420 --> 02:00:41,920
[VOCALIZING]
[发声]

2847
02:00:41,920 --> 02:00:50,820
SPEAKER: (SINGING) There's a certain someone who I'm indebted to.
演讲者：（唱歌）我欠了某个人情。

2848
02:00:50,820 --> 02:01:00,080
And since the old [? BNC ?] has 50, I have this friend for you.
既然旧的[？BNC？]有 50 个，我给你介绍这个朋友。

2849
02:01:03,090 --> 02:01:04,300
A two, three, four.
二三，四。

2850
02:01:04,300 --> 02:01:08,845
[VOCALIZING]
[发声]

2851
02:01:08,845 --> 02:01:12,130
Oh, rubber ducky, you're the one.
哦，小黄鸭，你是我的唯一。

2852
02:01:12,130 --> 02:01:14,770
You make [INAUDIBLE] so much fun.
你让[听不清]变得如此有趣。

2853
02:01:14,770 --> 02:01:18,400
Rubber ducky, I'm awfully fond of you.
小黄鸭，我非常喜欢你。

2854
02:01:18,400 --> 02:01:25,030
[SCATTING] Rubber ducky, you make me smile, and you help my code compile.
[哼唱] 小黄鸭，你让我微笑，你帮助我编译代码。

2855
02:01:25,030 --> 02:01:27,100
Rubber ducky, you're my very best friend.
小黄鸭，你是我最好的朋友。

2856
02:01:27,100 --> 02:01:29,230
It's true.
是真的。

2857
02:01:29,230 --> 02:01:33,760
When I'm at a standstill, your debugging abilities stun me.
当我陷入困境时，你的调试能力让我震惊。

2858
02:01:33,760 --> 02:01:40,330
When I'm at the end of my rope, you just snap, and my code's up and running.
当我无计可施时，你只需轻轻一拍，我的代码就恢复正常运行了。

2859
02:01:40,330 --> 02:01:45,160
Rubber ducky, you're so fine, and I'm lucky that you're mine.
小黄鸭，你太棒了，我很幸运有你。

2860
02:01:45,160 --> 02:01:47,320
Rubber ducky, you're my very best friend.
小黄鸭，你是我最好的朋友。

2861
02:01:47,320 --> 02:01:48,610
It's true.
是真的。

2862
02:01:48,610 --> 02:01:49,910
You're my best friend.
你是我最好的朋友。

2863
02:01:49,910 --> 02:01:52,750
It's true.
是真的。

2864
02:01:52,750 --> 02:01:56,785
Rubber ducky, I'm awfully fond of you.
小黄鸭，我非常喜欢你。

2865
02:02:02,128 --> 02:02:05,607
[CHEERING, APPLAUSE]
[欢呼声，掌声]

2866
02:02:08,600 --> 02:02:10,140
SPEAKER: Good afternoon, CS50.
演讲者：下午好，CS50。

2867
02:02:10,140 --> 02:02:12,890
We are the Harvard Krokodiloes, Harvard's oldest a cappella group,
我们是哈佛鳄鱼队，哈佛最古老的无伴奏人声合唱团，

2868
02:02:12,890 --> 02:02:16,160
founded way back in 1946 at the historic Hasty Pudding Club.
成立于 1946 年，在历史悠久的哈佛“急急忙忙布丁俱乐部”。

2869
02:02:16,160 --> 02:02:18,462
We'd love to make a big thank you to CS50 staff
我们要向 CS50 工作人员表示衷心的感谢

2870
02:02:18,462 --> 02:02:21,170
and to David Malan for having us perform here at Sanders Theater.
以及大卫·马兰，感谢他让我们在桑德斯剧院演出。

2871
02:02:21,170 --> 02:02:24,800
And you enjoyed this performance, please come audition for us
如果你喜欢我们的演出，请来参加我们的试镜

2872
02:02:24,800 --> 02:02:26,856
this weekend at Farkas Hall.
这个周末在法卡斯厅。

2873
02:02:26,856 --> 02:02:30,328
[CHEERING, APPLAUSE]
[欢呼声，掌声]

2874
02:02:36,280 --> 02:02:37,730
SPEAKER: Hello, everyone.
演讲者：大家好。

2875
02:02:37,730 --> 02:02:40,000
We are some of the Radcliffe Pitches, and we are also
我们来自拉德克利夫音调合唱团，我们也

2876
02:02:40,000 --> 02:02:41,920
hosting auditions this weekend.
将在这个周末举办试镜。

2877
02:02:41,920 --> 02:02:45,280
You can find more information at our Instagram, @radcliffepitches.
你可以在我们的 Instagram 上找到更多信息，@radcliffepitches。

2878
02:02:45,280 --> 02:02:48,700
Now, let me tell you a little bit about just about a year ago
现在，让我告诉你一些关于一年前

2879
02:02:48,700 --> 02:02:52,840
today, when I was sitting in your very seats on my first day of CS50 lecture.
今天的事情，当时我坐在你们这些座位上，参加我第一次 CS50 讲座。

2880
02:02:52,840 --> 02:02:55,700
And this is just about how I was feeling.
这就是我当时的感觉。

2881
02:02:55,700 --> 02:02:57,170
[HARMONICA NOTE]
[口琴音符]

2882
02:03:00,110 --> 02:03:03,540
[VOCALIZING]
[发声]

2883
02:03:07,410 --> 02:03:11,700
(SINGING) It's the first day of class, and I'm brand new to code.
（唱歌）这是第一天上课，我对代码一无所知。

2884
02:03:11,700 --> 02:03:14,190
Is this for me?
这适合我吗？

2885
02:03:14,190 --> 02:03:16,200
So many people around.
周围有这么多人。

2886
02:03:16,200 --> 02:03:18,750
Can I get through the workload?
我能完成工作量吗？

2887
02:03:18,750 --> 02:03:21,660
But it's my dream.
但这是我的梦想。

2888
02:03:21,660 --> 02:03:25,260
I tend to stick to English, not science.
我倾向于坚持英语，而不是科学。

2889
02:03:25,260 --> 02:03:29,167
But my [INAUDIBLE] friends told me to try this.
但我的[听不清]朋友告诉我试试这个。

2890
02:03:29,167 --> 02:03:32,250
Hey, dancing robot dog, you kind of look like you have your life together,
嘿，跳舞的机器人狗，你看起来像是过得很不错，

2891
02:03:32,250 --> 02:03:33,180
I guess.
我想是的。

2892
02:03:33,180 --> 02:03:35,697
I really need some advice.
我真的需要一些建议。

2893
02:03:35,697 --> 02:03:37,530
(ALL SINGING) We know you're feeling unsure,
（所有人一起唱）我们知道你感到不确定，

2894
02:03:37,530 --> 02:03:40,590
but this is really the right call.
但这确实是正确的选择。

2895
02:03:40,590 --> 02:03:44,760
In CS50, you'll meet new friends, get free food.
在 CS50，你会结识新朋友，获得免费食物。

2896
02:03:44,760 --> 02:03:50,160
You'll be all set for this fall in CS50.
在 CS50，你会为这个秋季做好准备。

2897
02:03:50,160 --> 02:03:54,150
You have a thousand TAs who will help you.
你有一千个助教会帮助你。

2898
02:03:54,150 --> 02:03:58,190
You'll get cupcakes, duckies, Chinese food.
你会得到纸杯蛋糕、小黄鸭、中国菜。

2899
02:03:58,190 --> 02:04:03,870
And you can always take this class and set aside.
你总是可以修这门课，并留出时间。

2900
02:04:06,880 --> 02:04:08,680
SPEAKER: This is CS50.
演讲者：这是 CS50。

2901
02:04:08,680 --> 02:04:10,828
Fist bump.
击掌。

2902
02:04:10,828 --> 02:04:11,800
[LAUGHTER]
[笑声]

2903
02:04:11,800 --> 02:04:15,202
[APPLAUSE, CHEERING]
[掌声，欢呼声]

2904
02:04:16,645 --> 02:04:18,270
DAVID J. MALAN: Thank you to the Kroks.
大卫·J·马兰：感谢鳄鱼队。

2905
02:04:18,270 --> 02:04:19,380
Thank you to the Pitches.
感谢音调合唱团。

2906
02:04:19,380 --> 02:04:20,370
Cake is now served.
现在提供蛋糕。

2907
02:04:20,370 --> 02:04:23,490
Come on up to say hi if you'd like or meet Spot.
如果你愿意，可以上来打个招呼，或者见见 Spot。

2908
02:04:23,490 --> 02:04:24,330
See you next time.
下次再见。

2909
02:04:24,330 --> 02:04:25,163
[APPLAUSE, CHEERING]
[掌声，欢呼声]

2910
02:04:25,163 --> 02:04:28,280
[MUSIC PLAYING]
[音乐播放]

